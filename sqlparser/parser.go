// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const FLOAT_TYPE = 57500
const DECIMAL = 57501
const NUMERIC = 57502
const TIME = 57503
const TIMESTAMP = 57504
const DATETIME = 57505
const YEAR = 57506
const CHAR = 57507
const VARCHAR = 57508
const VARYING = 57509
const BOOL = 57510
const CHARACTER = 57511
const VARBINARY = 57512
const NCHAR = 57513
const UUID = 57514
const TEXT = 57515
const TINYTEXT = 57516
const MEDIUMTEXT = 57517
const LONGTEXT = 57518
const BLOB = 57519
const TINYBLOB = 57520
const MEDIUMBLOB = 57521
const LONGBLOB = 57522
const JSON = 57523
const ENUM = 57524
const GEOMETRY = 57525
const POINT = 57526
const LINESTRING = 57527
const POLYGON = 57528
const GEOMETRYCOLLECTION = 57529
const MULTIPOINT = 57530
const MULTILINESTRING = 57531
const MULTIPOLYGON = 57532
const NULLX = 57533
const AUTO_INCREMENT = 57534
const APPROXNUM = 57535
const SIGNED = 57536
const UNSIGNED = 57537
const ZEROFILL = 57538
const DATABASES = 57539
const TABLES = 57540
const VITESS_KEYSPACES = 57541
const VITESS_SHARDS = 57542
const VITESS_TABLETS = 57543
const VSCHEMA_TABLES = 57544
const EXTENDED = 57545
const FULL = 57546
const PROCESSLIST = 57547
const NAMES = 57548
const CHARSET = 57549
const GLOBAL = 57550
const SESSION = 57551
const ISOLATION = 57552
const LEVEL = 57553
const READ = 57554
const WRITE = 57555
const ONLY = 57556
const REPEATABLE = 57557
const COMMITTED = 57558
const UNCOMMITTED = 57559
const SERIALIZABLE = 57560
const CURRENT_TIMESTAMP = 57561
const DATABASE = 57562
const CURRENT_DATE = 57563
const CURRENT_TIME = 57564
const LOCALTIME = 57565
const LOCALTIMESTAMP = 57566
const UTC_DATE = 57567
const UTC_TIME = 57568
const UTC_TIMESTAMP = 57569
const REPLACE = 57570
const CONVERT = 57571
const CAST = 57572
const SUBSTR = 57573
const SUBSTRING = 57574
const GROUP_CONCAT = 57575
const SEPARATOR = 57576
const MATCH = 57577
const AGAINST = 57578
const BOOLEAN = 57579
const LANGUAGE = 57580
const WITH = 57581
const PARSER = 57582
const QUERY = 57583
const EXPANSION = 57584
const UNUSED = 57585

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 301,
	152, 301,
	-2, 291,
	-1, 244,
	108, 620,
	-2, 616,
	-1, 245,
	108, 621,
	-2, 617,
	-1, 314,
	79, 786,
	-2, 58,
	-1, 315,
	79, 746,
	-2, 59,
	-1, 320,
	79, 730,
	-2, 587,
	-1, 322,
	79, 767,
	-2, 589,
	-1, 585,
	51, 41,
	53, 41,
	-2, 43,
	-1, 728,
	108, 623,
	-2, 619,
	-1, 945,
	5, 28,
	-2, 433,
	-1, 970,
	5, 27,
	-2, 562,
	-1, 1224,
	5, 28,
	-2, 563,
	-1, 1277,
	5, 27,
	-2, 565,
	-1, 1349,
	5, 28,
	-2, 566,
}

const yyPrivate = 57344

const yyLast = 11304

var yyAct = [...]int{

	245, 242, 886, 1355, 1339, 1241, 665, 1288, 1126, 532,
	1012, 249, 790, 1127, 1154, 808, 830, 973, 531, 3,
	880, 836, 829, 1230, 826, 579, 1046, 1123, 866, 989,
	791, 1100, 577, 753, 53, 87, 937, 223, 87, 66,
	763, 319, 274, 251, 1037, 760, 595, 978, 779, 730,
	465, 217, 471, 876, 594, 843, 787, 313, 420, 566,
	581, 477, 87, 87, 324, 232, 222, 485, 87, 308,
	324, 301, 919, 310, 52, 1385, 87, 247, 87, 546,
	300, 1367, 1382, 1347, 87, 858, 1289, 1330, 1379, 238,
	887, 1366, 1118, 903, 299, 218, 219, 220, 221, 1291,
	236, 1218, 1346, 424, 762, 304, 902, 1318, 498, 497,
	507, 508, 500, 501, 502, 503, 504, 505, 506, 499,
	1162, 445, 509, 1149, 1150, 57, 68, 822, 823, 82,
	78, 79, 80, 907, 596, 1148, 597, 1015, 1016, 1017,
	460, 997, 901, 821, 996, 1020, 1018, 998, 695, 1026,
	59, 60, 61, 62, 63, 696, 201, 857, 1266, 867,
	859, 1207, 1205, 216, 306, 1296, 1290, 456, 457, 1381,
	1377, 1244, 1340, 849, 71, 72, 1078, 67, 1341, 788,
	211, 1274, 1075, 1182, 447, 1247, 449, 1010, 1008, 73,
	898, 895, 896, 845, 894, 850, 87, 1183, 1023, 84,
	324, 324, 324, 324, 1022, 324, 69, 846, 1005, 855,
	1375, 847, 324, 446, 448, 1161, 848, 1191, 1309, 434,
	427, 905, 908, 76, 809, 811, 75, 309, 76, 664,
	196, 674, 423, 988, 987, 986, 198, 422, 430, 324,
	431, 195, 432, 204, 200, 77, 1079, 474, 439, 81,
	1168, 845, 845, 827, 523, 524, 525, 526, 527, 528,
	529, 473, 521, 522, 900, 846, 846, 1323, 509, 852,
	1227, 1087, 202, 953, 1319, 206, 931, 854, 853, 1076,
	702, 1074, 489, 440, 914, 499, 699, 899, 509, 867,
	519, 1292, 862, 1077, 70, 1242, 1243, 1245, 810, 87,
	1169, 484, 1328, 444, 1083, 1101, 87, 87, 87, 1345,
	1180, 197, 324, 976, 468, 472, 1019, 273, 324, 598,
	737, 1120, 1065, 780, 904, 502, 503, 504, 505, 506,
	499, 490, 1055, 509, 735, 736, 734, 1103, 906, 199,
	482, 207, 208, 209, 210, 214, 668, 483, 482, 304,
	213, 212, 1295, 1014, 851, 475, 484, 780, 479, 960,
	441, 1351, 915, 1253, 484, 533, 1252, 548, 549, 550,
	551, 552, 553, 554, 544, 1041, 1105, 586, 1109, 1082,
	1104, 318, 1102, 1040, 50, 592, 1066, 425, 1107, 1027,
	74, 1068, 1061, 1062, 733, 1069, 1064, 1063, 1106, 1071,
	1067, 1056, 1052, 701, 1329, 1057, 1054, 1053, 1273, 73,
	1070, 1108, 1110, 1250, 705, 706, 1060, 949, 1193, 948,
	1058, 1038, 426, 324, 324, 1024, 1051, 950, 1369, 1389,
	87, 87, 324, 433, 87, 483, 482, 87, 700, 1281,
	1378, 87, 1326, 324, 324, 324, 324, 324, 324, 324,
	324, 298, 484, 1160, 483, 482, 21, 324, 324, 483,
	482, 1159, 87, 561, 1369, 1368, 483, 482, 754, 421,
	755, 484, 585, 1122, 483, 482, 484, 324, 928, 929,
	930, 87, 683, 484, 720, 722, 723, 324, 1158, 721,
	1011, 484, 999, 729, 428, 429, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 707, 227, 681, 436, 437, 438, 318, 318, 318,
	318, 889, 318, 1362, 464, 1281, 1359, 1281, 1358, 318,
	324, 728, 756, 845, 680, 731, 732, 679, 839, 669,
	844, 709, 840, 841, 1281, 1357, 842, 846, 1281, 1337,
	464, 772, 775, 767, 724, 667, 487, 781, 442, 452,
	435, 87, 726, 421, 87, 87, 87, 87, 87, 1281,
	1303, 1302, 717, 718, 792, 1301, 87, 1281, 464, 87,
	1281, 1282, 1163, 87, 1239, 1238, 1145, 464, 87, 87,
	1226, 464, 324, 1124, 670, 671, 974, 767, 675, 757,
	758, 678, 784, 974, 777, 324, 765, 304, 304, 304,
	304, 304, 1175, 1174, 1171, 1172, 1171, 1170, 943, 464,
	816, 54, 304, 316, 533, 975, 697, 770, 771, 318,
	1090, 304, 563, 464, 805, 600, 794, 795, 955, 797,
	768, 769, 814, 813, 793, 716, 776, 796, 819, 818,
	765, 464, 868, 869, 870, 605, 604, 1222, 563, 943,
	783, 1179, 785, 786, 834, 87, 563, 975, 324, 589,
	324, 1173, 943, 87, 23, 87, 952, 562, 87, 324,
	954, 815, 882, 588, 1177, 1176, 666, 1000, 825, 497,
	507, 508, 500, 501, 502, 503, 504, 505, 506, 499,
	1276, 563, 509, 860, 861, 863, 864, 865, 974, 590,
	820, 588, 878, 879, 943, 591, 703, 715, 951, 50,
	50, 873, 874, 875, 23, 789, 500, 501, 502, 503,
	504, 505, 506, 499, 23, 229, 509, 934, 935, 936,
	662, 318, 1383, 1364, 728, 1333, 1306, 968, 1305, 318,
	969, 1304, 1260, 817, 859, 881, 920, 1139, 921, 1003,
	318, 318, 318, 318, 318, 318, 318, 318, 877, 872,
	50, 979, 980, 1297, 318, 318, 871, 731, 732, 65,
	50, 50, 883, 884, 933, 1294, 1178, 1124, 1004, 982,
	917, 918, 677, 472, 711, 568, 571, 572, 573, 569,
	461, 570, 574, 802, 487, 800, 970, 318, 803, 804,
	801, 572, 573, 324, 985, 984, 87, 799, 798, 927,
	233, 234, 1374, 1365, 1086, 916, 1372, 959, 926, 885,
	324, 925, 991, 1033, 993, 603, 478, 909, 443, 910,
	466, 1220, 911, 1261, 983, 324, 1001, 759, 992, 476,
	891, 467, 676, 576, 478, 944, 924, 773, 773, 304,
	230, 231, 1312, 773, 923, 224, 942, 994, 225, 54,
	961, 316, 1311, 1264, 975, 1157, 1156, 1331, 480, 1332,
	773, 1320, 957, 1021, 87, 324, 324, 698, 324, 1028,
	1029, 1032, 1031, 1034, 1035, 1036, 1006, 1007, 1009, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 318,
	56, 509, 324, 58, 1050, 87, 87, 1039, 1181, 587,
	51, 1, 318, 87, 1059, 888, 264, 263, 266, 267,
	268, 269, 324, 1045, 1049, 265, 270, 897, 1338, 1287,
	1096, 1097, 1153, 837, 828, 1048, 419, 64, 1030, 1327,
	838, 835, 606, 1113, 1114, 1025, 1116, 1117, 568, 571,
	572, 573, 569, 856, 570, 574, 612, 610, 979, 980,
	611, 1094, 324, 324, 608, 614, 613, 609, 1093, 607,
	792, 1125, 1112, 1111, 1099, 318, 792, 318, 203, 311,
	1130, 575, 1119, 599, 481, 728, 318, 1073, 1072, 893,
	1081, 324, 1133, 324, 324, 1135, 694, 913, 1134, 459,
	1147, 205, 1128, 517, 922, 995, 317, 1131, 704, 1152,
	318, 470, 1310, 1151, 1263, 958, 1146, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 543,
	778, 509, 250, 719, 262, 259, 261, 260, 1042, 727,
	1121, 710, 324, 1164, 1165, 967, 1167, 491, 248, 1166,
	240, 324, 303, 559, 567, 1136, 1137, 565, 564, 1138,
	981, 977, 1140, 87, 302, 938, 1089, 1217, 1317, 324,
	714, 463, 25, 55, 235, 19, 18, 1088, 324, 17,
	20, 87, 16, 15, 14, 29, 13, 1198, 12, 11,
	10, 1192, 1184, 9, 8, 7, 6, 1195, 5, 4,
	226, 1186, 22, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 0, 1189, 1203, 0, 0, 0,
	990, 0, 0, 0, 304, 0, 0, 0, 0, 0,
	324, 0, 324, 324, 324, 87, 324, 318, 275, 47,
	0, 316, 324, 1221, 0, 0, 0, 0, 0, 0,
	0, 0, 1013, 1246, 831, 1232, 1233, 1234, 1001, 0,
	1235, 0, 1229, 1194, 0, 0, 0, 324, 324, 87,
	324, 324, 324, 0, 1237, 0, 0, 1200, 1201, 0,
	1202, 1248, 324, 1204, 0, 1206, 47, 1258, 0, 1249,
	1254, 1251, 1043, 318, 228, 318, 1257, 0, 0, 0,
	305, 0, 1219, 1267, 1268, 469, 1269, 1270, 1271, 533,
	0, 0, 0, 0, 0, 0, 0, 324, 324, 318,
	1265, 0, 0, 0, 0, 0, 1275, 1188, 0, 0,
	324, 1240, 0, 0, 1277, 0, 0, 0, 324, 318,
	85, 1286, 0, 215, 1293, 0, 0, 0, 1298, 0,
	0, 324, 727, 0, 0, 1128, 0, 0, 0, 0,
	0, 318, 0, 0, 1299, 239, 1300, 85, 85, 0,
	0, 0, 324, 85, 1307, 1321, 773, 0, 0, 1132,
	990, 85, 773, 85, 0, 1325, 0, 1322, 0, 85,
	0, 0, 0, 0, 0, 324, 324, 324, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 318, 1128,
	318, 1155, 1343, 0, 324, 0, 0, 0, 1334, 1335,
	1336, 324, 792, 1348, 324, 0, 0, 1353, 1354, 0,
	0, 324, 0, 1256, 1360, 0, 0, 0, 451, 451,
	451, 451, 0, 451, 0, 0, 0, 0, 0, 0,
	451, 0, 0, 1370, 0, 324, 0, 1371, 0, 1185,
	324, 0, 0, 0, 0, 0, 87, 47, 1187, 0,
	0, 0, 0, 0, 324, 0, 1387, 1386, 1373, 831,
	0, 0, 518, 0, 0, 520, 1190, 0, 0, 1215,
	0, 1342, 533, 0, 0, 318, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 0, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 0, 545, 547, 547, 547, 547, 547,
	547, 547, 547, 555, 556, 557, 558, 1047, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 1231, 0, 1231,
	1231, 1231, 0, 1236, 0, 0, 0, 0, 0, 318,
	498, 497, 507, 508, 500, 501, 502, 503, 504, 505,
	506, 499, 0, 0, 509, 0, 0, 1214, 464, 0,
	0, 1092, 0, 0, 1231, 1255, 0, 318, 318, 1259,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1262,
	0, 0, 0, 1115, 85, 0, 0, 0, 0, 0,
	0, 85, 583, 85, 498, 497, 507, 508, 500, 501,
	502, 503, 504, 505, 506, 499, 0, 0, 509, 0,
	1380, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 1155, 0, 0,
	831, 0, 831, 450, 0, 1013, 0, 0, 0, 0,
	0, 0, 451, 0, 0, 0, 0, 0, 1231, 0,
	451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 451, 451, 451, 451, 451, 451, 451, 451, 1324,
	0, 0, 0, 0, 0, 451, 451, 0, 0, 0,
	0, 0, 0, 764, 766, 0, 0, 0, 0, 0,
	0, 0, 1231, 1231, 1231, 0, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 0, 773, 0,
	0, 1350, 0, 0, 0, 85, 85, 1092, 1352, 85,
	0, 1356, 85, 0, 0, 0, 682, 0, 1363, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 1231, 534, 0, 0, 0, 1376, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 1356, 0, 0, 0, 682, 0, 0, 0, 0,
	0, 831, 305, 305, 305, 305, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 578, 0, 812,
	0, 0, 0, 0, 0, 0, 305, 0, 0, 1047,
	831, 0, 0, 0, 0, 0, 239, 0, 0, 0,
	0, 239, 239, 0, 0, 774, 774, 239, 0, 0,
	0, 774, 0, 0, 453, 454, 455, 0, 458, 0,
	0, 239, 239, 239, 239, 462, 85, 0, 774, 85,
	85, 85, 85, 85, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 85, 0, 0, 0, 583, 0,
	0, 0, 0, 85, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 451, 0, 451, 0,
	0, 0, 0, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 0, 945,
	946, 947, 0, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 0, 962, 0, 963, 964, 965, 966, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	85, 0, 0, 85, 1212, 0, 0, 0, 0, 0,
	0, 0, 1211, 464, 0, 0, 0, 0, 0, 0,
	23, 24, 48, 26, 27, 0, 0, 0, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 42,
	239, 0, 0, 28, 0, 0, 971, 972, 0, 498,
	497, 507, 508, 500, 501, 502, 503, 504, 505, 506,
	499, 0, 37, 509, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 305, 498, 497, 507, 508, 500,
	501, 502, 503, 504, 505, 506, 499, 239, 0, 509,
	0, 0, 0, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 239, 0, 673, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 684, 685, 686, 687,
	688, 689, 690, 691, 0, 30, 31, 33, 32, 35,
	692, 693, 0, 0, 1098, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 451, 0, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 38, 39, 0, 40, 41, 464, 493, 0, 496,
	0, 1144, 0, 0, 0, 510, 511, 512, 513, 514,
	515, 516, 0, 494, 495, 492, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 0, 85,
	509, 0, 498, 497, 507, 508, 500, 501, 502, 503,
	504, 505, 506, 499, 0, 0, 509, 0, 1129, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 1085, 0, 0, 0, 1141, 1142, 1143, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 239, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 682,
	0, 0, 0, 0, 0, 1197, 0, 0, 0, 0,
	0, 0, 1199, 0, 774, 0, 0, 0, 0, 0,
	774, 0, 0, 1208, 1209, 1210, 1095, 0, 1213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1223, 1224, 1225, 0, 1228, 498, 497, 507, 508,
	500, 501, 502, 503, 504, 505, 506, 499, 939, 0,
	509, 890, 0, 892, 0, 0, 0, 0, 0, 305,
	0, 0, 912, 0, 0, 0, 0, 0, 498, 497,
	507, 508, 500, 501, 502, 503, 504, 505, 506, 499,
	0, 0, 509, 0, 0, 0, 0, 1216, 498, 497,
	507, 508, 500, 501, 502, 503, 504, 505, 506, 499,
	0, 0, 509, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1272,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 1283, 1284, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1313,
	1314, 1315, 1316, 0, 0, 0, 0, 0, 0, 0,
	583, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1129, 0, 0, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 1344,
	0, 0, 0, 0, 1349, 0, 0, 0, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1361, 0, 0, 0, 0, 1129, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1390,
	1391, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 408, 398, 0, 369, 410, 346, 361, 418, 362,
	363, 391, 332, 377, 141, 358, 0, 349, 327, 355,
	328, 347, 371, 109, 345, 400, 380, 121, 416, 124,
	385, 0, 159, 133, 0, 0, 373, 402, 375, 396,
	368, 392, 337, 384, 411, 359, 388, 412, 0, 0,
	1384, 323, 0, 832, 833, 0, 774, 0, 0, 0,
	101, 0, 387, 407, 357, 390, 326, 386, 0, 330,
	333, 417, 405, 352, 353, 1002, 0, 0, 0, 0,
	0, 0, 372, 376, 393, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 383, 0, 0, 0,
	334, 331, 0, 370, 0, 0, 0, 336, 0, 351,
	394, 85, 325, 397, 403, 367, 184, 406, 365, 364,
	146, 0, 104, 0, 163, 113, 360, 122, 409, 374,
	401, 348, 356, 105, 354, 152, 142, 175, 382, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 329, 0, 160, 177, 194,
	344, 404, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 389, 153, 103,
	176, 158, 340, 343, 338, 339, 378, 379, 413, 414,
	415, 395, 335, 0, 341, 342, 0, 399, 381, 89,
	96, 123, 191, 0, 148, 111, 178, 408, 398, 0,
	369, 410, 346, 361, 418, 362, 363, 391, 332, 377,
	141, 358, 0, 349, 327, 355, 328, 347, 371, 109,
	345, 400, 380, 121, 416, 124, 385, 0, 159, 133,
	0, 0, 373, 402, 375, 396, 368, 392, 337, 384,
	411, 359, 388, 412, 0, 0, 0, 323, 0, 832,
	833, 0, 0, 0, 0, 0, 101, 0, 387, 407,
	357, 390, 326, 386, 0, 330, 333, 417, 405, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	393, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 383, 0, 0, 0, 334, 331, 0, 370,
	0, 0, 0, 336, 0, 351, 394, 0, 325, 397,
	403, 367, 184, 406, 365, 364, 146, 0, 104, 0,
	163, 113, 360, 122, 409, 374, 401, 348, 356, 105,
	354, 152, 142, 175, 382, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 193, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 329, 0, 160, 177, 194, 344, 404, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 389, 153, 103, 176, 158, 340, 343,
	338, 339, 378, 379, 413, 414, 415, 395, 335, 0,
	341, 342, 0, 399, 381, 89, 96, 123, 191, 0,
	148, 111, 178, 408, 398, 0, 369, 410, 346, 361,
	418, 362, 363, 391, 332, 377, 141, 358, 0, 349,
	327, 355, 328, 347, 371, 109, 345, 400, 380, 121,
	416, 124, 385, 0, 159, 133, 0, 0, 373, 402,
	375, 396, 368, 392, 337, 384, 411, 359, 388, 412,
	0, 0, 0, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 387, 407, 357, 390, 326, 386,
	0, 330, 333, 417, 405, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 372, 376, 393, 366, 0, 0,
	0, 0, 0, 0, 1091, 0, 350, 0, 383, 0,
	0, 0, 334, 331, 0, 370, 0, 0, 0, 336,
	0, 351, 394, 0, 325, 397, 403, 367, 184, 406,
	365, 364, 146, 0, 104, 0, 163, 113, 360, 122,
	409, 374, 401, 348, 356, 105, 354, 152, 142, 175,
	382, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 329, 0, 160,
	177, 194, 344, 404, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 389,
	153, 103, 176, 158, 340, 343, 338, 339, 378, 379,
	413, 414, 415, 395, 335, 0, 341, 342, 0, 399,
	381, 89, 96, 123, 191, 0, 148, 111, 178, 408,
	398, 0, 369, 410, 346, 361, 418, 362, 363, 391,
	332, 377, 141, 358, 0, 349, 327, 355, 328, 347,
	371, 109, 345, 400, 380, 121, 416, 124, 385, 0,
	159, 133, 0, 0, 373, 402, 375, 396, 368, 392,
	337, 384, 411, 359, 388, 412, 50, 0, 0, 323,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	387, 407, 357, 390, 326, 386, 0, 330, 333, 417,
	405, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	372, 376, 393, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 383, 0, 0, 0, 334, 331,
	0, 370, 0, 0, 0, 336, 0, 351, 394, 0,
	325, 397, 403, 367, 184, 406, 365, 364, 146, 0,
	104, 0, 163, 113, 360, 122, 409, 374, 401, 348,
	356, 105, 354, 152, 142, 175, 382, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 329, 0, 160, 177, 194, 344, 404,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 192, 389, 153, 103, 176, 158,
	340, 343, 338, 339, 378, 379, 413, 414, 415, 395,
	335, 0, 341, 342, 0, 399, 381, 89, 96, 123,
	191, 0, 148, 111, 178, 408, 398, 0, 369, 410,
	346, 361, 418, 362, 363, 391, 332, 377, 141, 358,
	0, 349, 327, 355, 328, 347, 371, 109, 345, 400,
	380, 121, 416, 124, 385, 0, 159, 133, 0, 0,
	373, 402, 375, 396, 368, 392, 337, 384, 411, 359,
	388, 412, 0, 0, 0, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 387, 407, 357, 390,
	326, 386, 0, 330, 333, 417, 405, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 372, 376, 393, 366,
	0, 0, 0, 0, 0, 0, 725, 0, 350, 0,
	383, 0, 0, 0, 334, 331, 0, 370, 0, 0,
	0, 336, 0, 351, 394, 0, 325, 397, 403, 367,
	184, 406, 365, 364, 146, 0, 104, 0, 163, 113,
	360, 122, 409, 374, 401, 348, 356, 105, 354, 152,
	142, 175, 382, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 329,
	0, 160, 177, 194, 344, 404, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 389, 153, 103, 176, 158, 340, 343, 338, 339,
	378, 379, 413, 414, 415, 395, 335, 0, 341, 342,
	0, 399, 381, 89, 96, 123, 191, 0, 148, 111,
	178, 408, 398, 0, 369, 410, 346, 361, 418, 362,
	363, 391, 332, 377, 141, 358, 0, 349, 327, 355,
	328, 347, 371, 109, 345, 400, 380, 121, 416, 124,
	385, 0, 159, 133, 0, 0, 373, 402, 375, 396,
	368, 392, 337, 384, 411, 359, 388, 412, 0, 0,
	0, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 387, 407, 357, 390, 326, 386, 0, 330,
	333, 417, 405, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 372, 376, 393, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 383, 0, 0, 0,
	334, 331, 0, 370, 0, 0, 0, 336, 0, 351,
	394, 0, 325, 397, 403, 367, 184, 406, 365, 364,
	146, 0, 104, 0, 163, 113, 360, 122, 409, 374,
	401, 348, 356, 105, 354, 152, 142, 175, 382, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 329, 0, 160, 177, 194,
	344, 404, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 389, 153, 103,
	176, 158, 340, 343, 338, 339, 378, 379, 413, 414,
	415, 395, 335, 0, 341, 342, 0, 399, 381, 89,
	96, 123, 191, 0, 148, 111, 178, 408, 398, 0,
	369, 410, 346, 361, 418, 362, 363, 391, 332, 377,
	141, 358, 0, 349, 327, 355, 328, 347, 371, 109,
	345, 400, 380, 121, 416, 124, 385, 0, 159, 133,
	0, 0, 373, 402, 375, 396, 368, 392, 337, 384,
	411, 359, 388, 412, 0, 0, 0, 244, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 387, 407,
	357, 390, 326, 386, 0, 330, 333, 417, 405, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 372, 376,
	393, 366, 0, 0, 0, 0, 0, 0, 0, 0,
	350, 0, 383, 0, 0, 0, 334, 331, 0, 370,
	0, 0, 0, 336, 0, 351, 394, 0, 325, 397,
	403, 367, 184, 406, 365, 364, 146, 0, 104, 0,
	163, 113, 360, 122, 409, 374, 401, 348, 356, 105,
	354, 152, 142, 175, 382, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 193, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 329, 0, 160, 177, 194, 344, 404, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 389, 153, 103, 176, 158, 340, 343,
	338, 339, 378, 379, 413, 414, 415, 395, 335, 0,
	341, 342, 0, 399, 381, 89, 96, 123, 191, 0,
	148, 111, 178, 408, 398, 0, 369, 410, 346, 361,
	418, 362, 363, 391, 332, 377, 141, 358, 0, 349,
	327, 355, 328, 347, 371, 109, 345, 400, 380, 121,
	416, 124, 385, 0, 159, 133, 0, 0, 373, 402,
	375, 396, 368, 392, 337, 384, 411, 359, 388, 412,
	0, 0, 0, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 387, 407, 357, 390, 326, 386,
	0, 330, 333, 417, 405, 352, 353, 0, 0, 0,
	0, 0, 0, 0, 372, 376, 393, 366, 0, 0,
	0, 0, 0, 0, 0, 0, 350, 0, 383, 0,
	0, 0, 334, 331, 0, 370, 0, 0, 0, 336,
	0, 351, 394, 0, 325, 397, 403, 367, 184, 406,
	365, 364, 146, 0, 104, 0, 163, 113, 360, 122,
	409, 374, 401, 348, 356, 105, 354, 152, 142, 175,
	382, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 321, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 329, 0, 160,
	177, 194, 344, 404, 187, 188, 189, 190, 0, 0,
	0, 322, 320, 116, 156, 119, 126, 149, 192, 389,
	153, 103, 176, 158, 340, 343, 338, 339, 378, 379,
	413, 414, 415, 395, 335, 0, 341, 342, 0, 399,
	381, 89, 96, 123, 191, 0, 148, 111, 178, 408,
	398, 0, 369, 410, 346, 361, 418, 362, 363, 391,
	332, 377, 141, 358, 0, 349, 327, 355, 328, 347,
	371, 109, 345, 400, 380, 121, 416, 124, 385, 0,
	159, 133, 0, 0, 373, 402, 375, 396, 368, 392,
	337, 384, 411, 359, 388, 412, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	387, 407, 357, 390, 326, 386, 0, 330, 333, 417,
	405, 352, 353, 0, 0, 0, 0, 0, 0, 0,
	372, 376, 393, 366, 0, 0, 0, 0, 0, 0,
	0, 0, 350, 0, 383, 0, 0, 0, 334, 331,
	0, 370, 0, 0, 0, 336, 0, 351, 394, 0,
	325, 397, 403, 367, 184, 406, 365, 364, 146, 0,
	104, 0, 163, 113, 360, 122, 409, 374, 401, 348,
	356, 105, 354, 152, 142, 175, 382, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 329, 0, 160, 177, 194, 344, 404,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 192, 389, 153, 103, 176, 158,
	340, 343, 338, 339, 378, 379, 413, 414, 415, 395,
	335, 0, 341, 342, 0, 399, 381, 89, 96, 123,
	191, 0, 148, 111, 178, 408, 398, 0, 369, 410,
	346, 361, 418, 362, 363, 391, 332, 377, 141, 358,
	0, 349, 327, 355, 328, 347, 371, 109, 345, 400,
	380, 121, 416, 124, 385, 0, 159, 133, 0, 0,
	373, 402, 375, 396, 368, 392, 337, 384, 411, 359,
	388, 412, 0, 0, 0, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 387, 407, 357, 390,
	326, 386, 0, 330, 333, 417, 405, 352, 353, 0,
	0, 0, 0, 0, 0, 0, 372, 376, 393, 366,
	0, 0, 0, 0, 0, 0, 0, 0, 350, 0,
	383, 0, 0, 0, 334, 331, 0, 370, 0, 0,
	0, 336, 0, 351, 394, 0, 325, 397, 403, 367,
	184, 406, 365, 364, 146, 0, 104, 0, 163, 113,
	360, 122, 409, 374, 401, 348, 356, 105, 354, 152,
	142, 175, 382, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 593,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 321, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 329,
	0, 160, 177, 194, 344, 404, 187, 188, 189, 190,
	0, 0, 0, 322, 320, 116, 156, 119, 126, 149,
	192, 389, 153, 103, 176, 158, 340, 343, 338, 339,
	378, 379, 413, 414, 415, 395, 335, 0, 341, 342,
	0, 399, 381, 89, 96, 123, 191, 0, 148, 111,
	178, 408, 398, 0, 369, 410, 346, 361, 418, 362,
	363, 391, 332, 377, 141, 358, 0, 349, 327, 355,
	328, 347, 371, 109, 345, 400, 380, 121, 416, 124,
	385, 0, 159, 133, 0, 0, 373, 402, 375, 396,
	368, 392, 337, 384, 411, 359, 388, 412, 0, 0,
	0, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 387, 407, 357, 390, 326, 386, 0, 330,
	333, 417, 405, 352, 353, 0, 0, 0, 0, 0,
	0, 0, 372, 376, 393, 366, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 383, 0, 0, 0,
	334, 331, 0, 370, 0, 0, 0, 336, 0, 351,
	394, 0, 325, 397, 403, 367, 184, 406, 365, 364,
	146, 0, 104, 0, 163, 113, 360, 122, 409, 374,
	401, 348, 356, 105, 354, 152, 142, 175, 382, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 312, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 321, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 329, 0, 160, 177, 194,
	344, 404, 187, 188, 189, 190, 0, 0, 0, 322,
	320, 315, 314, 119, 126, 149, 192, 389, 153, 103,
	176, 158, 340, 343, 338, 339, 378, 379, 413, 414,
	415, 395, 335, 0, 341, 342, 0, 399, 381, 89,
	96, 123, 191, 0, 148, 111, 178, 141, 0, 0,
	761, 0, 246, 0, 0, 0, 109, 243, 0, 0,
	121, 285, 124, 0, 0, 159, 133, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 244, 264, 263, 266, 267, 268,
	269, 0, 0, 101, 265, 270, 271, 272, 0, 0,
	241, 257, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 237, 0, 0, 0, 296,
	0, 256, 0, 0, 252, 253, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 294, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 0, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	193, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 194, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	0, 153, 103, 176, 158, 286, 295, 292, 293, 290,
	291, 289, 288, 287, 297, 278, 279, 280, 281, 283,
	0, 282, 89, 96, 123, 191, 141, 148, 111, 178,
	0, 246, 0, 0, 0, 109, 243, 0, 0, 121,
	285, 124, 0, 0, 159, 133, 0, 0, 0, 0,
	276, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 464, 244, 264, 263, 266, 267, 268, 269,
	0, 0, 101, 265, 270, 271, 272, 0, 0, 241,
	257, 0, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 0, 0, 0, 0, 296, 0,
	256, 0, 0, 252, 253, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 294, 146, 0, 104, 0, 163, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 175,
	0, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	177, 194, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 286, 295, 292, 293, 290, 291,
	289, 288, 287, 297, 278, 279, 280, 281, 283, 0,
	282, 89, 96, 123, 191, 141, 148, 111, 178, 0,
	246, 0, 0, 0, 109, 243, 0, 0, 121, 285,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 276,
	277, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 244, 264, 263, 266, 267, 268, 269, 0,
	0, 101, 265, 270, 271, 272, 0, 0, 241, 257,
	0, 284, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 254, 255, 237, 0, 0, 0, 296, 0, 256,
	0, 0, 252, 253, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	294, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 0, 153,
	103, 176, 158, 286, 295, 292, 293, 290, 291, 289,
	288, 287, 297, 278, 279, 280, 281, 283, 0, 282,
	89, 96, 123, 191, 141, 148, 111, 178, 0, 246,
	0, 0, 0, 109, 243, 0, 0, 121, 285, 124,
	0, 0, 159, 133, 0, 0, 0, 0, 276, 277,
	0, 0, 0, 0, 0, 0, 824, 0, 50, 0,
	0, 244, 264, 263, 266, 267, 268, 269, 0, 0,
	101, 265, 270, 271, 272, 0, 0, 241, 257, 0,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	254, 255, 0, 0, 0, 0, 296, 0, 256, 0,
	0, 252, 253, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 294,
	146, 0, 104, 0, 163, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 175, 0, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 160, 177, 194,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 0, 153, 103,
	176, 158, 286, 295, 292, 293, 290, 291, 289, 288,
	287, 297, 278, 279, 280, 281, 283, 23, 282, 89,
	96, 123, 191, 0, 148, 111, 178, 0, 0, 141,
	0, 0, 0, 0, 246, 0, 0, 0, 109, 243,
	0, 0, 121, 285, 124, 0, 0, 159, 133, 0,
	0, 0, 0, 276, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 244, 264, 263, 266,
	267, 268, 269, 0, 0, 101, 265, 270, 271, 272,
	0, 0, 241, 257, 0, 284, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 254, 255, 0, 0, 0,
	0, 296, 0, 256, 0, 0, 252, 253, 258, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 0, 0, 294, 146, 0, 104, 0, 163,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	152, 142, 175, 0, 143, 151, 125, 167, 147, 174,
	185, 186, 165, 183, 154, 97, 139, 88, 90, 164,
	173, 102, 155, 93, 171, 161, 162, 131, 117, 118,
	157, 91, 92, 0, 150, 108, 112, 107, 140, 168,
	169, 106, 193, 98, 181, 182, 95, 99, 180, 138,
	179, 166, 172, 132, 129, 94, 170, 130, 128, 120,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 160, 177, 194, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 137, 100, 116, 156, 119, 126,
	149, 192, 0, 153, 103, 176, 158, 286, 295, 292,
	293, 290, 291, 289, 288, 287, 297, 278, 279, 280,
	281, 283, 0, 282, 89, 96, 123, 191, 141, 148,
	111, 178, 0, 246, 0, 0, 0, 109, 243, 0,
	0, 121, 285, 124, 0, 0, 159, 133, 0, 0,
	0, 0, 276, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 244, 264, 263, 266, 267,
	268, 269, 0, 0, 101, 265, 270, 271, 272, 0,
	0, 241, 257, 0, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 254, 255, 0, 0, 0, 0,
	296, 0, 256, 0, 0, 252, 253, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 294, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 194, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 0, 153, 103, 176, 158, 286, 295, 292, 293,
	290, 291, 289, 288, 287, 297, 278, 279, 280, 281,
	283, 0, 282, 89, 96, 123, 191, 141, 148, 111,
	178, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 285, 124, 0, 0, 159, 133, 0, 0, 0,
	0, 276, 277, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 244, 264, 263, 266, 267, 268,
	269, 0, 0, 101, 265, 270, 271, 272, 0, 0,
	0, 257, 0, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 254, 255, 0, 0, 0, 0, 296,
	0, 256, 0, 0, 252, 253, 258, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 294, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 1388, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	193, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 194, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	0, 153, 103, 176, 158, 286, 295, 292, 293, 290,
	291, 289, 288, 287, 297, 278, 279, 280, 281, 283,
	0, 282, 89, 96, 123, 191, 141, 148, 111, 178,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	285, 124, 0, 0, 159, 133, 0, 0, 0, 0,
	276, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 244, 264, 263, 266, 267, 268, 269,
	0, 0, 101, 265, 270, 271, 272, 0, 0, 0,
	257, 0, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 254, 255, 0, 0, 0, 0, 296, 0,
	256, 0, 0, 252, 253, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 294, 146, 0, 104, 0, 163, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 152, 142, 175,
	0, 143, 151, 125, 167, 147, 174, 185, 186, 165,
	183, 154, 97, 139, 88, 90, 164, 173, 102, 155,
	93, 171, 161, 162, 131, 117, 118, 157, 91, 92,
	0, 150, 108, 112, 107, 140, 168, 169, 106, 193,
	98, 181, 182, 95, 99, 180, 138, 179, 166, 172,
	132, 129, 94, 170, 130, 128, 120, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 160,
	177, 194, 0, 0, 187, 188, 189, 190, 0, 0,
	0, 137, 100, 116, 156, 119, 126, 149, 192, 0,
	153, 103, 176, 158, 286, 295, 292, 293, 290, 291,
	289, 288, 287, 297, 278, 279, 280, 281, 283, 0,
	282, 89, 96, 123, 191, 141, 148, 111, 178, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 498, 497, 507,
	508, 500, 501, 502, 503, 504, 505, 506, 499, 0,
	0, 509, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 0, 153,
	103, 176, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 486,
	89, 96, 123, 191, 109, 148, 111, 178, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 323, 0, 488, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 483, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 484, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 0, 153,
	103, 176, 158, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 582,
	89, 96, 123, 191, 109, 148, 111, 178, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 584, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 0, 153,
	103, 176, 158, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	89, 96, 123, 191, 109, 148, 111, 178, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 323, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 0, 153,
	103, 176, 158, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	89, 96, 123, 191, 109, 148, 111, 178, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 141, 153,
	103, 176, 158, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 159, 133, 0, 0,
	89, 96, 123, 191, 0, 148, 111, 178, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 712, 0,
	0, 713, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 194, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 141, 153, 103, 176, 158, 0, 0, 0, 0,
	109, 602, 0, 0, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 89, 96, 123, 191, 0, 148, 111,
	178, 0, 0, 0, 0, 0, 0, 0, 323, 0,
	601, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 193, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 194, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 192, 0, 153, 103, 176, 158, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 582, 89, 96, 123, 191,
	109, 148, 111, 178, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	584, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 580, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 193, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 194, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 192, 141, 153, 103, 176, 158, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 89, 96, 123, 191,
	0, 148, 111, 178, 0, 0, 0, 0, 50, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	146, 0, 104, 0, 163, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 152, 142, 175, 0, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 160, 177, 194,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 141, 153, 103,
	176, 158, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 159, 133, 0, 0, 89,
	96, 123, 191, 0, 148, 111, 178, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 584, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	0, 0, 0, 146, 0, 104, 0, 163, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 152, 142,
	175, 0, 143, 151, 125, 167, 147, 174, 185, 186,
	165, 183, 154, 97, 139, 88, 90, 164, 173, 102,
	155, 93, 171, 161, 162, 131, 117, 118, 157, 91,
	92, 0, 150, 108, 112, 107, 140, 168, 169, 106,
	193, 98, 181, 182, 95, 99, 180, 138, 179, 166,
	172, 132, 129, 94, 170, 130, 128, 120, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	160, 177, 194, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 137, 100, 116, 156, 119, 126, 149, 192,
	141, 153, 103, 176, 158, 0, 0, 0, 0, 109,
	0, 0, 0, 121, 0, 124, 0, 0, 159, 133,
	0, 0, 89, 96, 123, 191, 0, 148, 111, 178,
	0, 0, 0, 0, 0, 0, 0, 323, 0, 488,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 146, 0, 104, 0,
	163, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 152, 142, 175, 0, 143, 151, 125, 167, 147,
	174, 185, 186, 165, 183, 154, 97, 139, 88, 90,
	164, 173, 102, 155, 93, 171, 161, 162, 131, 117,
	118, 157, 91, 92, 0, 150, 108, 112, 107, 140,
	168, 169, 106, 193, 98, 181, 182, 95, 99, 180,
	138, 179, 166, 172, 132, 129, 94, 170, 130, 128,
	120, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 160, 177, 194, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 137, 100, 116, 156, 119,
	126, 149, 192, 141, 153, 103, 176, 158, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 0, 124, 0,
	0, 159, 133, 0, 0, 89, 96, 123, 191, 0,
	148, 111, 178, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 0, 0, 146,
	0, 104, 0, 163, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 152, 142, 175, 0, 143, 151,
	125, 167, 147, 174, 185, 186, 165, 183, 154, 97,
	139, 88, 90, 164, 173, 102, 155, 93, 171, 161,
	162, 131, 117, 118, 157, 91, 92, 0, 150, 108,
	112, 107, 140, 168, 169, 106, 193, 98, 181, 182,
	95, 99, 180, 138, 179, 166, 172, 132, 129, 94,
	170, 130, 128, 120, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 160, 177, 194, 0,
	0, 187, 188, 189, 190, 0, 0, 0, 137, 100,
	116, 156, 119, 126, 149, 192, 672, 153, 103, 176,
	158, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 96,
	123, 191, 141, 148, 111, 178, 0, 0, 0, 0,
	560, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 194, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 192, 0, 153, 103, 176, 158,
	0, 0, 0, 0, 0, 307, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 89, 96, 123,
	191, 109, 148, 111, 178, 121, 0, 124, 0, 0,
	159, 133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 146, 0,
	104, 0, 163, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 152, 142, 175, 0, 143, 151, 125,
	167, 147, 174, 185, 186, 165, 183, 154, 97, 139,
	88, 90, 164, 173, 102, 155, 93, 171, 161, 162,
	131, 117, 118, 157, 91, 92, 0, 150, 108, 112,
	107, 140, 168, 169, 106, 193, 98, 181, 182, 95,
	99, 180, 138, 179, 166, 172, 132, 129, 94, 170,
	130, 128, 120, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 160, 177, 194, 0, 0,
	187, 188, 189, 190, 0, 0, 0, 137, 100, 116,
	156, 119, 126, 149, 192, 141, 153, 103, 176, 158,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 159, 133, 0, 0, 89, 96, 123,
	191, 0, 148, 111, 178, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 0, 184, 0, 0,
	0, 146, 0, 104, 0, 163, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 152, 142, 175, 0,
	143, 151, 125, 167, 147, 174, 185, 186, 165, 183,
	154, 97, 139, 88, 90, 164, 173, 102, 155, 93,
	171, 161, 162, 131, 117, 118, 157, 91, 92, 0,
	150, 108, 112, 107, 140, 168, 169, 106, 193, 98,
	181, 182, 95, 99, 180, 138, 179, 166, 172, 132,
	129, 94, 170, 130, 128, 120, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 160, 177,
	194, 0, 0, 187, 188, 189, 190, 0, 0, 0,
	137, 100, 116, 156, 119, 126, 149, 192, 141, 153,
	103, 176, 158, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 159, 133, 0, 0,
	89, 96, 123, 191, 0, 148, 111, 178, 0, 0,
	0, 0, 0, 0, 0, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 0, 0, 146, 0, 104, 0, 163, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 152,
	142, 175, 0, 143, 151, 125, 167, 147, 174, 185,
	186, 165, 183, 154, 97, 139, 88, 90, 164, 173,
	102, 155, 93, 171, 161, 162, 131, 117, 118, 157,
	91, 92, 0, 150, 108, 112, 107, 140, 168, 169,
	106, 193, 98, 181, 182, 95, 99, 180, 138, 179,
	166, 172, 132, 129, 94, 170, 130, 128, 120, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 160, 177, 194, 0, 0, 187, 188, 189, 190,
	0, 0, 0, 137, 100, 116, 156, 119, 126, 149,
	192, 141, 153, 103, 176, 158, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 159,
	133, 0, 0, 89, 96, 123, 191, 0, 148, 111,
	178, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 0, 0, 0, 146, 0, 104,
	0, 163, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 152, 142, 175, 0, 143, 151, 125, 167,
	147, 174, 185, 186, 165, 183, 154, 97, 139, 88,
	90, 164, 173, 102, 155, 93, 171, 161, 162, 131,
	117, 118, 157, 91, 92, 0, 150, 108, 112, 107,
	140, 168, 169, 106, 193, 98, 181, 182, 95, 99,
	180, 138, 179, 166, 172, 132, 129, 94, 170, 130,
	128, 120, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 160, 177, 194, 0, 0, 187,
	188, 189, 190, 0, 0, 0, 137, 100, 116, 156,
	119, 126, 149, 192, 141, 153, 103, 176, 158, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 159, 133, 0, 0, 89, 96, 123, 191,
	0, 148, 111, 178, 0, 0, 0, 0, 0, 0,
	0, 244, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 0, 0, 0,
	146, 0, 104, 0, 163, 113, 0, 122, 633, 0,
	0, 0, 0, 105, 0, 152, 142, 175, 0, 143,
	151, 125, 167, 147, 174, 185, 186, 165, 183, 154,
	97, 139, 88, 90, 164, 173, 102, 155, 93, 171,
	161, 162, 131, 117, 118, 157, 91, 92, 0, 150,
	108, 112, 107, 140, 168, 169, 106, 193, 98, 181,
	182, 95, 99, 180, 138, 179, 166, 172, 132, 129,
	94, 170, 130, 128, 120, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 620, 0, 0, 160, 177, 194,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 137,
	100, 116, 156, 119, 126, 149, 192, 0, 153, 103,
	176, 158, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	96, 123, 191, 0, 148, 111, 178, 0, 0, 0,
	0, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 0, 657, 658, 659, 660, 661, 635, 636, 637,
	638, 617, 619, 0, 615, 618, 621, 0, 631, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 632, 639,
	640, 641, 642, 643, 644, 645, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 616,
}
var yyPact = [...]int{

	1904, -1000, -187, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 854, 905, -1000, -1000, -1000, -1000, -1000, -1000, 727,
	57, 106, 127, 12, 10307, 123, 125, 10733, -1000, 4,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 728, -1000, -1000,
	-1000, -1000, -1000, 848, 852, 729, 840, 782, -1000, 5757,
	101, 8986, 10094, 5036, -1000, 508, 118, 10733, -142, 10520,
	97, 97, 97, -1000, 120, 10733, -1000, 10733, 96, 505,
	96, 96, 96, 10733, -1000, 175, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10733, 503, 809, 66, 3244,
	3244, 3244, 3244, 16, 3244, -81, 750, -1000, -1000, -1000,
	-1000, 3244, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 496, 821, 6480, 6480, 854, -1000, 728, -1000,
	-1000, -1000, 815, -1000, -1000, 295, 867, -1000, 7427, 174,
	-1000, 6480, 1996, 667, -1000, -1000, 667, -1000, -1000, 153,
	-1000, -1000, 6958, 6958, 6958, 6958, 6958, 6958, 6958, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 667, -1000, 6241, 667, 667, 667, 667,
	667, 667, 667, 667, 6480, 667, 667, 667, 667, 667,
	667, 667, 667, 667, 667, 667, 667, 667, 9864, 648,
	755, -1000, -1000, -1000, 831, 8117, 8773, 10733, 658, -1000,
	662, 4780, -93, -1000, -1000, -1000, 240, 8543, -1000, -1000,
	-1000, 806, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 602,
	-1000, 11049, 10520, 3244, 109, 635, 500, 275, 484, 10733,
	9625, 3244, 110, 10733, 829, 742, 10733, 482, 479, -1000,
	4524, -1000, 3244, 3244, 3244, 3244, 3244, 3244, 3244, 3244,
	-1000, -1000, -1000, -1000, -1000, -1000, 3244, 3244, -1000, -67,
	-1000, 10733, -1000, -1000, -1000, -1000, 878, 197, 385, 172,
	663, -1000, 390, 848, 496, 782, 8330, 676, -1000, -1000,
	10733, -1000, 6480, 6480, 418, -1000, 9412, -1000, -1000, 3500,
	215, 6958, 332, 247, 6958, 6958, 6958, 6958, 6958, 6958,
	6958, 6958, 6958, 6958, 6958, 6958, 6958, 6958, 6958, 413,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 477, -1000,
	728, 870, 870, 164, 164, 164, 164, 164, 164, 7197,
	5279, 496, 597, 278, 6241, 5757, 5757, 6480, 6480, 10946,
	10946, 5757, 833, 248, 278, 10946, -1000, 496, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5757, 5757, 5757, 5757, 36,
	10733, -1000, 10946, 8986, 8986, 8986, 8986, 8986, -1000, 778,
	777, -1000, 765, 763, 769, 10733, -1000, 579, 8117, 176,
	667, -1000, 9199, -1000, -1000, 36, 630, 8986, 10733, -1000,
	-1000, 4268, 662, -93, 657, -1000, -85, -103, 5996, 149,
	-1000, -1000, -1000, -1000, 2732, 414, 145, -1000, -55, -1000,
	-1000, -1000, -1000, 702, -1000, -1000, -1000, 702, 108, 702,
	702, 702, -27, -27, -27, -27, -1000, -1000, -1000, -1000,
	-1000, -1000, 724, 717, -1000, 702, 702, 702, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 716, 716, 716,
	703, 703, 732, -1000, 10733, -166, 466, 3244, 827, 3244,
	-1000, 78, 10733, -1000, 10733, -1000, -1000, 10733, 3244, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 273, -1000, -1000, -1000, -1000, 789,
	6480, 6480, 4012, 6480, -1000, -1000, -1000, 821, -1000, 833,
	845, -1000, 799, 796, 5757, -1000, -1000, 215, 270, -1000,
	-1000, 412, -1000, -1000, -1000, -1000, 168, 667, -1000, 2178,
	-1000, -1000, -1000, -1000, 332, 6958, 6958, 6958, 937, 2178,
	2158, 807, 598, 164, 229, 229, 184, 184, 184, 184,
	184, 632, 632, -1000, -1000, -1000, 496, -1000, -1000, -1000,
	496, 5757, 661, -1000, -1000, 6480, -1000, 496, 565, 565,
	366, 405, 665, -1000, 165, 627, 565, 5757, 282, -1000,
	6480, 496, -1000, 565, 496, 565, 565, 718, 667, -1000,
	655, -1000, 234, 755, 721, 739, 918, -1000, -1000, -1000,
	-1000, 775, -1000, 774, -1000, -1000, -1000, -1000, -1000, 116,
	115, 114, 10520, -1000, 862, 8986, 613, -1000, -1000, 657,
	-93, -88, -1000, -1000, -1000, 278, -1000, 437, 634, 2476,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 707, 738, 75,
	74, 133, 132, 435, 10520, -1000, -1000, -1000, 287, 80,
	874, -1000, 71, -1000, 65, 368, -64, -1000, -1000, 331,
	-27, -27, 702, -27, -1000, -1000, 149, 804, 149, 149,
	149, 364, 364, -1000, -1000, -1000, -1000, 325, -1000, -1000,
	-1000, 317, -1000, 10733, 10520, 3244, -1000, 3756, -1000, -1000,
	-1000, -1000, -1000, -1000, 277, 267, 160, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 33, 130,
	-1000, 3244, -1000, 292, 10733, 10733, 787, 278, 278, 163,
	-1000, -1000, 10733, -1000, -1000, -1000, -1000, 619, -1000, -1000,
	-1000, 2988, 5757, -1000, 937, 2178, 2126, -1000, 6958, 6958,
	-1000, -1000, 565, 5757, 278, -1000, -1000, -1000, 200, 413,
	200, 6958, 6958, 4012, 6958, 6958, -161, 606, 243, -1000,
	6480, 397, -1000, -1000, -1000, -1000, -1000, 737, 10946, 667,
	-1000, 7887, 10520, 854, 10946, 6480, 6480, -1000, -1000, 6480,
	705, -1000, 6480, -1000, -1000, -1000, 667, 667, 667, 533,
	-1000, 854, 613, -1000, -1000, -1000, -94, -110, -1000, -1000,
	2732, -1000, 2732, 10520, 866, -1000, 433, 406, -1000, 398,
	-1000, -1000, 85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -116, -1000, -1000, -1000, -1000, -1000, 528, 149, 149,
	-27, 149, -1000, 195, -1000, -1000, -1000, 563, -1000, 561,
	618, 559, 633, 736, -1000, 608, -1000, 231, -1000, 64,
	-1000, 10520, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10520, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10733, -1000, -1000, -1000, -1000, -1000, 10520, 91,
	-1000, -1000, 361, 6480, -1000, -1000, -1000, 3756, -1000, 862,
	8986, -1000, -1000, 496, -1000, 6958, 2178, 2178, -1000, -1000,
	496, 702, 702, -1000, 702, 703, -1000, 702, -6, 702,
	-7, 496, 496, 1849, 1875, -1000, 1434, 1380, 667, -150,
	-1000, 278, 6480, -1000, 814, 543, 604, -1000, -1000, 5518,
	496, 537, 162, 533, 848, -1000, 278, 278, 278, 10520,
	278, 10520, 10520, 10520, 7657, 10520, 848, -1000, -1000, -1000,
	-1000, 2476, -1000, 531, -1000, 702, 142, 142, -1000, -1000,
	-1000, 52, -1000, -1000, -1000, -1000, 149, -1000, -1000, -1000,
	-27, 356, -27, 308, -1000, 305, 10520, 10520, 10733, 3756,
	2732, 10520, -1000, -1000, -1000, 700, -1000, -1000, -1000, -1000,
	817, 10520, -1000, -1000, 278, 860, 605, -1000, 2178, -1000,
	-1000, 103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6958, 6958, -1000, 6958, 6958, 6958, 496, 351, 278,
	48, -1000, 667, -1000, -1000, 668, 10520, 10520, -1000, -1000,
	527, -1000, 524, 524, 524, 176, -1000, -1000, 35, 10520,
	-1000, 735, -1000, -1000, 286, 9, 723, 10520, -1000, 149,
	-1000, 149, 521, 517, 516, 699, 696, -1000, -1000, 694,
	10520, 667, 94, 858, 846, -1000, -1000, 2012, 2012, 2012,
	2012, 18, -1000, -1000, 872, -1000, 667, -1000, 728, 159,
	-1000, 10520, -1000, -1000, -1000, -1000, -1000, 35, -1000, 387,
	223, 347, -170, -1000, 868, -1000, -1000, 869, 693, -1000,
	-1000, -1000, -1000, -1000, 10520, 10520, 10520, 495, 29, 45,
	-1000, 6480, 6480, -1000, -1000, -1000, -1000, 496, 55, -175,
	10946, 604, 496, 10520, -1000, -1000, -1000, 303, -1000, -1000,
	10520, 142, 142, 10520, 491, 474, 472, 635, 470, -1000,
	10520, 691, 278, 553, -1000, 786, -164, -178, 550, -1000,
	-1000, -1000, -1000, -1000, -1000, 411, -1000, -1000, -1000, -1000,
	-166, -1000, 29, 794, 10520, -1000, 785, -1000, 83, 10520,
	-1000, -1000, 25, 386, -168, 10733, -1000, 23, -1000, -176,
	690, 667, -184, 10520, 6719, -1000, 375, 2012, 496, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 1113, 18, 456, 1112, 1110, 1109, 1108, 1106, 1105,
	1104, 1103, 1100, 1099, 1098, 1096, 1095, 1094, 1093, 1092,
	1090, 1089, 1086, 1085, 125, 1084, 1083, 1082, 61, 1080,
	65, 1078, 1077, 36, 104, 45, 40, 89, 1076, 32,
	80, 71, 1074, 47, 1071, 1070, 69, 1068, 59, 1067,
	1064, 164, 1063, 1062, 15, 17, 1060, 1058, 1057, 1055,
	77, 1, 1051, 1047, 1046, 1045, 1044, 1043, 49, 9,
	8, 42, 13, 1042, 43, 11, 1040, 48, 1039, 1025,
	1024, 1022, 34, 1021, 52, 1018, 37, 50, 1017, 23,
	56, 29, 27, 12, 73, 54, 1016, 30, 57, 46,
	1015, 1014, 390, 1013, 1011, 1009, 1007, 1006, 1000, 433,
	422, 999, 998, 997, 41, 0, 317, 559, 67, 994,
	39, 993, 1215, 72, 60, 25, 991, 51, 1563, 33,
	989, 988, 31, 979, 977, 976, 975, 974, 970, 967,
	966, 85, 28, 24, 963, 955, 53, 20, 44, 58,
	952, 951, 21, 950, 5, 10, 3, 55, 949, 947,
	946, 944, 22, 16, 943, 14, 942, 7, 939, 938,
	4, 937, 26, 933, 2, 925, 6, 924, 921, 920,
	1148, 1081, 919, 918, 914, 913, 79,
}
var yyR1 = [...]int{

	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 176, 176, 175, 174, 174, 173, 173, 172, 16,
	159, 160, 160, 160, 160, 149, 133, 133, 133, 133,
	133, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 138, 138, 138, 138, 138, 134,
	134, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 140,
	140, 140, 140, 140, 140, 140, 140, 148, 148, 141,
	141, 146, 146, 147, 147, 147, 144, 144, 145, 145,
	142, 142, 142, 143, 143, 151, 151, 168, 168, 167,
	167, 167, 167, 158, 158, 164, 164, 164, 164, 164,
	164, 164, 157, 157, 166, 166, 165, 152, 152, 152,
	152, 152, 153, 154, 154, 154, 154, 155, 155, 156,
	156, 161, 161, 161, 162, 162, 162, 163, 163, 163,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 183, 183, 184, 184, 184, 184, 184,
	184, 184, 171, 169, 169, 170, 170, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 107,
	107, 104, 104, 105, 105, 106, 106, 106, 108, 108,
	108, 131, 131, 131, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 185, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 119, 119, 119,
	118, 118, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 126, 126, 125,
	125, 125, 124, 124, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 103, 103, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 186, 186, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 129, 129, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 97, 94, 94, 98, 98, 98, 96, 96, 96,
	121, 121, 121, 101, 101, 109, 109, 110, 110, 102,
	102, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 112, 113, 113, 116, 116, 117, 117,
	122, 122, 123, 123, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 180, 181, 127, 128, 128,
	128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 1,
	1, 4, 4, 4, 5, 2, 2, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 1, 0, 1,
	0, 3, 3, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 3, 0, 1, 2, 3, 3, 2, 3,
	2, 2, 1, 1, 1, 3, 2, 1, 4, 4,
	7, 7, 13, 1, 1, 2, 2, 0, 1, 1,
	3, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 11, 13, 7, 7, 7, 12, 7, 7, 7,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -180, 8, 245,
	52, -179, 261, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -159, 52, -120, 120, 69, 149,
	237, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 237, 117, 118, -51, -122, 55, -115, 156, 253,
	157, 170, 171, 162, 194, 185, 254, 154, 182, 186,
	224, 64, 160, 233, 126, 137, 180, 176, 174, 27,
	199, 259, 175, 129, 200, 204, 225, 167, 168, 227,
	198, 31, 131, 255, 33, 145, 228, 202, 197, 193,
	196, 166, 192, 37, 206, 205, 207, 223, 188, 155,
	177, 18, 140, 143, 201, 203, 124, 147, 258, 229,
	173, 144, 139, 232, 153, 161, 226, 169, 235, 36,
	211, 164, 165, 128, 158, 151, 190, 146, 178, 179,
	195, 163, 191, 159, 148, 141, 234, 212, 260, 189,
	187, 183, 184, 152, 120, 149, 150, 216, 217, 218,
	219, 256, 230, 181, 213, 118, 105, 186, 111, 214,
	119, 31, 147, -131, 118, -104, 150, 216, 217, 218,
	219, 55, 226, 225, 220, -122, 159, -127, -127, -127,
	-127, -127, -2, -86, 17, 16, -5, -3, -180, 6,
	20, 21, -30, 38, 39, -25, -36, 96, -37, -122,
	-56, 71, -61, 28, 55, -115, 23, -60, -57, -75,
	-73, -74, 105, 106, 94, 95, 102, 72, 107, -65,
	-63, -64, -66, 57, 56, 65, 58, 59, 60, 61,
	66, 67, 68, -116, -71, -180, 42, 43, 246, 247,
	248, 249, 252, 250, 74, 32, 236, 244, 243, 242,
	240, 241, 238, 239, 123, 237, 100, 245, -102, -39,
	-40, -41, -42, -53, -74, -180, -51, 11, -46, -51,
	-94, -130, 159, -98, 226, 225, -117, -96, -116, -114,
	224, 186, 223, 55, -115, 116, 70, 22, 24, 209,
	73, 105, 16, 74, 104, 246, 111, 46, 238, 239,
	236, 248, 249, 237, 214, 28, 10, 25, 135, 21,
	98, 113, 77, 78, 138, 23, 136, 68, 19, 49,
	130, 11, 13, 14, 123, 122, 89, 119, 44, 8,
	107, 26, 86, 40, 133, 42, 87, 17, 240, 241,
	30, 252, 142, 100, 47, 34, 71, 66, 50, 231,
	69, 15, 45, 88, 114, 245, 43, 117, 6, 251,
	29, 134, 41, 118, 215, 76, 121, 67, 5, 132,
	9, 48, 51, 242, 243, 244, 32, 75, 12, -160,
	-149, 55, 119, -51, 245, -116, -110, 123, -110, -110,
	118, -51, -51, -109, 123, 55, -109, -109, -109, -51,
	108, -51, 55, 29, 237, 55, 147, 118, 148, 120,
	-128, -180, -117, -128, -128, -128, 151, 152, -128, -105,
	221, 50, -128, -181, 54, -87, 19, 30, -37, -122,
	-83, -84, -37, -82, -2, -24, 34, -28, 21, 63,
	11, -119, 70, 69, 86, -118, 22, -116, 57, 108,
	-37, -58, 89, 71, 87, 88, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 104,
	79, 80, 81, 82, 83, 84, 85, -103, -180, -74,
	-180, 109, 110, -61, -61, -61, -61, -61, -61, -61,
	-180, -2, -69, -37, -180, -180, -180, -180, -180, -180,
	-180, -180, -180, -78, -37, -180, -186, -180, -186, -186,
	-186, -186, -186, -186, -186, -180, -180, -180, -180, -52,
	26, -51, 29, 53, -47, -49, -48, -50, 40, 44,
	46, 41, 42, 43, 47, -126, 22, -39, -180, -125,
	143, -124, 22, -122, 57, -51, -46, -182, 53, 11,
	51, 53, -94, 159, -95, -99, 227, 229, 79, -121,
	-116, 57, 28, 29, 54, 53, -150, -133, -137, -134,
	-139, -138, -140, -135, -136, 185, 254, 182, 186, 183,
	105, 187, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 189, 199, 29, 137, 178, 179, 180, 181, 200,
	201, 202, 203, 204, 205, 206, 207, 162, 163, 164,
	165, 166, 167, 168, 169, 170, 171, 173, 174, 175,
	176, 177, -116, -128, 120, -176, 51, 55, 71, 55,
	-51, -51, 231, -128, 121, -51, 23, 50, -51, 55,
	55, -123, -122, -114, -128, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -107, 215, 222, -51, 9, 89,
	53, 18, 108, 53, -85, 24, 25, -86, -181, -30,
	-62, -116, 58, 61, -29, 41, -51, -37, -37, -67,
	66, 71, 67, 68, -118, 96, -123, -117, -114, -61,
	-68, -71, -74, 62, 89, 87, 88, 73, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -129, 55, 57, 55, -60, -60, -116,
	-35, 21, -34, -36, -181, 53, -181, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	75, -75, -181, -34, -35, -34, -34, -90, 143, -51,
	-93, -97, -75, -40, -41, -41, -40, -41, 40, 40,
	40, 45, 40, 45, 40, -48, -122, -181, -54, 48,
	122, 49, -180, -124, -90, 51, -39, -51, -98, -95,
	53, 228, 230, 231, 50, -37, -143, 104, -161, -162,
	-163, -117, 57, 58, -149, -151, -152, -164, -153, 124,
	128, 129, 132, -157, 126, 119, 133, 66, 71, 28,
	50, 209, 124, 133, 132, 64, -144, 212, -141, 52,
	-141, -141, 184, -141, -141, -141, -142, 186, -142, -142,
	-142, 52, 52, -141, -141, -141, -146, 52, -146, -146,
	-147, 52, -147, 50, 51, -51, -174, 256, -175, 55,
	-128, 23, -128, -111, 116, 113, 114, -171, 112, 209,
	186, 64, 28, 15, 246, 143, 260, 55, 144, -51,
	-51, -51, -128, -106, 11, 89, 36, -37, -37, -123,
	-84, -87, -101, 19, 11, 32, 32, -34, 66, 67,
	68, 108, -180, -68, -61, -61, -61, -33, 138, 70,
	-181, -181, -34, 53, -37, -181, -181, -181, 53, 51,
	22, 53, 11, 108, 53, 11, -181, -34, -79, -77,
	77, -37, -181, -181, -181, -181, -181, -59, 29, 32,
	-2, -180, -180, -55, 53, 12, 79, -44, -43, 50,
	51, -45, 50, -43, 40, 40, 119, 119, 119, -91,
	-116, -55, -39, -55, -99, -100, 232, 229, 235, 55,
	53, -163, 79, 52, 50, 133, -157, -157, 55, -157,
	55, 55, -155, -116, 66, 57, 58, 59, 66, 236,
	65, 9, 133, 133, 57, -145, 213, 58, -142, -142,
	-141, -142, -143, 29, -143, -143, -143, -148, 57, -148,
	58, 58, -51, -116, -128, -173, -172, -117, -127, -120,
	-184, 149, 125, 130, 129, 55, 124, 128, 143, -177,
	149, 125, 126, 130, 129, 55, 119, 133, 124, 128,
	143, 132, -112, -113, 121, 22, 119, 133, 143, 116,
	-128, -108, 87, 12, -122, -122, 37, 108, -51, -38,
	11, 96, -117, -35, -33, 70, -61, -61, -181, -36,
	-132, 105, 182, 137, 180, 176, 198, 188, 211, 178,
	212, -129, -132, -61, -61, -117, -61, -61, 253, -82,
	78, -37, 76, -92, 50, -93, -70, -72, -71, -180,
	-2, -88, -116, -91, -82, -97, -37, -37, -37, 52,
	-37, -180, -180, -180, -181, 53, -82, -55, 229, 233,
	234, -162, -163, -166, -165, -116, 10, 9, 55, 55,
	55, 130, 236, 54, -143, -143, -142, -143, 55, 105,
	54, 53, 54, 53, 54, 53, 52, 51, 50, 53,
	79, -183, 119, 133, -127, -116, -127, -116, -51, -127,
	-116, 126, -152, 57, -37, -55, -39, -181, -61, -181,
	-141, -141, -141, -147, -141, 168, -141, 168, -181, -181,
	-181, 53, 19, -181, 53, 19, -180, -32, 251, -37,
	27, -92, 53, -181, -181, -181, 53, 108, -181, -86,
	-89, -116, -89, -89, -89, -125, -116, -86, 54, 53,
	-141, -154, 153, 154, 29, 155, -154, 133, -143, -142,
	57, -142, 58, 58, -89, -116, -51, -172, -163, -116,
	52, 26, -116, -80, 13, -142, 55, -61, -61, -61,
	-61, -61, -181, 57, 133, -72, 32, -2, -180, -116,
	-116, 53, 54, -181, -181, -181, -54, -168, -167, 51,
	131, 64, 256, -165, 50, 66, 156, 50, -155, -143,
	-143, 54, 54, 54, 52, 52, 52, -89, -180, 124,
	-81, 14, 16, -181, -181, -181, -181, -31, 89, 256,
	9, -70, -2, 108, -116, -167, 55, -158, 79, 57,
	257, 9, 10, 52, -89, -89, -89, 54, -169, -170,
	143, 133, -37, -69, -181, 254, 47, 258, -93, -181,
	-116, 58, -116, -154, -154, -156, -116, 54, 54, 54,
	-176, -181, 53, -116, 52, 37, 255, 259, 54, 53,
	-174, -170, 32, -89, 37, 127, -116, 145, 54, 256,
	-51, 146, 258, 52, -180, 259, -156, -61, 142, 54,
	-181, -181,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 546, 0, 315, 315, 315, 315, 315, 315, 0,
	69, 599, 0, 0, 0, 0, -2, 305, 306, 0,
	308, 309, 827, 827, 827, 827, 827, 0, 33, 34,
	825, 1, 3, 554, 0, 0, 319, 322, 317, 0,
	599, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	597, 597, 597, 70, 0, 0, 600, 0, 595, 0,
	595, 595, 595, 0, 264, 386, 620, 621, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 0, 0, 0, 0, 828,
	828, 828, 828, 0, 828, 293, 282, 284, 285, 286,
	287, 828, 302, 303, 292, 304, 307, 310, 311, 312,
	313, 314, 27, 558, 0, 0, 546, 29, 0, 315,
	320, 321, 325, 323, 324, 316, 0, 333, 337, 0,
	394, 0, 399, 401, -2, -2, 0, 436, 437, 438,
	439, 440, 0, 0, 0, 0, 0, 0, 0, 463,
	464, 465, 466, 531, 532, 533, 534, 535, 536, 537,
	538, 403, 404, 528, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 519, 0, 493, 493, 493, 493,
	493, 493, 493, 493, 0, 0, 0, 0, 0, 0,
	344, 346, 347, 348, 367, 0, 369, 0, 0, 41,
	45, 0, 803, 582, -2, -2, 0, 0, 618, 619,
	-2, 729, -2, 616, 617, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 636, 637, 638,
	639, 640, 641, 642, 643, 644, 645, 646, 647, 648,
	649, 650, 651, 652, 653, 654, 655, 656, 657, 658,
	659, 660, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 680, 681, 682, 683, 684, 685, 686, 687, 688,
	689, 690, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 0,
	81, 0, 0, 828, 0, 71, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 263,
	0, 265, 828, 828, 828, 828, 828, 828, 828, 828,
	274, 829, 830, 275, 276, 277, 828, 828, 279, 0,
	294, 0, 288, 28, 826, 22, 0, 0, 555, 0,
	547, 548, 551, 554, 27, 322, 0, 327, 326, 318,
	0, 334, 0, 0, 0, 338, 0, 340, 341, 0,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	421, 422, 423, 424, 425, 426, 427, 400, 0, 414,
	0, 0, 0, 456, 457, 458, 459, 460, 461, 0,
	329, 27, 0, 434, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 520, 0, 485, 0, 486, 487,
	488, 489, 490, 491, 492, 0, 329, 0, 0, 43,
	0, 385, 0, 0, 0, 0, 0, 0, 374, 0,
	0, 377, 0, 0, 0, 0, 368, 0, 0, 388,
	773, 370, 0, 372, 373, -2, 0, 0, 0, 39,
	40, 0, 46, 803, 48, 49, 0, 0, 0, 173,
	590, 591, 592, 588, 211, 0, 85, 91, 166, 87,
	88, 89, 90, 159, 108, 129, 130, 159, 159, 159,
	159, 159, 170, 170, 170, 170, 141, 142, 143, 144,
	145, 146, 0, 0, 124, 159, 159, 159, 128, 149,
	150, 151, 152, 153, 154, 155, 156, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 161, 161, 161,
	163, 163, 0, 64, 0, 74, 0, 828, 0, 828,
	79, 0, 0, 230, 0, 258, 596, 0, 828, 261,
	262, 387, 622, 623, 266, 267, 268, 269, 270, 271,
	272, 273, 278, 281, 295, 289, 290, 283, 559, 0,
	0, 0, 0, 0, 550, 552, 553, 558, 30, 325,
	0, 539, 0, 0, 0, 328, 25, 395, 396, 398,
	415, 0, 417, 419, 339, 335, 0, 529, -2, 405,
	406, 430, 431, 432, 0, 0, 0, 0, 428, 410,
	0, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 455, 504, 505, 0, 453, 454, 462,
	0, 0, 330, 331, 433, 0, 577, 27, 0, 0,
	0, 0, 0, 528, 0, 0, 0, 0, 526, 523,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 384,
	392, 579, 0, 345, 363, 365, 0, 360, 375, 376,
	378, 0, 380, 0, 382, 383, 349, 350, 351, 0,
	0, 0, 0, 371, 392, 0, 392, 42, 583, 47,
	0, 0, 52, 53, 584, 585, 586, 0, 80, 212,
	214, 217, 218, 219, 82, 83, 84, 0, 197, 0,
	0, 0, 0, 0, 207, 192, 193, 92, 0, 0,
	0, 101, 0, 103, 105, 0, 168, 167, 107, 0,
	170, 170, 159, 170, 135, 136, 173, 0, 173, 173,
	173, 0, 0, 125, 126, 127, 119, 0, 120, 121,
	122, 0, 123, 0, 0, 828, 66, 0, 72, 73,
	67, 598, 68, 827, 69, 0, 611, 231, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 0, 0,
	257, 828, 260, 298, 0, 0, 0, 556, 557, 0,
	549, 23, 0, 593, 594, 540, 541, 342, 416, 418,
	420, 0, 329, 407, 428, 411, 0, 408, 0, 0,
	402, 467, 0, 0, 435, -2, 470, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 546, 0, 524,
	0, 0, 484, 495, 496, 497, 498, 571, 0, 0,
	-2, 0, 0, 546, 0, 0, 0, 357, 364, 0,
	0, 358, 0, 359, 379, 381, 0, 0, 0, 0,
	355, 546, 392, 38, 50, 51, 0, 0, 57, 174,
	0, 215, 0, 0, 0, 185, 0, 0, 188, 0,
	190, 191, 0, 208, 93, 94, 95, 96, 97, 98,
	99, 0, 102, 104, 106, 86, 169, 0, 173, 173,
	170, 173, 137, 0, 138, 139, 140, 0, 157, 0,
	0, 0, 0, 0, 65, 75, 76, 0, 220, 0,
	827, 0, 245, 246, 247, 248, 249, 250, 251, 827,
	0, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 0, 827, 612, 613, 614, 615, 0, 0,
	259, 280, 0, 0, 296, 297, 560, 0, 24, 392,
	0, 336, 530, 0, 409, 0, 429, 412, 468, 332,
	0, 159, 159, 509, 159, 163, 512, 159, 514, 159,
	517, 0, 0, 0, 0, 529, 0, 0, 0, 521,
	483, 527, 0, 31, 0, 571, 561, 573, 575, 0,
	27, 0, 567, 0, 554, 580, 393, 581, 361, 0,
	366, 0, 0, 0, 369, 0, 554, 37, 54, 55,
	56, 213, 216, 0, 194, 159, 0, 0, 186, 187,
	189, 0, 100, 160, 131, 132, 173, 133, 171, 172,
	170, 0, 170, 0, 164, 0, 0, 0, 0, 0,
	0, 0, 243, 244, 224, 0, 225, 227, 228, 229,
	0, 207, 223, 299, 300, 542, 343, 469, 413, 472,
	506, 170, 510, 511, 513, 515, 516, 518, 474, 473,
	475, 0, 0, 478, 0, 0, 0, 0, 0, 525,
	0, 32, 0, 576, -2, 0, 0, 0, 44, 35,
	0, 353, 0, 0, 0, 388, 356, 36, 176, 0,
	196, 198, 203, 204, 0, 0, 199, 207, 134, 173,
	158, 173, 0, 0, 0, 0, 0, 77, 78, 0,
	0, 0, 208, 544, 0, 507, 508, 0, 0, 0,
	0, 499, 482, 522, 0, 574, 0, -2, 0, 569,
	568, 0, 362, 389, 390, 391, 352, 175, 177, 0,
	183, 0, 0, 195, 0, 205, 206, 0, 0, 147,
	148, 162, 165, 61, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 476, 477, 479, 480, 0, 0, 0,
	0, 564, 27, 0, 354, 178, 179, 0, 184, 181,
	0, 0, 0, 0, 0, 0, 0, 71, 0, 253,
	0, 0, 545, 543, 481, 0, 0, 0, 572, -2,
	570, 180, 182, 200, 201, 0, 209, 63, 62, 221,
	74, 252, 0, 0, 0, 500, 0, 503, 0, 0,
	226, 254, 0, 0, 501, 0, 210, 0, 222, 0,
	0, 0, 0, 0, 0, 502, 0, 0, 0, 202,
	255, 256,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 261,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:562
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:577
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:640
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:651
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:656
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:668
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:675
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:682
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:687
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:691
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:695
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:701
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:706
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:737
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:742
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:747
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:752
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:757
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:767
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:777
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:804
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:905
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 148:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1030
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1035
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1040
		{
			yyVAL.optVal = nil
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1044
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1053
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1061
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1065
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1071
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1079
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1083
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1088
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1092
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1097
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1105
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1110
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1114
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1120
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1124
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1130
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1140
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1144
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1149
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1153
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1159
		{
			yyVAL.str = ""
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1193
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1203
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1209
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1213
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1219
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1226
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1232
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1238
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1244
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 202:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1252
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1264
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1268
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1272
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1276
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1281
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1288
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1292
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1297
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1301
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1305
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1313
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1317
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1321
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1327
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1331
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1335
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1341
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1345
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 222:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1359
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1373
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1382
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1386
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1390
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1403
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 228:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1413
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1418
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1423
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1427
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1459
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1465
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1469
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 255:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1475
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 256:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1479
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1485
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1491
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1499
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1504
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1512
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1516
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1522
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1526
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1531
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1537
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1541
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1545
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1586
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1594
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1604
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1620
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1624
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1628
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1648
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1654
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1658
		{
			yyVAL.str = "extended "
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1664
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1668
		{
			yyVAL.str = "full "
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1674
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1678
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1682
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1688
		{
			yyVAL.showFilter = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1692
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1696
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1702
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1706
		{
			yyVAL.str = SessionStr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1710
		{
			yyVAL.str = GlobalStr
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1716
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Begin{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Begin{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1736
		{
			yyVAL.statement = &Commit{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.statement = &Rollback{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1748
		{
			yyVAL.statement = &OtherRead{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1752
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1756
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1760
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1764
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1769
		{
			setAllowComments(yylex, true)
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1773
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1779
		{
			yyVAL.bytes2 = nil
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1783
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.str = UnionStr
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1793
		{
			yyVAL.str = UnionAllStr
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1797
		{
			yyVAL.str = UnionDistinctStr
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1802
		{
			yyVAL.str = ""
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1806
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1810
		{
			yyVAL.str = SQLCacheStr
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1815
		{
			yyVAL.str = ""
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1819
		{
			yyVAL.str = DistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1824
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1828
		{
			yyVAL.str = StraightJoinHint
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1833
		{
			yyVAL.selectExprs = nil
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1847
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1853
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1857
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1861
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1865
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1870
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1874
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1885
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1890
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1894
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1900
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1904
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1914
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1918
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1922
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1928
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1932
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1938
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1942
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1948
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1952
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1965
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1969
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1973
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1977
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1983
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1985
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1989
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1991
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1995
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1997
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2000
		{
			yyVAL.empty = struct{}{}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2002
		{
			yyVAL.empty = struct{}{}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2005
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2009
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2013
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2020
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2026
		{
			yyVAL.str = JoinStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2030
		{
			yyVAL.str = JoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2034
		{
			yyVAL.str = JoinStr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2040
		{
			yyVAL.str = StraightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2046
		{
			yyVAL.str = LeftJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2050
		{
			yyVAL.str = LeftJoinStr
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2054
		{
			yyVAL.str = RightJoinStr
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2058
		{
			yyVAL.str = RightJoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2064
		{
			yyVAL.str = NaturalJoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2068
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2078
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2082
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2088
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2092
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2097
		{
			yyVAL.indexHints = nil
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2101
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2105
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2109
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2114
		{
			yyVAL.expr = nil
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2118
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2124
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2128
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2132
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2136
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2140
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2144
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2154
		{
			yyVAL.str = ""
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2158
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2164
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2168
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2174
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2178
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2182
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2186
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2190
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2194
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2198
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2202
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 413:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2206
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2210
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2216
		{
			yyVAL.str = IsNullStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2220
		{
			yyVAL.str = IsNotNullStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2224
		{
			yyVAL.str = IsTrueStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2228
		{
			yyVAL.str = IsNotTrueStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2232
		{
			yyVAL.str = IsFalseStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2236
		{
			yyVAL.str = IsNotFalseStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2242
		{
			yyVAL.str = EqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2246
		{
			yyVAL.str = LessThanStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2250
		{
			yyVAL.str = GreaterThanStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2254
		{
			yyVAL.str = LessEqualStr
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2258
		{
			yyVAL.str = GreaterEqualStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2262
		{
			yyVAL.str = NotEqualStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2266
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2271
		{
			yyVAL.expr = nil
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2275
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2285
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2289
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2295
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2301
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2305
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2315
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2319
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2323
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2327
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2331
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2335
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2339
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2343
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2347
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2351
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2355
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2395
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2399
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2407
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2421
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2425
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2429
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2455
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 473:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2481
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 475:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2485
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2489
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2493
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2497
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 479:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 480:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2505
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 481:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 482:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2517
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2521
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2543
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2548
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2553
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2558
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2581
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2585
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2595
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2599
		{
			yyVAL.str = BooleanModeStr
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2603
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 502:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2607
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2611
		{
			yyVAL.str = QueryExpansionStr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2617
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2621
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2665
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2669
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2673
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2677
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2682
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2686
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2691
		{
			yyVAL.str = string("")
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2695
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2701
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2705
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2711
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2716
		{
			yyVAL.expr = nil
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2720
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2726
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2730
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2734
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2740
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2744
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2748
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2752
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2756
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2764
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2768
		{
			yyVAL.expr = &NullVal{}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2774
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2783
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2787
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2792
		{
			yyVAL.exprs = nil
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2796
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2801
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2805
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2810
		{
			yyVAL.orderBy = nil
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2814
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2820
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2824
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2830
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2835
		{
			yyVAL.str = AscScr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.str = AscScr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2843
		{
			yyVAL.str = DescScr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2848
		{
			yyVAL.limit = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2856
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2860
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2865
		{
			yyVAL.str = ""
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2869
		{
			yyVAL.str = ForUpdateStr
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = ShareModeStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2886
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2890
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2894
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2899
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2903
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 566:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2907
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2914
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2918
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2922
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2926
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2931
		{
			yyVAL.updateExprs = nil
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2935
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2941
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2945
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2955
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2961
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2967
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2977
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2981
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2987
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2993
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2997
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3003
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3007
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3011
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.bytes = []byte("charset")
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3025
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3029
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3033
		{
			yyVAL.expr = &Default{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3042
		{
			yyVAL.byt = 0
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3044
		{
			yyVAL.byt = 1
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3047
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3049
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3052
		{
			yyVAL.str = ""
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.str = IgnoreStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3058
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3060
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3062
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3064
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3066
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3068
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3070
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3074
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3076
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3079
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3093
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3104
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3114
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3348
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3357
		{
			decNesting(yylex)
		}
	case 827:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3362
		{
			forceEOF(yylex)
		}
	case 828:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3367
		{
			forceEOF(yylex)
		}
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3371
		{
			forceEOF(yylex)
		}
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3375
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
