// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const MEDIUMINT = 57490
const INT = 57491
const INTEGER = 57492
const BIGINT = 57493
const INTNUM = 57494
const REAL = 57495
const DOUBLE = 57496
const FLOAT_TYPE = 57497
const DECIMAL = 57498
const NUMERIC = 57499
const TIME = 57500
const TIMESTAMP = 57501
const DATETIME = 57502
const YEAR = 57503
const CHAR = 57504
const VARCHAR = 57505
const VARYING = 57506
const BOOL = 57507
const CHARACTER = 57508
const VARBINARY = 57509
const NCHAR = 57510
const UUID = 57511
const TEXT = 57512
const TINYTEXT = 57513
const MEDIUMTEXT = 57514
const LONGTEXT = 57515
const BLOB = 57516
const TINYBLOB = 57517
const MEDIUMBLOB = 57518
const LONGBLOB = 57519
const JSON = 57520
const ENUM = 57521
const GEOMETRY = 57522
const POINT = 57523
const LINESTRING = 57524
const POLYGON = 57525
const GEOMETRYCOLLECTION = 57526
const MULTIPOINT = 57527
const MULTILINESTRING = 57528
const MULTIPOLYGON = 57529
const NULLX = 57530
const AUTO_INCREMENT = 57531
const APPROXNUM = 57532
const SIGNED = 57533
const UNSIGNED = 57534
const ZEROFILL = 57535
const DATABASES = 57536
const TABLES = 57537
const VITESS_KEYSPACES = 57538
const VITESS_SHARDS = 57539
const VITESS_TABLETS = 57540
const VSCHEMA_TABLES = 57541
const EXTENDED = 57542
const FULL = 57543
const PROCESSLIST = 57544
const NAMES = 57545
const CHARSET = 57546
const GLOBAL = 57547
const SESSION = 57548
const ISOLATION = 57549
const LEVEL = 57550
const READ = 57551
const WRITE = 57552
const ONLY = 57553
const REPEATABLE = 57554
const COMMITTED = 57555
const UNCOMMITTED = 57556
const SERIALIZABLE = 57557
const CURRENT_TIMESTAMP = 57558
const DATABASE = 57559
const CURRENT_DATE = 57560
const CURRENT_TIME = 57561
const LOCALTIME = 57562
const LOCALTIMESTAMP = 57563
const UTC_DATE = 57564
const UTC_TIME = 57565
const UTC_TIMESTAMP = 57566
const REPLACE = 57567
const CONVERT = 57568
const CAST = 57569
const SUBSTR = 57570
const SUBSTRING = 57571
const GROUP_CONCAT = 57572
const SEPARATOR = 57573
const MATCH = 57574
const AGAINST = 57575
const BOOLEAN = 57576
const LANGUAGE = 57577
const WITH = 57578
const QUERY = 57579
const EXPANSION = 57580
const UNUSED = 57581

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 297,
	152, 297,
	-2, 287,
	-1, 241,
	108, 616,
	-2, 612,
	-1, 242,
	108, 617,
	-2, 613,
	-1, 311,
	79, 781,
	-2, 58,
	-1, 312,
	79, 741,
	-2, 59,
	-1, 317,
	79, 725,
	-2, 583,
	-1, 319,
	79, 762,
	-2, 585,
	-1, 582,
	51, 41,
	53, 41,
	-2, 43,
	-1, 722,
	108, 619,
	-2, 615,
	-1, 939,
	5, 28,
	-2, 429,
	-1, 964,
	5, 27,
	-2, 558,
	-1, 1218,
	5, 28,
	-2, 559,
	-1, 1271,
	5, 27,
	-2, 561,
	-1, 1341,
	5, 28,
	-2, 562,
}

const yyPrivate = 57344

const yyLast = 10869

var yyAct = [...]int{

	242, 1346, 880, 1331, 659, 1282, 1235, 784, 529, 1120,
	1006, 1148, 1224, 576, 802, 220, 1121, 1040, 824, 785,
	830, 1117, 967, 271, 983, 823, 874, 214, 1094, 316,
	747, 757, 860, 931, 66, 87, 754, 820, 87, 592,
	574, 1031, 53, 972, 462, 773, 468, 870, 837, 724,
	246, 310, 591, 417, 781, 474, 578, 482, 229, 528,
	3, 563, 87, 87, 321, 913, 466, 307, 87, 305,
	321, 215, 216, 217, 218, 52, 87, 297, 87, 449,
	1376, 1358, 298, 897, 87, 1373, 1339, 244, 1370, 881,
	303, 233, 543, 1357, 1338, 1112, 896, 1212, 421, 442,
	991, 85, 296, 990, 212, 1156, 992, 219, 1142, 1311,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 815, 901, 506, 84, 236, 68, 85, 85,
	1143, 1144, 895, 593, 85, 594, 82, 78, 79, 80,
	816, 817, 85, 313, 85, 689, 1009, 1010, 1011, 457,
	85, 1020, 690, 306, 1014, 1012, 851, 1095, 420, 861,
	1201, 198, 444, 1260, 446, 853, 428, 1199, 429, 852,
	213, 1289, 453, 454, 436, 71, 72, 1372, 67, 1368,
	892, 889, 890, 843, 888, 208, 1332, 1333, 57, 1097,
	73, 443, 445, 87, 1238, 1283, 1072, 321, 321, 321,
	321, 1155, 321, 782, 1004, 844, 1002, 69, 1285, 321,
	1176, 899, 902, 59, 60, 61, 62, 63, 839, 849,
	1268, 841, 1185, 1241, 1177, 1099, 842, 1103, 1017, 1098,
	1016, 1096, 840, 999, 1366, 193, 321, 1101, 1302, 431,
	756, 195, 424, 1069, 75, 76, 76, 1100, 201, 197,
	668, 894, 248, 81, 803, 805, 658, 982, 981, 85,
	1102, 1104, 1049, 270, 980, 419, 470, 1316, 839, 1221,
	839, 427, 192, 1312, 893, 1284, 77, 199, 441, 846,
	203, 1081, 840, 438, 840, 471, 1073, 848, 847, 518,
	519, 861, 70, 947, 856, 925, 87, 696, 1337, 486,
	437, 1162, 821, 87, 87, 87, 506, 908, 693, 321,
	481, 898, 1321, 194, 301, 321, 1077, 1174, 1236, 1237,
	1239, 970, 1013, 1059, 900, 944, 496, 315, 804, 506,
	595, 1050, 1046, 422, 1114, 1051, 1048, 1047, 774, 73,
	1070, 196, 1068, 204, 205, 206, 207, 211, 662, 731,
	1052, 1163, 210, 209, 1071, 774, 1045, 954, 480, 479,
	423, 845, 85, 729, 730, 728, 1288, 1008, 479, 85,
	580, 85, 480, 479, 583, 481, 589, 545, 546, 547,
	548, 549, 550, 551, 481, 909, 558, 1060, 313, 481,
	476, 1076, 1062, 1055, 1056, 582, 1063, 1058, 1057, 1343,
	1065, 1061, 418, 497, 498, 499, 500, 501, 502, 503,
	496, 1064, 50, 506, 1247, 472, 1246, 1054, 480, 479,
	321, 321, 727, 699, 700, 1116, 430, 87, 87, 321,
	1035, 87, 425, 426, 87, 481, 1034, 74, 87, 1021,
	321, 321, 321, 321, 321, 321, 321, 321, 499, 500,
	501, 502, 503, 496, 321, 321, 506, 1322, 1267, 87,
	315, 315, 315, 315, 1244, 315, 839, 677, 480, 479,
	1187, 833, 315, 838, 321, 834, 835, 695, 87, 836,
	840, 922, 923, 924, 321, 481, 701, 943, 1032, 942,
	714, 716, 717, 85, 85, 715, 516, 85, 295, 484,
	85, 1018, 1319, 675, 676, 480, 479, 433, 434, 435,
	1154, 21, 694, 725, 1360, 1380, 722, 664, 665, 1275,
	1369, 669, 481, 1153, 672, 85, 1152, 321, 480, 479,
	748, 703, 749, 261, 260, 263, 264, 265, 266, 1360,
	1359, 718, 262, 267, 85, 481, 1353, 461, 461, 691,
	1275, 1350, 720, 676, 1005, 301, 1275, 1349, 87, 1275,
	1348, 87, 87, 87, 87, 87, 721, 224, 710, 1275,
	1329, 1295, 315, 87, 1275, 1296, 87, 993, 597, 883,
	87, 1275, 461, 1275, 1276, 87, 87, 766, 769, 321,
	778, 761, 750, 775, 236, 771, 1233, 1232, 1294, 236,
	236, 674, 321, 768, 768, 236, 751, 752, 673, 768,
	786, 1139, 461, 1220, 461, 1169, 1168, 1157, 239, 236,
	236, 236, 236, 663, 85, 810, 768, 85, 85, 85,
	85, 85, 661, 799, 439, 761, 807, 808, 787, 800,
	812, 790, 85, 813, 788, 789, 580, 791, 783, 1165,
	1166, 85, 85, 862, 863, 864, 828, 1165, 1164, 87,
	937, 461, 321, 432, 321, 560, 461, 87, 313, 87,
	759, 461, 87, 321, 602, 601, 811, 418, 54, 586,
	1084, 825, 876, 656, 315, 23, 969, 565, 568, 569,
	570, 566, 315, 567, 571, 969, 1118, 973, 974, 968,
	872, 873, 968, 315, 315, 315, 315, 315, 315, 315,
	315, 1270, 949, 946, 759, 559, 937, 315, 315, 587,
	1216, 585, 937, 560, 23, 85, 722, 560, 809, 1173,
	585, 50, 50, 85, 1167, 85, 968, 705, 85, 560,
	1171, 1170, 726, 23, 914, 994, 915, 484, 460, 879,
	315, 814, 725, 937, 948, 945, 588, 903, 697, 904,
	1374, 1355, 905, 676, 1325, 1299, 962, 1298, 1297, 963,
	50, 1254, 853, 762, 763, 236, 721, 875, 927, 770,
	226, 1133, 997, 871, 854, 855, 857, 858, 859, 50,
	753, 973, 974, 777, 866, 779, 780, 877, 878, 660,
	767, 767, 867, 868, 869, 865, 767, 321, 65, 1290,
	87, 235, 1287, 301, 301, 301, 301, 301, 953, 1172,
	1118, 998, 236, 767, 321, 976, 50, 671, 301, 458,
	796, 985, 709, 987, 977, 797, 979, 301, 236, 321,
	794, 964, 995, 978, 798, 795, 569, 570, 793, 792,
	986, 1365, 315, 1356, 988, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 315, 1080, 506, 520, 521,
	522, 523, 524, 525, 526, 910, 85, 1363, 87, 321,
	321, 475, 321, 1000, 1001, 1003, 920, 1022, 1023, 919,
	1025, 230, 231, 463, 473, 1027, 600, 440, 1026, 1214,
	1028, 1029, 1030, 825, 464, 1255, 321, 885, 1033, 87,
	87, 475, 670, 573, 918, 1042, 221, 87, 227, 228,
	1305, 222, 917, 1043, 54, 315, 321, 315, 565, 568,
	569, 570, 566, 1304, 567, 571, 315, 1258, 969, 1151,
	1150, 1323, 477, 1324, 85, 1313, 1015, 692, 56, 921,
	58, 1044, 1175, 584, 51, 1, 1053, 882, 1039, 891,
	315, 1041, 1088, 1087, 1330, 1281, 321, 321, 1036, 1093,
	1119, 1147, 831, 1106, 1105, 1078, 1079, 722, 822, 416,
	64, 726, 1320, 85, 832, 829, 603, 1122, 1129, 1019,
	850, 1127, 609, 236, 1113, 321, 936, 321, 321, 607,
	608, 605, 611, 610, 236, 1086, 606, 1082, 604, 1141,
	1128, 200, 951, 786, 676, 1146, 308, 572, 596, 786,
	1145, 478, 1067, 1066, 887, 1124, 1024, 1109, 1140, 768,
	1075, 688, 907, 465, 469, 768, 456, 202, 514, 916,
	989, 314, 1125, 698, 467, 1303, 321, 1257, 952, 540,
	487, 772, 247, 713, 259, 321, 256, 1160, 258, 257,
	1158, 1159, 301, 1161, 704, 961, 488, 87, 245, 237,
	984, 300, 1178, 321, 825, 556, 825, 564, 562, 561,
	975, 1180, 321, 971, 530, 87, 299, 315, 1083, 1211,
	1310, 708, 25, 541, 1186, 1183, 55, 232, 19, 18,
	17, 20, 1007, 16, 15, 14, 1189, 723, 29, 13,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 1190, 1197, 12, 11, 10,
	9, 8, 7, 85, 321, 6, 321, 321, 321, 87,
	321, 1215, 1037, 315, 1223, 315, 321, 5, 1226, 1227,
	1228, 85, 1229, 4, 223, 22, 1231, 1182, 1240, 2,
	0, 1086, 0, 0, 995, 0, 0, 0, 0, 315,
	0, 321, 321, 87, 321, 321, 321, 0, 0, 0,
	0, 0, 0, 1248, 0, 0, 321, 272, 47, 315,
	0, 1251, 0, 1252, 0, 0, 0, 1243, 1242, 1245,
	0, 0, 0, 0, 0, 580, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 447, 0,
	702, 321, 321, 0, 0, 825, 767, 0, 1259, 1126,
	984, 0, 767, 1269, 321, 47, 0, 0, 0, 85,
	1122, 0, 321, 225, 1280, 1286, 0, 0, 0, 302,
	0, 0, 1291, 1041, 825, 321, 0, 0, 315, 0,
	315, 1149, 0, 1250, 0, 1194, 1195, 1300, 1196, 0,
	0, 1198, 0, 1200, 0, 0, 321, 758, 760, 1271,
	1314, 1292, 0, 1293, 0, 0, 0, 1318, 0, 0,
	0, 711, 712, 776, 1122, 0, 0, 0, 321, 321,
	321, 0, 0, 0, 0, 0, 0, 0, 0, 1179,
	1326, 1327, 1328, 0, 1335, 0, 0, 321, 1181, 1234,
	0, 1340, 0, 801, 0, 0, 321, 0, 0, 0,
	1344, 1345, 1315, 321, 1351, 0, 1184, 301, 0, 0,
	0, 0, 0, 530, 0, 315, 764, 765, 928, 929,
	930, 0, 0, 0, 1361, 0, 321, 1362, 0, 0,
	0, 321, 0, 0, 786, 0, 0, 87, 1364, 0,
	0, 0, 0, 0, 0, 321, 1377, 0, 0, 0,
	768, 0, 0, 0, 448, 448, 448, 448, 0, 448,
	0, 0, 0, 0, 0, 0, 448, 1225, 0, 1225,
	1225, 1225, 0, 1230, 0, 0, 0, 819, 0, 315,
	0, 0, 0, 47, 0, 0, 450, 451, 452, 0,
	455, 0, 0, 0, 0, 0, 0, 459, 515, 0,
	0, 517, 0, 85, 1225, 1249, 0, 315, 315, 1253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 1371, 527, 0,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 0,
	542, 544, 544, 544, 544, 544, 544, 544, 544, 552,
	553, 554, 555, 0, 1273, 1274, 0, 0, 0, 0,
	575, 0, 0, 0, 0, 0, 0, 1149, 0, 934,
	0, 0, 0, 935, 0, 1007, 911, 912, 0, 469,
	939, 940, 941, 0, 0, 0, 0, 0, 1225, 950,
	0, 0, 0, 0, 956, 0, 957, 958, 959, 960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1317,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 1090, 1091, 506, 0, 0, 0, 0, 0, 0,
	0, 1225, 1225, 1225, 1107, 1108, 0, 1110, 1111, 0,
	0, 938, 0, 0, 0, 0, 0, 767, 0, 0,
	1342, 0, 0, 0, 0, 0, 955, 0, 0, 1347,
	0, 0, 0, 0, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 448, 0,
	0, 0, 0, 0, 0, 0, 448, 0, 0, 1225,
	0, 0, 0, 0, 1367, 0, 0, 448, 448, 448,
	448, 448, 448, 448, 448, 0, 0, 0, 1347, 657,
	0, 448, 448, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 678, 679,
	680, 681, 682, 683, 684, 685, 0, 0, 0, 0,
	0, 0, 686, 687, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 23, 24, 48,
	26, 27, 0, 495, 494, 504, 505, 497, 498, 499,
	500, 501, 502, 503, 496, 47, 42, 506, 1192, 0,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 531,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	0, 0, 1138, 50, 0, 0, 0, 0, 0, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 302, 302,
	302, 302, 302, 0, 0, 0, 0, 0, 0, 0,
	1208, 461, 0, 575, 0, 806, 1115, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 1130, 1131, 0, 0, 1132, 0, 0, 1134, 0,
	0, 0, 30, 31, 33, 32, 35, 495, 494, 504,
	505, 497, 498, 499, 500, 501, 502, 503, 496, 0,
	0, 506, 0, 0, 0, 36, 43, 44, 0, 0,
	45, 46, 34, 0, 1261, 1262, 0, 1263, 1264, 1265,
	0, 0, 0, 0, 0, 0, 1191, 0, 38, 39,
	0, 40, 41, 1193, 0, 0, 0, 0, 0, 448,
	0, 448, 0, 0, 1202, 1203, 1204, 1205, 461, 1207,
	448, 0, 0, 0, 0, 1209, 0, 0, 0, 0,
	0, 0, 1217, 1218, 1219, 461, 1222, 0, 0, 0,
	884, 630, 886, 0, 0, 0, 0, 0, 0, 1188,
	0, 906, 0, 0, 495, 494, 504, 505, 497, 498,
	499, 500, 501, 502, 503, 496, 0, 0, 506, 926,
	0, 495, 494, 504, 505, 497, 498, 499, 500, 501,
	502, 503, 496, 49, 0, 506, 0, 0, 1213, 0,
	0, 0, 0, 0, 0, 530, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 0, 0, 0, 0, 0, 617, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	966, 0, 0, 0, 0, 1277, 1278, 1279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	0, 0, 0, 0, 1378, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1206,
	1306, 1307, 1308, 1309, 644, 645, 646, 647, 648, 649,
	650, 0, 651, 652, 653, 654, 655, 632, 633, 634,
	635, 614, 616, 0, 612, 615, 618, 0, 628, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 629, 636,
	637, 638, 639, 640, 641, 642, 643, 0, 0, 1336,
	0, 0, 0, 0, 1341, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1352,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 0, 448, 506, 0, 0, 0, 1038, 0,
	0, 0, 0, 613, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1334, 530, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 1381, 1382, 495,
	494, 504, 505, 497, 498, 499, 500, 501, 502, 503,
	496, 0, 0, 506, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1135, 1136,
	1137, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 120,
	0, 123, 0, 0, 157, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 490, 0, 493,
	0, 0, 0, 320, 0, 507, 508, 509, 510, 511,
	512, 513, 100, 491, 492, 489, 495, 494, 504, 505,
	497, 498, 499, 500, 501, 502, 503, 496, 0, 0,
	506, 0, 0, 0, 0, 0, 0, 0, 495, 494,
	504, 505, 497, 498, 499, 500, 501, 502, 503, 496,
	0, 0, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 0, 0, 0, 0, 181, 0,
	0, 0, 145, 0, 103, 0, 160, 112, 0, 121,
	0, 0, 0, 0, 0, 104, 0, 151, 141, 172,
	1210, 142, 150, 124, 164, 146, 171, 182, 183, 162,
	180, 153, 96, 138, 88, 90, 161, 170, 101, 154,
	92, 168, 159, 130, 116, 117, 91, 0, 149, 107,
	111, 106, 139, 165, 166, 105, 190, 97, 178, 179,
	94, 98, 177, 137, 176, 163, 169, 131, 128, 93,
	167, 129, 127, 119, 109, 113, 143, 126, 144, 114,
	134, 133, 135, 0, 0, 0, 158, 174, 191, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 136, 99,
	115, 155, 118, 125, 148, 189, 0, 152, 102, 173,
	156, 0, 0, 0, 0, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 1272, 89, 95,
	122, 188, 147, 110, 175, 495, 494, 504, 505, 497,
	498, 499, 500, 501, 502, 503, 496, 0, 0, 506,
	495, 494, 504, 505, 497, 498, 499, 500, 501, 502,
	503, 496, 0, 1301, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1123, 0,
	47, 0, 405, 395, 0, 366, 407, 343, 358, 415,
	359, 360, 388, 329, 374, 140, 355, 0, 346, 324,
	352, 325, 344, 368, 108, 342, 397, 377, 120, 413,
	123, 382, 0, 157, 132, 0, 0, 370, 399, 372,
	393, 365, 389, 334, 381, 408, 356, 385, 409, 0,
	0, 0, 320, 0, 826, 827, 0, 0, 0, 0,
	0, 100, 0, 384, 404, 354, 387, 323, 383, 0,
	327, 330, 414, 402, 349, 350, 996, 0, 0, 0,
	0, 0, 0, 369, 373, 390, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 0, 380, 0, 0,
	1375, 331, 328, 0, 367, 0, 0, 0, 333, 0,
	348, 391, 0, 322, 394, 400, 364, 181, 403, 362,
	361, 145, 0, 103, 0, 160, 112, 357, 121, 406,
	371, 398, 345, 353, 104, 351, 151, 141, 172, 379,
	142, 150, 124, 164, 146, 171, 182, 183, 162, 180,
	153, 96, 138, 88, 90, 161, 170, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 190, 97, 178, 179, 94,
	98, 177, 137, 176, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 326, 0, 158, 174, 191, 341, 401,
	184, 185, 186, 187, 0, 0, 0, 136, 99, 115,
	155, 118, 125, 148, 189, 386, 152, 102, 173, 156,
	337, 340, 335, 336, 375, 376, 410, 411, 412, 392,
	332, 0, 338, 339, 0, 396, 378, 89, 95, 122,
	188, 147, 110, 175, 405, 395, 0, 366, 407, 343,
	358, 415, 359, 360, 388, 329, 374, 140, 355, 0,
	346, 324, 352, 325, 344, 368, 108, 342, 397, 377,
	120, 413, 123, 382, 0, 157, 132, 0, 0, 370,
	399, 372, 393, 365, 389, 334, 381, 408, 356, 385,
	409, 0, 0, 0, 320, 0, 826, 827, 0, 0,
	0, 0, 0, 100, 0, 384, 404, 354, 387, 323,
	383, 0, 327, 330, 414, 402, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 369, 373, 390, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 0, 380,
	0, 0, 0, 331, 328, 0, 367, 0, 0, 0,
	333, 0, 348, 391, 0, 322, 394, 400, 364, 181,
	403, 362, 361, 145, 0, 103, 0, 160, 112, 357,
	121, 406, 371, 398, 345, 353, 104, 351, 151, 141,
	172, 379, 142, 150, 124, 164, 146, 171, 182, 183,
	162, 180, 153, 96, 138, 88, 90, 161, 170, 101,
	154, 92, 168, 159, 130, 116, 117, 91, 0, 149,
	107, 111, 106, 139, 165, 166, 105, 190, 97, 178,
	179, 94, 98, 177, 137, 176, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 326, 0, 158, 174, 191,
	341, 401, 184, 185, 186, 187, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 189, 386, 152, 102,
	173, 156, 337, 340, 335, 336, 375, 376, 410, 411,
	412, 392, 332, 0, 338, 339, 0, 396, 378, 89,
	95, 122, 188, 147, 110, 175, 405, 395, 0, 366,
	407, 343, 358, 415, 359, 360, 388, 329, 374, 140,
	355, 0, 346, 324, 352, 325, 344, 368, 108, 342,
	397, 377, 120, 413, 123, 382, 0, 157, 132, 0,
	0, 370, 399, 372, 393, 365, 389, 334, 381, 408,
	356, 385, 409, 0, 0, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 384, 404, 354,
	387, 323, 383, 0, 327, 330, 414, 402, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 369, 373, 390,
	363, 0, 0, 0, 0, 0, 0, 1085, 0, 347,
	0, 380, 0, 0, 0, 331, 328, 0, 367, 0,
	0, 0, 333, 0, 348, 391, 0, 322, 394, 400,
	364, 181, 403, 362, 361, 145, 0, 103, 0, 160,
	112, 357, 121, 406, 371, 398, 345, 353, 104, 351,
	151, 141, 172, 379, 142, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 98, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 326, 0, 158,
	174, 191, 341, 401, 184, 185, 186, 187, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 189, 386,
	152, 102, 173, 156, 337, 340, 335, 336, 375, 376,
	410, 411, 412, 392, 332, 0, 338, 339, 0, 396,
	378, 89, 95, 122, 188, 147, 110, 175, 405, 395,
	0, 366, 407, 343, 358, 415, 359, 360, 388, 329,
	374, 140, 355, 0, 346, 324, 352, 325, 344, 368,
	108, 342, 397, 377, 120, 413, 123, 382, 0, 157,
	132, 0, 0, 370, 399, 372, 393, 365, 389, 334,
	381, 408, 356, 385, 409, 50, 0, 0, 320, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 384,
	404, 354, 387, 323, 383, 0, 327, 330, 414, 402,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 369,
	373, 390, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 0, 380, 0, 0, 0, 331, 328, 0,
	367, 0, 0, 0, 333, 0, 348, 391, 0, 322,
	394, 400, 364, 181, 403, 362, 361, 145, 0, 103,
	0, 160, 112, 357, 121, 406, 371, 398, 345, 353,
	104, 351, 151, 141, 172, 379, 142, 150, 124, 164,
	146, 171, 182, 183, 162, 180, 153, 96, 138, 88,
	90, 161, 170, 101, 154, 92, 168, 159, 130, 116,
	117, 91, 0, 149, 107, 111, 106, 139, 165, 166,
	105, 190, 97, 178, 179, 94, 98, 177, 137, 176,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 326,
	0, 158, 174, 191, 341, 401, 184, 185, 186, 187,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	189, 386, 152, 102, 173, 156, 337, 340, 335, 336,
	375, 376, 410, 411, 412, 392, 332, 0, 338, 339,
	0, 396, 378, 89, 95, 122, 188, 147, 110, 175,
	405, 395, 0, 366, 407, 343, 358, 415, 359, 360,
	388, 329, 374, 140, 355, 0, 346, 324, 352, 325,
	344, 368, 108, 342, 397, 377, 120, 413, 123, 382,
	0, 157, 132, 0, 0, 370, 399, 372, 393, 365,
	389, 334, 381, 408, 356, 385, 409, 0, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 384, 404, 354, 387, 323, 383, 0, 327, 330,
	414, 402, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 369, 373, 390, 363, 0, 0, 0, 0, 0,
	0, 719, 0, 347, 0, 380, 0, 0, 0, 331,
	328, 0, 367, 0, 0, 0, 333, 0, 348, 391,
	0, 322, 394, 400, 364, 181, 403, 362, 361, 145,
	0, 103, 0, 160, 112, 357, 121, 406, 371, 398,
	345, 353, 104, 351, 151, 141, 172, 379, 142, 150,
	124, 164, 146, 171, 182, 183, 162, 180, 153, 96,
	138, 88, 90, 161, 170, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 190, 97, 178, 179, 94, 98, 177,
	137, 176, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 326, 0, 158, 174, 191, 341, 401, 184, 185,
	186, 187, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 189, 386, 152, 102, 173, 156, 337, 340,
	335, 336, 375, 376, 410, 411, 412, 392, 332, 0,
	338, 339, 0, 396, 378, 89, 95, 122, 188, 147,
	110, 175, 405, 395, 0, 366, 407, 343, 358, 415,
	359, 360, 388, 329, 374, 140, 355, 0, 346, 324,
	352, 325, 344, 368, 108, 342, 397, 377, 120, 413,
	123, 382, 0, 157, 132, 0, 0, 370, 399, 372,
	393, 365, 389, 334, 381, 408, 356, 385, 409, 0,
	0, 0, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 384, 404, 354, 387, 323, 383, 0,
	327, 330, 414, 402, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 369, 373, 390, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 0, 380, 0, 0,
	0, 331, 328, 0, 367, 0, 0, 0, 333, 0,
	348, 391, 0, 322, 394, 400, 364, 181, 403, 362,
	361, 145, 0, 103, 0, 160, 112, 357, 121, 406,
	371, 398, 345, 353, 104, 351, 151, 141, 172, 379,
	142, 150, 124, 164, 146, 171, 182, 183, 162, 180,
	153, 96, 138, 88, 90, 161, 170, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 190, 97, 178, 179, 94,
	98, 177, 137, 176, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 326, 0, 158, 174, 191, 341, 401,
	184, 185, 186, 187, 0, 0, 0, 136, 99, 115,
	155, 118, 125, 148, 189, 386, 152, 102, 173, 156,
	337, 340, 335, 336, 375, 376, 410, 411, 412, 392,
	332, 0, 338, 339, 0, 396, 378, 89, 95, 122,
	188, 147, 110, 175, 405, 395, 0, 366, 407, 343,
	358, 415, 359, 360, 388, 329, 374, 140, 355, 0,
	346, 324, 352, 325, 344, 368, 108, 342, 397, 377,
	120, 413, 123, 382, 0, 157, 132, 0, 0, 370,
	399, 372, 393, 365, 389, 334, 381, 408, 356, 385,
	409, 0, 0, 0, 241, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 384, 404, 354, 387, 323,
	383, 0, 327, 330, 414, 402, 349, 350, 0, 0,
	0, 0, 0, 0, 0, 369, 373, 390, 363, 0,
	0, 0, 0, 0, 0, 0, 0, 347, 0, 380,
	0, 0, 0, 331, 328, 0, 367, 0, 0, 0,
	333, 0, 348, 391, 0, 322, 394, 400, 364, 181,
	403, 362, 361, 145, 0, 103, 0, 160, 112, 357,
	121, 406, 371, 398, 345, 353, 104, 351, 151, 141,
	172, 379, 142, 150, 124, 164, 146, 171, 182, 183,
	162, 180, 153, 96, 138, 88, 90, 161, 170, 101,
	154, 92, 168, 159, 130, 116, 117, 91, 0, 149,
	107, 111, 106, 139, 165, 166, 105, 190, 97, 178,
	179, 94, 98, 177, 137, 176, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 326, 0, 158, 174, 191,
	341, 401, 184, 185, 186, 187, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 189, 386, 152, 102,
	173, 156, 337, 340, 335, 336, 375, 376, 410, 411,
	412, 392, 332, 0, 338, 339, 0, 396, 378, 89,
	95, 122, 188, 147, 110, 175, 405, 395, 0, 366,
	407, 343, 358, 415, 359, 360, 388, 329, 374, 140,
	355, 0, 346, 324, 352, 325, 344, 368, 108, 342,
	397, 377, 120, 413, 123, 382, 0, 157, 132, 0,
	0, 370, 399, 372, 393, 365, 389, 334, 381, 408,
	356, 385, 409, 0, 0, 0, 320, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 384, 404, 354,
	387, 323, 383, 0, 327, 330, 414, 402, 349, 350,
	0, 0, 0, 0, 0, 0, 0, 369, 373, 390,
	363, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	0, 380, 0, 0, 0, 331, 328, 0, 367, 0,
	0, 0, 333, 0, 348, 391, 0, 322, 394, 400,
	364, 181, 403, 362, 361, 145, 0, 103, 0, 160,
	112, 357, 121, 406, 371, 398, 345, 353, 104, 351,
	151, 141, 172, 379, 142, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 318, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 326, 0, 158,
	174, 191, 341, 401, 184, 185, 186, 187, 0, 0,
	0, 319, 317, 115, 155, 118, 125, 148, 189, 386,
	152, 102, 173, 156, 337, 340, 335, 336, 375, 376,
	410, 411, 412, 392, 332, 0, 338, 339, 0, 396,
	378, 89, 95, 122, 188, 147, 110, 175, 405, 395,
	0, 366, 407, 343, 358, 415, 359, 360, 388, 329,
	374, 140, 355, 0, 346, 324, 352, 325, 344, 368,
	108, 342, 397, 377, 120, 413, 123, 382, 0, 157,
	132, 0, 0, 370, 399, 372, 393, 365, 389, 334,
	381, 408, 356, 385, 409, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 384,
	404, 354, 387, 323, 383, 0, 327, 330, 414, 402,
	349, 350, 0, 0, 0, 0, 0, 0, 0, 369,
	373, 390, 363, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 0, 380, 0, 0, 0, 331, 328, 0,
	367, 0, 0, 0, 333, 0, 348, 391, 0, 322,
	394, 400, 364, 181, 403, 362, 361, 145, 0, 103,
	0, 160, 112, 357, 121, 406, 371, 398, 345, 353,
	104, 351, 151, 141, 172, 379, 142, 150, 124, 164,
	146, 171, 182, 183, 162, 180, 153, 96, 138, 88,
	90, 161, 170, 101, 154, 92, 168, 159, 130, 116,
	117, 91, 0, 149, 107, 111, 106, 139, 165, 166,
	105, 190, 97, 178, 179, 94, 98, 177, 137, 176,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 326,
	0, 158, 174, 191, 341, 401, 184, 185, 186, 187,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	189, 386, 152, 102, 173, 156, 337, 340, 335, 336,
	375, 376, 410, 411, 412, 392, 332, 0, 338, 339,
	0, 396, 378, 89, 95, 122, 188, 147, 110, 175,
	405, 395, 0, 366, 407, 343, 358, 415, 359, 360,
	388, 329, 374, 140, 355, 0, 346, 324, 352, 325,
	344, 368, 108, 342, 397, 377, 120, 413, 123, 382,
	0, 157, 132, 0, 0, 370, 399, 372, 393, 365,
	389, 334, 381, 408, 356, 385, 409, 0, 0, 0,
	320, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 384, 404, 354, 387, 323, 383, 0, 327, 330,
	414, 402, 349, 350, 0, 0, 0, 0, 0, 0,
	0, 369, 373, 390, 363, 0, 0, 0, 0, 0,
	0, 0, 0, 347, 0, 380, 0, 0, 0, 331,
	328, 0, 367, 0, 0, 0, 333, 0, 348, 391,
	0, 322, 394, 400, 364, 181, 403, 362, 361, 145,
	0, 103, 0, 160, 112, 357, 121, 406, 371, 398,
	345, 353, 104, 351, 151, 141, 172, 379, 142, 150,
	124, 164, 146, 171, 182, 183, 162, 180, 153, 96,
	138, 88, 90, 161, 590, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 190, 97, 178, 179, 94, 318, 177,
	137, 176, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 326, 0, 158, 174, 191, 341, 401, 184, 185,
	186, 187, 0, 0, 0, 319, 317, 115, 155, 118,
	125, 148, 189, 386, 152, 102, 173, 156, 337, 340,
	335, 336, 375, 376, 410, 411, 412, 392, 332, 0,
	338, 339, 0, 396, 378, 89, 95, 122, 188, 147,
	110, 175, 405, 395, 0, 366, 407, 343, 358, 415,
	359, 360, 388, 329, 374, 140, 355, 0, 346, 324,
	352, 325, 344, 368, 108, 342, 397, 377, 120, 413,
	123, 382, 0, 157, 132, 0, 0, 370, 399, 372,
	393, 365, 389, 334, 381, 408, 356, 385, 409, 0,
	0, 0, 320, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 384, 404, 354, 387, 323, 383, 0,
	327, 330, 414, 402, 349, 350, 0, 0, 0, 0,
	0, 0, 0, 369, 373, 390, 363, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 0, 380, 0, 0,
	0, 331, 328, 0, 367, 0, 0, 0, 333, 0,
	348, 391, 0, 322, 394, 400, 364, 181, 403, 362,
	361, 145, 0, 103, 0, 160, 112, 357, 121, 406,
	371, 398, 345, 353, 104, 351, 151, 141, 172, 379,
	142, 150, 124, 164, 146, 171, 182, 183, 162, 180,
	153, 96, 138, 88, 90, 161, 309, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 190, 97, 178, 179, 94,
	318, 177, 137, 176, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 326, 0, 158, 174, 191, 341, 401,
	184, 185, 186, 187, 0, 0, 0, 319, 317, 312,
	311, 118, 125, 148, 189, 386, 152, 102, 173, 156,
	337, 340, 335, 336, 375, 376, 410, 411, 412, 392,
	332, 0, 338, 339, 0, 396, 378, 89, 95, 122,
	188, 147, 110, 175, 140, 0, 0, 755, 0, 243,
	0, 0, 0, 108, 240, 0, 0, 120, 282, 123,
	0, 0, 157, 132, 0, 0, 0, 0, 273, 274,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 241, 261, 260, 263, 264, 265, 266, 0, 0,
	100, 262, 267, 268, 269, 0, 0, 238, 254, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 234, 0, 0, 0, 293, 0, 253, 0,
	0, 249, 250, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 181, 0, 0, 291,
	145, 0, 103, 0, 160, 112, 0, 121, 0, 0,
	0, 0, 0, 104, 0, 151, 141, 172, 0, 142,
	150, 124, 164, 146, 171, 182, 183, 162, 180, 153,
	96, 138, 88, 90, 161, 170, 101, 154, 92, 168,
	159, 130, 116, 117, 91, 0, 149, 107, 111, 106,
	139, 165, 166, 105, 190, 97, 178, 179, 94, 98,
	177, 137, 176, 163, 169, 131, 128, 93, 167, 129,
	127, 119, 109, 113, 143, 126, 144, 114, 134, 133,
	135, 0, 0, 0, 158, 174, 191, 0, 0, 184,
	185, 186, 187, 0, 0, 0, 136, 99, 115, 155,
	118, 125, 148, 189, 0, 152, 102, 173, 156, 283,
	292, 289, 290, 287, 288, 286, 285, 284, 294, 275,
	276, 277, 278, 280, 0, 279, 89, 95, 122, 188,
	147, 110, 175, 140, 0, 0, 0, 0, 243, 0,
	0, 0, 108, 240, 0, 0, 120, 282, 123, 0,
	0, 157, 132, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 461,
	241, 261, 260, 263, 264, 265, 266, 0, 0, 100,
	262, 267, 268, 269, 0, 0, 238, 254, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 0, 0, 0, 0, 293, 0, 253, 0, 0,
	249, 250, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 291, 145,
	0, 103, 0, 160, 112, 0, 121, 0, 0, 0,
	0, 0, 104, 0, 151, 141, 172, 0, 142, 150,
	124, 164, 146, 171, 182, 183, 162, 180, 153, 96,
	138, 88, 90, 161, 170, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 190, 97, 178, 179, 94, 98, 177,
	137, 176, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 0, 0, 158, 174, 191, 0, 0, 184, 185,
	186, 187, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 189, 0, 152, 102, 173, 156, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 89, 95, 122, 188, 147,
	110, 175, 140, 0, 0, 0, 0, 243, 0, 0,
	0, 108, 240, 0, 0, 120, 282, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	261, 260, 263, 264, 265, 266, 0, 0, 100, 262,
	267, 268, 269, 0, 0, 238, 254, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	234, 0, 0, 0, 293, 0, 253, 0, 0, 249,
	250, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 291, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 0, 142, 150, 124,
	164, 146, 171, 182, 183, 162, 180, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 190, 97, 178, 179, 94, 98, 177, 137,
	176, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	0, 0, 158, 174, 191, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 136, 99, 115, 155, 118, 125,
	148, 189, 0, 152, 102, 173, 156, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 0, 279, 89, 95, 122, 188, 147, 110,
	175, 140, 0, 0, 0, 0, 243, 0, 0, 0,
	108, 240, 0, 0, 120, 282, 123, 0, 0, 157,
	132, 0, 0, 0, 0, 273, 274, 0, 0, 0,
	0, 0, 0, 818, 0, 50, 0, 0, 241, 261,
	260, 263, 264, 265, 266, 0, 0, 100, 262, 267,
	268, 269, 0, 0, 238, 254, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 0,
	0, 0, 0, 293, 0, 253, 0, 0, 249, 250,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 291, 145, 0, 103,
	0, 160, 112, 0, 121, 0, 0, 0, 0, 0,
	104, 0, 151, 141, 172, 0, 142, 150, 124, 164,
	146, 171, 182, 183, 162, 180, 153, 96, 138, 88,
	90, 161, 170, 101, 154, 92, 168, 159, 130, 116,
	117, 91, 0, 149, 107, 111, 106, 139, 165, 166,
	105, 190, 97, 178, 179, 94, 98, 177, 137, 176,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 0,
	0, 158, 174, 191, 0, 0, 184, 185, 186, 187,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	189, 0, 152, 102, 173, 156, 283, 292, 289, 290,
	287, 288, 286, 285, 284, 294, 275, 276, 277, 278,
	280, 23, 279, 89, 95, 122, 188, 147, 110, 175,
	0, 0, 0, 140, 0, 0, 0, 0, 243, 0,
	0, 0, 108, 240, 0, 0, 120, 282, 123, 0,
	0, 157, 132, 0, 0, 0, 0, 273, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	241, 261, 260, 263, 264, 265, 266, 0, 0, 100,
	262, 267, 268, 269, 0, 0, 238, 254, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 0, 0, 0, 0, 293, 0, 253, 0, 0,
	249, 250, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 0, 0, 291, 145,
	0, 103, 0, 160, 112, 0, 121, 0, 0, 0,
	0, 0, 104, 0, 151, 141, 172, 0, 142, 150,
	124, 164, 146, 171, 182, 183, 162, 180, 153, 96,
	138, 88, 90, 161, 170, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 190, 97, 178, 179, 94, 98, 177,
	137, 176, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 0, 0, 158, 174, 191, 0, 0, 184, 185,
	186, 187, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 189, 0, 152, 102, 173, 156, 283, 292,
	289, 290, 287, 288, 286, 285, 284, 294, 275, 276,
	277, 278, 280, 0, 279, 89, 95, 122, 188, 147,
	110, 175, 140, 0, 0, 0, 0, 243, 0, 0,
	0, 108, 240, 0, 0, 120, 282, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	261, 260, 263, 264, 265, 266, 0, 0, 100, 262,
	267, 268, 269, 0, 0, 238, 254, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	0, 0, 0, 0, 293, 0, 253, 0, 0, 249,
	250, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 291, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 0, 142, 150, 124,
	164, 146, 171, 182, 183, 162, 180, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 190, 97, 178, 179, 94, 98, 177, 137,
	176, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	0, 0, 158, 174, 191, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 136, 99, 115, 155, 118, 125,
	148, 189, 0, 152, 102, 173, 156, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 140, 279, 89, 95, 122, 188, 147, 110,
	175, 108, 0, 0, 0, 120, 282, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	261, 260, 263, 264, 265, 266, 0, 0, 100, 262,
	267, 268, 269, 0, 0, 0, 254, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	0, 0, 0, 0, 293, 0, 253, 0, 0, 249,
	250, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 291, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 1379, 142, 150, 124,
	164, 146, 171, 182, 183, 162, 180, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 190, 97, 178, 179, 94, 98, 177, 137,
	176, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	0, 0, 158, 174, 191, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 136, 99, 115, 155, 118, 125,
	148, 189, 0, 152, 102, 173, 156, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 140, 279, 89, 95, 122, 188, 147, 110,
	175, 108, 0, 0, 0, 120, 282, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 273, 274, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 241,
	261, 260, 263, 264, 265, 266, 0, 0, 100, 262,
	267, 268, 269, 0, 0, 0, 254, 0, 281, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	0, 0, 0, 0, 293, 0, 253, 0, 0, 249,
	250, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 181, 0, 0, 291, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 0, 142, 150, 124,
	164, 146, 171, 182, 183, 162, 180, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 190, 97, 178, 179, 94, 98, 177, 137,
	176, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	0, 0, 158, 174, 191, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 136, 99, 115, 155, 118, 125,
	148, 189, 0, 152, 102, 173, 156, 283, 292, 289,
	290, 287, 288, 286, 285, 284, 294, 275, 276, 277,
	278, 280, 0, 279, 89, 95, 122, 188, 147, 110,
	175, 140, 0, 0, 0, 483, 0, 0, 0, 0,
	108, 0, 0, 0, 120, 0, 123, 0, 0, 157,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 320, 0,
	485, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 480, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 181, 0, 0, 0, 145, 0, 103,
	0, 160, 112, 0, 121, 0, 0, 0, 0, 0,
	104, 0, 151, 141, 172, 0, 142, 150, 124, 164,
	146, 171, 182, 183, 162, 180, 153, 96, 138, 88,
	90, 161, 170, 101, 154, 92, 168, 159, 130, 116,
	117, 91, 0, 149, 107, 111, 106, 139, 165, 166,
	105, 190, 97, 178, 179, 94, 98, 177, 137, 176,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 0,
	0, 158, 174, 191, 0, 0, 184, 185, 186, 187,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	189, 0, 152, 102, 173, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 95, 122, 188, 147, 110, 175,
	140, 0, 0, 0, 579, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 581,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	0, 152, 102, 173, 156, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 89, 95, 122, 188, 147, 110, 175, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	0, 152, 102, 173, 156, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 89, 95, 122, 188, 147, 110, 175, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	706, 0, 0, 707, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	599, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 598,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	0, 152, 102, 173, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 140,
	0, 0, 0, 579, 0, 0, 0, 0, 108, 0,
	0, 0, 120, 0, 123, 0, 0, 157, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 581, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 145, 0, 103, 0, 160,
	112, 0, 121, 0, 0, 0, 0, 0, 104, 0,
	151, 141, 172, 0, 577, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 98, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 191, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 189, 140,
	152, 102, 173, 156, 0, 0, 0, 0, 108, 0,
	0, 0, 120, 0, 123, 0, 0, 157, 132, 0,
	0, 89, 95, 122, 188, 147, 110, 175, 0, 0,
	0, 0, 0, 50, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 145, 0, 103, 0, 160,
	112, 0, 121, 0, 0, 0, 0, 0, 104, 0,
	151, 141, 172, 0, 142, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 98, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 191, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 189, 140,
	152, 102, 173, 156, 0, 0, 0, 0, 108, 0,
	0, 0, 120, 0, 123, 0, 0, 157, 132, 0,
	0, 89, 95, 122, 188, 147, 110, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 581, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 145, 0, 103, 0, 160,
	112, 0, 121, 0, 0, 0, 0, 0, 104, 0,
	151, 141, 172, 0, 142, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 98, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 191, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 189, 140,
	152, 102, 173, 156, 0, 0, 0, 0, 108, 0,
	0, 0, 120, 0, 123, 0, 0, 157, 132, 0,
	0, 89, 95, 122, 188, 147, 110, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 320, 0, 485, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 145, 0, 103, 0, 160,
	112, 0, 121, 0, 0, 0, 0, 0, 104, 0,
	151, 141, 172, 0, 142, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 98, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 191, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 189, 140,
	152, 102, 173, 156, 0, 0, 0, 0, 108, 0,
	0, 0, 120, 0, 123, 0, 0, 157, 132, 0,
	0, 89, 95, 122, 188, 147, 110, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 181, 0, 0, 0, 145, 0, 103, 0, 160,
	112, 0, 121, 0, 0, 0, 0, 0, 104, 0,
	151, 141, 172, 0, 142, 150, 124, 164, 146, 171,
	182, 183, 162, 180, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 190,
	97, 178, 179, 94, 98, 177, 137, 176, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 191, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 189, 666,
	152, 102, 173, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 89, 95, 122, 188, 147, 110, 175, 557, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	0, 152, 102, 173, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	140, 0, 89, 95, 122, 188, 147, 110, 175, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 320, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 188, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 241, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 182, 183, 162, 180, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	190, 97, 178, 179, 94, 98, 177, 137, 176, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 191, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 189,
	0, 152, 102, 173, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 95, 122, 188, 147, 110, 175,
}
var yyPact = [...]int{

	1681, -1000, -182, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 909, 943, -1000, -1000, -1000, -1000, -1000, -1000, 756,
	58, 124, 158, 19, 9982, 154, 130, 10402, -1000, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 718, -1000, -1000,
	-1000, -1000, -1000, 899, 905, 774, 898, 853, -1000, 5694,
	123, 8681, 9772, 4977, -1000, 622, 146, 10402, -144, 10192,
	119, 119, 119, -1000, 153, 10402, -1000, 10402, 116, 608,
	116, 116, 116, 10402, -1000, 192, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10402, 579, 868, 44, 3213, 3213, 3213, 3213,
	21, 3213, -69, 779, -1000, -1000, -1000, -1000, 3213, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 494,
	874, 6414, 6414, 909, -1000, 718, -1000, -1000, -1000, 860,
	-1000, -1000, 327, 931, -1000, 7113, 191, -1000, 6414, 2136,
	680, -1000, -1000, 680, -1000, -1000, 180, -1000, -1000, 6874,
	6874, 6874, 6874, 6874, 6874, 6874, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	680, -1000, 6175, 680, 680, 680, 680, 680, 680, 680,
	680, 6414, 680, 680, 680, 680, 680, 680, 680, 680,
	680, 680, 680, 680, 680, 9542, 686, 888, -1000, -1000,
	-1000, 891, 7812, 8471, 10402, 668, -1000, 703, 4725, -91,
	-1000, -1000, -1000, 251, 8232, -1000, -1000, -1000, 867, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 621, -1000, 1852, 10192,
	3213, 136, 748, 577, 277, 568, 10402, 9311, 3213, 129,
	10402, 889, 777, 10402, 553, 546, -1000, 4473, -1000, 3213,
	3213, 3213, 3213, 3213, 3213, 3213, 3213, -1000, -1000, -1000,
	-1000, -1000, -1000, 3213, 3213, -1000, -67, -1000, 10402, -1000,
	-1000, -1000, -1000, 938, 219, 459, 189, 705, -1000, 399,
	899, 494, 853, 8022, 791, -1000, -1000, 10402, -1000, 6414,
	6414, 424, -1000, 9101, -1000, -1000, 3465, 224, 6874, 360,
	276, 6874, 6874, 6874, 6874, 6874, 6874, 6874, 6874, 6874,
	6874, 6874, 6874, 6874, 6874, 6874, 475, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 537, -1000, 718, 477, 477,
	202, 202, 202, 202, 202, 202, 2158, 5216, 494, 617,
	289, 6175, 5694, 5694, 6414, 6414, 10612, 10612, 5694, 890,
	263, 289, 10612, -1000, 494, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 5694, 5694, 5694, 5694, 60, 10402, -1000, 10612,
	8681, 8681, 8681, 8681, 8681, -1000, 809, 808, -1000, 800,
	790, 804, 10402, -1000, 612, 7812, 206, 680, -1000, 8891,
	-1000, -1000, 60, 677, 8681, 10402, -1000, -1000, 4221, 703,
	-91, 698, -1000, -103, -87, 5933, 198, -1000, -1000, -1000,
	-1000, 2709, 347, 155, -1000, -53, -1000, -1000, -1000, -1000,
	720, -1000, -1000, -1000, 720, 113, 720, 720, 720, -24,
	-24, -24, -24, -1000, -1000, -1000, -1000, -1000, -1000, 753,
	742, -1000, 720, 720, 720, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 731, 731, 731, 725, 725, 747, -1000, 10402, -164,
	524, 3213, 884, 3213, -1000, 68, 10402, -1000, 10402, -1000,
	-1000, 10402, 3213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 296, -1000,
	-1000, -1000, -1000, 839, 6414, 6414, 3969, 6414, -1000, -1000,
	-1000, 874, -1000, 890, 903, -1000, 857, 854, 5694, -1000,
	-1000, 224, 298, -1000, -1000, 415, -1000, -1000, -1000, -1000,
	187, 680, -1000, 2340, -1000, -1000, -1000, -1000, 360, 6874,
	6874, 6874, 1603, 2340, 2325, 763, 1449, 202, 352, 352,
	225, 225, 225, 225, 225, 309, 309, -1000, -1000, -1000,
	494, -1000, -1000, -1000, 494, 5694, 700, -1000, -1000, 6414,
	-1000, 494, 607, 607, 436, 303, 702, -1000, 185, 701,
	607, 5694, 280, -1000, 6414, 494, -1000, 607, 494, 607,
	607, 737, 680, -1000, 683, -1000, 242, 888, 741, 775,
	647, -1000, -1000, -1000, -1000, 803, -1000, 796, -1000, -1000,
	-1000, -1000, -1000, 145, 139, 138, 10192, -1000, 926, 8681,
	674, -1000, -1000, 698, -91, -126, -1000, -1000, -1000, 289,
	-1000, 522, 692, 2457, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 730, 771, 100, 99, 151, 149, 499, 10192, -1000,
	-1000, -1000, 301, 89, 937, -1000, 97, -1000, 95, 444,
	-59, -1000, -1000, 381, -24, -24, 720, -24, -1000, -1000,
	198, 866, 198, 198, 198, 431, 431, -1000, -1000, -1000,
	-1000, 378, -1000, -1000, -1000, 372, -1000, 10402, 10192, 3213,
	-1000, 3717, -1000, -1000, -1000, -1000, -1000, -1000, 207, 268,
	221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 53, 170, -1000, 3213, -1000, 304, 10402, 10402,
	829, 289, 289, 173, -1000, -1000, 10402, -1000, -1000, -1000,
	-1000, 669, -1000, -1000, -1000, 2961, 5694, -1000, 1603, 2340,
	2039, -1000, 6874, 6874, -1000, -1000, 607, 5694, 289, -1000,
	-1000, -1000, 52, 475, 52, 6874, 6874, 3969, 6874, 6874,
	-155, 663, 256, -1000, 6414, 349, -1000, -1000, -1000, -1000,
	-1000, 770, 10612, 680, -1000, 7582, 10192, 909, 10612, 6414,
	6414, -1000, -1000, 6414, 729, -1000, 6414, -1000, -1000, -1000,
	680, 680, 680, 558, -1000, 909, 674, -1000, -1000, -1000,
	-118, -100, -1000, -1000, 2709, -1000, 2709, 10192, 930, -1000,
	471, 468, -1000, 455, -1000, -1000, 71, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -128, -1000, -1000, -1000, -1000,
	-1000, 563, 198, 198, -24, 198, -1000, 246, -1000, -1000,
	-1000, 604, -1000, 596, 681, 562, 689, 769, -1000, 676,
	-1000, 238, -1000, 91, -1000, 10192, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10192, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10402, -1000, -1000, -1000,
	-1000, -1000, 10192, 96, -1000, -1000, 413, 6414, -1000, -1000,
	-1000, 3717, -1000, 926, 8681, -1000, -1000, 494, -1000, 6874,
	2340, 2340, -1000, -1000, 494, 720, 720, -1000, 720, 725,
	-1000, 720, 0, 720, -7, 494, 494, 1804, 1990, -1000,
	1707, 1846, 680, -151, -1000, 289, 6414, -1000, 872, 646,
	667, -1000, -1000, 5455, 494, 560, 161, 558, 899, -1000,
	289, 289, 289, 10192, 289, 10192, 10192, 10192, 7352, 10192,
	899, -1000, -1000, -1000, -1000, 2457, -1000, 543, -1000, 720,
	165, 165, -1000, -1000, -1000, 90, -1000, -1000, -1000, -1000,
	198, -1000, -1000, -1000, -24, 407, -24, 358, -1000, 356,
	10192, 10192, 10402, 3717, 2709, 10192, -1000, -1000, -1000, 719,
	-1000, -1000, -1000, -1000, 879, 10192, -1000, -1000, 289, 924,
	670, -1000, 2340, -1000, -1000, 108, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6874, 6874, -1000, 6874, 6874,
	6874, 494, 401, 289, 87, -1000, 680, -1000, -1000, 679,
	10192, 10192, -1000, -1000, 530, -1000, 528, 528, 528, 206,
	-1000, -1000, 144, 10192, -1000, 762, -1000, -1000, 300, 15,
	759, 10192, -1000, 198, -1000, 198, 544, 517, 521, 716,
	715, -1000, -1000, 713, 10192, 680, 114, 919, 904, -1000,
	-1000, 1821, 1821, 1821, 1821, 20, -1000, -1000, 936, -1000,
	680, -1000, 718, 159, -1000, 10192, -1000, -1000, -1000, -1000,
	-1000, 144, -1000, 447, 233, 400, -1000, 932, -1000, -1000,
	933, 712, -1000, -1000, -1000, -1000, -1000, 10192, 10192, 10192,
	516, 43, 54, -1000, 6414, 6414, -1000, -1000, -1000, -1000,
	494, 47, -168, 10612, 667, 494, 10192, -1000, -1000, -1000,
	341, -1000, -1000, 165, 165, 10192, 506, 503, 497, 748,
	493, -1000, 10192, 709, 289, 661, -1000, 816, -159, -174,
	649, -1000, -1000, -1000, -1000, -1000, 486, -1000, -1000, -1000,
	-1000, -164, -1000, 43, 845, 10192, -1000, 814, -1000, 107,
	10192, -1000, -1000, 34, 466, -165, 10402, -1000, 31, -1000,
	-169, 708, 680, -175, 10192, 6644, -1000, 461, 1821, 494,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1159, 59, 511, 1155, 1154, 1153, 1147, 1135, 1132,
	1131, 1130, 1129, 1128, 1127, 1109, 1108, 1105, 1104, 1103,
	1101, 1100, 1099, 1098, 188, 1097, 1096, 1092, 55, 1091,
	58, 1090, 1089, 33, 240, 36, 31, 811, 1088, 40,
	77, 82, 1086, 43, 1083, 1080, 69, 1079, 61, 1078,
	1077, 90, 1075, 1071, 14, 22, 1069, 1068, 1066, 1065,
	87, 618, 1064, 1059, 1058, 1056, 1054, 1053, 49, 8,
	9, 23, 16, 1052, 252, 50, 1051, 45, 1049, 1048,
	1047, 1045, 42, 1044, 46, 1043, 15, 44, 1042, 12,
	54, 24, 21, 7, 67, 52, 1041, 19, 51, 39,
	1040, 1039, 437, 1038, 1037, 1036, 1032, 1031, 1030, 426,
	360, 1024, 1023, 1022, 29, 0, 263, 79, 57, 1021,
	34, 1018, 66, 65, 56, 13, 1017, 27, 1218, 30,
	1016, 1011, 28, 1008, 1006, 1003, 1002, 1001, 1000, 999,
	992, 169, 32, 37, 990, 989, 47, 26, 41, 53,
	986, 985, 20, 984, 6, 10, 1, 48, 982, 980,
	979, 978, 25, 18, 972, 11, 971, 5, 965, 964,
	3, 959, 17, 958, 2, 957, 4, 956, 955, 954,
	1187, 748, 953, 952, 951, 950, 92,
}
var yyR1 = [...]int{

	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 176, 176, 175, 174, 174, 173, 173, 172, 16,
	159, 160, 160, 160, 160, 149, 133, 133, 133, 133,
	133, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 136, 136, 136, 136,
	136, 138, 138, 138, 138, 138, 134, 134, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 140, 140, 140, 140,
	140, 140, 140, 140, 148, 148, 141, 141, 146, 146,
	147, 147, 147, 144, 144, 145, 145, 142, 142, 142,
	143, 143, 151, 151, 168, 168, 167, 167, 167, 158,
	158, 164, 164, 164, 164, 164, 164, 164, 157, 157,
	166, 166, 165, 152, 152, 152, 152, 152, 153, 154,
	154, 154, 154, 155, 155, 156, 156, 161, 161, 161,
	162, 162, 162, 163, 163, 163, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 183,
	183, 184, 184, 184, 184, 184, 184, 184, 171, 169,
	169, 170, 170, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 107, 107, 104, 104, 105,
	105, 106, 106, 106, 108, 108, 108, 131, 131, 131,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 185, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 119, 119, 119, 118, 118, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 91, 91, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 126, 126, 125, 125, 125, 124, 124,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	37, 37, 37, 37, 37, 37, 37, 103, 103, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 186,
	186, 66, 66, 66, 66, 31, 31, 31, 31, 31,
	129, 129, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 92, 92, 70,
	70, 72, 72, 71, 73, 93, 93, 97, 94, 94,
	98, 98, 98, 96, 96, 96, 121, 121, 121, 101,
	101, 109, 109, 110, 110, 102, 102, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 112,
	113, 113, 116, 116, 117, 117, 122, 122, 123, 123,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 180, 181,
	127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 1, 1, 4, 4,
	4, 5, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 3, 3,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 3, 2, 2, 1, 1,
	1, 3, 2, 1, 4, 4, 7, 7, 13, 1,
	1, 2, 2, 0, 1, 1, 3, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 11, 13, 7,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 6, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 2,
	1, 2, 2, 1, 2, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -180, 8, 242,
	52, -179, 257, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -159, 52, -120, 120, 69, 149,
	234, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 234, 117, 118, -51, -122, 55, -115, 156, 250,
	157, 168, 162, 191, 182, 251, 154, 179, 183, 221,
	64, 160, 230, 126, 137, 177, 173, 171, 27, 196,
	255, 172, 129, 197, 201, 222, 166, 167, 224, 195,
	31, 131, 252, 33, 145, 225, 199, 194, 190, 193,
	165, 189, 37, 203, 202, 204, 220, 185, 155, 174,
	18, 140, 143, 198, 200, 124, 147, 254, 226, 170,
	144, 139, 229, 153, 161, 223, 232, 36, 208, 164,
	128, 158, 151, 187, 146, 175, 176, 192, 163, 188,
	159, 148, 141, 231, 209, 256, 186, 184, 180, 181,
	152, 120, 149, 150, 213, 214, 215, 216, 253, 227,
	178, 210, 118, 105, 183, 111, 211, 119, 31, 147,
	-131, 118, -104, 150, 213, 214, 215, 216, 55, 223,
	222, 217, -122, 159, -127, -127, -127, -127, -127, -2,
	-86, 17, 16, -5, -3, -180, 6, 20, 21, -30,
	38, 39, -25, -36, 96, -37, -122, -56, 71, -61,
	28, 55, -115, 23, -60, -57, -75, -73, -74, 105,
	106, 94, 95, 102, 72, 107, -65, -63, -64, -66,
	57, 56, 65, 58, 59, 60, 61, 66, 67, 68,
	-116, -71, -180, 42, 43, 243, 244, 245, 246, 249,
	247, 74, 32, 233, 241, 240, 239, 237, 238, 235,
	236, 123, 234, 100, 242, -102, -39, -40, -41, -42,
	-53, -74, -180, -51, 11, -46, -51, -94, -130, 159,
	-98, 223, 222, -117, -96, -116, -114, 221, 183, 220,
	55, -115, 116, 70, 22, 24, 206, 73, 105, 16,
	74, 104, 243, 111, 46, 235, 236, 233, 245, 246,
	234, 211, 28, 10, 25, 135, 21, 98, 113, 77,
	78, 138, 23, 136, 68, 19, 49, 130, 11, 13,
	14, 123, 122, 89, 119, 44, 8, 107, 26, 86,
	40, 133, 42, 87, 17, 237, 238, 30, 249, 142,
	100, 47, 34, 71, 66, 50, 228, 69, 15, 45,
	88, 114, 242, 43, 117, 6, 248, 29, 134, 41,
	118, 212, 76, 121, 67, 5, 132, 9, 48, 51,
	239, 240, 241, 32, 75, 12, -160, -149, 55, 119,
	-51, 242, -116, -110, 123, -110, -110, 118, -51, -51,
	-109, 123, 55, -109, -109, -109, -51, 108, -51, 55,
	29, 234, 55, 147, 118, 148, 120, -128, -180, -117,
	-128, -128, -128, 151, 152, -128, -105, 218, 50, -128,
	-181, 54, -87, 19, 30, -37, -122, -83, -84, -37,
	-82, -2, -24, 34, -28, 21, 63, 11, -119, 70,
	69, 86, -118, 22, -116, 57, 108, -37, -58, 89,
	71, 87, 88, 73, 91, 90, 101, 94, 95, 96,
	97, 98, 99, 100, 92, 93, 104, 79, 80, 81,
	82, 83, 84, 85, -103, -180, -74, -180, 109, 110,
	-61, -61, -61, -61, -61, -61, -61, -180, -2, -69,
	-37, -180, -180, -180, -180, -180, -180, -180, -180, -180,
	-78, -37, -180, -186, -180, -186, -186, -186, -186, -186,
	-186, -186, -180, -180, -180, -180, -52, 26, -51, 29,
	53, -47, -49, -48, -50, 40, 44, 46, 41, 42,
	43, 47, -126, 22, -39, -180, -125, 143, -124, 22,
	-122, 57, -51, -46, -182, 53, 11, 51, 53, -94,
	159, -95, -99, 224, 226, 79, -121, -116, 57, 28,
	29, 54, 53, -150, -133, -137, -134, -139, -138, -140,
	-135, -136, 182, 251, 179, 183, 180, 105, 184, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 186, 196,
	29, 137, 175, 176, 177, 178, 197, 198, 199, 200,
	201, 202, 203, 204, 162, 163, 164, 165, 166, 167,
	168, 170, 171, 172, 173, 174, -116, -128, 120, -176,
	51, 55, 71, 55, -51, -51, 228, -128, 121, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 212,
	219, -51, 9, 89, 53, 18, 108, 53, -85, 24,
	25, -86, -181, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 71, 67, 68, -118, 96,
	-123, -117, -114, -61, -68, -71, -74, 62, 89, 87,
	88, 73, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	55, -60, -60, -116, -35, 21, -34, -36, -181, 53,
	-181, -2, -34, -34, -37, -37, -75, -116, -122, -75,
	-34, -28, -76, -77, 75, -75, -181, -34, -35, -34,
	-34, -90, 143, -51, -93, -97, -75, -40, -41, -41,
	-40, -41, 40, 40, 40, 45, 40, 45, 40, -48,
	-122, -181, -54, 48, 122, 49, -180, -124, -90, 51,
	-39, -51, -98, -95, 53, 225, 227, 228, 50, -37,
	-143, 104, -161, -162, -163, -117, 57, 58, -149, -151,
	-152, -164, -153, 124, 128, 129, 132, -157, 126, 119,
	133, 66, 71, 28, 50, 206, 124, 133, 132, 64,
	-144, 209, -141, 52, -141, -141, 181, -141, -141, -141,
	-142, 183, -142, -142, -142, 52, 52, -141, -141, -141,
	-146, 52, -146, -146, -147, 52, -147, 50, 51, -51,
	-174, 253, -175, 55, -128, 23, -128, -111, 116, 113,
	114, -171, 112, 206, 183, 64, 28, 15, 243, 143,
	256, 55, 144, -51, -51, -51, -128, -106, 11, 89,
	36, -37, -37, -123, -84, -87, -101, 19, 11, 32,
	32, -34, 66, 67, 68, 108, -180, -68, -61, -61,
	-61, -33, 138, 70, -181, -181, -34, 53, -37, -181,
	-181, -181, 53, 51, 22, 53, 11, 108, 53, 11,
	-181, -34, -79, -77, 77, -37, -181, -181, -181, -181,
	-181, -59, 29, 32, -2, -180, -180, -55, 53, 12,
	79, -44, -43, 50, 51, -45, 50, -43, 40, 40,
	119, 119, 119, -91, -116, -55, -39, -55, -99, -100,
	229, 226, 232, 55, 53, -163, 79, 52, 50, 133,
	-157, -157, 55, -157, 55, 55, -155, -116, 66, 57,
	58, 59, 66, 233, 65, 9, 133, 133, 57, -145,
	210, 58, -142, -142, -141, -142, -143, 29, -143, -143,
	-143, -148, 57, -148, 58, 58, -51, -116, -128, -173,
	-172, -117, -127, -120, -184, 149, 125, 130, 129, 55,
	124, 128, 143, -177, 149, 125, 126, 130, 129, 55,
	119, 133, 124, 128, 143, 132, -112, -113, 121, 22,
	119, 133, 143, 116, -128, -108, 87, 12, -122, -122,
	37, 108, -51, -38, 11, 96, -117, -35, -33, 70,
	-61, -61, -181, -36, -132, 105, 179, 137, 177, 173,
	195, 185, 208, 175, 209, -129, -132, -61, -61, -117,
	-61, -61, 250, -82, 78, -37, 76, -92, 50, -93,
	-70, -72, -71, -180, -2, -88, -116, -91, -82, -97,
	-37, -37, -37, 52, -37, -180, -180, -180, -181, 53,
	-82, -55, 226, 230, 231, -162, -163, -166, -165, -116,
	10, 9, 55, 55, 55, 130, 233, 54, -143, -143,
	-142, -143, 55, 105, 54, 53, 54, 53, 54, 53,
	52, 51, 50, 53, 79, -183, 119, 133, -127, -116,
	-127, -116, -51, -127, -116, 126, -152, 57, -37, -55,
	-39, -181, -61, -181, -141, -141, -141, -147, -141, 167,
	-141, 167, -181, -181, -181, 53, 19, -181, 53, 19,
	-180, -32, 248, -37, 27, -92, 53, -181, -181, -181,
	53, 108, -181, -86, -89, -116, -89, -89, -89, -125,
	-116, -86, 54, 53, -141, -154, 153, 154, 29, 155,
	-154, 133, -143, -142, 57, -142, 58, 58, -89, -116,
	-51, -172, -163, -116, 52, 26, -116, -80, 13, -142,
	55, -61, -61, -61, -61, -61, -181, 57, 133, -72,
	32, -2, -180, -116, -116, 53, 54, -181, -181, -181,
	-54, -168, -167, 51, 131, 64, -165, 50, 66, 156,
	50, -155, -143, -143, 54, 54, 54, 52, 52, 52,
	-89, -180, 124, -81, 14, 16, -181, -181, -181, -181,
	-31, 89, 253, 9, -70, -2, 108, -116, -167, 55,
	-158, 79, 57, 9, 10, 52, -89, -89, -89, 54,
	-169, -170, 143, 133, -37, -69, -181, 251, 47, 254,
	-93, -181, -116, 58, -154, -154, -156, -116, 54, 54,
	54, -176, -181, 53, -116, 52, 37, 252, 255, 54,
	53, -174, -170, 32, -89, 37, 127, -116, 145, 54,
	253, -51, 146, 254, 52, -180, 255, -156, -61, 142,
	54, -181, -181,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 542, 0, 311, 311, 311, 311, 311, 311, 0,
	69, 595, 0, 0, 0, 0, -2, 301, 302, 0,
	304, 305, 820, 820, 820, 820, 820, 0, 33, 34,
	818, 1, 3, 550, 0, 0, 315, 318, 313, 0,
	595, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	593, 593, 593, 70, 0, 0, 596, 0, 591, 0,
	591, 591, 591, 0, 260, 382, 616, 617, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 0, 0, 0, 0, 821, 821, 821, 821,
	0, 821, 289, 278, 280, 281, 282, 283, 821, 298,
	299, 288, 300, 303, 306, 307, 308, 309, 310, 27,
	554, 0, 0, 542, 29, 0, 311, 316, 317, 321,
	319, 320, 312, 0, 329, 333, 0, 390, 0, 395,
	397, -2, -2, 0, 432, 433, 434, 435, 436, 0,
	0, 0, 0, 0, 0, 0, 459, 460, 461, 462,
	527, 528, 529, 530, 531, 532, 533, 534, 399, 400,
	524, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 515, 0, 489, 489, 489, 489, 489, 489, 489,
	489, 0, 0, 0, 0, 0, 0, 340, 342, 343,
	344, 363, 0, 365, 0, 0, 41, 45, 0, 796,
	578, -2, -2, 0, 0, 614, 615, -2, 724, -2,
	612, 613, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 646, 647,
	648, 649, 650, 651, 652, 653, 654, 655, 656, 657,
	658, 659, 660, 661, 662, 663, 664, 665, 666, 667,
	668, 669, 670, 671, 672, 673, 674, 675, 676, 677,
	678, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 710, 711, 712, 713, 0, 81, 0, 0,
	821, 0, 71, 0, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 0, 0, 0, 259, 0, 261, 821,
	821, 821, 821, 821, 821, 821, 821, 270, 822, 823,
	271, 272, 273, 821, 821, 275, 0, 290, 0, 284,
	28, 819, 22, 0, 0, 551, 0, 543, 544, 547,
	550, 27, 318, 0, 323, 322, 314, 0, 330, 0,
	0, 0, 334, 0, 336, 337, 0, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 417, 418, 419,
	420, 421, 422, 423, 396, 0, 410, 0, 0, 0,
	452, 453, 454, 455, 456, 457, 0, 325, 27, 0,
	430, 0, 0, 0, 0, 0, 0, 0, 0, 321,
	0, 516, 0, 481, 0, 482, 483, 484, 485, 486,
	487, 488, 0, 325, 0, 0, 43, 0, 381, 0,
	0, 0, 0, 0, 0, 370, 0, 0, 373, 0,
	0, 0, 0, 364, 0, 0, 384, 768, 366, 0,
	368, 369, -2, 0, 0, 0, 39, 40, 0, 46,
	796, 48, 49, 0, 0, 0, 170, 586, 587, 588,
	584, 207, 0, 85, 91, 163, 87, 88, 89, 90,
	156, 108, 126, 127, 156, 156, 156, 156, 156, 167,
	167, 167, 167, 138, 139, 140, 141, 142, 143, 0,
	0, 121, 156, 156, 156, 125, 146, 147, 148, 149,
	150, 151, 152, 153, 109, 110, 111, 112, 113, 114,
	115, 158, 158, 158, 160, 160, 0, 64, 0, 74,
	0, 821, 0, 821, 79, 0, 0, 226, 0, 254,
	592, 0, 821, 257, 258, 383, 618, 619, 262, 263,
	264, 265, 266, 267, 268, 269, 274, 277, 291, 285,
	286, 279, 555, 0, 0, 0, 0, 0, 546, 548,
	549, 554, 30, 321, 0, 535, 0, 0, 0, 324,
	25, 391, 392, 394, 411, 0, 413, 415, 335, 331,
	0, 525, -2, 401, 402, 426, 427, 428, 0, 0,
	0, 0, 424, 406, 0, 437, 438, 439, 440, 441,
	442, 443, 444, 445, 446, 447, 448, 451, 500, 501,
	0, 449, 450, 458, 0, 0, 326, 327, 429, 0,
	573, 27, 0, 0, 0, 0, 0, 524, 0, 0,
	0, 0, 522, 519, 0, 0, 490, 0, 0, 0,
	0, 0, 0, 380, 388, 575, 0, 341, 359, 361,
	0, 356, 371, 372, 374, 0, 376, 0, 378, 379,
	345, 346, 347, 0, 0, 0, 0, 367, 388, 0,
	388, 42, 579, 47, 0, 0, 52, 53, 580, 581,
	582, 0, 80, 208, 210, 213, 214, 215, 82, 83,
	84, 0, 193, 0, 0, 0, 0, 0, 203, 188,
	189, 92, 0, 0, 0, 101, 0, 103, 105, 0,
	165, 164, 107, 0, 167, 167, 156, 167, 132, 133,
	170, 0, 170, 170, 170, 0, 0, 122, 123, 124,
	116, 0, 117, 118, 119, 0, 120, 0, 0, 821,
	66, 0, 72, 73, 67, 594, 68, 820, 69, 0,
	607, 227, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 0, 0, 253, 821, 256, 294, 0, 0,
	0, 552, 553, 0, 545, 23, 0, 589, 590, 536,
	537, 338, 412, 414, 416, 0, 325, 403, 424, 407,
	0, 404, 0, 0, 398, 463, 0, 0, 431, -2,
	466, 467, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 542, 0, 520, 0, 0, 480, 491, 492, 493,
	494, 567, 0, 0, -2, 0, 0, 542, 0, 0,
	0, 353, 360, 0, 0, 354, 0, 355, 375, 377,
	0, 0, 0, 0, 351, 542, 388, 38, 50, 51,
	0, 0, 57, 171, 0, 211, 0, 0, 0, 181,
	0, 0, 184, 0, 186, 187, 0, 204, 93, 94,
	95, 96, 97, 98, 99, 0, 102, 104, 106, 86,
	166, 0, 170, 170, 167, 170, 134, 0, 135, 136,
	137, 0, 154, 0, 0, 0, 0, 0, 65, 75,
	76, 0, 216, 0, 820, 0, 241, 242, 243, 244,
	245, 246, 247, 820, 0, 228, 229, 230, 231, 232,
	233, 234, 235, 236, 237, 238, 0, 820, 608, 609,
	610, 611, 0, 0, 255, 276, 0, 0, 292, 293,
	556, 0, 24, 388, 0, 332, 526, 0, 405, 0,
	425, 408, 464, 328, 0, 156, 156, 505, 156, 160,
	508, 156, 510, 156, 513, 0, 0, 0, 0, 525,
	0, 0, 0, 517, 479, 523, 0, 31, 0, 567,
	557, 569, 571, 0, 27, 0, 563, 0, 550, 576,
	389, 577, 357, 0, 362, 0, 0, 0, 365, 0,
	550, 37, 54, 55, 56, 209, 212, 0, 190, 156,
	0, 0, 182, 183, 185, 0, 100, 157, 128, 129,
	170, 130, 168, 169, 167, 0, 167, 0, 161, 0,
	0, 0, 0, 0, 0, 0, 239, 240, 220, 0,
	221, 223, 224, 225, 0, 203, 219, 295, 296, 538,
	339, 465, 409, 468, 502, 167, 506, 507, 509, 511,
	512, 514, 470, 469, 471, 0, 0, 474, 0, 0,
	0, 0, 0, 521, 0, 32, 0, 572, -2, 0,
	0, 0, 44, 35, 0, 349, 0, 0, 0, 384,
	352, 36, 173, 0, 192, 194, 199, 200, 0, 0,
	195, 203, 131, 170, 155, 170, 0, 0, 0, 0,
	0, 77, 78, 0, 0, 0, 204, 540, 0, 503,
	504, 0, 0, 0, 0, 495, 478, 518, 0, 570,
	0, -2, 0, 565, 564, 0, 358, 385, 386, 387,
	348, 172, 174, 0, 179, 0, 191, 0, 201, 202,
	0, 0, 144, 145, 159, 162, 61, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 472, 473, 475, 476,
	0, 0, 0, 0, 560, 27, 0, 350, 175, 176,
	0, 180, 178, 0, 0, 0, 0, 0, 0, 71,
	0, 249, 0, 0, 541, 539, 477, 0, 0, 0,
	568, -2, 566, 177, 196, 197, 0, 205, 63, 62,
	217, 74, 248, 0, 0, 0, 496, 0, 499, 0,
	0, 222, 250, 0, 0, 497, 0, 206, 0, 218,
	0, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	198, 251, 252,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 257,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:562
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:577
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:640
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:651
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:656
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:662
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:668
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:675
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:682
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:687
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:691
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:695
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:701
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:706
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:717
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:737
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:742
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:747
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:752
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:757
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:767
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:777
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:782
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:804
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 145:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1018
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1023
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1028
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1032
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1037
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1053
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1059
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1067
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1076
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1085
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1089
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1093
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1098
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1102
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1108
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1112
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1118
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1122
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1128
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1132
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1137
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1143
		{
			yyVAL.str = ""
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1147
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1157
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1161
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1165
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1183
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1187
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1193
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1197
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1203
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1210
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1216
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1222
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1228
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 198:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1236
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1248
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1252
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1256
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1260
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1265
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1272
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1276
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1281
		{
			yyVAL.str = ""
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1285
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1289
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1297
		{
			yyVAL.str = yyDollar[1].str
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1301
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1305
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1311
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1315
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1319
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1325
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 217:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1329
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 218:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1343
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1357
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1366
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1370
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1374
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1387
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1397
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1402
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1407
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1411
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1443
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1449
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 251:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1459
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 252:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1463
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1469
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1475
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1483
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1488
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1496
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1500
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1510
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1515
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1529
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1570
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1578
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1588
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1592
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1596
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1600
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1604
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1608
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1612
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1638
		{
			yyVAL.str = ""
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1642
		{
			yyVAL.str = "extended "
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1648
		{
			yyVAL.str = ""
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1652
		{
			yyVAL.str = "full "
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1658
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1662
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1666
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1672
		{
			yyVAL.showFilter = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1676
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1680
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1686
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1690
		{
			yyVAL.str = SessionStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.str = GlobalStr
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1700
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1710
		{
			yyVAL.statement = &Begin{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1714
		{
			yyVAL.statement = &Begin{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.statement = &Commit{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1726
		{
			yyVAL.statement = &Rollback{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1732
		{
			yyVAL.statement = &OtherRead{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1736
		{
			yyVAL.statement = &OtherRead{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1740
		{
			yyVAL.statement = &OtherRead{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1744
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1748
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1753
		{
			setAllowComments(yylex, true)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1757
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1763
		{
			yyVAL.bytes2 = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1767
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1773
		{
			yyVAL.str = UnionStr
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1777
		{
			yyVAL.str = UnionAllStr
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1781
		{
			yyVAL.str = UnionDistinctStr
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1786
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1790
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1794
		{
			yyVAL.str = SQLCacheStr
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1799
		{
			yyVAL.str = ""
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1803
		{
			yyVAL.str = DistinctStr
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1808
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1812
		{
			yyVAL.str = StraightJoinHint
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1817
		{
			yyVAL.selectExprs = nil
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1821
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1827
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1831
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1841
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1845
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1849
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1854
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1858
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1862
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1869
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1874
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1884
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1888
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1898
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1902
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1906
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1912
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1916
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1922
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1926
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1932
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1936
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 353:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1949
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1953
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1957
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1967
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1969
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1973
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1975
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1979
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1981
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1984
		{
			yyVAL.empty = struct{}{}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1986
		{
			yyVAL.empty = struct{}{}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1989
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1993
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1997
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2004
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2010
		{
			yyVAL.str = JoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2014
		{
			yyVAL.str = JoinStr
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2018
		{
			yyVAL.str = JoinStr
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2024
		{
			yyVAL.str = StraightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2030
		{
			yyVAL.str = LeftJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2034
		{
			yyVAL.str = LeftJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2038
		{
			yyVAL.str = RightJoinStr
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2042
		{
			yyVAL.str = RightJoinStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2048
		{
			yyVAL.str = NaturalJoinStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2052
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2062
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2066
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2072
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2076
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2081
		{
			yyVAL.indexHints = nil
		}
	case 385:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2085
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2089
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2093
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2098
		{
			yyVAL.expr = nil
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2102
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2108
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2112
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2116
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2120
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2124
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2128
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2132
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2138
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2142
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2148
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2152
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2158
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2162
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2166
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2170
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2174
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2178
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2182
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2186
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 409:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2190
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2194
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2200
		{
			yyVAL.str = IsNullStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2204
		{
			yyVAL.str = IsNotNullStr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2208
		{
			yyVAL.str = IsTrueStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2212
		{
			yyVAL.str = IsNotTrueStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2216
		{
			yyVAL.str = IsFalseStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2220
		{
			yyVAL.str = IsNotFalseStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2226
		{
			yyVAL.str = EqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2230
		{
			yyVAL.str = LessThanStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2234
		{
			yyVAL.str = GreaterThanStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.str = LessEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2242
		{
			yyVAL.str = GreaterEqualStr
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2246
		{
			yyVAL.str = NotEqualStr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2250
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2255
		{
			yyVAL.expr = nil
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2259
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2265
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2269
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2273
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2279
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2285
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2289
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2295
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2299
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2303
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2307
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2315
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2319
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2323
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2327
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2331
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2335
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2339
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2343
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2347
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2351
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2355
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2359
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2363
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2383
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2391
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2405
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2409
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2413
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2431
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2435
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2439
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2449
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 469:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 470:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 472:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 474:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2481
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 475:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2485
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2489
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 477:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2493
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 478:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2497
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2505
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2515
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2519
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2523
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2527
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2537
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2547
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2579
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2583
		{
			yyVAL.str = BooleanModeStr
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2587
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2591
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2595
		{
			yyVAL.str = QueryExpansionStr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2601
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2605
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2611
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2615
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2619
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2623
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2627
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2637
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2641
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2645
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2649
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2653
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2657
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2661
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2666
		{
			yyVAL.expr = nil
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2670
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2675
		{
			yyVAL.str = string("")
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2679
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2685
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2689
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2695
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2700
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2704
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2710
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2714
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2718
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2724
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2728
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2732
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2736
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2740
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2744
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2748
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2752
		{
			yyVAL.expr = &NullVal{}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2758
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2767
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2771
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2776
		{
			yyVAL.exprs = nil
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2780
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2785
		{
			yyVAL.expr = nil
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2789
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 542:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2794
		{
			yyVAL.orderBy = nil
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2798
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2808
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2814
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2819
		{
			yyVAL.str = AscScr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2823
		{
			yyVAL.str = AscScr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2827
		{
			yyVAL.str = DescScr
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2832
		{
			yyVAL.limit = nil
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2836
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2840
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2844
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2849
		{
			yyVAL.str = ""
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.str = ForUpdateStr
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2857
		{
			yyVAL.str = ShareModeStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2870
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2874
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2878
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2883
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2887
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2891
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2898
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2902
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2906
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2910
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2915
		{
			yyVAL.updateExprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2919
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2925
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2929
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2935
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2939
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2945
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2951
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2961
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2965
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2971
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2977
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2981
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2987
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2991
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2995
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3002
		{
			yyVAL.bytes = []byte("charset")
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3009
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3013
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3017
		{
			yyVAL.expr = &Default{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3026
		{
			yyVAL.byt = 0
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3028
		{
			yyVAL.byt = 1
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3031
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3033
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3036
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3038
		{
			yyVAL.str = IgnoreStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3042
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3044
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3046
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3048
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3050
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3052
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3054
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3056
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3058
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3060
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3063
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3065
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3067
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3071
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3088
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3094
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3098
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3105
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3329
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3338
		{
			decNesting(yylex)
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3343
		{
			forceEOF(yylex)
		}
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3348
		{
			forceEOF(yylex)
		}
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3352
		{
			forceEOF(yylex)
		}
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3356
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
