// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	triggerBody          []Statement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEFORE = 57496
const AFTER = 57497
const EACH = 57498
const ROW = 57499
const BEGIN = 57500
const START = 57501
const TRANSACTION = 57502
const COMMIT = 57503
const ROLLBACK = 57504
const BIT = 57505
const TINYINT = 57506
const SMALLINT = 57507
const SMALLSERIAL = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const SERIAL = 57512
const BIGINT = 57513
const BIGSERIAL = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const PRECISION = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const SMALLMONEY = 57522
const MONEY = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const DATETIMEOFFSET = 57528
const DATETIME2 = 57529
const SMALLDATETIME = 57530
const CHAR = 57531
const VARCHAR = 57532
const VARYING = 57533
const BOOL = 57534
const CHARACTER = 57535
const VARBINARY = 57536
const NCHAR = 57537
const NVARCHAR = 57538
const NTEXT = 57539
const UUID = 57540
const TEXT = 57541
const TINYTEXT = 57542
const MEDIUMTEXT = 57543
const LONGTEXT = 57544
const CITEXT = 57545
const BLOB = 57546
const TINYBLOB = 57547
const MEDIUMBLOB = 57548
const LONGBLOB = 57549
const JSON = 57550
const JSONB = 57551
const ENUM = 57552
const GEOMETRY = 57553
const POINT = 57554
const LINESTRING = 57555
const POLYGON = 57556
const GEOMETRYCOLLECTION = 57557
const MULTIPOINT = 57558
const MULTILINESTRING = 57559
const MULTIPOLYGON = 57560
const ARRAY = 57561
const NOW = 57562
const GETDATE = 57563
const BPCHAR = 57564
const NULLX = 57565
const AUTO_INCREMENT = 57566
const APPROXNUM = 57567
const SIGNED = 57568
const UNSIGNED = 57569
const ZEROFILL = 57570
const ZONE = 57571
const AUTOINCREMENT = 57572
const DATABASES = 57573
const TABLES = 57574
const VITESS_KEYSPACES = 57575
const VITESS_SHARDS = 57576
const VITESS_TABLETS = 57577
const VSCHEMA_TABLES = 57578
const EXTENDED = 57579
const FULL = 57580
const PROCESSLIST = 57581
const NAMES = 57582
const CHARSET = 57583
const GLOBAL = 57584
const SESSION = 57585
const ISOLATION = 57586
const LEVEL = 57587
const READ = 57588
const WRITE = 57589
const ONLY = 57590
const REPEATABLE = 57591
const COMMITTED = 57592
const UNCOMMITTED = 57593
const SERIALIZABLE = 57594
const CURRENT_TIMESTAMP = 57595
const DATABASE = 57596
const CURRENT_DATE = 57597
const CURRENT_TIME = 57598
const LOCALTIME = 57599
const LOCALTIMESTAMP = 57600
const UTC_DATE = 57601
const UTC_TIME = 57602
const UTC_TIMESTAMP = 57603
const REPLACE = 57604
const CONVERT = 57605
const CAST = 57606
const SUBSTR = 57607
const SUBSTRING = 57608
const GROUP_CONCAT = 57609
const SEPARATOR = 57610
const INHERIT = 57611
const MATCH = 57612
const AGAINST = 57613
const BOOLEAN = 57614
const LANGUAGE = 57615
const WITH = 57616
const WITHOUT = 57617
const PARSER = 57618
const QUERY = 57619
const EXPANSION = 57620
const UNUSED = 57621
const GENERATED = 57622
const ALWAYS = 57623
const IDENTITY = 57624
const SEQUENCE = 57625
const INCREMENT = 57626
const MINVALUE = 57627
const CACHE = 57628
const CYCLE = 57629
const OWNED = 57630
const NONE = 57631
const CLUSTERED = 57632
const NONCLUSTERED = 57633
const REPLICATION = 57634
const INCLUDE = 57635
const TYPECAST = 57636
const CHECK = 57637

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 104,
	-2, 94,
	-1, 36,
	153, 416,
	154, 416,
	-2, 406,
	-1, 272,
	109, 749,
	-2, 745,
	-1, 273,
	109, 750,
	-2, 746,
	-1, 343,
	80, 943,
	-2, 58,
	-1, 344,
	80, 894,
	-2, 59,
	-1, 349,
	80, 873,
	-2, 716,
	-1, 351,
	80, 917,
	-2, 718,
	-1, 652,
	51, 41,
	53, 41,
	-2, 43,
	-1, 797,
	109, 752,
	-2, 748,
	-1, 1039,
	5, 28,
	-2, 551,
	-1, 1064,
	5, 27,
	-2, 690,
	-1, 1165,
	5, 27,
	-2, 64,
	-1, 1382,
	5, 28,
	-2, 691,
	-1, 1465,
	5, 27,
	-2, 693,
	-1, 1590,
	5, 28,
	-2, 694,
}

const yyPrivate = 57344

const yyLast = 14695

var yyAct = [...]int{
	273, 1580, 1515, 1067, 1478, 974, 1475, 270, 729, 861,
	498, 1597, 1098, 579, 1388, 1519, 1401, 1252, 1542, 578,
	3, 1156, 1279, 464, 773, 302, 1280, 879, 1167, 1253,
	1101, 276, 644, 903, 646, 89, 909, 277, 89, 1249,
	1129, 902, 969, 1083, 982, 251, 862, 822, 923, 1123,
	833, 53, 1031, 830, 266, 245, 348, 1225, 66, 735,
	1072, 964, 89, 89, 353, 1153, 849, 250, 662, 353,
	952, 918, 353, 353, 345, 799, 511, 517, 89, 462,
	89, 648, 661, 858, 279, 633, 89, 942, 523, 330,
	342, 275, 602, 1013, 328, 335, 260, 339, 337, 246,
	247, 248, 249, 607, 531, 608, 1137, 939, 545, 52,
	264, 555, 1661, 1305, 936, 832, 555, 1622, 1407, 329,
	465, 466, 1292, 593, 1293, 1654, 1414, 1695, 1638, 1691,
	86, 1588, 1535, 544, 543, 553, 554, 546, 547, 548,
	549, 550, 551, 552, 545, 1121, 333, 555, 553, 554,
	546, 547, 548, 549, 550, 551, 552, 545, 338, 1547,
	555, 1157, 1158, 1682, 975, 1626, 1647, 1637, 1244, 1373,
	1611, 1376, 1546, 477, 1587, 478, 475, 1091, 1275, 1276,
	1090, 485, 663, 1092, 664, 938, 1274, 539, 892, 542,
	506, 1136, 48, 26, 27, 557, 558, 559, 560, 561,
	562, 563, 898, 540, 541, 538, 544, 543, 553, 554,
	546, 547, 548, 549, 550, 551, 552, 545, 893, 894,
	555, 1431, 1430, 1133, 89, 1135, 1134, 764, 353, 353,
	353, 353, 1139, 353, 765, 941, 953, 1506, 853, 1325,
	353, 544, 543, 553, 554, 546, 547, 548, 549, 550,
	551, 552, 545, 1324, 1365, 555, 546, 547, 548, 549,
	550, 551, 552, 545, 1363, 1454, 555, 353, 943, 244,
	548, 549, 550, 551, 552, 545, 520, 965, 555, 1575,
	1517, 737, 738, 1653, 1494, 1655, 491, 1565, 570, 571,
	572, 573, 574, 575, 576, 465, 466, 1335, 1336, 1680,
	736, 1125, 1126, 1127, 502, 503, 519, 514, 518, 1130,
	1128, 299, 300, 84, 80, 81, 82, 556, 1690, 487,
	1581, 1203, 556, 859, 536, 1340, 1582, 919, 89, 1462,
	1372, 510, 1409, 1536, 1408, 89, 89, 89, 1115, 1114,
	1341, 353, 920, 1404, 1419, 1286, 1103, 353, 1369, 510,
	493, 345, 495, 556, 1418, 1669, 1349, 1526, 580, 566,
	1421, 880, 882, 1287, 510, 480, 556, 591, 544, 543,
	553, 554, 546, 547, 548, 549, 550, 551, 552, 545,
	492, 494, 555, 1420, 470, 78, 544, 543, 553, 554,
	546, 547, 548, 549, 550, 551, 552, 545, 1295, 1646,
	555, 544, 543, 553, 554, 546, 547, 548, 549, 550,
	551, 552, 545, 1547, 1439, 555, 1586, 467, 966, 333,
	953, 737, 738, 628, 946, 743, 556, 1120, 77, 1082,
	78, 1081, 652, 1108, 476, 653, 881, 1080, 659, 595,
	596, 597, 598, 599, 600, 601, 544, 543, 553, 554,
	546, 547, 548, 549, 550, 551, 552, 545, 727, 223,
	555, 556, 301, 49, 1106, 79, 83, 1204, 89, 1402,
	1403, 1405, 556, 1200, 1686, 89, 1540, 89, 353, 1385,
	89, 1132, 1136, 89, 556, 568, 569, 89, 1212, 353,
	353, 353, 353, 353, 353, 353, 353, 1047, 919, 1025,
	771, 535, 490, 353, 353, 486, 900, 899, 89, 768,
	1008, 57, 528, 920, 1133, 1319, 1135, 1134, 530, 1558,
	1208, 850, 1557, 353, 529, 528, 347, 89, 530, 919,
	1556, 468, 1555, 353, 472, 473, 59, 60, 61, 62,
	63, 530, 1554, 752, 920, 798, 796, 1553, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 728, 800, 776, 1320, 680, 1552, 676,
	739, 1201, 740, 1199, 1550, 744, 1332, 353, 747, 806,
	750, 1070, 665, 786, 787, 1246, 1202, 1493, 556, 1009,
	1100, 732, 797, 804, 805, 803, 1207, 469, 1111, 75,
	479, 837, 850, 766, 1054, 1044, 556, 543, 553, 554,
	546, 547, 548, 549, 550, 551, 552, 545, 778, 1598,
	555, 556, 785, 801, 842, 845, 525, 76, 89, 795,
	851, 89, 89, 89, 89, 89, 580, 793, 1599, 840,
	841, 510, 1496, 89, 1672, 1110, 89, 70, 73, 825,
	89, 1492, 1671, 529, 528, 89, 89, 529, 528, 353,
	827, 828, 71, 74, 1100, 837, 556, 863, 471, 345,
	530, 474, 353, 1100, 530, 1652, 1651, 855, 847, 72,
	68, 1650, 904, 482, 483, 484, 1099, 887, 327, 1600,
	347, 347, 347, 347, 1551, 347, 529, 528, 838, 839,
	50, 1596, 347, 1248, 846, 789, 791, 792, 1100, 1504,
	802, 790, 1433, 530, 1432, 333, 333, 333, 333, 333,
	897, 865, 866, 860, 868, 1301, 1648, 876, 353, 533,
	333, 884, 353, 1162, 353, 89, 885, 89, 854, 333,
	856, 857, 89, 890, 89, 774, 775, 89, 353, 889,
	864, 888, 907, 867, 1022, 1023, 1024, 1424, 1160, 509,
	1140, 1140, 954, 955, 956, 957, 463, 971, 1649, 521,
	944, 945, 947, 948, 949, 1461, 950, 951, 823, 1043,
	824, 1042, 796, 967, 968, 1370, 1423, 1428, 1351, 1548,
	1140, 529, 528, 960, 961, 962, 1154, 963, 529, 528,
	69, 1117, 1290, 347, 1289, 1288, 1180, 1109, 530, 667,
	1093, 1226, 1028, 1029, 1030, 530, 21, 770, 1573, 1699,
	1469, 1688, 1398, 1681, 1011, 1012, 556, 518, 797, 800,
	981, 919, 986, 1398, 1660, 510, 914, 1003, 913, 1004,
	915, 916, 1005, 977, 1228, 917, 920, 1398, 1659, 1568,
	1014, 826, 769, 1015, 1398, 1645, 1567, 544, 543, 553,
	554, 546, 547, 548, 549, 550, 551, 552, 545, 529,
	528, 555, 255, 1573, 1644, 1511, 1181, 1177, 1064, 1027,
	1182, 1179, 1178, 749, 353, 74, 530, 89, 801, 1085,
	1038, 1087, 1641, 1640, 1633, 510, 1183, 1398, 1630, 1021,
	1230, 748, 1176, 353, 1235, 1055, 1229, 1469, 1578, 1398,
	1569, 1227, 733, 904, 353, 1053, 731, 1233, 488, 1086,
	1469, 1502, 1469, 510, 1510, 353, 1469, 1470, 1077, 481,
	1231, 1232, 1398, 1397, 89, 463, 1095, 1271, 510, 1505,
	347, 1384, 510, 1425, 1116, 1328, 1327, 1036, 1234, 1236,
	656, 347, 347, 347, 347, 347, 347, 347, 347, 1416,
	1088, 1322, 1323, 1051, 1250, 347, 347, 1068, 1131, 1322,
	1321, 333, 1037, 510, 630, 510, 353, 835, 510, 672,
	671, 1312, 1574, 1159, 1573, 780, 1168, 1104, 1105, 1107,
	657, 1069, 655, 1165, 1068, 533, 23, 54, 347, 835,
	629, 635, 638, 639, 640, 636, 353, 637, 641, 89,
	89, 1073, 1074, 1380, 50, 1141, 1142, 89, 1144, 1145,
	1146, 630, 1464, 1215, 630, 1155, 353, 1415, 1161, 1069,
	1331, 1049, 630, 1046, 1143, 1037, 1217, 1435, 1434, 829,
	1221, 1222, 50, 1173, 1326, 1094, 1172, 1174, 23, 843,
	843, 891, 1037, 1239, 1240, 843, 1242, 1243, 1241, 292,
	291, 294, 295, 296, 297, 1037, 353, 353, 293, 298,
	1068, 1062, 1251, 1048, 1063, 1045, 23, 556, 1612, 658,
	1218, 1219, 886, 772, 655, 1256, 257, 1692, 1224, 1254,
	1273, 1237, 843, 1658, 50, 353, 1635, 353, 353, 730,
	863, 1571, 1238, 1245, 797, 904, 863, 904, 1570, 1247,
	1259, 1562, 1213, 1561, 1523, 1261, 1503, 1448, 1220, 1260,
	943, 347, 50, 970, 1262, 1263, 1311, 1310, 1264, 1308,
	1278, 1266, 50, 1291, 347, 1298, 1277, 1272, 544, 543,
	553, 554, 546, 547, 548, 549, 550, 551, 552, 545,
	1265, 965, 555, 1122, 1296, 1147, 1131, 1149, 1150, 1151,
	1152, 1294, 1163, 1164, 89, 353, 1097, 959, 1616, 1073,
	1074, 1079, 89, 958, 1302, 65, 1543, 353, 1436, 1250,
	1171, 1618, 1076, 746, 734, 507, 353, 303, 47, 784,
	972, 1078, 873, 870, 347, 869, 347, 874, 89, 875,
	1613, 639, 640, 1666, 353, 635, 638, 639, 640, 636,
	347, 637, 641, 353, 1315, 871, 89, 1338, 1353, 1636,
	872, 1307, 1309, 1217, 261, 262, 1211, 1010, 1356, 524,
	1664, 1342, 1020, 1019, 347, 47, 512, 1449, 1148, 670,
	1344, 1350, 522, 256, 489, 979, 1300, 513, 1354, 334,
	1378, 774, 775, 745, 1347, 1446, 1299, 1170, 973, 1329,
	643, 258, 259, 1352, 524, 1445, 353, 1337, 353, 353,
	353, 89, 353, 1361, 1334, 1285, 252, 1018, 353, 1656,
	777, 1529, 1391, 1392, 1393, 1017, 253, 54, 904, 1528,
	1452, 1379, 1069, 1346, 983, 984, 985, 1284, 1283, 353,
	333, 1406, 526, 1377, 1560, 1394, 1387, 1559, 1411, 1537,
	580, 1095, 1113, 1413, 1358, 1359, 1410, 1360, 1396, 767,
	56, 1362, 58, 1364, 1175, 1614, 1615, 1617, 1619, 1620,
	1521, 7, 353, 353, 1339, 1131, 1522, 6, 834, 836,
	353, 654, 1168, 904, 1313, 1314, 1084, 1316, 1317, 1318,
	353, 51, 1412, 1417, 852, 1520, 5, 1, 556, 1441,
	1437, 1442, 1443, 1444, 1518, 347, 1438, 1566, 1119, 1399,
	1400, 1564, 67, 1440, 1625, 1572, 1102, 1455, 1456, 1304,
	1457, 1458, 1459, 1333, 1169, 353, 353, 1112, 1184, 976,
	1166, 991, 1427, 1579, 1429, 1593, 1476, 911, 901, 353,
	461, 64, 1549, 1465, 878, 912, 1254, 910, 908, 353,
	1463, 673, 937, 1138, 1491, 497, 497, 497, 497, 1495,
	497, 940, 1474, 679, 1490, 1489, 677, 497, 678, 675,
	1453, 681, 674, 1499, 231, 353, 353, 89, 347, 1497,
	353, 1507, 340, 642, 47, 666, 527, 1198, 1197, 353,
	987, 1206, 763, 1007, 505, 233, 564, 1512, 1016, 565,
	1089, 346, 567, 1524, 1621, 1257, 516, 1527, 347, 1451,
	353, 1052, 590, 848, 278, 788, 290, 496, 287, 289,
	288, 1544, 1538, 779, 1061, 537, 1539, 268, 347, 577,
	1254, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	332, 592, 594, 594, 594, 594, 594, 594, 594, 594,
	347, 622, 623, 624, 625, 626, 634, 632, 1426, 631,
	1075, 1071, 645, 331, 353, 843, 1214, 1375, 1258, 1084,
	1534, 843, 1514, 783, 1576, 25, 55, 263, 19, 18,
	17, 353, 20, 1584, 353, 16, 1577, 1589, 353, 15,
	14, 1594, 29, 13, 12, 1563, 11, 347, 10, 347,
	1281, 9, 353, 353, 1608, 8, 1601, 1602, 1603, 1604,
	1605, 353, 353, 4, 353, 863, 1606, 1607, 254, 22,
	2, 0, 353, 1583, 580, 1609, 1034, 1631, 0, 0,
	1035, 1629, 0, 1623, 1624, 0, 0, 1039, 1040, 1041,
	0, 0, 0, 0, 0, 1479, 1050, 0, 0, 0,
	0, 1056, 0, 0, 1057, 1058, 1059, 1060, 1481, 1642,
	1643, 0, 0, 0, 0, 1657, 0, 1330, 0, 1628,
	1508, 0, 1509, 0, 0, 1663, 353, 1662, 0, 1343,
	353, 0, 0, 0, 0, 0, 1668, 0, 1345, 0,
	0, 0, 1670, 0, 0, 0, 0, 89, 1665, 353,
	0, 0, 0, 1677, 1675, 497, 1348, 1678, 0, 0,
	89, 0, 0, 1676, 0, 347, 497, 497, 497, 497,
	497, 497, 497, 497, 1689, 0, 1480, 353, 0, 1685,
	497, 497, 0, 353, 1687, 1696, 0, 1693, 0, 0,
	0, 0, 1697, 0, 0, 0, 499, 500, 501, 0,
	504, 0, 0, 0, 0, 0, 1679, 508, 1482, 1483,
	1484, 1485, 1486, 1487, 1488, 0, 0, 0, 1389, 0,
	1389, 1389, 1389, 0, 1395, 0, 0, 0, 0, 0,
	347, 0, 544, 543, 553, 554, 546, 547, 548, 549,
	550, 551, 552, 545, 1033, 47, 555, 0, 0, 0,
	0, 1389, 0, 0, 0, 1684, 0, 0, 0, 581,
	936, 0, 0, 0, 544, 543, 553, 554, 546, 547,
	548, 549, 550, 551, 552, 545, 0, 997, 555, 0,
	0, 1032, 925, 0, 347, 347, 1223, 0, 0, 0,
	996, 0, 1447, 0, 0, 0, 932, 0, 921, 0,
	0, 0, 1450, 0, 922, 0, 0, 0, 334, 334,
	334, 334, 334, 0, 1479, 0, 0, 1001, 0, 0,
	0, 0, 0, 645, 0, 883, 995, 1481, 0, 0,
	0, 0, 334, 1270, 0, 1477, 0, 1467, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 0, 0, 0, 0, 515, 928, 0, 924,
	933, 1498, 0, 0, 0, 0, 930, 929, 0, 0,
	0, 0, 0, 0, 0, 992, 989, 990, 0, 988,
	0, 0, 0, 0, 0, 0, 0, 1281, 1513, 0,
	0, 87, 1516, 0, 243, 1480, 0, 0, 0, 1303,
	0, 1389, 0, 0, 1125, 1126, 1127, 999, 1002, 497,
	0, 497, 1130, 1128, 299, 300, 267, 0, 87, 87,
	0, 0, 1541, 0, 0, 497, 0, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 87, 0, 87, 0, 0, 0,
	0, 0, 87, 0, 0, 742, 0, 0, 0, 0,
	0, 0, 556, 0, 0, 0, 753, 754, 755, 756,
	757, 758, 759, 760, 0, 0, 0, 0, 1355, 0,
	761, 762, 994, 926, 1026, 1357, 1281, 0, 0, 927,
	0, 0, 0, 0, 556, 0, 0, 1366, 1367, 1368,
	843, 0, 1371, 1591, 603, 0, 1592, 0, 0, 0,
	1595, 0, 0, 993, 0, 1381, 1382, 1383, 0, 1386,
	0, 0, 0, 0, 1516, 1281, 0, 0, 0, 0,
	0, 0, 0, 1281, 1281, 0, 1627, 605, 0, 934,
	0, 935, 0, 1124, 1634, 0, 1065, 1066, 1125, 1126,
	1127, 0, 998, 0, 931, 0, 1130, 1128, 299, 300,
	0, 0, 0, 0, 1545, 0, 1422, 0, 1000, 0,
	0, 0, 0, 0, 334, 0, 0, 0, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 0, 0,
	87, 0, 0, 0, 1132, 1136, 0, 0, 1281, 606,
	0, 0, 1667, 0, 0, 0, 0, 620, 604, 1190,
	0, 0, 0, 0, 609, 0, 0, 0, 0, 0,
	0, 1389, 0, 0, 0, 0, 0, 1133, 0, 1135,
	1134, 0, 0, 0, 0, 1460, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
	0, 1471, 1472, 1473, 0, 1516, 0, 0, 0, 0,
	0, 47, 239, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 0, 1191, 0, 0, 0, 0, 1193,
	1186, 1187, 0, 1194, 1189, 1188, 0, 621, 1196, 1192,
	0, 0, 0, 497, 87, 0, 0, 0, 0, 1195,
	0, 87, 650, 87, 0, 1185, 0, 0, 0, 978,
	0, 980, 0, 224, 0, 1530, 1531, 1532, 1533, 226,
	0, 0, 0, 0, 0, 1006, 232, 228, 1132, 1136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1255, 0, 47, 0, 0, 230, 0, 0, 234,
	0, 1133, 0, 1135, 1134, 0, 0, 0, 1267, 1268,
	1269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1585, 0, 0, 0, 0, 1590,
	0, 0, 0, 0, 1297, 23, 24, 48, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 225, 0, 0,
	1306, 0, 0, 1610, 42, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 1632,
	0, 87, 0, 87, 0, 0, 87, 37, 0, 87,
	0, 50, 0, 751, 0, 227, 0, 235, 236, 237,
	238, 242, 0, 0, 0, 0, 241, 240, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 334, 0, 0, 0, 0, 0, 0,
	0, 30, 31, 33, 32, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1683, 0, 0,
	0, 0, 1374, 0, 0, 36, 43, 44, 0, 0,
	45, 46, 34, 0, 267, 0, 0, 0, 0, 267,
	267, 0, 0, 844, 844, 267, 0, 1700, 1701, 844,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 0,
	0, 0, 0, 1205, 0, 0, 0, 0, 0, 267,
	267, 267, 267, 0, 87, 0, 844, 87, 87, 87,
	87, 87, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 87, 0, 0, 0, 650, 0, 0, 0,
	0, 87, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1255, 0,
	0, 1466, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1500,
	0, 87, 0, 87, 0, 0, 0, 0, 87, 0,
	87, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 1525, 751, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 1255, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1639, 0, 0, 0, 0, 0, 0, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 0, 720, 721,
	1118, 722, 723, 724, 726, 725, 705, 706, 707, 711,
	709, 708, 710, 682, 684, 0, 620, 683, 689, 685,
	686, 687, 701, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 702, 712, 713, 714, 715, 716,
	717, 718, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1209, 1210, 0, 1694, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 844,
	0, 0, 0, 0, 0, 844, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 449, 439,
	0, 408, 451, 381, 397, 459, 399, 400, 430, 365,
	416, 154, 394, 92, 384, 358, 391, 359, 382, 410,
	116, 380, 441, 419, 130, 457, 133, 424, 0, 176,
	142, 0, 0, 412, 443, 414, 436, 407, 431, 372,
	423, 452, 395, 427, 453, 0, 0, 650, 352, 0,
	905, 906, 0, 0, 0, 0, 0, 105, 0, 426,
	448, 393, 460, 429, 357, 425, 0, 363, 366, 458,
	446, 388, 389, 1096, 0, 0, 0, 0, 0, 0,
	411, 415, 433, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 385, 0, 422, 0, 0, 0, 369, 364,
	0, 409, 0, 0, 0, 371, 0, 386, 434, 0,
	354, 438, 444, 406, 203, 447, 403, 402, 161, 0,
	108, 0, 182, 120, 396, 131, 432, 450, 413, 442,
	383, 392, 110, 390, 168, 155, 194, 421, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 387, 437, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 87, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 379, 445, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 428, 169,
	107, 195, 175, 375, 378, 373, 374, 417, 418, 454,
	455, 456, 435, 370, 0, 376, 377, 0, 440, 125,
	420, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	398, 356, 401, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 170, 405, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 449, 439, 0, 408, 451,
	381, 397, 459, 399, 400, 430, 365, 416, 154, 394,
	92, 384, 358, 391, 359, 382, 410, 116, 380, 441,
	419, 130, 457, 133, 424, 0, 176, 142, 0, 0,
	412, 443, 414, 436, 407, 431, 372, 423, 452, 395,
	427, 453, 0, 0, 0, 352, 0, 905, 906, 0,
	0, 0, 0, 0, 105, 0, 426, 448, 393, 460,
	429, 357, 425, 0, 363, 366, 458, 446, 388, 389,
	0, 0, 0, 0, 0, 0, 0, 411, 415, 433,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 422, 0, 0, 0, 369, 364, 0, 409, 0,
	0, 0, 371, 1674, 386, 434, 0, 354, 438, 444,
	406, 203, 447, 403, 402, 161, 87, 108, 0, 182,
	120, 396, 131, 432, 450, 413, 442, 383, 392, 110,
	390, 168, 155, 194, 421, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 387, 437, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 379, 445,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 428, 169, 107, 195, 175,
	375, 378, 373, 374, 417, 418, 454, 455, 456, 435,
	370, 0, 376, 377, 0, 440, 125, 420, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 398, 356, 401,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 170,
	405, 0, 104, 449, 439, 0, 408, 451, 381, 397,
	459, 399, 400, 430, 365, 416, 154, 394, 92, 384,
	358, 391, 359, 382, 410, 116, 380, 441, 419, 130,
	457, 133, 424, 0, 176, 142, 0, 0, 412, 443,
	414, 436, 407, 431, 372, 423, 452, 395, 427, 453,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 426, 448, 393, 460, 429, 357,
	425, 0, 363, 366, 458, 446, 388, 389, 0, 0,
	0, 0, 0, 0, 0, 411, 415, 433, 404, 0,
	0, 0, 0, 0, 0, 1216, 0, 385, 0, 422,
	0, 0, 0, 369, 364, 0, 409, 0, 0, 0,
	371, 0, 386, 434, 0, 354, 438, 444, 406, 203,
	447, 403, 402, 161, 0, 108, 0, 182, 120, 396,
	131, 432, 450, 413, 442, 383, 392, 110, 390, 168,
	155, 194, 421, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 387, 437, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 379, 445, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 428, 169, 107, 195, 175, 375, 378,
	373, 374, 417, 418, 454, 455, 456, 435, 370, 0,
	376, 377, 0, 440, 125, 420, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 398, 356, 401, 0, 0,
	0, 0, 0, 0, 0, 367, 368, 170, 405, 0,
	104, 449, 439, 0, 408, 451, 381, 397, 459, 399,
	400, 430, 365, 416, 154, 394, 92, 384, 358, 391,
	359, 382, 410, 116, 380, 441, 419, 130, 457, 133,
	424, 0, 176, 142, 0, 0, 412, 443, 414, 436,
	407, 431, 372, 423, 452, 395, 427, 453, 50, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 426, 448, 393, 460, 429, 357, 425, 0,
	363, 366, 458, 446, 388, 389, 0, 0, 0, 0,
	0, 0, 0, 411, 415, 433, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 0, 422, 0, 0,
	0, 369, 364, 0, 409, 0, 0, 0, 371, 0,
	386, 434, 0, 354, 438, 444, 406, 203, 447, 403,
	402, 161, 0, 108, 0, 182, 120, 396, 131, 432,
	450, 413, 442, 383, 392, 110, 390, 168, 155, 194,
	421, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 387,
	437, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 379, 445, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 428, 169, 107, 195, 175, 375, 378, 373, 374,
	417, 418, 454, 455, 456, 435, 370, 0, 376, 377,
	0, 440, 125, 420, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 398, 356, 401, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 170, 405, 0, 104, 449,
	439, 0, 408, 451, 381, 397, 459, 399, 400, 430,
	365, 416, 154, 394, 92, 384, 358, 391, 359, 382,
	410, 116, 380, 441, 419, 130, 457, 133, 424, 0,
	176, 142, 0, 0, 412, 443, 414, 436, 407, 431,
	372, 423, 452, 395, 427, 453, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	426, 448, 393, 460, 429, 357, 425, 0, 363, 366,
	458, 446, 388, 389, 0, 0, 0, 0, 0, 0,
	0, 411, 415, 433, 404, 0, 0, 0, 0, 0,
	0, 794, 0, 385, 0, 422, 0, 0, 0, 369,
	364, 0, 409, 0, 0, 0, 371, 0, 386, 434,
	0, 354, 438, 444, 406, 203, 447, 403, 402, 161,
	0, 108, 0, 182, 120, 396, 131, 432, 450, 413,
	442, 383, 392, 110, 390, 168, 155, 194, 421, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 387, 437, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 379, 445, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 428,
	169, 107, 195, 175, 375, 378, 373, 374, 417, 418,
	454, 455, 456, 435, 370, 0, 376, 377, 0, 440,
	125, 420, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 398, 356, 401, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 170, 405, 0, 104, 449, 439, 0,
	408, 451, 381, 397, 459, 399, 400, 430, 365, 416,
	154, 394, 92, 384, 358, 391, 359, 382, 410, 116,
	380, 441, 419, 130, 457, 133, 424, 0, 176, 142,
	0, 0, 412, 443, 414, 436, 407, 431, 372, 423,
	452, 395, 427, 453, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 426, 448,
	393, 460, 429, 357, 425, 0, 363, 366, 458, 446,
	388, 389, 0, 0, 0, 0, 0, 0, 0, 411,
	415, 433, 404, 0, 0, 0, 0, 0, 0, 0,
	0, 385, 0, 422, 0, 0, 0, 369, 364, 0,
	409, 0, 0, 0, 371, 0, 386, 434, 0, 354,
	438, 444, 406, 203, 447, 403, 402, 161, 0, 108,
	0, 182, 120, 396, 131, 432, 450, 413, 442, 383,
	392, 110, 390, 168, 155, 194, 421, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 387, 437, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	379, 445, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 428, 169, 107,
	195, 175, 375, 378, 373, 374, 417, 418, 454, 455,
	456, 435, 370, 0, 376, 377, 0, 440, 125, 420,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 398,
	356, 401, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 170, 405, 0, 104, 449, 439, 0, 408, 451,
	381, 397, 459, 399, 400, 430, 365, 416, 154, 394,
	92, 384, 358, 391, 359, 382, 410, 116, 380, 441,
	419, 130, 457, 133, 424, 0, 176, 142, 0, 0,
	412, 443, 414, 436, 407, 431, 372, 423, 452, 395,
	427, 453, 0, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 426, 448, 393, 460,
	429, 357, 425, 0, 363, 366, 458, 446, 388, 389,
	0, 0, 0, 0, 0, 0, 0, 411, 415, 433,
	404, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 422, 0, 0, 0, 369, 364, 0, 409, 0,
	0, 0, 371, 0, 386, 434, 0, 354, 438, 444,
	406, 203, 447, 403, 402, 161, 0, 108, 0, 182,
	120, 396, 131, 432, 450, 413, 442, 383, 392, 110,
	390, 168, 155, 194, 421, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 387, 437, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 379, 445,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 428, 169, 107, 195, 175,
	375, 378, 373, 374, 417, 418, 454, 455, 456, 435,
	370, 0, 376, 377, 0, 440, 125, 420, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 398, 356, 401,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 170,
	405, 0, 104, 449, 439, 0, 408, 451, 381, 397,
	459, 399, 400, 430, 365, 416, 154, 394, 92, 384,
	358, 391, 359, 382, 410, 116, 380, 441, 419, 130,
	457, 133, 424, 0, 176, 142, 0, 0, 412, 443,
	414, 436, 407, 431, 372, 423, 452, 395, 427, 453,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 426, 448, 393, 460, 429, 357,
	425, 0, 363, 366, 458, 446, 388, 389, 0, 0,
	0, 0, 0, 0, 0, 411, 415, 433, 404, 0,
	0, 0, 0, 0, 0, 0, 0, 385, 0, 422,
	0, 0, 0, 369, 364, 0, 409, 0, 0, 0,
	371, 0, 386, 434, 0, 354, 438, 444, 406, 203,
	447, 403, 402, 161, 0, 108, 0, 182, 120, 396,
	131, 432, 450, 413, 442, 383, 392, 110, 390, 168,
	155, 194, 421, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 387, 437, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 350, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 379, 445, 206, 207,
	208, 209, 0, 0, 0, 351, 349, 124, 173, 128,
	135, 164, 212, 428, 169, 107, 195, 175, 375, 378,
	373, 374, 417, 418, 454, 455, 456, 435, 370, 0,
	376, 377, 0, 440, 125, 420, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 398, 356, 401, 0, 0,
	0, 0, 0, 0, 0, 367, 368, 170, 405, 0,
	104, 449, 439, 0, 408, 451, 381, 397, 459, 399,
	400, 430, 365, 416, 154, 394, 92, 384, 358, 391,
	359, 382, 410, 116, 380, 441, 419, 130, 457, 133,
	424, 0, 176, 142, 0, 0, 412, 443, 414, 436,
	407, 431, 372, 423, 452, 395, 427, 453, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 426, 448, 393, 460, 429, 357, 425, 0,
	363, 366, 458, 446, 388, 389, 0, 0, 0, 0,
	0, 0, 0, 411, 415, 433, 404, 0, 0, 0,
	0, 0, 0, 0, 0, 385, 0, 422, 0, 0,
	0, 369, 364, 0, 409, 0, 0, 0, 371, 0,
	386, 434, 0, 354, 438, 444, 406, 203, 447, 403,
	402, 161, 0, 108, 0, 182, 120, 396, 131, 432,
	450, 413, 442, 383, 392, 110, 390, 168, 155, 194,
	421, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 387,
	437, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 379, 445, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 428, 169, 107, 195, 175, 375, 378, 373, 374,
	417, 418, 454, 455, 456, 435, 370, 0, 376, 377,
	0, 440, 125, 420, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 398, 356, 401, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 170, 405, 0, 104, 449,
	439, 0, 408, 451, 381, 397, 459, 399, 400, 430,
	365, 416, 154, 394, 92, 384, 358, 391, 359, 382,
	410, 116, 380, 441, 419, 130, 457, 133, 424, 0,
	176, 142, 0, 0, 412, 443, 414, 436, 407, 431,
	372, 423, 452, 395, 427, 453, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	426, 448, 393, 460, 429, 357, 425, 0, 363, 366,
	458, 446, 388, 389, 0, 0, 0, 0, 0, 0,
	0, 411, 415, 433, 404, 0, 0, 0, 0, 0,
	0, 0, 0, 385, 0, 422, 0, 0, 0, 369,
	364, 0, 409, 0, 0, 0, 371, 0, 386, 434,
	0, 354, 438, 444, 406, 203, 447, 403, 402, 161,
	0, 108, 0, 182, 120, 396, 131, 432, 450, 413,
	442, 383, 392, 110, 390, 168, 155, 194, 421, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 387, 437, 93,
	183, 660, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 350, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 379, 445, 206, 207, 208, 209, 0, 0,
	0, 351, 349, 124, 173, 128, 135, 164, 212, 428,
	169, 107, 195, 175, 375, 378, 373, 374, 417, 418,
	454, 455, 456, 435, 370, 0, 376, 377, 0, 440,
	125, 420, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 398, 356, 401, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 170, 405, 0, 104, 449, 439, 0,
	408, 451, 381, 397, 459, 399, 400, 430, 365, 416,
	154, 394, 92, 384, 358, 391, 359, 382, 410, 116,
	380, 441, 419, 130, 457, 133, 424, 0, 176, 142,
	0, 0, 412, 443, 414, 436, 407, 431, 372, 423,
	452, 395, 427, 453, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 426, 448,
	393, 460, 429, 357, 425, 0, 363, 366, 458, 446,
	388, 389, 0, 0, 0, 0, 0, 0, 0, 411,
	415, 433, 404, 0, 0, 0, 0, 0, 0, 0,
	0, 385, 0, 422, 0, 0, 0, 369, 364, 0,
	409, 0, 0, 0, 371, 0, 386, 434, 0, 354,
	438, 444, 406, 203, 447, 403, 402, 161, 0, 108,
	0, 182, 120, 396, 131, 432, 450, 413, 442, 383,
	392, 110, 390, 168, 155, 194, 421, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 387, 437, 93, 183, 341,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 350, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	379, 445, 206, 207, 208, 209, 0, 0, 0, 351,
	349, 344, 343, 128, 135, 164, 212, 428, 169, 107,
	195, 175, 375, 378, 373, 374, 417, 418, 454, 455,
	456, 435, 370, 0, 376, 377, 0, 440, 125, 420,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 398,
	356, 401, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 170, 405, 154, 104, 92, 0, 0, 274, 0,
	0, 0, 116, 271, 0, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 895, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 896, 0, 0, 269, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 92, 831, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 265,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 92,
	0, 170, 274, 322, 104, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 510, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 92, 0, 170, 274,
	322, 104, 0, 116, 271, 0, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 269, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 265, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 23,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 92, 0, 170, 274, 322, 104, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 0, 0, 0, 0, 154, 0,
	92, 0, 170, 274, 322, 104, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	314, 324, 320, 321, 318, 319, 317, 316, 315, 326,
	306, 307, 308, 309, 311, 0, 125, 310, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 0, 0, 0,
	0, 154, 0, 92, 0, 0, 0, 0, 0, 170,
	116, 322, 104, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 0, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 1698, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 170, 116, 322, 104, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 0, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 0, 154, 0, 92,
	0, 0, 0, 0, 0, 170, 116, 322, 104, 0,
	130, 0, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	544, 543, 553, 554, 546, 547, 548, 549, 550, 551,
	552, 545, 0, 0, 555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	154, 0, 92, 0, 532, 0, 0, 0, 170, 116,
	556, 104, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 534,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 529, 528, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 530,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 92, 0, 649, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 651,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 23, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 92,
	0, 170, 0, 0, 104, 0, 116, 0, 0, 0,
	130, 0, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 23, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 92, 0, 170, 0,
	0, 104, 0, 116, 0, 0, 0, 130, 0, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 781, 0, 0, 782, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 669, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 668, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 649, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 651, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 647, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 1390, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 1673, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 1282, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 651, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 534, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 741, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 154, 0, 92, 0, 0, 0,
	0, 0, 627, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 336, 0, 0, 0, 0, 0, 0,
	154, 0, 92, 0, 0, 170, 0, 0, 104, 116,
	0, 0, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	154, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 170, 0, 0, 104,
}

var yyPact = [...]int{
	2299, -1000, -204, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1272, 1315, -1000, -1000, -1000, -1000, -1000, -1000, 1123,
	529, 307, 346, 195, 13542, 340, 2107, 14102, -1000, 92,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1070, -1000, -1000,
	-1000, -1000, -1000, 1259, 1270, 1080, 1241, 1186, -1000, 7336,
	262, 11856, 13262, 6182, -1000, 880, -187, 296, 13822, 260,
	260, 13822, 13822, 260, -1000, -103, 315, 14102, -1000, 14102,
	241, 874, 241, 241, 241, 14102, -1000, 396, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14102, 863, 1215, 231, 4026, 4026, 4026,
	4026, 151, 4026, -65, 1135, -1000, -1000, -1000, -1000, 4026,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	781, 1217, 7910, 7910, 1272, -1000, 1070, -1000, -1000, -1000,
	1208, -1000, -1000, 563, 1291, -1000, 9042, 392, -1000, 7910,
	115, 962, -1000, -1000, 962, -1000, -1000, 375, -1000, -1000,
	8476, 8476, 8476, 8476, 8476, 8476, 8476, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 962, -1000, 7623, 962, 962, 962, 962, 962, 962,
	962, 962, 7910, 962, 962, 962, 962, 962, 962, 962,
	962, 962, 1898, 962, 962, 962, 962, 12976, 971, 1165,
	-1000, -1000, -1000, 1238, 9896, 10736, 14102, 939, -1000, 1026,
	5874, -79, -1000, -1000, -1000, 502, 10456, -1000, -1000, -1000,
	1210, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 926, -1000, 2607, 338, -1000, -1000, 14102, 1048, 861,
	519, 857, 1134, 250, 14102, -1000, 12696, 4026, 303, 14102,
	1230, 1133, 14102, 846, 828, -1000, 5566, -1000, 4026, 4026,
	4026, 4026, 4026, 4026, 4026, 4026, -1000, -1000, -1000, -1000,
	-1000, -1000, 4026, 4026, -1000, -22, -1000, 14102, -1000, -1000,
	-1000, -1000, 1310, 419, 799, 391, 1030, -1000, 721, 1259,
	781, 1186, 10176, 1148, -1000, -1000, 14102, -1000, 7910, 7910,
	639, -1000, 12416, -1000, -1000, 4334, 431, 8476, 648, 505,
	8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476, 8476,
	8476, 8476, 8476, 8476, 8476, 723, 1898, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 796, -1000, 1070, 1003, 1003,
	11, 11, 11, 11, 11, 11, 8759, 6762, 781, 924,
	454, 7623, 7336, 7336, 7910, 7910, 14382, 14382, 7336, 1243,
	445, 454, 14382, -1000, 781, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 30, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7336, 7336, 7336, 7336, 178, 14102, -1000, 14382,
	11856, 11856, 11856, 11856, 11856, -1000, 1155, 1153, -1000, 1175,
	1152, 1159, 14102, -1000, 921, 9896, 313, 962, -1000, 12136,
	-1000, -1000, 178, 1031, 11856, 14102, -1000, -1000, 5258, 1026,
	-79, 998, -1000, -74, -46, 6475, 401, -1000, -1000, -1000,
	-1000, 3410, 711, 1742, -129, -9, -1000, -1000, -1000, -1000,
	1068, -1000, 1068, 216, 1068, 1068, 1068, -1000, 1068, 1068,
	26, 26, 26, 26, 26, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1121, 1115, -1000, 1068, 1068, 1068, -1000, 1068,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1099, 225, 1099, 1071, 1071, -1000, -1000, 13822, 1236, -127,
	788, 4026, 1222, 4026, 14102, 1286, 14102, -1000, -1000, -1000,
	1772, 14102, -1000, 14102, -1000, -1000, 14102, 4026, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 499, -1000, -1000, -1000, -1000, 1191, 7910,
	7910, 4950, 7910, -1000, -1000, -1000, 1217, -1000, 1243, 1266,
	-1000, 1201, 1200, 7336, -1000, -1000, 431, 441, -1000, -1000,
	688, -1000, -1000, -1000, -1000, 390, 962, -1000, 355, -1000,
	-1000, -1000, -1000, 648, 8476, 8476, 8476, 1651, 355, 1683,
	55, 515, 11, 173, 173, 6, 6, 6, 6, 6,
	161, 161, -1000, -1000, -1000, -1000, 781, -1000, -1000, -1000,
	781, 7336, 999, -1000, -1000, 7910, -1000, 781, 919, 919,
	728, 583, 1022, -1000, 388, 1020, 919, 7336, 526, -1000,
	7910, 781, -1000, -1000, 919, 781, 919, 919, 1042, 962,
	-1000, 1017, -1000, 501, 1165, 1119, 1132, 961, -1000, -1000,
	-1000, -1000, 1151, -1000, 1131, -1000, -1000, -1000, -1000, -1000,
	317, 311, 309, 13822, -1000, 1280, 11856, 979, -1000, -1000,
	998, -79, -86, -1000, -1000, -1000, -1000, 454, -1000, -1000,
	755, 992, 3083, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1114, 636, 13822, 211, 207, 409, 378, 752, -1000,
	-1000, -1000, 579, -1000, 13822, 1303, -1000, -1000, 204, -1000,
	203, 518, 744, 14102, 129, 1101, 1991, -1000, -209, -1000,
	-13, -1000, -1000, 702, 26, 26, 1068, 26, 26, 26,
	-1000, -1000, 401, 1209, 401, 401, 401, 401, 739, 739,
	-130, -130, -1000, -1000, -1000, 700, 1099, -1000, -1000, -1000,
	675, -1000, 1112, 1070, -1000, 4642, -1000, -1000, -1000, -1000,
	-1000, 1235, 1130, -1000, -1000, -1000, 110, -1000, 751, 2054,
	451, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 176, 350, -1000, 4026, -1000, 508, 14102, 14102,
	1189, 454, 454, 379, -1000, -1000, 14102, -1000, -1000, -1000,
	-1000, 1012, -1000, -1000, -1000, 3718, 7336, -1000, 1651, 355,
	1047, -1000, 8476, 8476, -1000, -1000, 919, 7336, 454, -1000,
	-1000, -1000, 705, 723, 705, 8476, 8476, 4950, 8476, 8476,
	-120, 982, 506, -1000, 7910, 626, -1000, -1000, -1000, -1000,
	-1000, 1129, 14382, 962, -1000, 9609, 13822, 1272, 14382, 7910,
	7910, -1000, -1000, 7910, 1098, -1000, 7910, -1000, -1000, -1000,
	962, 962, 962, 884, -1000, 1272, 979, -1000, -1000, -1000,
	-77, -89, -1000, -1000, 3410, -1000, 3410, 11576, -1000, 1288,
	1256, 214, 238, -1000, 750, 749, -1000, 747, -1000, -12,
	-1000, -185, 86, -47, -1000, -1000, 962, -1000, 1083, 1234,
	-1000, 1218, 667, -1000, 1857, -198, -1000, -1000, -1000, -1000,
	-1000, -1000, 962, 1077, 1075, -1000, 1074, -1000, -1000, -1000,
	927, 401, 401, 26, 401, 401, 401, -1000, 460, -1000,
	-1000, -1000, -1000, 916, -1000, 908, -1000, 54, 40, -1000,
	991, -1000, 892, 14102, 13822, -1000, 977, -1000, 496, 1255,
	138, 14102, 1286, -1000, 205, -1000, 13822, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13822, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14102, -1000, -1000,
	-1000, -1000, -1000, 13822, 229, -1000, -1000, 731, 7910, -1000,
	-1000, -1000, 4642, -1000, 1280, 11856, -1000, -1000, 781, -1000,
	8476, 355, 355, -1000, -1000, 781, 1068, 1068, -1000, 1068,
	1071, -1000, -1000, 1068, 78, 1068, 68, 781, 781, 295,
	766, -1000, 277, 150, 962, -114, -1000, 454, 7910, -1000,
	1223, 914, 960, -1000, -1000, 7049, 781, 888, 370, 884,
	1259, -1000, 454, 454, 454, 11016, 454, 11016, 11016, 11016,
	9322, 13822, 1259, -1000, -1000, -1000, -1000, 3083, -1000, 879,
	-1000, 1068, 1068, 314, 314, -191, 199, 197, -1000, -1000,
	-1000, -1000, -187, -1000, -1000, 518, -1000, 7910, 11016, -173,
	-1000, 974, 905, 244, -1000, 144, 781, -1000, 732, -1000,
	703, 889, -1000, -1000, -1000, 401, -1000, -1000, -1000, -1000,
	-1000, 26, 730, 26, -24, -25, 656, -1000, 654, 986,
	1128, 4642, 3410, 292, 1353, -1000, -1000, 1246, 1233, 13822,
	-1000, -1000, -1000, 1065, -1000, -1000, -1000, -1000, 1211, 13822,
	-1000, -1000, 454, 1277, 968, -1000, 355, -1000, -1000, 210,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8476,
	8476, -1000, 8476, 8476, 8476, 781, 718, 454, 194, -1000,
	962, -1000, -1000, 990, 13822, 13822, -1000, -1000, 873, -1000,
	-1000, 869, 869, 869, 313, -1000, -1000, 1554, 11576, 1227,
	-1000, 601, -1000, -1000, 521, 126, 592, -1000, 13822, -187,
	-1000, 962, 587, 867, 1064, 651, -1000, 885, 29, -130,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 401, -1000, 401,
	-1000, -1000, 870, 821, 11576, 13822, 14102, -1000, -1000, 13822,
	-1000, -1000, -1000, -1000, -1000, 107, 184, 1062, 11016, 962,
	232, 1275, 1265, -1000, -1000, 310, 310, 310, 310, 42,
	-1000, -1000, 1300, -1000, 962, -1000, 1070, 367, -1000, 13822,
	-1000, -1000, -1000, -1000, -1000, 1126, 1773, 120, -1000, 734,
	494, 637, 488, 467, 462, 452, 450, 442, 439, -1000,
	-1000, -1000, 1298, -1000, -1000, -1000, 1294, 1061, -1000, 1059,
	7910, 130, -1000, -1000, 802, 795, -1000, -1000, -1000, -1000,
	-1000, -1000, 856, 1056, 1049, 931, -1000, 105, 184, -1000,
	-1000, -1000, -1000, 11576, 854, 175, 191, -1000, 7910, 7910,
	-1000, -1000, -1000, -1000, 781, 127, -163, 14382, 960, 781,
	13822, -1000, -1000, 13822, -1000, -134, 1773, 13822, -1000, 643,
	-1000, -1000, 569, 631, 569, 569, 569, 569, 569, 314,
	314, 13822, 11576, 587, -1000, -116, 1024, -1000, -1000, -193,
	11576, 11576, -126, 13822, 7910, 184, -1000, 844, 1048, 841,
	-1000, 13822, 1044, 454, 946, -1000, 1182, -123, -167, 941,
	-1000, -1000, 962, 839, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 518, 518, 820, 801,
	-1000, -1000, -1000, 108, 710, 623, 618, 617, -19, -1000,
	1263, 1280, 1041, 794, 780, -1000, -200, -1000, 454, -1000,
	-1000, -127, -1000, 175, 1198, 11576, -1000, 1166, -1000, 13822,
	-1000, 1773, -1000, -1000, 227, 1554, 594, -1000, 586, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11296, 1554, 11016, 1280,
	1554, 7910, -1000, -1000, 152, 769, -128, 781, -1000, 14102,
	1126, -1000, -1000, -1000, 365, 1126, 767, 1554, -1000, 454,
	170, -1000, -165, -1000, 1035, -1000, 4642, -1000, -1000, -1000,
	962, -168, 13822, -1000, 8193, -1000, 765, 310, 781, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1580, 19, 816, 1579, 1578, 1573, 1355, 1336, 1330,
	1565, 1561, 1558, 1556, 1554, 1553, 1552, 1550, 1549, 1545,
	1542, 1540, 1539, 1538, 511, 1537, 1536, 1535, 88, 1533,
	96, 1530, 1527, 52, 115, 53, 50, 54, 1526, 32,
	119, 89, 1523, 60, 1521, 1520, 98, 1519, 85, 1517,
	1516, 95, 1515, 1500, 27, 3, 1487, 31, 1485, 1484,
	91, 7, 1483, 1480, 1479, 1478, 1476, 1475, 75, 13,
	17, 25, 29, 1474, 84, 37, 1473, 66, 1472, 1471,
	1469, 1467, 51, 1466, 77, 24, 45, 76, 1465, 14,
	1464, 83, 43, 39, 9, 97, 82, 1461, 46, 90,
	68, 1460, 1458, 627, 1456, 1455, 1454, 1453, 1452, 1451,
	600, 597, 1450, 1448, 1447, 56, 0, 462, 10, 104,
	1446, 58, 1445, 1866, 93, 81, 34, 1443, 55, 1477,
	47, 1442, 1434, 57, 92, 1432, 105, 103, 1431, 1429,
	1428, 1426, 1423, 87, 40, 70, 202, 1421, 1413, 1412,
	21, 61, 42, 65, 79, 1411, 1408, 1407, 36, 1405,
	16, 30, 2, 71, 1402, 1401, 1400, 1398, 41, 33,
	1397, 26, 22, 18, 6, 4, 1396, 1395, 1393, 1,
	1391, 28, 1390, 5, 1389, 8, 1388, 1384, 1383, 1379,
	1375, 1374, 1372, 1371, 1368, 1367, 23, 12, 48, 49,
	11, 59, 44, 1364, 15, 1357, 1351, 1187, 759, 1341,
	1334, 1324, 1322, 123,
}

var yyR1 = [...]int{
	0, 205, 206, 206, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 209,
	209, 46, 46, 91, 91, 10, 10, 10, 10, 96,
	96, 100, 100, 100, 101, 101, 101, 101, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 201, 201, 202, 202, 202, 203, 203, 204, 204,
	204, 187, 187, 187, 188, 188, 188, 188, 188, 188,
	190, 190, 191, 191, 121, 121, 185, 185, 184, 183,
	183, 182, 182, 181, 192, 192, 16, 165, 166, 166,
	166, 166, 166, 154, 135, 135, 135, 135, 135, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	198, 198, 198, 199, 199, 199, 199, 199, 199, 199,
	199, 194, 194, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 144, 144, 144,
	144, 144, 144, 193, 193, 189, 189, 189, 189, 189,
	139, 139, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 138, 138, 138, 138, 138, 138, 138, 138,
	140, 140, 140, 140, 140, 140, 140, 140, 136, 136,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 142, 142, 142, 142, 142, 142, 142,
	142, 153, 153, 143, 143, 151, 151, 152, 152, 152,
	150, 150, 150, 147, 147, 148, 148, 149, 149, 149,
	145, 145, 145, 146, 146, 146, 156, 174, 174, 174,
	176, 176, 177, 177, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 164, 164, 200, 200, 173,
	173, 173, 170, 170, 170, 170, 170, 170, 170, 170,
	163, 163, 172, 172, 171, 171, 158, 158, 158, 158,
	158, 159, 160, 160, 160, 160, 157, 196, 196, 196,
	197, 197, 161, 161, 162, 162, 167, 167, 167, 168,
	168, 168, 169, 169, 169, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 210, 210,
	211, 211, 211, 211, 211, 211, 211, 180, 178, 178,
	179, 179, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 108, 108, 105, 105, 106, 106,
	107, 107, 107, 109, 109, 109, 132, 132, 132, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	212, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 120, 120, 120, 119, 119, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	89, 92, 92, 42, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 127, 127, 126, 126, 126, 125, 125,
	47, 47, 47, 49, 48, 48, 48, 48, 50, 50,
	52, 52, 51, 51, 54, 54, 54, 54, 55, 55,
	90, 90, 37, 37, 37, 37, 37, 37, 37, 104,
	104, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 33, 33, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 213, 213, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 130, 130, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	134, 134, 134, 134, 134, 134, 134, 78, 78, 32,
	32, 76, 76, 77, 79, 79, 75, 75, 75, 60,
	60, 60, 60, 60, 60, 60, 60, 62, 62, 62,
	80, 80, 81, 81, 82, 82, 83, 83, 84, 85,
	85, 85, 86, 86, 86, 86, 87, 87, 87, 59,
	59, 59, 59, 59, 59, 88, 88, 88, 88, 93,
	93, 70, 70, 72, 72, 71, 73, 94, 94, 98,
	95, 95, 99, 99, 99, 99, 97, 97, 97, 122,
	122, 122, 102, 102, 110, 110, 111, 111, 103, 103,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	113, 113, 113, 114, 114, 117, 117, 118, 118, 123,
	123, 124, 124, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 207, 208, 128, 129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 14, 13, 14, 6, 5, 5, 5, 11, 11,
	9, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 2, 4, 4, 1, 3,
	3, 3, 3, 2, 3, 1, 1, 1, 1, 2,
	2, 3, 2, 4, 4, 2, 2, 3, 2, 3,
	2, 7, 8, 3, 3, 6, 5, 8, 7, 4,
	2, 4, 6, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	4, 4, 4, 4, 4, 1, 5, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 0,
	2, 5, 2, 3, 3, 2, 3, 2, 3, 4,
	1, 1, 1, 3, 3, 2, 2, 5, 5, 8,
	8, 13, 1, 1, 2, 2, 10, 0, 1, 1,
	0, 3, 0, 1, 1, 3, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 11, 13, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 1, 2, 1, 2, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -205, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 175, 176,
	178, 179, 25, 137, 138, 141, 142, -207, 8, 279,
	52, -206, 313, -82, 15, -26, 5, -24, -212, -24,
	-24, -24, -24, -24, -165, 52, -121, -192, 151, 271,
	118, 133, 150, 119, 134, 70, -103, 121, 123, 119,
	119, 120, 121, 271, 118, 119, -51, -123, 55, -116,
	158, 288, 20, 175, 188, 189, 180, 221, 209, 289,
	156, 206, 210, 258, 312, 64, 178, 267, 127, 162,
	139, 201, 204, 203, 195, 192, 27, 227, 295, 194,
	130, 228, 232, 238, 259, 286, 185, 186, 261, 225,
	31, 132, 290, 33, 147, 262, 230, 224, 219, 223,
	184, 218, 37, 198, 234, 233, 235, 257, 212, 157,
	237, 214, 196, 213, 18, 142, 145, 229, 231, 193,
	159, 125, 149, 294, 263, 191, 146, 160, 141, 266,
	309, 155, 179, 260, 187, 269, 36, 243, 205, 182,
	197, 183, 129, 176, 153, 216, 148, 199, 200, 222,
	181, 217, 177, 150, 143, 268, 244, 296, 215, 211,
	207, 208, 154, 121, 151, 152, 250, 251, 252, 253,
	291, 292, 264, 202, 245, 246, 164, 165, 166, 167,
	168, 169, 170, 119, 106, 210, 112, 248, 120, 31,
	149, -132, 119, -105, 152, 250, 251, 252, 253, 55,
	260, 259, 254, -123, 177, -128, -128, -128, -128, -128,
	-2, -86, 17, 16, -5, -3, -207, 6, 20, 21,
	-30, 38, 39, -25, -36, 97, -37, -123, -56, 72,
	-61, 28, 55, -116, 23, -60, -57, -75, -73, -74,
	106, 107, 95, 96, 103, 73, 108, -65, -63, -64,
	-66, 57, 56, 65, 58, 59, 60, 61, 66, 67,
	68, -117, -71, -207, 42, 43, 280, 281, 282, 283,
	287, 284, 75, 32, 270, 278, 277, 276, 274, 275,
	272, 273, 311, 124, 271, 101, 279, -103, -39, -40,
	-41, -42, -53, -74, -207, -51, 11, -46, -51, -95,
	-131, 177, -99, 260, 259, -118, -97, -117, -115, 258,
	210, 257, 55, -116, 117, 172, 298, 71, 22, 24,
	241, 247, 171, 74, 106, 16, 75, 307, 308, 105,
	280, 112, 46, 272, 273, 270, 282, 283, 271, 248,
	28, 10, 25, 137, 21, 99, 114, 173, 78, 79,
	140, 23, 138, 68, 19, 49, 131, 11, 297, 13,
	14, 299, 124, 123, 90, 310, 120, 44, 8, 108,
	26, 87, 40, 135, 42, 88, 17, 274, 275, 30,
	287, 144, 101, 47, 34, 72, 66, 50, 265, 70,
	15, 45, 133, 89, 115, 279, 43, 174, 118, 6,
	285, 29, 136, 41, 119, 249, 77, 122, 67, 5,
	134, 9, 48, 51, 276, 277, 278, 32, 76, 12,
	69, -166, -154, 55, -196, 307, 308, 121, -117, -111,
	124, -111, -117, -117, -111, 279, 119, -51, -51, -110,
	124, 55, -110, -110, -110, -51, 109, -51, 55, 29,
	271, 55, 149, 119, 150, 121, -129, -207, -118, -129,
	-129, -129, 153, 154, -129, -106, 255, 50, -129, -208,
	54, -87, 19, 30, -37, -123, -83, -84, -37, -82,
	-2, -24, 34, -28, 21, 63, 11, -120, 71, 70,
	87, -119, 22, -117, 57, 109, -37, -58, 90, 72,
	88, 89, 74, 92, 91, 102, 95, 96, 97, 98,
	99, 100, 101, 93, 94, 105, 311, 80, 81, 82,
	83, 84, 85, 86, -104, -207, -74, -207, 110, 111,
	-61, -61, -61, -61, -61, -61, -61, -207, -2, -69,
	-37, -207, -207, -207, -207, -207, -207, -207, -207, -207,
	-78, -37, -207, -213, -207, -213, -213, -213, -213, -213,
	-213, -213, -134, 106, 210, 139, 201, -137, -136, 216,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	209, 289, -207, -207, -207, -207, -52, 26, -51, 29,
	53, -47, -49, -48, -50, 40, 44, 46, 41, 42,
	43, 47, -127, 22, -39, -207, -126, 145, -125, 22,
	-123, 57, -51, -46, -209, 53, 11, 51, 53, -95,
	177, -96, -100, 261, 263, 80, -122, -117, 57, 28,
	29, 54, 53, -155, -135, -139, -136, -141, -140, -142,
	-137, -138, 206, 210, 207, 212, 213, 214, 106, 211,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 215, 227, 29, 139, 199, 200, 201, 204, 203,
	205, 202, 228, 229, 230, 231, 232, 233, 234, 235,
	191, 192, 194, 195, 196, 198, 197, 120, -51, -185,
	51, 55, 72, 55, 50, -201, 50, 171, 172, -51,
	-51, 265, -129, 122, -51, 23, 50, -51, 55, 55,
	-124, -123, -115, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -108, 249, 256, -51, 9, 90, 53,
	18, 109, 53, -85, 24, 25, -86, -208, -30, -62,
	-117, 58, 61, -29, 41, -51, -37, -37, -67, 66,
	72, 67, 68, -119, 97, -124, -118, -115, -61, -68,
	-71, -74, 62, 90, 88, 89, 74, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -130, 55, 57, -134, 55, -60, -60, -117,
	-35, 21, -34, -36, -208, 53, -208, -2, -34, -34,
	-37, -37, -75, -117, -123, -75, -34, -28, -76, -77,
	76, -75, -208, 208, -34, -35, -34, -34, -91, 145,
	-51, -94, -98, -75, -40, -41, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -48, -123, -208, -54,
	48, 123, 49, -207, -125, -91, 51, -39, -51, -99,
	-96, 53, 262, 264, 265, 50, 69, -37, -146, 106,
	105, -167, -168, -169, -118, 57, 58, -154, -156, -158,
	-157, -170, -159, 127, 125, 129, 130, 134, -163, 120,
	135, 66, 72, -198, 127, 50, 241, 247, 125, 135,
	134, 312, 64, 128, 297, 299, 28, -149, 314, 236,
	-147, 244, -143, 52, -143, -143, 208, -143, -143, -143,
	-143, -143, -145, 210, -145, -145, -145, -145, 52, 52,
	-143, -143, -143, -143, -151, 52, 193, -151, -151, -152,
	52, -152, -117, 22, -183, 291, -184, 55, -129, 23,
	-129, -51, -202, 8, 9, 10, -51, -112, 117, 114,
	115, -180, 113, 241, 210, 64, 28, 15, 280, 145,
	296, 55, 146, -51, -51, -51, -129, -107, 11, 90,
	36, -37, -37, -124, -84, -87, -102, 19, 11, 32,
	32, -34, 66, 67, 68, 109, -207, -68, -61, -61,
	-61, -33, 140, 71, -208, -208, -34, 53, -37, -208,
	-208, -208, 53, 51, 22, 53, 11, 109, 53, 11,
	-208, -34, -79, -77, 78, -37, -208, -208, -208, -208,
	-208, -59, 29, 32, -2, -207, -207, -55, 53, 12,
	80, -44, -43, 50, 51, -45, 50, -43, 40, 40,
	120, 120, 120, -92, -117, -55, -39, -55, -100, -101,
	266, 263, 269, 55, 53, -169, 80, 52, -197, 50,
	72, -161, -117, 135, -163, -163, 55, -163, 55, 55,
	66, 19, -117, 9, 135, 135, -197, 57, -123, -194,
	298, 16, 52, -199, 52, 57, 58, 59, 66, -144,
	65, -57, 237, 270, 273, 272, 238, 315, -148, 245,
	58, -145, -145, -143, -145, -145, -145, -146, 29, -146,
	-146, -146, -146, -153, 57, -153, -150, 291, 292, -150,
	58, -151, 58, 50, 51, -2, -182, -181, -118, -187,
	22, 50, -201, -128, -121, -211, 151, 126, 131, 130,
	55, 125, 129, 145, -186, 151, 126, 127, 131, 130,
	55, 120, 135, 125, 129, 145, 134, -113, -114, 122,
	22, 120, 135, 145, 117, -129, -109, 88, 12, -123,
	-123, 37, 109, -51, -38, 11, 97, -118, -35, -33,
	71, -61, -61, -208, -36, -133, 106, 206, 139, 201,
	195, 225, 226, 212, 243, 199, 244, -130, -133, -61,
	-61, -118, -61, -61, 288, -82, 79, -37, 77, -93,
	50, -94, -70, -72, -71, -207, -2, -88, -117, -92,
	-82, -98, -37, -37, -37, 52, -37, -207, -207, -207,
	-208, 53, -82, -55, 263, 267, 268, -168, -169, -172,
	-171, -117, 135, 10, 9, 19, 131, 125, 55, 55,
	55, -196, 134, 309, -198, 312, -144, -207, 52, 22,
	28, 58, -199, 52, -189, 311, -207, -143, 52, -143,
	52, 52, 54, -146, -146, -145, -146, -146, -146, 55,
	106, 54, 53, 54, 199, 199, 53, 54, 53, -51,
	-117, 53, 80, -188, 19, 159, 160, -51, -202, -210,
	120, 135, -128, -117, -128, -117, -51, -128, -117, 127,
	-158, 57, -37, -55, -39, -208, -61, -208, -143, -143,
	-143, -152, -143, 186, -143, 186, -208, -208, -208, 53,
	19, -208, 53, 19, -207, -32, 285, -37, 27, -93,
	53, -208, -208, -208, 53, 109, -208, -86, -89, -117,
	135, -89, -89, -89, -126, -117, -86, 54, 53, -143,
	-143, -160, 155, 156, 29, 157, -160, 309, 135, 135,
	-196, -197, -37, -89, 299, 53, 54, -199, 210, 200,
	239, 216, -208, 54, 54, 54, -146, -145, 57, -145,
	246, 246, 58, 58, 52, 51, 50, -181, -169, 122,
	20, 6, 8, 9, 10, 19, 22, -117, 52, 26,
	-117, -80, 13, -145, 55, -61, -61, -61, -61, -61,
	-208, 57, 135, -72, 32, -2, -207, -117, -117, 53,
	54, -208, -208, -208, -54, -174, -176, 291, -175, 51,
	132, 64, 164, 165, 166, 167, 168, 169, 170, -171,
	-85, -197, 50, 66, 158, -197, 50, -161, -117, -196,
	-207, -208, 54, 52, 58, 54, 208, -150, -146, -146,
	54, 54, -172, -117, -51, -162, -117, 173, -203, -204,
	-7, -9, -8, 52, -89, -207, 125, -81, 14, 16,
	-208, -208, -208, -208, -31, 90, 291, 9, -70, -2,
	109, -117, -173, 50, -175, 291, 52, 293, 55, -164,
	80, 57, 80, 80, 80, 80, 80, 80, 80, 9,
	10, 52, 52, -37, -193, 157, -195, 54, 54, 54,
	52, 52, -190, 53, 51, 174, -204, -172, 54, -178,
	-179, 145, 135, -37, -69, -208, 289, 47, 294, -94,
	-208, -117, -117, -177, -175, -117, 58, -200, 50, 69,
	58, -200, -200, -200, -200, -200, -160, -160, -162, -172,
	-208, 286, 54, 176, 301, 302, 144, 303, 157, 304,
	305, -90, 310, -172, -172, -191, 291, -117, -37, -204,
	54, -185, -208, 53, -117, 52, 37, 290, 295, -207,
	54, 53, -197, -197, 54, 54, 291, 58, 16, 58,
	58, 58, 58, 302, 144, 304, 16, -55, 52, 54,
	54, 312, -183, -179, 32, -172, 37, -117, -175, 128,
	-174, 58, 58, 306, -123, -174, -89, -55, -174, -37,
	147, 54, 291, -208, -51, -173, 109, -173, 54, -174,
	148, 294, 52, -118, -207, 295, -162, -61, 144, 54,
	-208, -208,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 674, 0, 430, 430, 430, 430, 430, 430, 0,
	-2, 728, 0, 0, 0, 0, -2, 420, 421, 0,
	423, 424, 995, 995, 995, 995, 995, 0, 33, 34,
	993, 1, 3, 682, 0, 0, 434, 437, 432, 0,
	728, 0, 0, 0, 60, 0, 317, 0, 0, 726,
	726, 0, 0, 726, 95, 0, 0, 0, 729, 0,
	724, 0, 724, 724, 724, 0, 379, 502, 749, 750,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 0, 0, 0, 0, 996, 996, 996,
	996, 0, 996, 408, 397, 399, 400, 401, 402, 996,
	417, 418, 407, 419, 422, 425, 426, 427, 428, 429,
	27, 686, 0, 0, 674, 29, 0, 430, 435, 436,
	440, 438, 439, 431, 0, 448, 452, 0, 512, 0,
	517, 519, -2, -2, 0, 554, 555, 556, 557, 558,
	0, 0, 0, 0, 0, 0, 0, 582, 583, 584,
	585, 659, 660, 661, 662, 663, 664, 665, 666, 521,
	522, 656, 706, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 0, 613, 613, 613, 613, 613, 613,
	613, 613, 0, 0, 0, 0, 0, 0, 0, 459,
	461, 462, 463, 483, 0, 485, 0, 0, 41, 45,
	0, 962, 710, -2, -2, 0, 0, 747, 748, -2,
	872, -2, 745, 746, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 0, 108, 0, 0, 318, 319, 0, 96, 0,
	0, 0, 0, 0, 0, 105, 0, 996, 0, 0,
	0, 0, 0, 0, 0, 378, 0, 380, 996, 996,
	996, 996, 996, 996, 996, 996, 389, 997, 998, 390,
	391, 392, 996, 996, 394, 0, 409, 0, 403, 28,
	994, 22, 0, 0, 683, 0, 675, 676, 679, 682,
	27, 437, 0, 442, 441, 433, 0, 449, 0, 0,
	0, 453, 0, 455, 456, 0, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 541,
	542, 543, 544, 545, 518, 0, 532, 0, 0, 0,
	574, 575, 576, 577, 578, 579, 0, 444, 27, 0,
	552, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	0, 648, 0, 604, 0, 605, 606, 607, 608, 609,
	610, 611, 612, 640, 0, 642, 643, 644, 645, 646,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	208, 209, 0, 444, 0, 0, 43, 0, 501, 0,
	0, 0, 0, 0, 0, 490, 0, 0, 493, 0,
	0, 0, 0, 484, 0, 0, 504, 926, 486, 0,
	488, 489, -2, 0, 0, 0, 39, 40, 0, 46,
	962, 48, 49, 0, 0, 0, 263, 719, 720, 721,
	717, 326, 0, 113, 257, 253, 115, 116, 117, 118,
	243, 181, 243, 243, 243, 243, 243, 215, 243, 243,
	260, 260, 260, 260, 260, 224, 225, 226, 227, 228,
	229, 230, 0, 0, 200, 243, 243, 243, 204, 243,
	206, 207, 233, 234, 235, 236, 237, 238, 239, 240,
	245, 245, 245, 247, 247, 198, 199, 0, 0, 99,
	0, 996, 0, 996, 0, 0, 0, 71, 72, 106,
	0, 0, 345, 0, 373, 725, 0, 996, 376, 377,
	503, 751, 752, 381, 382, 383, 384, 385, 386, 387,
	388, 393, 396, 410, 404, 405, 398, 687, 0, 0,
	0, 0, 0, 678, 680, 681, 686, 30, 440, 0,
	667, 0, 0, 0, 443, 25, 513, 514, 516, 533,
	0, 535, 537, 454, 450, 0, 657, -2, 523, 524,
	548, 549, 550, 0, 0, 0, 0, 546, 528, 0,
	559, 560, 561, 562, 563, 564, 565, 566, 567, 568,
	569, 570, 573, 624, 625, 581, 0, 571, 572, 580,
	0, 0, 445, 446, 551, 0, 705, 27, 0, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 654, 651,
	0, 0, 614, 641, 0, 0, 0, 0, 0, 0,
	500, 508, 707, 0, 460, 479, 481, 0, 476, 491,
	492, 494, 0, 496, 0, 498, 499, 464, 465, 466,
	0, 0, 0, 0, 487, 508, 0, 508, 42, 711,
	47, 0, 0, 52, 53, 712, 713, 714, 715, 264,
	0, 107, 327, 329, 332, 333, 334, 109, 110, 111,
	112, 0, 320, 322, 0, 0, 0, 0, 0, 300,
	301, 120, 0, 122, 0, 0, 125, 126, 0, 128,
	130, 320, 0, 0, 0, 0, 0, 119, 0, 259,
	255, 254, 180, 0, 260, 260, 243, 260, 260, 260,
	217, 218, 263, 0, 263, 263, 263, 263, 0, 0,
	250, 250, 203, 205, 192, 0, 245, 194, 195, 196,
	0, 197, 0, 0, 65, 0, 97, 98, 66, 727,
	67, 81, 0, 73, 74, 75, 0, 995, 94, 0,
	740, 346, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 0, 0, 372, 996, 375, 413, 0, 0,
	0, 684, 685, 0, 677, 23, 0, 722, 723, 668,
	669, 457, 534, 536, 538, 0, 444, 525, 546, 529,
	0, 526, 0, 0, 520, 586, 0, 0, 553, -2,
	589, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 674, 0, 652, 0, 0, 603, 615, 616, 617,
	618, 699, 0, 0, -2, 0, 0, 674, 0, 0,
	0, 473, 480, 0, 0, 474, 0, 475, 495, 497,
	0, 0, 0, 0, 471, 674, 508, 38, 50, 51,
	0, 0, 57, 265, 0, 330, 0, 0, 306, 0,
	0, 0, 323, 292, 0, 0, 295, 0, 297, 317,
	121, 0, 0, 0, 127, 129, 0, 133, 134, 0,
	151, 0, 0, 140, 0, 175, 144, 145, 146, 147,
	148, 149, 0, 243, 243, 171, 0, 258, 114, 256,
	0, 263, 263, 260, 263, 263, 263, 219, 0, 220,
	221, 222, 223, 0, 241, 0, 201, 0, 0, 202,
	0, 193, 0, 0, 0, -2, 100, 101, 0, 84,
	0, 0, 0, 335, 0, 995, 0, 360, 361, 362,
	363, 364, 365, 366, 995, 0, 347, 348, 349, 350,
	351, 352, 353, 354, 355, 356, 357, 0, 995, 741,
	742, 743, 744, 0, 0, 374, 395, 0, 0, 411,
	412, 688, 0, 24, 508, 0, 451, 658, 0, 527,
	0, 547, 530, 587, 447, 0, 243, 243, 629, 243,
	247, 632, 633, 243, 635, 243, 638, 0, 0, 0,
	0, 657, 0, 0, 0, 649, 602, 655, 0, 31,
	0, 699, 689, 701, 703, 0, 27, 0, 695, 0,
	682, 708, 509, 709, 477, 0, 482, 0, 0, 0,
	485, 0, 682, 37, 54, 55, 56, 328, 331, 0,
	302, 243, 243, 0, 0, 0, 0, 0, 293, 294,
	296, 298, 317, 139, 123, 320, 124, 0, 0, 0,
	152, 0, 0, 0, 143, 0, 0, 167, 0, 169,
	0, 0, 244, 210, 211, 263, 212, 213, 214, 261,
	262, 260, 0, 260, 0, 0, 0, 248, 0, 0,
	0, 0, 0, 0, 0, 82, 83, 0, 0, 0,
	358, 359, 339, 0, 340, 342, 343, 344, 0, 322,
	338, 414, 415, 670, 458, 588, 531, 591, 626, 260,
	630, 631, 634, 636, 637, 639, 593, 592, 594, 0,
	0, 597, 0, 0, 0, 0, 0, 653, 0, 32,
	0, 704, -2, 0, 0, 0, 44, 35, 0, 468,
	469, 0, 0, 0, 504, 472, 36, 267, 0, 679,
	305, 320, 312, 313, 0, 0, 320, 321, 322, 317,
	299, 0, 0, 0, 136, 0, 141, 0, 0, 250,
	178, 179, 150, 168, 170, 172, 216, 263, 242, 263,
	251, 252, 0, 0, 0, 0, 0, 102, 103, 0,
	85, 86, 87, 88, 89, 0, 0, 0, 0, 0,
	323, 672, 0, 627, 628, 0, 0, 0, 0, 619,
	601, 650, 0, 702, 0, -2, 0, 697, 696, 0,
	478, 505, 506, 507, 467, 289, 268, 0, 270, 0,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 303,
	304, 307, 0, 314, 315, 308, 0, 0, 323, 0,
	0, 173, 135, 153, 0, 0, 176, 177, 231, 232,
	246, 249, 0, 0, 0, 90, 324, 0, 70, 76,
	78, 79, 80, 0, 0, 0, 0, 26, 0, 0,
	595, 596, 598, 599, 0, 0, 0, 0, 692, 27,
	0, 470, 266, 0, 271, 0, 0, 0, 274, 0,
	286, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 138, 142, 510,
	0, 0, 92, 0, 0, 0, 77, 0, 96, 0,
	368, 0, 0, 673, 671, 600, 0, 0, 0, 700,
	-2, 698, 290, 0, 272, 277, 275, 278, 287, 288,
	279, 280, 281, 282, 283, 284, 320, 320, 0, 0,
	132, 174, 137, 0, 0, 0, 0, 0, 0, 164,
	0, 508, 0, 0, 0, 68, 0, 325, 91, 69,
	336, 99, 367, 0, 0, 0, 620, 0, 623, 0,
	269, 0, 309, 310, 0, 267, 0, 155, 0, 157,
	158, 159, 160, 161, 162, 163, 0, 267, 0, 508,
	267, 0, 341, 369, 0, 0, 621, 0, 273, 0,
	289, 154, 156, 165, 0, 289, 0, 267, 62, 93,
	0, 337, 0, 291, 0, 316, 0, 61, 511, 63,
	0, 0, 0, 166, 0, 622, 0, 0, 0, 311,
	370, 371,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 313,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 314, 3, 315, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:349
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:354
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:355
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:359
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:382
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:390
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:400
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:407
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:413
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:417
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:423
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:427
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:434
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:446
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:458
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:462
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:468
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:474
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:478
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:482
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:487
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:488
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:496
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:501
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:505
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:511
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:515
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:519
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:523
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:529
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:533
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:539
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:547
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:553
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:557
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:561
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:565
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:571
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:575
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:581
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:586
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:606
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:622
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:637
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:645
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:653
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:657
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:661
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:682
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].triggerBody,
			}}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:694
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:698
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:704
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:708
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:712
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:718
		{
			yyVAL.triggerBody = []Statement{yyDollar[1].statement}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:722
		{
			yyVAL.triggerBody = append(yyVAL.triggerBody, yyDollar[2].statement)
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:728
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:735
		{
			yyVAL.bytes = nil
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:739
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:743
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:748
		{
			yyVAL.bytes = nil
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:752
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:756
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:760
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:764
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:768
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:773
		{
			yyVAL.expr = nil
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:777
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:782
		{
			yyVAL.expr = nil
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:786
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:791
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:795
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:800
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:804
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:810
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:815
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:820
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:826
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:831
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:837
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:842
		{
			yyVAL.bytes = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:846
		{
			yyVAL.bytes = nil
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:852
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:859
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:866
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:871
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:879
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:883
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:889
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:894
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:905
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:917
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:922
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:927
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:932
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:937
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:947
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:952
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:957
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:962
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:967
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:972
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:978
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:983
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:988
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:993
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:999
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1011
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1017
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1024
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1028
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1032
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1042
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1046
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1050
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1054
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1058
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1062
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1066
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1072
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1081
		{
			yyVAL.sequence = &Sequence{}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1085
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1090
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1095
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1100
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1105
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1110
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1120
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1125
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1130
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1135
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1140
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1145
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1152
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1156
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1160
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1164
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1168
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1172
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1177
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1181
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1186
		{
			yyVAL.bytes = nil
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1196
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1201
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1223
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1231
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1329
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1333
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 214:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 232:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1438
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1442
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1446
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1468
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1473
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1478
		{
			yyVAL.optVal = nil
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1482
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1487
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1491
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1499
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1503
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1509
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1517
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1521
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1525
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1530
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1534
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1539
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1543
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1548
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1552
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1556
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1561
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1565
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1574
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1578
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1582
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1588
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1607
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1611
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1617
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1621
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1631
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1636
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1640
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1644
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1648
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1652
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1656
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1660
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1664
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1668
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1674
		{
			yyVAL.str = ""
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1678
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1684
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1688
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1694
		{
			yyVAL.indexPartition = nil
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1698
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1702
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1708
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1712
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1716
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1720
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1724
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1728
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1732
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1736
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1742
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1746
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1752
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1762
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1767
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1773
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 307:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1778
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 308:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1785
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 309:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1792
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 310:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1799
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 311:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1808
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1820
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1824
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1828
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1832
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 316:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1838
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1849
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1853
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1857
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1863
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1867
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1872
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1879
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1883
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1888
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1892
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1896
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1904
		{
			yyVAL.str = yyDollar[1].str
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1908
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1912
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1918
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1922
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1926
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1932
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 336:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1936
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 337:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1950
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 338:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1964
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1973
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1977
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1981
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1994
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 343:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2004
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 344:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2009
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2014
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2018
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2050
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2056
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2060
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 370:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2066
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 371:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2070
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2076
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2082
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2090
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2095
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2103
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2107
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2113
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2117
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2122
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2128
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2132
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2136
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2141
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2145
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2149
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2153
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2157
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2161
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2165
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2169
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2173
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2177
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2185
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2195
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2199
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2203
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2207
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2211
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2215
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2219
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2229
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2245
		{
			yyVAL.str = ""
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2249
		{
			yyVAL.str = "extended "
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2255
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2259
		{
			yyVAL.str = "full "
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2265
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2269
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2273
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2279
		{
			yyVAL.showFilter = nil
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2283
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2287
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2293
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2297
		{
			yyVAL.str = SessionStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2301
		{
			yyVAL.str = GlobalStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2307
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2311
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2317
		{
			yyVAL.statement = &Begin{}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2321
		{
			yyVAL.statement = &Begin{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2327
		{
			yyVAL.statement = &Commit{}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2333
		{
			yyVAL.statement = &Rollback{}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2339
		{
			yyVAL.statement = &OtherRead{}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.statement = &OtherRead{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2347
		{
			yyVAL.statement = &OtherRead{}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2351
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2355
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2360
		{
			setAllowComments(yylex, true)
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2364
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.bytes2 = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2374
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2380
		{
			yyVAL.str = UnionStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2384
		{
			yyVAL.str = UnionAllStr
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2388
		{
			yyVAL.str = UnionDistinctStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2393
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2397
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2401
		{
			yyVAL.str = SQLCacheStr
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2406
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2410
		{
			yyVAL.str = DistinctStr
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2415
		{
			yyVAL.str = ""
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2419
		{
			yyVAL.str = StraightJoinHint
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.selectExprs = nil
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2434
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2444
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2448
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2452
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2456
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2461
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2465
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2469
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2476
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2481
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2485
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2491
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2495
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2505
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2509
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2513
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2519
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 467:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2523
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2529
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2534
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2538
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2544
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2548
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2561
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2569
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2573
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2579
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2581
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2585
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2587
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 481:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2591
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.empty = struct{}{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2598
		{
			yyVAL.empty = struct{}{}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2601
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2605
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2609
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2616
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.str = JoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.str = JoinStr
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.str = JoinStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2636
		{
			yyVAL.str = StraightJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2642
		{
			yyVAL.str = LeftJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2646
		{
			yyVAL.str = LeftJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2650
		{
			yyVAL.str = RightJoinStr
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2654
		{
			yyVAL.str = RightJoinStr
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2660
		{
			yyVAL.str = NaturalJoinStr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2664
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2674
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2678
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2693
		{
			yyVAL.indexHints = nil
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2697
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2701
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2705
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2710
		{
			yyVAL.expr = nil
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2714
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2719
		{
			yyVAL.columns = nil
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2723
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2729
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2733
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2737
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2745
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2749
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2753
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2759
		{
			yyVAL.str = ""
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2763
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2769
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2773
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2779
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2787
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2791
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2799
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2803
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 530:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2807
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2811
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2815
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2821
		{
			yyVAL.str = IsNullStr
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2825
		{
			yyVAL.str = IsNotNullStr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2829
		{
			yyVAL.str = IsTrueStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.str = IsNotTrueStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2837
		{
			yyVAL.str = IsFalseStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2841
		{
			yyVAL.str = IsNotFalseStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2847
		{
			yyVAL.str = EqualStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2851
		{
			yyVAL.str = LessThanStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2855
		{
			yyVAL.str = GreaterThanStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2859
		{
			yyVAL.str = LessEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2863
		{
			yyVAL.str = GreaterEqualStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2867
		{
			yyVAL.str = NotEqualStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2871
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2876
		{
			yyVAL.expr = nil
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2880
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2886
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2890
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2894
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2900
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2906
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2910
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2916
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2920
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2924
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2928
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2932
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2936
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2940
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2944
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2948
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2952
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2956
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2960
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2964
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2968
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2972
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2976
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2980
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2984
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2988
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2992
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2996
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3000
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3004
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3012
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3026
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3030
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3034
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3042
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3056
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3060
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3064
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3074
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3078
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3082
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 592:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3086
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 593:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3090
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3094
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3098
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3102
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3106
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 598:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3110
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 599:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3114
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 600:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3118
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 601:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3122
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3126
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3130
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3140
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3144
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3148
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3152
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3157
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3172
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3176
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3190
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3194
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3198
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3202
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3208
		{
			yyVAL.str = ""
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3212
		{
			yyVAL.str = BooleanModeStr
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3216
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 622:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3220
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3224
		{
			yyVAL.str = QueryExpansionStr
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3230
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3234
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3240
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3244
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3248
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3252
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3256
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3260
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3270
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3274
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3278
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3282
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3286
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3290
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3294
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3300
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3304
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3308
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3312
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3316
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3320
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3324
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3329
		{
			yyVAL.expr = nil
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3333
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3338
		{
			yyVAL.str = string("")
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3342
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3348
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3352
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3358
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3363
		{
			yyVAL.expr = nil
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3373
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3377
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 658:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3381
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3387
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3391
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3395
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3399
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3403
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3407
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3411
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3415
		{
			yyVAL.expr = &NullVal{}
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3421
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3430
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3434
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3439
		{
			yyVAL.exprs = nil
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3443
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.expr = nil
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3457
		{
			yyVAL.orderBy = nil
		}
	case 675:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3461
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3477
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3482
		{
			yyVAL.str = AscScr
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3486
		{
			yyVAL.str = AscScr
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3490
		{
			yyVAL.str = DescScr
		}
	case 682:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3495
		{
			yyVAL.limit = nil
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3499
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3503
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3512
		{
			yyVAL.str = ""
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3516
		{
			yyVAL.str = ForUpdateStr
		}
	case 688:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3520
		{
			yyVAL.str = ShareModeStr
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3533
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3537
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3541
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 692:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3546
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3550
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 694:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3554
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3561
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3565
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3569
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 698:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3573
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3578
		{
			yyVAL.updateExprs = nil
		}
	case 700:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3582
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3588
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3592
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3598
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3602
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3608
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3614
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3624
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3628
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3634
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3640
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3644
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3650
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3654
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3658
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3662
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3669
		{
			yyVAL.bytes = []byte("charset")
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3676
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3680
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3684
		{
			yyVAL.expr = &Default{}
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3693
		{
			yyVAL.byt = 0
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3695
		{
			yyVAL.byt = 1
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3698
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3700
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3703
		{
			yyVAL.str = ""
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3705
		{
			yyVAL.str = IgnoreStr
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3709
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3711
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3713
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3715
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3717
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3719
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3721
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3723
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3725
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3727
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3730
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3732
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3734
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3738
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3740
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3744
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3748
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3755
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3761
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3765
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3772
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 993:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4038
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4047
		{
			decNesting(yylex)
		}
	case 995:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4052
		{
			forceEOF(yylex)
		}
	case 996:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4057
		{
			forceEOF(yylex)
		}
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4061
		{
			forceEOF(yylex)
		}
	case 998:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4065
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
