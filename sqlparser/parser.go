// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	triggerBody          []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const UNIQUE = 57460
const KEY = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const MAXVALUE = 57470
const PARTITION = 57471
const REORGANIZE = 57472
const LESS = 57473
const THAN = 57474
const PROCEDURE = 57475
const TRIGGER = 57476
const VINDEX = 57477
const VINDEXES = 57478
const STATUS = 57479
const VARIABLES = 57480
const RESTRICT = 57481
const CASCADE = 57482
const NO = 57483
const ACTION = 57484
const PERMISSIVE = 57485
const RESTRICTIVE = 57486
const PUBLIC = 57487
const CURRENT_USER = 57488
const SESSION_USER = 57489
const PAD_INDEX = 57490
const FILLFACTOR = 57491
const IGNORE_DUP_KEY = 57492
const STATISTICS_NORECOMPUTE = 57493
const STATISTICS_INCREMENTAL = 57494
const ALLOW_ROW_LOCKS = 57495
const ALLOW_PAGE_LOCKS = 57496
const BEFORE = 57497
const AFTER = 57498
const EACH = 57499
const ROW = 57500
const SCROLL = 57501
const CURSOR = 57502
const OPEN = 57503
const CLOSE = 57504
const FETCH = 57505
const PRIOR = 57506
const FIRST = 57507
const LAST = 57508
const DEALLOCATE = 57509
const BEGIN = 57510
const START = 57511
const TRANSACTION = 57512
const COMMIT = 57513
const ROLLBACK = 57514
const BIT = 57515
const TINYINT = 57516
const SMALLINT = 57517
const SMALLSERIAL = 57518
const MEDIUMINT = 57519
const INT = 57520
const INTEGER = 57521
const SERIAL = 57522
const BIGINT = 57523
const BIGSERIAL = 57524
const INTNUM = 57525
const REAL = 57526
const DOUBLE = 57527
const PRECISION = 57528
const FLOAT_TYPE = 57529
const DECIMAL = 57530
const NUMERIC = 57531
const SMALLMONEY = 57532
const MONEY = 57533
const TIME = 57534
const TIMESTAMP = 57535
const DATETIME = 57536
const YEAR = 57537
const DATETIMEOFFSET = 57538
const DATETIME2 = 57539
const SMALLDATETIME = 57540
const CHAR = 57541
const VARCHAR = 57542
const VARYING = 57543
const BOOL = 57544
const CHARACTER = 57545
const VARBINARY = 57546
const NCHAR = 57547
const NVARCHAR = 57548
const NTEXT = 57549
const UUID = 57550
const TEXT = 57551
const TINYTEXT = 57552
const MEDIUMTEXT = 57553
const LONGTEXT = 57554
const CITEXT = 57555
const BLOB = 57556
const TINYBLOB = 57557
const MEDIUMBLOB = 57558
const LONGBLOB = 57559
const JSON = 57560
const JSONB = 57561
const ENUM = 57562
const GEOMETRY = 57563
const POINT = 57564
const LINESTRING = 57565
const POLYGON = 57566
const GEOMETRYCOLLECTION = 57567
const MULTIPOINT = 57568
const MULTILINESTRING = 57569
const MULTIPOLYGON = 57570
const ARRAY = 57571
const NOW = 57572
const GETDATE = 57573
const BPCHAR = 57574
const NULLX = 57575
const AUTO_INCREMENT = 57576
const APPROXNUM = 57577
const SIGNED = 57578
const UNSIGNED = 57579
const ZEROFILL = 57580
const ZONE = 57581
const AUTOINCREMENT = 57582
const DATABASES = 57583
const TABLES = 57584
const VITESS_KEYSPACES = 57585
const VITESS_SHARDS = 57586
const VITESS_TABLETS = 57587
const VSCHEMA_TABLES = 57588
const EXTENDED = 57589
const FULL = 57590
const PROCESSLIST = 57591
const NAMES = 57592
const CHARSET = 57593
const GLOBAL = 57594
const SESSION = 57595
const ISOLATION = 57596
const LEVEL = 57597
const READ = 57598
const WRITE = 57599
const ONLY = 57600
const REPEATABLE = 57601
const COMMITTED = 57602
const UNCOMMITTED = 57603
const SERIALIZABLE = 57604
const CURRENT_TIMESTAMP = 57605
const DATABASE = 57606
const CURRENT_DATE = 57607
const CURRENT_TIME = 57608
const LOCALTIME = 57609
const LOCALTIMESTAMP = 57610
const UTC_DATE = 57611
const UTC_TIME = 57612
const UTC_TIMESTAMP = 57613
const REPLACE = 57614
const CONVERT = 57615
const CAST = 57616
const SUBSTR = 57617
const SUBSTRING = 57618
const GROUP_CONCAT = 57619
const SEPARATOR = 57620
const INHERIT = 57621
const MATCH = 57622
const AGAINST = 57623
const BOOLEAN = 57624
const LANGUAGE = 57625
const WITH = 57626
const WITHOUT = 57627
const PARSER = 57628
const QUERY = 57629
const EXPANSION = 57630
const UNUSED = 57631
const GENERATED = 57632
const ALWAYS = 57633
const IDENTITY = 57634
const SEQUENCE = 57635
const INCREMENT = 57636
const MINVALUE = 57637
const CACHE = 57638
const CYCLE = 57639
const OWNED = 57640
const NONE = 57641
const CLUSTERED = 57642
const NONCLUSTERED = 57643
const REPLICATION = 57644
const INCLUDE = 57645
const TYPECAST = 57646
const CHECK = 57647

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 124,
	-2, 114,
	-1, 36,
	154, 436,
	155, 436,
	-2, 426,
	-1, 272,
	110, 769,
	-2, 765,
	-1, 273,
	110, 770,
	-2, 766,
	-1, 343,
	81, 973,
	-2, 75,
	-1, 344,
	81, 924,
	-2, 76,
	-1, 349,
	81, 903,
	-2, 736,
	-1, 351,
	81, 947,
	-2, 738,
	-1, 662,
	52, 41,
	54, 41,
	-2, 43,
	-1, 807,
	110, 772,
	-2, 768,
	-1, 1049,
	5, 28,
	-2, 571,
	-1, 1074,
	5, 27,
	-2, 710,
	-1, 1175,
	5, 27,
	-2, 81,
	-1, 1392,
	5, 28,
	-2, 711,
	-1, 1475,
	5, 27,
	-2, 713,
	-1, 1619,
	5, 28,
	-2, 714,
	-1, 1734,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 14980

var yyAct = [...]int{
	273, 1560, 1525, 1485, 1609, 1488, 1398, 1077, 1597, 739,
	984, 588, 3, 1108, 1529, 1289, 1411, 871, 1262, 589,
	474, 783, 1111, 1290, 1626, 1166, 1177, 276, 889, 979,
	913, 919, 1133, 1259, 251, 89, 1263, 270, 89, 656,
	1139, 654, 992, 933, 1093, 872, 912, 245, 1235, 1041,
	745, 843, 832, 974, 840, 928, 1163, 303, 47, 250,
	66, 672, 89, 89, 353, 277, 859, 809, 521, 353,
	472, 1082, 353, 353, 527, 671, 868, 658, 89, 302,
	89, 508, 342, 348, 643, 533, 89, 330, 690, 335,
	686, 246, 247, 248, 249, 275, 541, 612, 842, 53,
	260, 1661, 339, 328, 337, 47, 1147, 946, 1023, 1230,
	949, 264, 52, 256, 1699, 329, 565, 1315, 603, 334,
	555, 1651, 1417, 565, 86, 475, 476, 1692, 279, 554,
	553, 563, 564, 556, 557, 558, 559, 560, 561, 562,
	555, 1303, 1424, 565, 1302, 345, 1740, 1676, 1736, 1617,
	1565, 1685, 338, 563, 564, 556, 557, 558, 559, 560,
	561, 562, 555, 1726, 1131, 565, 1564, 487, 985, 488,
	1167, 1168, 1655, 1675, 1616, 495, 556, 557, 558, 559,
	560, 561, 562, 555, 1254, 549, 565, 552, 948, 1640,
	333, 1386, 908, 567, 568, 569, 570, 571, 572, 573,
	485, 550, 551, 548, 554, 553, 563, 564, 556, 557,
	558, 559, 560, 561, 562, 555, 1101, 1284, 565, 1100,
	903, 904, 1102, 902, 89, 1285, 1286, 516, 353, 353,
	353, 353, 520, 353, 558, 559, 560, 561, 562, 555,
	353, 1441, 565, 962, 1553, 554, 553, 563, 564, 556,
	557, 558, 559, 560, 561, 562, 555, 1440, 673, 565,
	674, 519, 1149, 1382, 520, 951, 963, 353, 530, 554,
	553, 563, 564, 556, 557, 558, 559, 560, 561, 562,
	555, 1516, 774, 565, 1464, 507, 507, 507, 507, 775,
	507, 501, 863, 953, 1691, 1335, 1693, 507, 1334, 975,
	1236, 554, 553, 563, 564, 556, 557, 558, 559, 560,
	561, 562, 555, 497, 47, 565, 1146, 1375, 580, 581,
	582, 583, 584, 585, 586, 1373, 475, 476, 89, 575,
	244, 566, 577, 1238, 1702, 89, 89, 89, 566, 1593,
	746, 353, 1527, 747, 748, 1345, 1346, 353, 1143, 1504,
	1145, 1144, 1641, 1414, 529, 503, 1583, 505, 566, 587,
	1735, 591, 592, 593, 594, 595, 596, 597, 598, 599,
	1724, 602, 604, 604, 604, 604, 604, 604, 604, 604,
	566, 632, 633, 634, 635, 502, 504, 1610, 84, 80,
	81, 82, 655, 1684, 1602, 1213, 75, 1350, 1240, 869,
	1305, 566, 1245, 576, 1239, 512, 513, 1611, 1472, 1237,
	1489, 617, 1351, 618, 1429, 1243, 1565, 638, 1419, 1210,
	1418, 1125, 345, 1491, 1428, 1615, 662, 1124, 1241, 1242,
	1431, 1113, 1296, 566, 605, 606, 607, 608, 609, 610,
	611, 663, 1645, 669, 70, 73, 1244, 1246, 963, 976,
	929, 1711, 1359, 1430, 1554, 1647, 1130, 566, 956, 71,
	74, 747, 748, 333, 1544, 930, 1118, 1297, 490, 890,
	892, 1116, 480, 77, 566, 78, 72, 68, 89, 1412,
	1413, 1415, 57, 1642, 78, 89, 1449, 89, 353, 753,
	89, 1490, 477, 89, 1092, 1091, 1090, 89, 566, 353,
	353, 353, 353, 353, 353, 353, 353, 59, 60, 61,
	62, 63, 737, 353, 353, 486, 500, 1211, 89, 1209,
	223, 79, 1214, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	566, 929, 1212, 353, 578, 579, 929, 89, 1730, 1558,
	1603, 1604, 1605, 353, 891, 507, 930, 1395, 1222, 301,
	83, 930, 1057, 1035, 781, 545, 507, 507, 507, 507,
	507, 507, 507, 507, 786, 496, 1329, 738, 910, 909,
	507, 507, 778, 540, 749, 684, 750, 1576, 1018, 754,
	762, 1575, 757, 1574, 1573, 808, 1572, 353, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 847, 1218, 760, 69, 776, 1643, 1644,
	1646, 1648, 1649, 347, 520, 1571, 1570, 1330, 478, 1568,
	1342, 482, 483, 1080, 784, 785, 795, 806, 810, 807,
	539, 538, 788, 675, 1256, 47, 816, 860, 89, 803,
	1503, 89, 89, 89, 89, 89, 860, 540, 1064, 591,
	814, 815, 813, 89, 805, 617, 89, 618, 1019, 1487,
	89, 1054, 852, 855, 835, 89, 89, 847, 861, 353,
	539, 538, 539, 538, 837, 838, 1053, 811, 1052, 1258,
	1110, 1217, 353, 742, 50, 857, 535, 540, 865, 540,
	1078, 848, 849, 1714, 812, 539, 538, 856, 334, 334,
	334, 334, 334, 539, 538, 873, 897, 538, 1713, 539,
	538, 489, 540, 655, 1121, 893, 479, 1686, 266, 1506,
	540, 1502, 334, 540, 1434, 1690, 540, 870, 1150, 875,
	876, 864, 878, 866, 867, 1689, 886, 894, 353, 895,
	531, 1110, 353, 1110, 353, 89, 900, 89, 1627, 1688,
	345, 899, 89, 917, 89, 898, 874, 89, 353, 877,
	1687, 1109, 1120, 914, 981, 1379, 520, 1628, 76, 333,
	333, 333, 333, 333, 1032, 1033, 1034, 347, 347, 347,
	347, 1629, 347, 1110, 333, 977, 978, 481, 1625, 347,
	484, 1514, 787, 333, 492, 493, 494, 473, 1433, 507,
	1569, 507, 1150, 554, 553, 563, 564, 556, 557, 558,
	559, 560, 561, 562, 555, 507, 543, 565, 553, 563,
	564, 556, 557, 558, 559, 560, 561, 562, 555, 327,
	1471, 565, 780, 1443, 991, 1442, 996, 1311, 799, 801,
	802, 1013, 1172, 1014, 800, 833, 1015, 834, 1566, 1170,
	844, 846, 1038, 1039, 1040, 1025, 1150, 1024, 1438, 1361,
	1164, 1127, 929, 806, 1036, 807, 862, 924, 779, 923,
	520, 925, 926, 1591, 1744, 1586, 927, 930, 1479, 1732,
	1074, 1037, 1408, 1725, 1585, 539, 538, 1408, 1698, 1521,
	347, 1300, 1031, 810, 353, 1299, 677, 89, 48, 26,
	27, 1298, 540, 1095, 1119, 1097, 1408, 1697, 1408, 1683,
	1536, 1591, 1682, 353, 1679, 1678, 888, 1671, 520, 1520,
	28, 1408, 1668, 1515, 353, 1063, 1075, 1076, 1383, 1479,
	1607, 1408, 1587, 1479, 1512, 353, 1479, 520, 1096, 1103,
	1046, 987, 811, 1105, 89, 964, 965, 966, 967, 1087,
	1479, 1480, 1408, 1407, 334, 1126, 1061, 292, 291, 294,
	295, 296, 297, 1098, 1281, 520, 293, 298, 1394, 520,
	1435, 524, 528, 836, 1141, 1338, 1337, 1332, 1333, 1332,
	1331, 1114, 1115, 1117, 1047, 520, 353, 759, 546, 640,
	520, 845, 520, 1426, 914, 1175, 758, 1169, 743, 741,
	498, 554, 553, 563, 564, 556, 557, 558, 559, 560,
	561, 562, 555, 682, 681, 565, 353, 666, 491, 89,
	89, 473, 590, 21, 1322, 333, 1165, 89, 23, 1079,
	1171, 601, 566, 1592, 845, 1591, 353, 347, 23, 1260,
	1659, 47, 1078, 1390, 54, 1183, 566, 1182, 347, 347,
	347, 347, 347, 347, 347, 347, 640, 1225, 667, 1184,
	665, 1425, 347, 347, 896, 1474, 665, 1178, 1537, 1538,
	1540, 640, 1079, 507, 1539, 50, 353, 353, 1341, 255,
	1231, 1232, 790, 1047, 1336, 50, 50, 1266, 1229, 1059,
	1261, 1228, 543, 1249, 1250, 347, 1252, 1253, 1044, 1234,
	1047, 639, 1045, 1248, 1283, 353, 1247, 353, 353, 1049,
	1050, 1051, 1104, 1056, 1078, 901, 1223, 1227, 1060, 1445,
	1444, 1269, 1047, 1066, 1271, 640, 1067, 1068, 1069, 1070,
	668, 1265, 1058, 47, 782, 1737, 839, 1288, 873, 1251,
	1301, 807, 1696, 257, 873, 952, 853, 853, 1277, 1278,
	1279, 1287, 853, 1264, 1673, 1157, 1055, 1159, 1160, 1161,
	1162, 1255, 1141, 1589, 1306, 1588, 1304, 1312, 1580, 1579,
	23, 1541, 1513, 1458, 89, 353, 953, 1270, 980, 49,
	1321, 1320, 89, 1318, 1307, 1308, 914, 353, 914, 853,
	50, 1275, 1173, 1174, 1072, 1282, 353, 1073, 1151, 1152,
	1316, 1154, 1155, 1156, 975, 1132, 1107, 969, 89, 645,
	648, 649, 650, 646, 353, 647, 651, 50, 347, 1083,
	1084, 1083, 1084, 353, 968, 1348, 89, 65, 740, 1561,
	566, 347, 1363, 1352, 1313, 1446, 1260, 1181, 1086, 1135,
	1136, 1137, 1354, 756, 744, 517, 1360, 1140, 1138, 299,
	300, 794, 1089, 1088, 883, 881, 1357, 796, 797, 884,
	882, 880, 885, 1339, 649, 650, 879, 1364, 1366, 1708,
	1371, 1347, 261, 262, 1674, 1221, 353, 1020, 353, 353,
	353, 89, 353, 334, 1401, 1402, 1403, 982, 353, 534,
	1706, 347, 1030, 347, 1029, 1389, 1158, 1356, 1703, 680,
	499, 1380, 532, 1310, 1227, 1397, 1388, 347, 1233, 353,
	590, 1416, 1384, 850, 851, 1423, 1459, 1406, 1105, 1421,
	1404, 1134, 989, 1420, 784, 785, 1135, 1136, 1137, 755,
	1456, 347, 1309, 1180, 1140, 1138, 299, 300, 983, 522,
	653, 1141, 353, 353, 1323, 1324, 1427, 1326, 1327, 1328,
	353, 523, 258, 259, 333, 1280, 534, 1028, 1722, 1455,
	353, 1344, 1295, 54, 252, 1027, 1694, 1547, 1447, 914,
	253, 1546, 1079, 1448, 554, 553, 563, 564, 556, 557,
	558, 559, 560, 561, 562, 555, 1462, 1667, 565, 993,
	994, 995, 1577, 1666, 907, 353, 353, 1325, 1665, 1664,
	645, 648, 649, 650, 646, 1475, 647, 651, 536, 353,
	1578, 1451, 506, 1452, 1453, 1454, 1555, 1465, 1466, 353,
	1467, 1468, 1469, 1178, 914, 1501, 1450, 1473, 1142, 1146,
	1505, 1500, 1499, 1484, 1294, 1293, 1123, 777, 56, 58,
	1509, 1507, 1185, 1094, 1349, 353, 353, 89, 1265, 664,
	353, 1476, 1534, 8, 51, 1517, 1531, 7, 1, 353,
	1522, 1143, 347, 1145, 1144, 1542, 1532, 6, 1530, 5,
	1264, 1660, 1595, 1112, 1528, 1601, 1584, 1129, 1582, 1510,
	353, 67, 1654, 1590, 1122, 1314, 1343, 1179, 1557, 1194,
	1365, 986, 1562, 1556, 1176, 1001, 1608, 1367, 1021, 1022,
	1622, 528, 1486, 921, 911, 471, 64, 1567, 922, 1376,
	1377, 1378, 920, 918, 1381, 1142, 1146, 1543, 1436, 683,
	947, 1148, 950, 689, 687, 688, 685, 1391, 1392, 1393,
	691, 1396, 1265, 231, 47, 347, 1524, 353, 353, 353,
	353, 340, 353, 1594, 1200, 652, 676, 537, 1143, 1208,
	1145, 1144, 1207, 997, 1264, 1216, 773, 1606, 1017, 353,
	515, 233, 353, 574, 1048, 347, 353, 1613, 1026, 1099,
	1623, 346, 1650, 1618, 1267, 1437, 526, 1439, 1432, 1065,
	353, 353, 1637, 1545, 1461, 347, 1062, 600, 858, 353,
	353, 278, 353, 798, 1635, 1636, 1638, 1630, 1631, 1632,
	1633, 1634, 353, 566, 1652, 1653, 290, 347, 1658, 1201,
	287, 353, 289, 1463, 1203, 1196, 1197, 1669, 1204, 1199,
	1198, 873, 853, 1206, 1202, 1268, 1094, 288, 853, 789,
	1518, 1071, 1519, 547, 1205, 268, 332, 636, 644, 642,
	1195, 509, 510, 511, 641, 514, 1085, 1470, 1081, 1680,
	1681, 331, 518, 1224, 347, 1385, 347, 1291, 1695, 1552,
	353, 793, 25, 1481, 1482, 1483, 55, 263, 1700, 19,
	18, 17, 20, 16, 353, 15, 1705, 14, 353, 1677,
	1704, 29, 13, 12, 1511, 1710, 11, 1712, 10, 1707,
	9, 1535, 1533, 4, 254, 89, 22, 353, 2, 1717,
	1190, 0, 1720, 1718, 353, 1719, 525, 0, 0, 0,
	946, 0, 89, 0, 1729, 0, 0, 0, 0, 1731,
	0, 0, 0, 1733, 1340, 0, 0, 1548, 1549, 1550,
	1551, 353, 935, 0, 1734, 0, 1353, 0, 353, 0,
	1741, 87, 0, 0, 243, 1355, 942, 0, 931, 0,
	1135, 1136, 1137, 0, 932, 0, 0, 0, 1140, 1138,
	299, 300, 0, 1358, 0, 0, 267, 0, 87, 87,
	1191, 1187, 347, 0, 1192, 1189, 1188, 1742, 0, 74,
	47, 0, 0, 1257, 87, 0, 87, 0, 0, 0,
	1193, 0, 87, 1739, 0, 0, 1186, 0, 1272, 1273,
	0, 1728, 1274, 0, 0, 1276, 0, 938, 0, 934,
	943, 0, 1738, 0, 1614, 0, 940, 939, 0, 1619,
	0, 0, 0, 0, 0, 1399, 0, 1399, 1399, 1399,
	0, 1405, 0, 0, 0, 0, 0, 347, 954, 955,
	957, 958, 959, 1639, 960, 961, 554, 553, 563, 564,
	556, 557, 558, 559, 560, 561, 562, 555, 1399, 0,
	565, 970, 971, 972, 0, 973, 0, 0, 0, 0,
	1670, 554, 553, 563, 564, 556, 557, 558, 559, 560,
	561, 562, 555, 0, 0, 565, 0, 0, 0, 0,
	0, 347, 347, 0, 0, 1042, 0, 0, 0, 1457,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 1460,
	0, 763, 764, 765, 766, 767, 768, 769, 770, 0,
	0, 0, 0, 0, 0, 771, 772, 0, 0, 0,
	87, 0, 936, 0, 0, 0, 0, 1362, 937, 1142,
	1146, 1489, 0, 0, 1477, 1478, 0, 0, 0, 0,
	1007, 0, 0, 0, 1491, 0, 0, 0, 1291, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 1508, 0,
	0, 1727, 1143, 0, 1145, 1144, 0, 1387, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 944, 1043,
	945, 1011, 0, 0, 1291, 1523, 0, 0, 0, 1526,
	1005, 0, 0, 941, 1745, 1746, 0, 0, 1399, 554,
	553, 563, 564, 556, 557, 558, 559, 560, 561, 562,
	555, 0, 1490, 565, 0, 0, 1422, 0, 0, 1559,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 87, 660, 87, 0, 0, 0, 0, 0, 1002,
	999, 1000, 0, 998, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 0,
	0, 1009, 1012, 0, 0, 0, 1596, 1598, 1599, 1600,
	229, 1291, 0, 0, 0, 0, 0, 0, 0, 0,
	566, 0, 1153, 0, 0, 853, 0, 0, 1620, 0,
	0, 1621, 0, 0, 239, 1624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1526,
	1291, 0, 0, 0, 0, 0, 0, 0, 1291, 1291,
	0, 1656, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1663, 0, 0, 988, 1004, 990, 0, 0, 0,
	1672, 0, 0, 0, 0, 224, 0, 0, 0, 0,
	1016, 226, 613, 0, 0, 0, 0, 0, 232, 228,
	0, 0, 0, 0, 87, 0, 1003, 0, 0, 0,
	1563, 87, 0, 87, 0, 0, 87, 0, 0, 87,
	0, 0, 0, 761, 0, 615, 0, 0, 230, 1701,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 87, 1008, 0, 1709, 0, 1581,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 1010, 0, 87, 0, 0, 1399, 0, 0, 0,
	0, 0, 761, 1723, 0, 620, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 1612, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 0, 225, 0,
	347, 0, 0, 0, 630, 614, 0, 1526, 0, 1317,
	1319, 619, 0, 0, 267, 0, 0, 0, 0, 267,
	267, 0, 0, 854, 854, 267, 0, 0, 0, 854,
	0, 1657, 0, 0, 0, 0, 227, 0, 235, 236,
	237, 238, 242, 0, 0, 0, 0, 241, 240, 0,
	713, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	267, 267, 267, 0, 87, 0, 854, 87, 87, 87,
	87, 87, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 87, 0, 631, 0, 660, 0, 0, 0,
	0, 87, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1368, 1369, 0, 1370, 0, 0, 0, 1372,
	0, 1374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1721, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 1409, 1410, 0,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 87, 0, 0, 0, 0, 87, 0,
	87, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1662, 713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	267, 730, 731, 0, 732, 733, 734, 736, 735, 715,
	716, 717, 721, 719, 718, 720, 692, 694, 0, 630,
	693, 699, 695, 696, 697, 711, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 712, 722, 723,
	724, 725, 726, 727, 728, 729, 0, 0, 267, 0,
	0, 0, 0, 0, 698, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 714, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 631,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 0, 730, 731,
	1128, 732, 733, 734, 736, 735, 715, 716, 717, 721,
	719, 718, 720, 692, 694, 0, 630, 693, 699, 695,
	696, 697, 711, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 712, 722, 723, 724, 725, 726,
	727, 728, 729, 23, 24, 48, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 0, 0, 1219, 1220, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 37, 0, 0, 0,
	50, 0, 0, 267, 0, 0, 631, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 854,
	0, 0, 0, 0, 0, 854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 39, 0, 40, 41, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 660, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 352, 0, 915, 916, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 470, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 1106, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	0, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 87, 108, 0, 182, 120, 402, 131,
	440, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 854, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 404, 356, 407, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 411, 0, 104, 459,
	449, 0, 414, 461, 385, 403, 469, 405, 406, 438,
	365, 423, 154, 400, 383, 92, 388, 358, 395, 359,
	386, 416, 116, 384, 451, 426, 130, 467, 133, 431,
	0, 176, 142, 0, 0, 418, 453, 421, 445, 413,
	439, 373, 430, 462, 401, 434, 463, 0, 0, 0,
	352, 1716, 915, 916, 0, 0, 0, 0, 0, 105,
	0, 433, 458, 397, 470, 437, 357, 432, 87, 363,
	366, 468, 456, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 417, 422, 442, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 429, 0, 0, 0,
	370, 364, 0, 415, 0, 0, 0, 372, 0, 390,
	443, 0, 354, 447, 454, 412, 203, 457, 409, 408,
	161, 0, 108, 0, 182, 120, 402, 131, 440, 460,
	419, 452, 387, 396, 110, 394, 168, 155, 194, 428,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 391, 446,
	448, 377, 436, 367, 398, 441, 399, 420, 382, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 381, 455, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 435,
	169, 107, 195, 175, 376, 380, 374, 375, 424, 425,
	464, 465, 466, 444, 371, 0, 378, 379, 0, 450,
	125, 427, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 404, 356, 407, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 411, 0, 104, 459, 449, 0,
	414, 461, 385, 403, 469, 405, 406, 438, 365, 423,
	154, 400, 383, 92, 388, 358, 395, 359, 386, 416,
	116, 384, 451, 426, 130, 467, 133, 431, 0, 176,
	142, 0, 0, 418, 453, 421, 445, 413, 439, 373,
	430, 462, 401, 434, 463, 0, 0, 0, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 433,
	458, 397, 470, 437, 357, 432, 0, 363, 366, 468,
	456, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	417, 422, 442, 410, 0, 0, 0, 0, 0, 0,
	1226, 0, 389, 0, 429, 0, 0, 0, 370, 364,
	0, 415, 0, 0, 0, 372, 0, 390, 443, 0,
	354, 447, 454, 412, 203, 457, 409, 408, 161, 0,
	108, 0, 182, 120, 402, 131, 440, 460, 419, 452,
	387, 396, 110, 394, 168, 155, 194, 428, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 391, 446, 448, 377,
	436, 367, 398, 441, 399, 420, 382, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	381, 455, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 435, 169, 107,
	195, 175, 376, 380, 374, 375, 424, 425, 464, 465,
	466, 444, 371, 0, 378, 379, 0, 450, 125, 427,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 404,
	356, 407, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 170, 411, 0, 104, 459, 449, 0, 414, 461,
	385, 403, 469, 405, 406, 438, 365, 423, 154, 400,
	383, 92, 388, 358, 395, 359, 386, 416, 116, 384,
	451, 426, 130, 467, 133, 431, 0, 176, 142, 0,
	0, 418, 453, 421, 445, 413, 439, 373, 430, 462,
	401, 434, 463, 50, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 433, 458, 397,
	470, 437, 357, 432, 0, 363, 366, 468, 456, 392,
	393, 0, 0, 0, 0, 0, 0, 0, 417, 422,
	442, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 0, 429, 0, 0, 0, 370, 364, 0, 415,
	0, 0, 0, 372, 0, 390, 443, 0, 354, 447,
	454, 412, 203, 457, 409, 408, 161, 0, 108, 0,
	182, 120, 402, 131, 440, 460, 419, 452, 387, 396,
	110, 394, 168, 155, 194, 428, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 391, 446, 448, 377, 436, 367,
	398, 441, 399, 420, 382, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 381, 455,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 435, 169, 107, 195, 175,
	376, 380, 374, 375, 424, 425, 464, 465, 466, 444,
	371, 0, 378, 379, 0, 450, 125, 427, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 404, 356, 407,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 170,
	411, 0, 104, 459, 449, 0, 414, 461, 385, 403,
	469, 405, 406, 438, 365, 423, 154, 400, 383, 92,
	388, 358, 395, 359, 386, 416, 116, 384, 451, 426,
	130, 467, 133, 431, 0, 176, 142, 0, 0, 418,
	453, 421, 445, 413, 439, 373, 430, 462, 401, 434,
	463, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 433, 458, 397, 470, 437,
	357, 432, 0, 363, 366, 468, 456, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 417, 422, 442, 410,
	0, 0, 0, 0, 0, 0, 804, 0, 389, 0,
	429, 0, 0, 0, 370, 364, 0, 415, 0, 0,
	0, 372, 0, 390, 443, 0, 354, 447, 454, 412,
	203, 457, 409, 408, 161, 0, 108, 0, 182, 120,
	402, 131, 440, 460, 419, 452, 387, 396, 110, 394,
	168, 155, 194, 428, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 391, 446, 448, 377, 436, 367, 398, 441,
	399, 420, 382, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 381, 455, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 435, 169, 107, 195, 175, 376, 380,
	374, 375, 424, 425, 464, 465, 466, 444, 371, 0,
	378, 379, 0, 450, 125, 427, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 404, 356, 407, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 170, 411, 0,
	104, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 470, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	0, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 0, 108, 0, 182, 120, 402, 131,
	440, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 404, 356, 407, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 411, 0, 104, 459,
	449, 0, 414, 461, 385, 403, 469, 405, 406, 438,
	365, 423, 154, 400, 383, 92, 388, 358, 395, 359,
	386, 416, 116, 384, 451, 426, 130, 467, 133, 431,
	0, 176, 142, 0, 0, 418, 453, 421, 445, 413,
	439, 373, 430, 462, 401, 434, 463, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 433, 458, 397, 470, 437, 357, 432, 0, 363,
	366, 468, 456, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 417, 422, 442, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 429, 0, 0, 0,
	370, 364, 0, 415, 0, 0, 0, 372, 0, 390,
	443, 0, 354, 447, 454, 412, 203, 457, 409, 408,
	161, 0, 108, 0, 182, 120, 402, 131, 440, 460,
	419, 452, 387, 396, 110, 394, 168, 155, 194, 428,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 391, 446,
	448, 377, 436, 367, 398, 441, 399, 420, 382, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 381, 455, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 435,
	169, 107, 195, 175, 376, 380, 374, 375, 424, 425,
	464, 465, 466, 444, 371, 0, 378, 379, 0, 450,
	125, 427, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 404, 356, 407, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 411, 0, 104, 459, 449, 0,
	414, 461, 385, 403, 469, 405, 406, 438, 365, 423,
	154, 400, 383, 92, 388, 358, 395, 359, 386, 416,
	116, 384, 451, 426, 130, 467, 133, 431, 0, 176,
	142, 0, 0, 418, 453, 421, 445, 413, 439, 373,
	430, 462, 401, 434, 463, 0, 0, 0, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 433,
	458, 397, 470, 437, 357, 432, 0, 363, 366, 468,
	456, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	417, 422, 442, 410, 0, 0, 0, 0, 0, 0,
	0, 0, 389, 0, 429, 0, 0, 0, 370, 364,
	0, 415, 0, 0, 0, 372, 0, 390, 443, 0,
	354, 447, 454, 412, 203, 457, 409, 408, 161, 0,
	108, 0, 182, 120, 402, 131, 440, 460, 419, 452,
	387, 396, 110, 394, 168, 155, 194, 428, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 391, 446, 448, 377,
	436, 367, 398, 441, 399, 420, 382, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 350, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	381, 455, 206, 207, 208, 209, 0, 0, 0, 351,
	349, 124, 173, 128, 135, 164, 212, 435, 169, 107,
	195, 175, 376, 380, 374, 375, 424, 425, 464, 465,
	466, 444, 371, 0, 378, 379, 0, 450, 125, 427,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 404,
	356, 407, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 170, 411, 0, 104, 459, 449, 0, 414, 461,
	385, 403, 469, 405, 406, 438, 365, 423, 154, 400,
	383, 92, 388, 358, 395, 359, 386, 416, 116, 384,
	451, 426, 130, 467, 133, 431, 0, 176, 142, 0,
	0, 418, 453, 421, 445, 413, 439, 373, 430, 462,
	401, 434, 463, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 433, 458, 397,
	470, 437, 357, 432, 0, 363, 366, 468, 456, 392,
	393, 0, 0, 0, 0, 0, 0, 0, 417, 422,
	442, 410, 0, 0, 0, 0, 0, 0, 0, 0,
	389, 0, 429, 0, 0, 0, 370, 364, 0, 415,
	0, 0, 0, 372, 0, 390, 443, 0, 354, 447,
	454, 412, 203, 457, 409, 408, 161, 0, 108, 0,
	182, 120, 402, 131, 440, 460, 419, 452, 387, 396,
	110, 394, 168, 155, 194, 428, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 391, 446, 448, 377, 436, 367,
	398, 441, 399, 420, 382, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 381, 455,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 435, 169, 107, 195, 175,
	376, 380, 374, 375, 424, 425, 464, 465, 466, 444,
	371, 0, 378, 379, 0, 450, 125, 427, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 404, 356, 407,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 170,
	411, 0, 104, 459, 449, 0, 414, 461, 385, 403,
	469, 405, 406, 438, 365, 423, 154, 400, 383, 92,
	388, 358, 395, 359, 386, 416, 116, 384, 451, 426,
	130, 467, 133, 431, 0, 176, 142, 0, 0, 418,
	453, 421, 445, 413, 439, 373, 430, 462, 401, 434,
	463, 0, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 433, 458, 397, 470, 437,
	357, 432, 0, 363, 366, 468, 456, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 417, 422, 442, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 389, 0,
	429, 0, 0, 0, 370, 364, 0, 415, 0, 0,
	0, 372, 0, 390, 443, 0, 354, 447, 454, 412,
	203, 457, 409, 408, 161, 0, 108, 0, 182, 120,
	402, 131, 440, 460, 419, 452, 387, 396, 110, 394,
	168, 155, 194, 428, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 391, 446, 448, 377, 436, 367, 398, 441,
	399, 420, 382, 93, 183, 670, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 350, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 381, 455, 206, 207,
	208, 209, 0, 0, 0, 351, 349, 124, 173, 128,
	135, 164, 212, 435, 169, 107, 195, 175, 376, 380,
	374, 375, 424, 425, 464, 465, 466, 444, 371, 0,
	378, 379, 0, 450, 125, 427, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 404, 356, 407, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 170, 411, 0,
	104, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 470, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	0, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 0, 108, 0, 182, 120, 402, 131,
	440, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 341, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 344, 343, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 404, 356, 407, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 411, 154, 104, 0,
	92, 0, 0, 274, 0, 0, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	905, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 906,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 92, 841, 170, 274,
	322, 104, 0, 116, 271, 0, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 269, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 265, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 92, 0, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 520, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 92, 0,
	170, 274, 322, 104, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 265, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 314, 324, 320,
	321, 318, 319, 317, 316, 315, 326, 306, 307, 308,
	309, 311, 0, 125, 310, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 154, 322, 104,
	92, 0, 0, 274, 0, 0, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 92, 0, 170, 274,
	322, 104, 0, 116, 271, 0, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 269, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 170, 116, 322, 104, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	0, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 1743, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 314, 324, 320,
	321, 318, 319, 317, 316, 315, 326, 306, 307, 308,
	309, 311, 0, 125, 310, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 0, 0, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 170, 116, 322, 104,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 0, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	322, 104, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 554, 553, 563, 564, 556, 557, 558,
	559, 560, 561, 562, 555, 0, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 154, 0, 0, 92, 0, 542, 0, 0, 0,
	170, 116, 566, 104, 0, 130, 0, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 544, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 539, 538, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 540, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 659, 0, 0, 0, 0,
	116, 0, 170, 0, 130, 104, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	661, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 23, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 791, 0,
	0, 792, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 679, 170, 0,
	130, 104, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 678, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	659, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 661, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 657, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 1400, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 1715, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	1292, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 170, 0, 130, 104, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	661, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 544,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 751, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 637, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 336, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	0, 104, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 0, 170, 0,
	130, 104, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 170, 0, 0, 104,
}

var yyPact = [...]int{
	2687, -1000, -211, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1348, 1433, -1000, -1000, -1000, -1000, -1000, -1000, 1174,
	325, 351, 401, 269, 13790, 400, 2058, 14368, -1000, 143,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1022, -1000, -1000,
	-1000, -1000, -1000, 1347, 1354, 1137, 1331, 1233, -1000, 7397,
	360, 12053, 13501, 6206, -1000, 965, -192, 370, 14079, 347,
	347, 14079, 14079, 347, -1000, -89, 395, 14368, -1000, 14368,
	343, 962, 343, 343, 343, 14368, -1000, 455, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14368, 944, 1270, 235, 3980, 3980, 3980,
	3980, 251, 3980, -38, 1194, -1000, -1000, -1000, -1000, 3980,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	815, 1320, 7995, 7995, 1348, -1000, 1022, -1000, -1000, -1000,
	1267, -1000, -1000, 622, 1397, -1000, 9163, 445, -1000, 7995,
	112, 1033, -1000, -1000, 1033, -1000, -1000, 423, -1000, -1000,
	8579, 8579, 8579, 8579, 8579, 8579, 8579, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1033, -1000, 7699, 1033, 1033, 1033, 1033, 1033, 1033,
	1033, 1033, 7995, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
	1033, 1033, 2065, 1033, 1033, 1033, 1033, 13209, 1071, 1359,
	-1000, -1000, -1000, 1317, 10030, 10897, 14368, 1006, -1000, 1076,
	5888, -13, -1000, -1000, -1000, 552, 10608, -1000, -1000, -1000,
	1269, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 959, -1000, 2447, 391, -1000, -1000, 14368, 1176, 943,
	610, 942, 1193, 289, 14368, -1000, 12920, 3980, 366, 14368,
	1305, 1192, 14368, 940, 931, -1000, 5570, -1000, 3980, 3980,
	3980, 3980, 3980, 3980, 3980, 3980, -1000, -1000, -1000, -1000,
	-1000, -1000, 3980, 3980, -1000, 23, -1000, 14368, -1000, -1000,
	-1000, -1000, 1428, 481, 814, 444, 1080, -1000, 599, 1347,
	815, 1233, 10319, 1209, -1000, -1000, 14368, -1000, 7995, 7995,
	771, -1000, 12631, -1000, -1000, 4298, 485, 8579, 631, 561,
	8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579, 8579,
	8579, 8579, 8579, 8579, 8579, 789, 2065, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 917, -1000, 1022, 900, 900,
	10, 10, 10, 10, 10, 10, 8871, 6805, 815, 937,
	632, 7699, 7397, 7397, 7995, 7995, 14657, 14657, 7397, 1334,
	560, 632, 14657, -1000, 815, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7397, 7397, 7397, 7397, 253, 14368, -1000, 14657,
	12053, 12053, 12053, 12053, 12053, -1000, 1225, 1220, -1000, 1214,
	1213, 1221, 14368, -1000, 935, 10030, 420, 1033, -1000, 12342,
	-1000, -1000, 253, 1012, 12053, 14368, -1000, -1000, 5252, 1076,
	-13, 1061, -1000, -49, -54, 6509, 462, -1000, -1000, -1000,
	-1000, 3344, 741, 1681, -136, 11, -1000, -1000, -1000, -1000,
	1123, -1000, 1123, 240, 1123, 1123, 1123, -1000, 1123, 1123,
	46, 46, 46, 46, 46, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1171, 1154, -1000, 1123, 1123, 1123, -1000, 1123,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1151, 246, 1151, 1125, 1125, -1000, -1000, 14079, 1315, -133,
	885, 3980, 1298, 3980, 14368, 1381, 14368, -1000, -1000, -1000,
	1935, 14368, -1000, 14368, -1000, -1000, 14368, 3980, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 567, -1000, -1000, -1000, -1000, 1240, 7995,
	7995, 4934, 7995, -1000, -1000, -1000, 1320, -1000, 1334, 1346,
	-1000, 1261, 1259, 7397, -1000, -1000, 485, 635, -1000, -1000,
	707, -1000, -1000, -1000, -1000, 443, 1033, -1000, 1779, -1000,
	-1000, -1000, -1000, 631, 8579, 8579, 8579, 1754, 1779, 1917,
	59, 725, 10, 136, 136, 17, 17, 17, 17, 17,
	80, 80, -1000, -1000, -1000, -1000, 815, -1000, -1000, -1000,
	815, 7397, 1068, -1000, -1000, 7995, -1000, 815, 930, 930,
	624, 638, 1102, -1000, 442, 1078, 930, 7397, 569, -1000,
	7995, 815, -1000, -1000, 930, 815, 930, 930, 1164, 1033,
	-1000, 1060, -1000, 542, 1359, 1170, 1187, 1168, -1000, -1000,
	-1000, -1000, 1212, -1000, 1211, -1000, -1000, -1000, -1000, -1000,
	375, 374, 373, 14079, -1000, 1360, 12053, 1017, -1000, -1000,
	1061, -13, -57, -1000, -1000, -1000, -1000, 632, -1000, -1000,
	883, 1058, 3026, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1153, 710, 14079, 295, 329, 415, 410, 848, -1000,
	-1000, -1000, 695, -1000, 14079, 1427, -1000, -1000, 291, -1000,
	285, 607, 803, 14368, 148, 1152, 1268, -1000, -219, -1000,
	7, -1000, -1000, 797, 46, 46, 1123, 46, 46, 46,
	-1000, -1000, 462, 1266, 462, 462, 462, 462, 802, 802,
	-131, -131, -1000, -1000, -1000, 790, 1151, -1000, -1000, -1000,
	783, -1000, 1141, 1022, -1000, 4616, -1000, -1000, -1000, -1000,
	-1000, 1310, 1186, -1000, -1000, -1000, 171, -1000, 1644, 1488,
	396, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 249, 404, -1000, 3980, -1000, 592, 14368, 14368,
	1237, 632, 632, 438, -1000, -1000, 14368, -1000, -1000, -1000,
	-1000, 1046, -1000, -1000, -1000, 3662, 7397, -1000, 1754, 1779,
	37, -1000, 8579, 8579, -1000, -1000, 930, 7397, 632, -1000,
	-1000, -1000, 193, 789, 193, 8579, 8579, 4934, 8579, 8579,
	-114, 1029, 554, -1000, 7995, 601, -1000, -1000, -1000, -1000,
	-1000, 1185, 14657, 1033, -1000, 9741, 14079, 1348, 14657, 7995,
	7995, -1000, -1000, 7995, 1138, -1000, 7995, -1000, -1000, -1000,
	1033, 1033, 1033, 910, -1000, 1348, 1017, -1000, -1000, -1000,
	-56, -52, -1000, -1000, 3344, -1000, 3344, 11764, -1000, 1425,
	1343, 300, 341, -1000, 845, 839, -1000, 835, -1000, 9,
	-1000, -178, 78, 68, -1000, -1000, 1033, -1000, 1132, 1309,
	-1000, 1274, 778, -1000, 1181, -204, -1000, -1000, -1000, -1000,
	-1000, -1000, 1033, 1130, 1128, -1000, 1127, -1000, -1000, -1000,
	969, 462, 462, 46, 462, 462, 462, -1000, 510, -1000,
	-1000, -1000, -1000, 925, -1000, 923, -1000, 89, 86, -1000,
	1030, -1000, 921, 14368, 14079, -1000, 1024, -1000, 539, 1342,
	185, 14368, 1381, -1000, 276, -1000, 14079, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14079, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14368, -1000, -1000,
	-1000, -1000, -1000, 14079, 324, -1000, -1000, 801, 7995, -1000,
	-1000, -1000, 4616, -1000, 1360, 12053, -1000, -1000, 815, -1000,
	8579, 1779, 1779, -1000, -1000, 815, 1123, 1123, -1000, 1123,
	1125, -1000, -1000, 1123, 129, 1123, 121, 815, 815, 711,
	1282, -1000, 209, 909, 1033, -104, -1000, 632, 7995, -1000,
	1278, 988, 989, -1000, -1000, 7101, 815, 914, 437, 910,
	1347, -1000, 632, 632, 632, 11186, 632, 11186, 11186, 11186,
	9452, 14079, 1347, -1000, -1000, -1000, -1000, 3026, -1000, 898,
	-1000, 1123, 1123, 323, 323, -197, 284, 282, -1000, -1000,
	-1000, -1000, -192, -1000, -1000, 607, -1000, 7995, 11186, -167,
	-1000, 1007, 938, 1692, -1000, 204, 815, -1000, 743, -1000,
	669, 915, -1000, -1000, -1000, 462, -1000, -1000, -1000, -1000,
	-1000, 46, 800, 46, 1, -15, 776, -1000, 774, 1067,
	1184, 4616, 3344, 363, 1405, -1000, -1000, 1340, 1307, 14079,
	-1000, -1000, -1000, 1120, -1000, -1000, -1000, -1000, 1289, 14079,
	-1000, -1000, 632, 1373, 1002, -1000, 1779, -1000, -1000, 228,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8579,
	8579, -1000, 8579, 8579, 8579, 815, 772, 632, 272, -1000,
	1033, -1000, -1000, 1032, 14079, 14079, -1000, -1000, 896, -1000,
	-1000, 882, 882, 882, 420, -1000, -1000, 358, 11764, 1299,
	-1000, 670, -1000, -1000, 573, 190, 668, -1000, 14079, -192,
	-1000, 1033, 559, 879, 1119, 732, -1000, 868, 63, -131,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 462, -1000, 462,
	-1000, -1000, 864, 834, 11764, 14079, 14368, -1000, -1000, 14079,
	-1000, -1000, -1000, -1000, -1000, 168, 890, 1118, 11186, 1033,
	338, 1357, 1351, -1000, -1000, 177, 177, 177, 177, 153,
	-1000, -1000, 1407, -1000, 1033, -1000, 1022, 429, -1000, 14079,
	-1000, -1000, -1000, -1000, -1000, 1178, 1889, 113, -1000, 792,
	538, 742, 535, 534, 505, 503, 502, 500, 496, -1000,
	-1000, -1000, 1383, -1000, -1000, -1000, 1400, 1116, -1000, 1115,
	7995, 198, -1000, -1000, 829, 820, -1000, -1000, -1000, -1000,
	-1000, -1000, 877, 1112, 1110, 981, -1000, 164, 890, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14079, 14079, 14079, 14079,
	359, 11764, 875, 241, 271, -1000, 7995, 7995, -1000, -1000,
	-1000, -1000, 815, 126, -155, 14657, 989, 815, 14079, -1000,
	-1000, 14079, -1000, -153, 1889, 14079, -1000, 729, -1000, -1000,
	697, 722, 697, 697, 697, 697, 697, 323, 323, 14079,
	11764, 559, -1000, -107, 297, -1000, -1000, -199, 11764, 11764,
	-129, 14079, 7995, 890, -1000, 986, 2300, -1000, -1000, -1000,
	-1000, 14079, 1388, 1387, 1382, 1376, 867, 1176, 863, -1000,
	14079, 1101, 632, 980, -1000, 1236, -127, -158, 636, -1000,
	-1000, 1033, 860, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 607, 607, 857, 854, -1000,
	-1000, -1000, 92, 701, 690, 676, 666, -18, -1000, 1350,
	1360, 1089, 852, 833, -1000, -208, -1000, 632, -1000, 14079,
	157, -1000, -1000, 1271, -1000, -1000, -1000, -1000, -1000, -133,
	-1000, 241, 1257, 11764, -1000, 1231, -1000, 14079, -1000, 1889,
	-1000, -1000, 322, 358, 649, -1000, 634, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11475, 358, 11186, 1360, 358, 7995,
	-1000, 2447, 1339, 14079, -1000, -1000, 222, 828, -138, 815,
	-1000, 14368, 1178, -1000, -1000, -1000, 428, 1178, 824, 358,
	-1000, 632, 1022, -1000, 211, -1000, -156, -1000, 1082, -1000,
	4616, -1000, -1000, -1000, -1000, 1033, -159, 14079, -1000, 8287,
	-1000, 819, 177, 815, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1698, 11, 1023, 1696, 1694, 1693, 1468, 1466, 1456,
	1452, 1692, 1691, 1690, 1688, 1686, 1683, 1682, 1681, 1677,
	1675, 1673, 1672, 1671, 1670, 1669, 482, 1667, 1666, 1662,
	85, 1661, 100, 1659, 1655, 49, 98, 54, 51, 718,
	1653, 41, 115, 87, 1651, 71, 1648, 1646, 104, 1644,
	84, 1639, 1638, 89, 1637, 1636, 28, 7, 1635, 27,
	1633, 1631, 95, 37, 1629, 1627, 1612, 1610, 1606, 1593,
	67, 19, 18, 79, 36, 1591, 128, 65, 1588, 66,
	1587, 1586, 1584, 1583, 99, 1576, 74, 21, 34, 68,
	1574, 6, 1572, 76, 44, 33, 17, 102, 75, 1571,
	45, 82, 61, 1569, 1568, 768, 1563, 1561, 1560, 1558,
	1556, 1555, 711, 716, 1553, 1552, 1549, 83, 0, 549,
	81, 96, 1547, 60, 1546, 1706, 108, 77, 39, 1545,
	47, 1412, 52, 1541, 1533, 48, 97, 101, 90, 88,
	1530, 1526, 1525, 1524, 1523, 1145, 40, 243, 192, 1522,
	1521, 1520, 25, 53, 29, 56, 70, 1519, 1513, 1512,
	31, 1508, 16, 22, 2, 55, 1507, 1506, 1505, 1504,
	46, 30, 1503, 23, 15, 1, 3, 5, 1502, 1500,
	1496, 4, 1495, 26, 1494, 10, 1491, 9, 1489, 1487,
	1486, 1485, 1483, 1482, 1481, 1478, 1477, 1476, 20, 13,
	43, 32, 24, 50, 42, 1475, 1474, 14, 8, 1472,
	1471, 1458, 1454, 57, 261, 1449, 1444, 1442, 1439, 118,
}

var yyR1 = [...]int{
	0, 211, 212, 212, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 29, 29, 8, 9, 9, 9, 215,
	215, 48, 48, 93, 93, 10, 10, 10, 10, 11,
	11, 209, 209, 208, 210, 210, 12, 12, 12, 12,
	12, 205, 205, 205, 205, 205, 98, 98, 102, 102,
	102, 103, 103, 103, 103, 133, 133, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 203, 203,
	204, 204, 204, 206, 206, 207, 207, 207, 207, 207,
	207, 189, 189, 189, 190, 190, 190, 190, 190, 190,
	192, 192, 193, 193, 123, 123, 187, 187, 186, 185,
	185, 184, 184, 183, 194, 194, 18, 167, 168, 168,
	168, 168, 168, 156, 137, 137, 137, 137, 137, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	200, 200, 200, 201, 201, 201, 201, 201, 201, 201,
	201, 196, 196, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 146, 146, 146,
	146, 146, 146, 195, 195, 191, 191, 191, 191, 191,
	141, 141, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 140, 140, 140,
	142, 142, 142, 142, 142, 142, 142, 142, 138, 138,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 144, 144, 144, 144, 144, 144, 144,
	144, 155, 155, 145, 145, 153, 153, 154, 154, 154,
	152, 152, 152, 149, 149, 150, 150, 151, 151, 151,
	147, 147, 147, 148, 148, 148, 158, 176, 176, 176,
	178, 178, 179, 179, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 166, 166, 202, 202, 175,
	175, 175, 172, 172, 172, 172, 172, 172, 172, 172,
	165, 165, 174, 174, 173, 173, 160, 160, 160, 160,
	160, 161, 162, 162, 162, 162, 159, 198, 198, 198,
	199, 199, 163, 163, 164, 164, 169, 169, 169, 170,
	170, 170, 171, 171, 171, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 216, 216,
	217, 217, 217, 217, 217, 217, 217, 182, 180, 180,
	181, 181, 15, 16, 16, 16, 16, 16, 17, 17,
	19, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 110, 110, 107, 107, 108, 108,
	109, 109, 109, 111, 111, 111, 134, 134, 134, 21,
	21, 23, 23, 24, 25, 22, 22, 22, 22, 22,
	218, 26, 27, 27, 28, 28, 28, 32, 32, 32,
	30, 30, 31, 31, 37, 37, 36, 36, 38, 38,
	38, 38, 122, 122, 122, 121, 121, 40, 40, 41,
	41, 42, 42, 43, 43, 43, 55, 55, 91, 91,
	91, 94, 94, 44, 44, 44, 44, 45, 45, 46,
	46, 47, 47, 129, 129, 128, 128, 128, 127, 127,
	49, 49, 49, 51, 50, 50, 50, 50, 52, 52,
	54, 54, 53, 53, 56, 56, 56, 56, 57, 57,
	92, 92, 39, 39, 39, 39, 39, 39, 39, 106,
	106, 59, 59, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 69, 69, 69, 69, 69, 69, 60,
	60, 60, 60, 60, 60, 60, 35, 35, 70, 70,
	70, 76, 71, 71, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 67, 67, 67, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 66, 66, 66, 66, 66, 66,
	66, 66, 66, 219, 219, 68, 68, 68, 68, 33,
	33, 33, 33, 33, 132, 132, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	136, 136, 136, 136, 136, 136, 136, 80, 80, 34,
	34, 78, 78, 79, 81, 81, 77, 77, 77, 62,
	62, 62, 62, 62, 62, 62, 62, 64, 64, 64,
	82, 82, 83, 83, 84, 84, 85, 85, 86, 87,
	87, 87, 88, 88, 88, 88, 89, 89, 89, 61,
	61, 61, 61, 61, 61, 90, 90, 90, 90, 95,
	95, 72, 72, 74, 74, 73, 75, 96, 96, 100,
	97, 97, 101, 101, 101, 101, 99, 99, 99, 124,
	124, 124, 104, 104, 112, 112, 113, 113, 105, 105,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	115, 115, 115, 116, 116, 119, 119, 120, 120, 125,
	125, 126, 126, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 213, 214, 130, 131, 131, 131,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 14, 13,
	14, 6, 5, 5, 5, 11, 11, 9, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 2, 0, 2, 2, 2, 2, 2,
	0, 2, 0, 3, 0, 1, 0, 2, 1, 0,
	2, 1, 3, 3, 0, 2, 4, 4, 1, 3,
	3, 3, 3, 2, 3, 1, 1, 1, 1, 2,
	2, 3, 2, 4, 4, 2, 2, 3, 2, 3,
	2, 7, 8, 3, 3, 6, 5, 8, 7, 4,
	2, 4, 6, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 2, 1, 1,
	1, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	4, 4, 4, 4, 4, 1, 5, 2, 2, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 3, 3, 0, 1, 0, 1, 0, 2, 1,
	0, 3, 3, 0, 1, 2, 6, 0, 1, 4,
	1, 2, 1, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 1, 1, 0,
	2, 5, 2, 3, 3, 2, 3, 2, 3, 4,
	1, 1, 1, 3, 3, 2, 2, 5, 5, 8,
	8, 13, 1, 1, 2, 2, 10, 0, 1, 1,
	0, 3, 0, 1, 1, 3, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 11, 13, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 1, 2, 1, 2, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -211, -1, -2, -6, -7, -8, -9, -10, -13,
	-14, -15, -16, -17, -19, -20, -21, -23, -24, -25,
	-22, -3, -4, 6, 7, -29, 9, 10, 30, -18,
	113, 114, 116, 115, 144, 117, 137, 49, 185, 186,
	188, 189, 26, 138, 139, 142, 143, -213, 8, 289,
	53, -212, 323, -84, 15, -28, 5, -26, -218, -26,
	-26, -26, -26, -26, -167, 53, -123, -194, 152, 281,
	119, 134, 151, 120, 135, 71, -105, 122, 124, 120,
	120, 121, 122, 281, 119, 120, -53, -125, 56, -118,
	159, 298, 21, 185, 198, 199, 190, 231, 219, 299,
	157, 216, 220, 268, 322, 65, 188, 277, 128, 163,
	140, 211, 214, 213, 205, 202, 28, 237, 305, 204,
	131, 238, 242, 248, 269, 296, 195, 196, 271, 235,
	32, 133, 300, 34, 148, 272, 240, 234, 229, 233,
	194, 228, 38, 208, 244, 243, 245, 267, 222, 158,
	247, 224, 206, 223, 18, 143, 146, 239, 241, 203,
	160, 126, 150, 304, 273, 201, 147, 161, 142, 276,
	319, 156, 189, 270, 197, 279, 37, 253, 215, 192,
	207, 193, 130, 186, 154, 226, 149, 209, 210, 232,
	191, 227, 187, 151, 144, 278, 254, 306, 225, 221,
	217, 218, 155, 122, 152, 153, 260, 261, 262, 263,
	301, 302, 274, 212, 255, 256, 165, 166, 167, 168,
	169, 170, 171, 120, 107, 220, 113, 258, 121, 32,
	150, -134, 120, -107, 153, 260, 261, 262, 263, 56,
	270, 269, 264, -125, 187, -130, -130, -130, -130, -130,
	-2, -88, 17, 16, -5, -3, -213, 6, 21, 22,
	-32, 39, 40, -27, -38, 98, -39, -125, -58, 73,
	-63, 29, 56, -118, 24, -62, -59, -77, -75, -76,
	107, 108, 96, 97, 104, 74, 109, -67, -65, -66,
	-68, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -119, -73, -213, 43, 44, 290, 291, 292, 293,
	297, 294, 76, 33, 280, 288, 287, 286, 284, 285,
	282, 283, 321, 125, 281, 102, 289, -105, -41, -42,
	-43, -44, -55, -76, -213, -53, 11, -48, -53, -97,
	-133, 187, -101, 270, 269, -120, -99, -119, -117, 268,
	220, 267, 56, -118, 118, 173, 308, 72, 23, 25,
	251, 257, 172, 75, 107, 16, 76, 179, 317, 318,
	106, 290, 113, 47, 282, 283, 280, 177, 292, 293,
	281, 258, 184, 20, 29, 10, 26, 138, 22, 100,
	115, 174, 79, 80, 141, 24, 139, 69, 180, 182,
	19, 50, 132, 11, 307, 13, 14, 309, 125, 124,
	91, 320, 121, 45, 8, 109, 27, 88, 41, 136,
	183, 43, 89, 17, 284, 285, 31, 297, 145, 102,
	48, 35, 73, 67, 51, 275, 178, 71, 15, 46,
	134, 181, 90, 116, 289, 44, 175, 119, 176, 6,
	295, 30, 137, 42, 120, 259, 78, 123, 68, 5,
	135, 9, 49, 52, 286, 287, 288, 33, 77, 12,
	70, -168, -156, 56, -198, 317, 318, 122, -119, -113,
	125, -113, -119, -119, -113, 289, 120, -53, -53, -112,
	125, 56, -112, -112, -112, -53, 110, -53, 56, 30,
	281, 56, 150, 120, 151, 122, -131, -213, -120, -131,
	-131, -131, 154, 155, -131, -108, 265, 51, -131, -214,
	55, -89, 19, 31, -39, -125, -85, -86, -39, -84,
	-2, -26, 35, -30, 22, 64, 11, -122, 72, 71,
	88, -121, 23, -119, 58, 110, -39, -60, 91, 73,
	89, 90, 75, 93, 92, 103, 96, 97, 98, 99,
	100, 101, 102, 94, 95, 106, 321, 81, 82, 83,
	84, 85, 86, 87, -106, -213, -76, -213, 111, 112,
	-63, -63, -63, -63, -63, -63, -63, -213, -2, -71,
	-39, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-80, -39, -213, -219, -213, -219, -219, -219, -219, -219,
	-219, -219, -136, 107, 220, 140, 211, -139, -138, 226,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	219, 299, -213, -213, -213, -213, -54, 27, -53, 30,
	54, -49, -51, -50, -52, 41, 45, 47, 42, 43,
	44, 48, -129, 23, -41, -213, -128, 146, -127, 23,
	-125, 58, -53, -48, -215, 54, 11, 52, 54, -97,
	187, -98, -102, 271, 273, 81, -124, -119, 58, 29,
	30, 55, 54, -157, -137, -141, -138, -143, -142, -144,
	-139, -140, 216, 220, 217, 222, 223, 224, 107, 221,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 225, 237, 30, 140, 209, 210, 211, 214, 213,
	215, 212, 238, 239, 240, 241, 242, 243, 244, 245,
	201, 202, 204, 205, 206, 208, 207, 121, -53, -187,
	52, 56, 73, 56, 51, -203, 51, 172, 173, -53,
	-53, 275, -131, 123, -53, 24, 51, -53, 56, 56,
	-126, -125, -117, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -110, 259, 266, -53, 9, 91, 54,
	18, 110, 54, -87, 25, 26, -88, -214, -32, -64,
	-119, 59, 62, -31, 42, -53, -39, -39, -69, 67,
	73, 68, 69, -121, 98, -126, -120, -117, -63, -70,
	-73, -76, 63, 91, 89, 90, 75, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -63, -132, 56, 58, -136, 56, -62, -62, -119,
	-37, 22, -36, -38, -214, 54, -214, -2, -36, -36,
	-39, -39, -77, -119, -125, -77, -36, -30, -78, -79,
	77, -77, -214, 218, -36, -37, -36, -36, -93, 146,
	-53, -96, -100, -77, -42, -43, -43, -42, -43, 41,
	41, 41, 46, 41, 46, 41, -50, -125, -214, -56,
	49, 124, 50, -213, -127, -93, 52, -41, -53, -101,
	-98, 54, 272, 274, 275, 51, 70, -39, -148, 107,
	106, -169, -170, -171, -120, 58, 59, -156, -158, -160,
	-159, -172, -161, 128, 126, 130, 131, 135, -165, 121,
	136, 67, 73, -200, 128, 51, 251, 257, 126, 136,
	135, 322, 65, 129, 307, 309, 29, -151, 324, 246,
	-149, 254, -145, 53, -145, -145, 218, -145, -145, -145,
	-145, -145, -147, 220, -147, -147, -147, -147, 53, 53,
	-145, -145, -145, -145, -153, 53, 203, -153, -153, -154,
	53, -154, -119, 23, -185, 301, -186, 56, -131, 24,
	-131, -53, -204, 8, 9, 10, -53, -114, 118, 115,
	116, -182, 114, 251, 220, 65, 29, 15, 290, 146,
	306, 56, 147, -53, -53, -53, -131, -109, 11, 91,
	37, -39, -39, -126, -86, -89, -104, 19, 11, 33,
	33, -36, 67, 68, 69, 110, -213, -70, -63, -63,
	-63, -35, 141, 72, -214, -214, -36, 54, -39, -214,
	-214, -214, 54, 52, 23, 54, 11, 110, 54, 11,
	-214, -36, -81, -79, 79, -39, -214, -214, -214, -214,
	-214, -61, 30, 33, -2, -213, -213, -57, 54, 12,
	81, -46, -45, 51, 52, -47, 51, -45, 41, 41,
	121, 121, 121, -94, -119, -57, -41, -57, -102, -103,
	276, 273, 279, 56, 54, -171, 81, 53, -199, 51,
	73, -163, -119, 136, -165, -165, 56, -165, 56, 56,
	67, 19, -119, 9, 136, 136, -199, 58, -125, -196,
	308, 16, 53, -201, 53, 58, 59, 60, 67, -146,
	66, -59, 247, 280, 283, 282, 248, 325, -150, 255,
	59, -147, -147, -145, -147, -147, -147, -148, 30, -148,
	-148, -148, -148, -155, 58, -155, -152, 301, 302, -152,
	59, -153, 59, 51, 52, -2, -184, -183, -120, -189,
	23, 51, -203, -130, -123, -217, 152, 127, 132, 131,
	56, 126, 130, 146, -188, 152, 127, 128, 132, 131,
	56, 121, 136, 126, 130, 146, 135, -115, -116, 123,
	23, 121, 136, 146, 118, -131, -111, 89, 12, -125,
	-125, 38, 110, -53, -40, 11, 98, -120, -37, -35,
	72, -63, -63, -214, -38, -135, 107, 216, 140, 211,
	205, 235, 236, 222, 253, 209, 254, -132, -135, -63,
	-63, -120, -63, -63, 298, -84, 80, -39, 78, -95,
	51, -96, -72, -74, -73, -213, -2, -90, -119, -94,
	-84, -100, -39, -39, -39, 53, -39, -213, -213, -213,
	-214, 54, -84, -57, 273, 277, 278, -170, -171, -174,
	-173, -119, 136, 10, 9, 19, 132, 126, 56, 56,
	56, -198, 135, 319, -200, 322, -146, -213, 53, 23,
	29, 59, -201, 53, -191, 321, -213, -145, 53, -145,
	53, 53, 55, -148, -148, -147, -148, -148, -148, 56,
	107, 55, 54, 55, 209, 209, 54, 55, 54, -53,
	-119, 54, 81, -190, 19, 160, 161, -53, -204, -216,
	121, 136, -130, -119, -130, -119, -53, -130, -119, 128,
	-160, 58, -39, -57, -41, -214, -63, -214, -145, -145,
	-145, -154, -145, 196, -145, 196, -214, -214, -214, 54,
	19, -214, 54, 19, -213, -34, 295, -39, 28, -95,
	54, -214, -214, -214, 54, 110, -214, -88, -91, -119,
	136, -91, -91, -91, -128, -119, -88, 55, 54, -145,
	-145, -162, 156, 157, 30, 158, -162, 319, 136, 136,
	-198, -199, -39, -91, 309, 54, 55, -201, 220, 210,
	249, 226, -214, 55, 55, 55, -148, -147, 58, -147,
	256, 256, 59, 59, 53, 52, 51, -183, -171, 123,
	21, 6, 8, 9, 10, 19, 23, -119, 53, 27,
	-119, -82, 13, -147, 56, -63, -63, -63, -63, -63,
	-214, 58, 136, -74, 33, -2, -213, -119, -119, 54,
	55, -214, -214, -214, -56, -176, -178, 301, -177, 52,
	133, 65, 165, 166, 167, 168, 169, 170, 171, -173,
	-87, -199, 51, 67, 159, -199, 51, -163, -119, -198,
	-213, -214, 55, 53, 59, 55, 218, -152, -148, -148,
	55, 55, -174, -119, -53, -164, -119, 174, -206, -207,
	-7, -9, -8, -11, -10, -12, 20, 178, 179, 184,
	180, 53, -91, -213, 126, -83, 14, 16, -214, -214,
	-214, -214, -33, 91, 301, 9, -72, -2, 110, -119,
	-175, 51, -177, 301, 53, 303, 56, -166, 81, 58,
	81, 81, 81, 81, 81, 81, 81, 9, 10, 53,
	53, -39, -195, 158, -197, 55, 55, 55, 53, 53,
	-192, 54, 52, 175, -207, -209, -119, -208, -119, -119,
	-119, -205, 35, 181, 182, 183, -174, 55, -180, -181,
	146, 136, -39, -71, -214, 299, 48, 304, -96, -214,
	-119, -119, -179, -177, -119, 59, -202, 51, 70, 59,
	-202, -202, -202, -202, -202, -162, -162, -164, -174, -214,
	296, 55, 186, 311, 312, 145, 313, 158, 314, 315,
	-92, 320, -174, -174, -193, 301, -119, -39, -207, 54,
	-210, -137, 176, -119, 11, 11, 11, 11, 55, -187,
	-214, 54, -119, 53, 38, 300, 305, -213, 55, 54,
	-199, -199, 55, 55, 301, 59, 16, 59, 59, 59,
	59, 312, 145, 314, 16, -57, 53, 55, 55, 322,
	-208, -119, 177, 27, -185, -181, 33, -174, 38, -119,
	-177, 129, -176, 59, 59, 316, -125, -176, -91, -57,
	-176, -39, 19, -119, 148, 55, 301, -214, -53, -175,
	110, -175, 55, -176, -2, 149, 304, 53, -120, -213,
	305, -164, -63, 145, 55, -214, -214,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 694, 0, 450, 450, 450, 450, 450, 450, 0,
	-2, 748, 0, 0, 0, 0, -2, 440, 441, 0,
	443, 444, 1025, 1025, 1025, 1025, 1025, 0, 33, 34,
	1023, 1, 3, 702, 0, 0, 454, 457, 452, 0,
	748, 0, 0, 0, 77, 0, 337, 0, 0, 746,
	746, 0, 0, 746, 115, 0, 0, 0, 749, 0,
	744, 0, 744, 744, 744, 0, 399, 522, 769, 770,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 0, 0, 0, 0, 1026, 1026, 1026,
	1026, 0, 1026, 428, 417, 419, 420, 421, 422, 1026,
	437, 438, 427, 439, 442, 445, 446, 447, 448, 449,
	27, 706, 0, 0, 694, 29, 0, 450, 455, 456,
	460, 458, 459, 451, 0, 468, 472, 0, 532, 0,
	537, 539, -2, -2, 0, 574, 575, 576, 577, 578,
	0, 0, 0, 0, 0, 0, 0, 602, 603, 604,
	605, 679, 680, 681, 682, 683, 684, 685, 686, 541,
	542, 676, 726, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 667, 0, 633, 633, 633, 633, 633, 633,
	633, 633, 0, 0, 0, 0, 0, 0, 0, 479,
	481, 482, 483, 503, 0, 505, 0, 0, 41, 45,
	0, 992, 730, -2, -2, 0, 0, 767, 768, -2,
	902, -2, 765, 766, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 0, 128, 0, 0, 338, 339, 0, 116, 0,
	0, 0, 0, 0, 0, 125, 0, 1026, 0, 0,
	0, 0, 0, 0, 0, 398, 0, 400, 1026, 1026,
	1026, 1026, 1026, 1026, 1026, 1026, 409, 1027, 1028, 410,
	411, 412, 1026, 1026, 414, 0, 429, 0, 423, 28,
	1024, 22, 0, 0, 703, 0, 695, 696, 699, 702,
	27, 457, 0, 462, 461, 453, 0, 469, 0, 0,
	0, 473, 0, 475, 476, 0, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 559, 560, 561,
	562, 563, 564, 565, 538, 0, 552, 0, 0, 0,
	594, 595, 596, 597, 598, 599, 0, 464, 27, 0,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 460,
	0, 668, 0, 624, 0, 625, 626, 627, 628, 629,
	630, 631, 632, 660, 0, 662, 663, 664, 665, 666,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	228, 229, 0, 464, 0, 0, 43, 0, 521, 0,
	0, 0, 0, 0, 0, 510, 0, 0, 513, 0,
	0, 0, 0, 504, 0, 0, 524, 956, 506, 0,
	508, 509, -2, 0, 0, 0, 39, 40, 0, 46,
	992, 48, 66, 0, 0, 0, 283, 739, 740, 741,
	737, 346, 0, 133, 277, 273, 135, 136, 137, 138,
	263, 201, 263, 263, 263, 263, 263, 235, 263, 263,
	280, 280, 280, 280, 280, 244, 245, 246, 247, 248,
	249, 250, 0, 0, 220, 263, 263, 263, 224, 263,
	226, 227, 253, 254, 255, 256, 257, 258, 259, 260,
	265, 265, 265, 267, 267, 218, 219, 0, 0, 119,
	0, 1026, 0, 1026, 0, 0, 0, 88, 89, 126,
	0, 0, 365, 0, 393, 745, 0, 1026, 396, 397,
	523, 771, 772, 401, 402, 403, 404, 405, 406, 407,
	408, 413, 416, 430, 424, 425, 418, 707, 0, 0,
	0, 0, 0, 698, 700, 701, 706, 30, 460, 0,
	687, 0, 0, 0, 463, 25, 533, 534, 536, 553,
	0, 555, 557, 474, 470, 0, 677, -2, 543, 544,
	568, 569, 570, 0, 0, 0, 0, 566, 548, 0,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 593, 644, 645, 601, 0, 591, 592, 600,
	0, 0, 465, 466, 571, 0, 725, 27, 0, 0,
	0, 0, 0, 676, 0, 0, 0, 0, 674, 671,
	0, 0, 634, 661, 0, 0, 0, 0, 0, 0,
	520, 528, 727, 0, 480, 499, 501, 0, 496, 511,
	512, 514, 0, 516, 0, 518, 519, 484, 485, 486,
	0, 0, 0, 0, 507, 528, 0, 528, 42, 731,
	47, 0, 0, 69, 70, 732, 733, 734, 735, 284,
	0, 127, 347, 349, 352, 353, 354, 129, 130, 131,
	132, 0, 340, 342, 0, 0, 0, 0, 0, 320,
	321, 140, 0, 142, 0, 0, 145, 146, 0, 148,
	150, 340, 0, 0, 0, 0, 0, 139, 0, 279,
	275, 274, 200, 0, 280, 280, 263, 280, 280, 280,
	237, 238, 283, 0, 283, 283, 283, 283, 0, 0,
	270, 270, 223, 225, 212, 0, 265, 214, 215, 216,
	0, 217, 0, 0, 82, 0, 117, 118, 83, 747,
	84, 101, 0, 90, 91, 92, 0, 1025, 114, 0,
	760, 366, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 0, 0, 392, 1026, 395, 433, 0, 0,
	0, 704, 705, 0, 697, 23, 0, 742, 743, 688,
	689, 477, 554, 556, 558, 0, 464, 545, 566, 549,
	0, 546, 0, 0, 540, 606, 0, 0, 573, -2,
	609, 610, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 672, 0, 0, 623, 635, 636, 637,
	638, 719, 0, 0, -2, 0, 0, 694, 0, 0,
	0, 493, 500, 0, 0, 494, 0, 495, 515, 517,
	0, 0, 0, 0, 491, 694, 528, 38, 67, 68,
	0, 0, 74, 285, 0, 350, 0, 0, 326, 0,
	0, 0, 343, 312, 0, 0, 315, 0, 317, 337,
	141, 0, 0, 0, 147, 149, 0, 153, 154, 0,
	171, 0, 0, 160, 0, 195, 164, 165, 166, 167,
	168, 169, 0, 263, 263, 191, 0, 278, 134, 276,
	0, 283, 283, 280, 283, 283, 283, 239, 0, 240,
	241, 242, 243, 0, 261, 0, 221, 0, 0, 222,
	0, 213, 0, 0, 0, -2, 120, 121, 0, 104,
	0, 0, 0, 355, 0, 1025, 0, 380, 381, 382,
	383, 384, 385, 386, 1025, 0, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 0, 1025, 761,
	762, 763, 764, 0, 0, 394, 415, 0, 0, 431,
	432, 708, 0, 24, 528, 0, 471, 678, 0, 547,
	0, 567, 550, 607, 467, 0, 263, 263, 649, 263,
	267, 652, 653, 263, 655, 263, 658, 0, 0, 0,
	0, 677, 0, 0, 0, 669, 622, 675, 0, 31,
	0, 719, 709, 721, 723, 0, 27, 0, 715, 0,
	702, 728, 529, 729, 497, 0, 502, 0, 0, 0,
	505, 0, 702, 37, 71, 72, 73, 348, 351, 0,
	322, 263, 263, 0, 0, 0, 0, 0, 313, 314,
	316, 318, 337, 159, 143, 340, 144, 0, 0, 0,
	172, 0, 0, 0, 163, 0, 0, 187, 0, 189,
	0, 0, 264, 230, 231, 283, 232, 233, 234, 281,
	282, 280, 0, 280, 0, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 0, 102, 103, 0, 0, 0,
	378, 379, 359, 0, 360, 362, 363, 364, 0, 342,
	358, 434, 435, 690, 478, 608, 551, 611, 646, 280,
	650, 651, 654, 656, 657, 659, 613, 612, 614, 0,
	0, 617, 0, 0, 0, 0, 0, 673, 0, 32,
	0, 724, -2, 0, 0, 0, 44, 35, 0, 488,
	489, 0, 0, 0, 524, 492, 36, 287, 0, 699,
	325, 340, 332, 333, 0, 0, 340, 341, 342, 337,
	319, 0, 0, 0, 156, 0, 161, 0, 0, 270,
	198, 199, 170, 188, 190, 192, 236, 283, 262, 283,
	271, 272, 0, 0, 0, 0, 0, 122, 123, 0,
	105, 106, 107, 108, 109, 0, 0, 0, 0, 0,
	343, 692, 0, 647, 648, 0, 0, 0, 0, 639,
	621, 670, 0, 722, 0, -2, 0, 717, 716, 0,
	498, 525, 526, 527, 487, 309, 288, 0, 290, 0,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	324, 327, 0, 334, 335, 328, 0, 0, 343, 0,
	0, 193, 155, 173, 0, 0, 196, 197, 251, 252,
	266, 269, 0, 0, 0, 110, 344, 0, 87, 93,
	95, 96, 97, 98, 99, 100, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 26, 0, 0, 615, 616,
	618, 619, 0, 0, 0, 0, 712, 27, 0, 490,
	286, 0, 291, 0, 0, 0, 294, 0, 306, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 151, 0, 0, 158, 162, 530, 0, 0,
	112, 0, 0, 0, 94, 49, 54, 51, 56, 57,
	58, 0, 0, 0, 0, 0, 0, 116, 0, 388,
	0, 0, 693, 691, 620, 0, 0, 0, 720, -2,
	718, 310, 0, 292, 297, 295, 298, 307, 308, 299,
	300, 301, 302, 303, 304, 340, 340, 0, 0, 152,
	194, 157, 0, 0, 0, 0, 0, 0, 184, 0,
	528, 0, 0, 0, 85, 0, 345, 111, 86, 0,
	0, 53, 55, 59, 62, 63, 64, 65, 356, 119,
	387, 0, 0, 0, 640, 0, 643, 0, 289, 0,
	329, 330, 0, 287, 0, 175, 0, 177, 178, 179,
	180, 181, 182, 183, 0, 287, 0, 528, 287, 0,
	52, 0, 0, 0, 361, 389, 0, 0, 641, 0,
	293, 0, 309, 174, 176, 185, 0, 309, 0, 287,
	79, 113, 0, 60, 0, 357, 0, 311, 0, 336,
	0, 78, 531, 80, -2, 0, 0, 0, 186, 0,
	642, 0, 0, 0, 331, 390, 391,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 323,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 324, 3, 325, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:354
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:359
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:360
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:364
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:387
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:405
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:451
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:467
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:493
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:551
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:561
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:583
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:590
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:597
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:605
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:615
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:627
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:631
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:637
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:641
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:647
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:651
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:655
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:661
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:665
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:669
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:673
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:679
		{
			yyVAL.str = SessionStr
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:683
		{
			yyVAL.str = GlobalStr
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:689
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:694
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 79:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:714
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 80:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:730
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 81:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:745
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:753
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:761
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:765
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:769
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:780
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 87:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:790
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].triggerBody,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:802
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:806
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:812
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:816
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:820
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:826
		{
			yyVAL.triggerBody = []Statement{yyDollar[1].statement}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:830
		{
			yyVAL.triggerBody = append(yyVAL.triggerBody, yyDollar[2].statement)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:836
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:846
		{
			yyVAL.bytes = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:850
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:854
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:859
		{
			yyVAL.bytes = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:863
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:867
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:871
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:879
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:884
		{
			yyVAL.expr = nil
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:888
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:893
		{
			yyVAL.expr = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:897
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:902
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:906
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:911
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:915
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:921
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:926
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:931
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:937
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:948
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:953
		{
			yyVAL.bytes = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:957
		{
			yyVAL.bytes = nil
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:963
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:970
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:982
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:986
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:990
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:994
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1000
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1016
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1028
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1033
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1043
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1053
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1058
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1063
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1068
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1073
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1078
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 151:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1083
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1089
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1094
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1099
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1104
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1110
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1116
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1122
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1128
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1135
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1139
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1143
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1149
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1153
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1157
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1161
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1165
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1169
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1173
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1177
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1187
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1192
		{
			yyVAL.sequence = &Sequence{}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1196
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1201
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1206
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1211
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1216
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1221
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1226
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1231
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1236
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1241
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1246
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1251
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1256
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1263
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1271
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1283
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1288
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1292
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1297
		{
			yyVAL.bytes = nil
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1307
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1312
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1366
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1384
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1390
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1396
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1400
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1450
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1458
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1462
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1466
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1470
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1474
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1478
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1486
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1490
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1534
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1539
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1579
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1584
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1589
		{
			yyVAL.optVal = nil
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1598
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1602
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1610
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1614
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1620
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1628
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1632
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1636
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1641
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1645
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1650
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1654
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1659
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1663
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1667
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1672
		{
			yyVAL.str = ""
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1676
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1680
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1685
		{
			yyVAL.str = ""
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1689
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1699
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1704
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1708
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1712
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1718
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1722
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1728
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1732
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1738
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1742
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1751
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1755
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1759
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1763
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1767
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1771
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1775
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1779
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1785
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1789
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1795
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1799
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1805
		{
			yyVAL.indexPartition = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1809
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1813
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1819
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1823
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1827
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1831
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1835
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1839
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1843
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1847
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1857
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1863
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1867
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1873
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1878
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1884
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1889
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1896
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1903
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 330:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1910
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 331:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1919
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1931
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1935
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1939
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1943
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 336:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1949
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1960
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1964
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1968
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1974
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1978
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1983
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1990
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1994
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1999
		{
			yyVAL.str = ""
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2003
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2007
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2015
		{
			yyVAL.str = yyDollar[1].str
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2019
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2023
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2029
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2033
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2037
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2043
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 356:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:2047
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 357:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:2061
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2075
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2084
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2088
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2092
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2105
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2115
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2120
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2125
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2129
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2161
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2167
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2171
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2177
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 391:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2181
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2187
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2193
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 394:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2201
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2206
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2214
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2218
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2224
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2228
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2233
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2239
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2243
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2247
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2252
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2256
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2260
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2264
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2268
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2272
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2276
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2280
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2284
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2288
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2292
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2296
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2306
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2310
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2314
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2318
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2326
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2330
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2340
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2346
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2350
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2356
		{
			yyVAL.str = ""
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2360
		{
			yyVAL.str = "extended "
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.str = "full "
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2376
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2380
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2384
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2390
		{
			yyVAL.showFilter = nil
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2394
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2398
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2404
		{
			yyVAL.str = ""
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2408
		{
			yyVAL.str = SessionStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2412
		{
			yyVAL.str = GlobalStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2418
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2422
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.statement = &Begin{}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2432
		{
			yyVAL.statement = &Begin{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.statement = &Commit{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2444
		{
			yyVAL.statement = &Rollback{}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2450
		{
			yyVAL.statement = &OtherRead{}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2454
		{
			yyVAL.statement = &OtherRead{}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2458
		{
			yyVAL.statement = &OtherRead{}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2466
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2471
		{
			setAllowComments(yylex, true)
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2475
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2481
		{
			yyVAL.bytes2 = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2485
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2491
		{
			yyVAL.str = UnionStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2495
		{
			yyVAL.str = UnionAllStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2499
		{
			yyVAL.str = UnionDistinctStr
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2504
		{
			yyVAL.str = ""
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2508
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2512
		{
			yyVAL.str = SQLCacheStr
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2517
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2521
		{
			yyVAL.str = DistinctStr
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2526
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2530
		{
			yyVAL.str = StraightJoinHint
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2535
		{
			yyVAL.selectExprs = nil
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2539
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2545
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2549
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2555
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2559
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2563
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2567
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2572
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2576
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2580
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2587
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2592
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2602
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2606
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2616
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2620
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2624
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 487:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2640
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2645
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2649
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2655
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2659
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2672
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2676
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2680
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2690
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2692
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 499:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2696
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2698
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2702
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2704
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2707
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.empty = struct{}{}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2712
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2716
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2720
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2727
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2733
		{
			yyVAL.str = JoinStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2737
		{
			yyVAL.str = JoinStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.str = JoinStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2747
		{
			yyVAL.str = StraightJoinStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2753
		{
			yyVAL.str = LeftJoinStr
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2757
		{
			yyVAL.str = LeftJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2761
		{
			yyVAL.str = RightJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2765
		{
			yyVAL.str = RightJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.str = NaturalJoinStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2775
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2785
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2789
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2799
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2804
		{
			yyVAL.indexHints = nil
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2808
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2812
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2816
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2821
		{
			yyVAL.expr = nil
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2825
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2830
		{
			yyVAL.columns = nil
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2834
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2840
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2844
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2848
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2852
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2856
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2860
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2864
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2870
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2874
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2880
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2884
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2890
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2894
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2898
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 546:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2902
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2906
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2910
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2914
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2918
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 551:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2922
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2926
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2932
		{
			yyVAL.str = IsNullStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2936
		{
			yyVAL.str = IsNotNullStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2940
		{
			yyVAL.str = IsTrueStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2944
		{
			yyVAL.str = IsNotTrueStr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2948
		{
			yyVAL.str = IsFalseStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2952
		{
			yyVAL.str = IsNotFalseStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2958
		{
			yyVAL.str = EqualStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2962
		{
			yyVAL.str = LessThanStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2966
		{
			yyVAL.str = GreaterThanStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2970
		{
			yyVAL.str = LessEqualStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2974
		{
			yyVAL.str = GreaterEqualStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2978
		{
			yyVAL.str = NotEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2982
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2987
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2991
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2997
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3001
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3005
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3017
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3021
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3027
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3031
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3035
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3039
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3043
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3047
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3051
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3055
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3059
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3063
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3067
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3071
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3075
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3083
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3087
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3091
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3095
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3099
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3103
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3107
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3111
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3115
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3123
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3137
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3141
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3145
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3153
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3185
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3197
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3201
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3205
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3209
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3213
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 617:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3217
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3221
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 619:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3225
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 620:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3229
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 621:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3233
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 622:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3237
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3241
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3255
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3259
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3263
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3268
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3273
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3278
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3283
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3287
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3301
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3305
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3309
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3313
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3319
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3323
		{
			yyVAL.str = BooleanModeStr
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3327
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 642:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3331
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.str = QueryExpansionStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3341
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3345
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3351
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3355
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3359
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3363
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3371
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3377
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3381
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3385
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3389
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3393
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3397
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3401
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3405
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3411
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3415
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3419
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3423
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3427
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3431
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3435
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3440
		{
			yyVAL.expr = nil
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3444
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3449
		{
			yyVAL.str = string("")
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3453
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3459
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3463
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3469
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3474
		{
			yyVAL.expr = nil
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3478
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3484
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 678:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3498
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3502
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3506
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3510
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3514
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3518
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3522
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3526
		{
			yyVAL.expr = &NullVal{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3532
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3541
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3545
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3550
		{
			yyVAL.exprs = nil
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3554
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 692:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3559
		{
			yyVAL.expr = nil
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3563
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3568
		{
			yyVAL.orderBy = nil
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3572
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3578
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3582
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3588
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3593
		{
			yyVAL.str = AscScr
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3597
		{
			yyVAL.str = AscScr
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3601
		{
			yyVAL.str = DescScr
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3606
		{
			yyVAL.limit = nil
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3610
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3614
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3618
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 706:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3623
		{
			yyVAL.str = ""
		}
	case 707:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3627
		{
			yyVAL.str = ForUpdateStr
		}
	case 708:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3631
		{
			yyVAL.str = ShareModeStr
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3644
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3648
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3652
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3657
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3661
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 714:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3665
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3672
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3676
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3680
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 718:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3684
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 719:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3689
		{
			yyVAL.updateExprs = nil
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3693
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3699
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3703
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3709
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3713
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 725:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3719
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3725
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3735
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3739
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3745
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3751
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3755
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3761
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3765
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3769
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3773
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3780
		{
			yyVAL.bytes = []byte("charset")
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3787
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3791
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3795
		{
			yyVAL.expr = &Default{}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3804
		{
			yyVAL.byt = 0
		}
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3806
		{
			yyVAL.byt = 1
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3809
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3811
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3814
		{
			yyVAL.str = ""
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3816
		{
			yyVAL.str = IgnoreStr
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3820
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3822
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3824
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3826
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3828
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3830
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3832
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3834
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3836
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3838
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3841
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3843
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3845
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3849
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3851
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3855
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3859
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3866
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3872
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3876
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3883
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4159
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4168
		{
			decNesting(yylex)
		}
	case 1025:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4173
		{
			forceEOF(yylex)
		}
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4178
		{
			forceEOF(yylex)
		}
	case 1027:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4182
		{
			forceEOF(yylex)
		}
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4186
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
