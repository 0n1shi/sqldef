// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	checkDefinition      *CheckDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const DEFERRABLE = 57512
const INITIALLY = 57513
const IMMEDIATE = 57514
const DEFERRED = 57515
const BEGIN = 57516
const START = 57517
const TRANSACTION = 57518
const COMMIT = 57519
const ROLLBACK = 57520
const BIT = 57521
const TINYINT = 57522
const SMALLINT = 57523
const SMALLSERIAL = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const SERIAL = 57528
const BIGINT = 57529
const BIGSERIAL = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const PRECISION = 57534
const FLOAT_TYPE = 57535
const DECIMAL = 57536
const NUMERIC = 57537
const SMALLMONEY = 57538
const MONEY = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const DATETIMEOFFSET = 57544
const DATETIME2 = 57545
const SMALLDATETIME = 57546
const CHAR = 57547
const VARCHAR = 57548
const VARYING = 57549
const BOOL = 57550
const CHARACTER = 57551
const VARBINARY = 57552
const NCHAR = 57553
const NVARCHAR = 57554
const NTEXT = 57555
const UUID = 57556
const TEXT = 57557
const TINYTEXT = 57558
const MEDIUMTEXT = 57559
const LONGTEXT = 57560
const CITEXT = 57561
const BLOB = 57562
const TINYBLOB = 57563
const MEDIUMBLOB = 57564
const LONGBLOB = 57565
const JSON = 57566
const JSONB = 57567
const ENUM = 57568
const GEOMETRY = 57569
const POINT = 57570
const LINESTRING = 57571
const POLYGON = 57572
const GEOMETRYCOLLECTION = 57573
const MULTIPOINT = 57574
const MULTILINESTRING = 57575
const MULTIPOLYGON = 57576
const ARRAY = 57577
const NOW = 57578
const GETDATE = 57579
const BPCHAR = 57580
const NULLX = 57581
const AUTO_INCREMENT = 57582
const APPROXNUM = 57583
const SIGNED = 57584
const UNSIGNED = 57585
const ZEROFILL = 57586
const ZONE = 57587
const AUTOINCREMENT = 57588
const DATABASES = 57589
const TABLES = 57590
const VITESS_KEYSPACES = 57591
const VITESS_SHARDS = 57592
const VITESS_TABLETS = 57593
const VSCHEMA_TABLES = 57594
const EXTENDED = 57595
const FULL = 57596
const PROCESSLIST = 57597
const NAMES = 57598
const CHARSET = 57599
const GLOBAL = 57600
const SESSION = 57601
const ISOLATION = 57602
const LEVEL = 57603
const READ = 57604
const WRITE = 57605
const ONLY = 57606
const REPEATABLE = 57607
const COMMITTED = 57608
const UNCOMMITTED = 57609
const SERIALIZABLE = 57610
const NEW = 57611
const CURRENT_TIMESTAMP = 57612
const DATABASE = 57613
const CURRENT_DATE = 57614
const CURRENT_TIME = 57615
const LOCALTIME = 57616
const LOCALTIMESTAMP = 57617
const UTC_DATE = 57618
const UTC_TIME = 57619
const UTC_TIMESTAMP = 57620
const REPLACE = 57621
const CONVERT = 57622
const CAST = 57623
const SUBSTR = 57624
const SUBSTRING = 57625
const GROUP_CONCAT = 57626
const SEPARATOR = 57627
const INHERIT = 57628
const MATCH = 57629
const AGAINST = 57630
const BOOLEAN = 57631
const LANGUAGE = 57632
const WITH = 57633
const WITHOUT = 57634
const PARSER = 57635
const QUERY = 57636
const EXPANSION = 57637
const UNUSED = 57638
const VIRTUAL = 57639
const GENERATED = 57640
const ALWAYS = 57641
const IDENTITY = 57642
const SEQUENCE = 57643
const INCREMENT = 57644
const MINVALUE = 57645
const CACHE = 57646
const CYCLE = 57647
const OWNED = 57648
const NONE = 57649
const CLUSTERED = 57650
const NONCLUSTERED = 57651
const REPLICATION = 57652
const INCLUDE = 57653
const HOLDLOCK = 57654
const NOLOCK = 57655
const NOWAIT = 57656
const PAGLOCK = 57657
const ROWLOCK = 57658
const TABLELOCK = 57659
const TYPECAST = 57660
const CHECK = 57661

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 139,
	-2, 129,
	-1, 36,
	156, 459,
	157, 459,
	-2, 449,
	-1, 272,
	110, 805,
	-2, 801,
	-1, 273,
	110, 806,
	-2, 802,
	-1, 345,
	81, 1022,
	-2, 81,
	-1, 346,
	81, 973,
	-2, 82,
	-1, 352,
	81, 952,
	-2, 772,
	-1, 354,
	81, 996,
	-2, 774,
	-1, 674,
	52, 41,
	54, 41,
	-2, 43,
	-1, 835,
	110, 808,
	-2, 804,
	-1, 1082,
	5, 28,
	-2, 604,
	-1, 1107,
	5, 27,
	-2, 745,
	-1, 1211,
	5, 27,
	-2, 87,
	-1, 1435,
	5, 28,
	-2, 746,
	-1, 1531,
	5, 27,
	-2, 748,
	-1, 1694,
	5, 28,
	-2, 749,
	-1, 1835,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 16800

var yyAct = [...]int{
	356, 1585, 1684, 1791, 1546, 1015, 1628, 1668, 1543, 532,
	765, 1110, 251, 1701, 268, 1462, 900, 601, 277, 1792,
	1123, 1329, 1441, 484, 1144, 1651, 1445, 304, 1300, 1147,
	1330, 1301, 811, 918, 53, 90, 1213, 276, 90, 668,
	1169, 943, 1297, 938, 1024, 949, 1010, 942, 666, 245,
	21, 1023, 1175, 860, 600, 3, 1202, 993, 901, 1128,
	273, 1273, 90, 90, 964, 871, 1074, 868, 66, 959,
	771, 1005, 1199, 684, 90, 351, 1115, 888, 837, 90,
	280, 90, 538, 482, 683, 344, 897, 90, 655, 332,
	552, 704, 670, 246, 247, 248, 249, 331, 544, 260,
	1741, 699, 250, 341, 624, 1056, 255, 1183, 1815, 339,
	330, 52, 1337, 977, 275, 870, 1446, 1447, 1448, 1449,
	1450, 1451, 983, 1356, 519, 264, 566, 270, 1784, 576,
	980, 1728, 485, 486, 1343, 560, 1468, 563, 615, 1344,
	1476, 1167, 335, 578, 579, 580, 581, 582, 583, 584,
	1717, 561, 562, 559, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 1425, 531, 576, 576,
	1845, 1760, 1840, 1692, 1619, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 1632, 347, 576,
	1422, 531, 567, 568, 569, 570, 571, 572, 573, 566,
	1633, 1770, 576, 1826, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 979, 1016, 576, 1777,
	1732, 977, 1203, 1204, 90, 1124, 1759, 1691, 565, 564,
	574, 575, 567, 568, 569, 570, 571, 572, 573, 566,
	1292, 1716, 576, 966, 1429, 496, 1323, 569, 570, 571,
	572, 573, 566, 273, 273, 576, 531, 973, 1136, 962,
	527, 1135, 932, 933, 1137, 963, 1324, 1325, 931, 1496,
	273, 85, 81, 82, 83, 1495, 685, 1185, 686, 982,
	994, 984, 273, 273, 273, 273, 273, 273, 273, 540,
	1576, 892, 1376, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 1653, 273, 576, 1520, 802,
	1375, 541, 1418, 1006, 1718, 273, 803, 1416, 969, 244,
	965, 974, 1338, 485, 486, 1822, 512, 1673, 971, 970,
	90, 1796, 1843, 1838, 1837, 1823, 1750, 90, 90, 90,
	1268, 1789, 565, 564, 574, 575, 567, 568, 569, 570,
	571, 572, 573, 566, 1663, 587, 576, 1587, 577, 1562,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 1386, 1387, 576, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 1652, 1839, 576,
	514, 1620, 516, 1776, 1182, 1778, 1824, 577, 577, 1154,
	337, 523, 524, 1465, 1477, 1722, 1686, 1513, 1685, 591,
	592, 593, 594, 595, 596, 597, 629, 335, 577, 1724,
	1346, 513, 515, 1251, 1547, 1075, 630, 1179, 898, 1181,
	1180, 577, 1528, 1470, 1469, 87, 1161, 1549, 1426, 1160,
	84, 1166, 773, 1149, 1633, 1795, 681, 577, 675, 967,
	1769, 1719, 987, 1336, 1804, 968, 617, 618, 619, 620,
	621, 622, 623, 340, 960, 57, 1392, 347, 1402, 1007,
	773, 577, 1610, 1547, 494, 1674, 1675, 1676, 994, 498,
	961, 499, 1393, 960, 577, 1690, 1549, 506, 90, 501,
	59, 60, 61, 62, 63, 490, 90, 1504, 90, 961,
	79, 90, 772, 781, 90, 1548, 487, 975, 90, 976,
	1127, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 1248, 1126, 576, 919, 921, 972, 90,
	1125, 1463, 1464, 1466, 763, 1152, 577, 497, 223, 1550,
	1551, 1552, 1553, 1554, 1555, 1556, 80, 78, 90, 79,
	273, 273, 1252, 814, 1548, 589, 590, 273, 511, 273,
	1830, 1051, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 1624, 1720, 1721,
	1723, 1725, 1726, 790, 697, 577, 1438, 838, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1260, 1090, 774, 775, 273,
	960, 920, 1068, 577, 273, 273, 273, 273, 273, 273,
	273, 273, 809, 788, 688, 273, 961, 599, 577, 556,
	507, 1249, 1370, 1247, 508, 774, 775, 881, 884, 940,
	939, 806, 835, 890, 550, 549, 551, 1250, 1644, 1643,
	839, 1052, 816, 302, 831, 273, 273, 273, 273, 1642,
	90, 551, 273, 90, 90, 90, 90, 90, 876, 1641,
	844, 1256, 833, 1640, 1639, 90, 1834, 549, 90, 629,
	902, 1638, 90, 1371, 842, 843, 841, 90, 90, 630,
	1545, 834, 863, 551, 500, 1636, 836, 1383, 273, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 865, 866, 1138, 350, 1113, 687,
	886, 1294, 488, 894, 1423, 492, 493, 889, 1836, 1097,
	877, 878, 876, 542, 872, 926, 885, 889, 1146, 1631,
	650, 489, 768, 335, 335, 335, 335, 335, 1255, 674,
	1065, 1066, 1067, 904, 905, 1561, 907, 546, 335, 1807,
	903, 77, 915, 906, 577, 1702, 1806, 335, 1775, 1564,
	893, 924, 895, 896, 923, 1774, 928, 929, 503, 504,
	505, 90, 1773, 90, 1703, 995, 996, 997, 998, 947,
	90, 1146, 90, 1704, 1086, 90, 1085, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 76,
	1700, 576, 491, 550, 549, 347, 495, 1012, 273, 273,
	273, 273, 329, 937, 808, 827, 829, 830, 1560, 944,
	551, 828, 273, 1771, 1058, 1574, 50, 1145, 1498, 1008,
	1009, 985, 986, 988, 989, 990, 840, 991, 992, 1497,
	1146, 1228, 1352, 273, 273, 273, 1157, 70, 74, 1146,
	807, 1208, 1206, 1489, 1001, 1002, 1003, 1186, 1004, 1488,
	812, 813, 71, 1186, 75, 1186, 1772, 550, 549, 838,
	273, 350, 350, 350, 350, 273, 350, 1029, 1637, 1087,
	72, 73, 68, 350, 551, 835, 531, 273, 764, 861,
	273, 862, 1527, 1057, 1156, 1493, 777, 1404, 778, 1200,
	1163, 782, 550, 549, 785, 1634, 550, 549, 1661, 1850,
	554, 1229, 1225, 1222, 1341, 1230, 1227, 1226, 1340, 551,
	1070, 75, 839, 551, 550, 549, 90, 550, 549, 804,
	1339, 1296, 1231, 1076, 834, 1155, 1130, 1064, 1132, 1224,
	1139, 551, 1535, 1832, 551, 1459, 1825, 531, 823, 1459,
	1783, 1656, 1107, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 1096, 1018, 576, 1459, 1782,
	1071, 1072, 1073, 864, 1131, 90, 1459, 1767, 1661, 1766,
	1763, 1762, 1655, 1120, 1141, 1079, 350, 787, 657, 660,
	661, 662, 658, 690, 659, 663, 786, 1162, 1116, 1117,
	1755, 531, 1094, 1581, 1133, 769, 335, 1580, 293, 292,
	295, 296, 297, 298, 767, 1177, 69, 294, 299, 1459,
	1752, 1459, 1751, 1535, 1682, 678, 1150, 1151, 1153, 509,
	577, 1459, 1657, 1575, 530, 1535, 1571, 1193, 502, 1195,
	1196, 1197, 1198, 1187, 1188, 483, 1190, 1191, 1192, 1354,
	899, 483, 90, 90, 1171, 1172, 1173, 1535, 531, 1205,
	90, 1490, 1176, 1174, 300, 301, 679, 944, 677, 1211,
	273, 1538, 1537, 1201, 1535, 1536, 273, 273, 927, 1207,
	1220, 273, 1459, 1458, 1320, 531, 1437, 531, 1479, 273,
	273, 273, 273, 273, 1379, 1378, 1373, 1374, 273, 1219,
	1221, 1373, 1372, 1080, 531, 1363, 273, 652, 531, 1662,
	1189, 1661, 273, 273, 273, 1111, 960, 273, 874, 531,
	273, 955, 1299, 954, 902, 956, 957, 703, 651, 1293,
	902, 958, 961, 1511, 1302, 695, 694, 1266, 1267, 273,
	1285, 1214, 350, 1322, 1112, 1308, 1272, 23, 23, 1286,
	54, 874, 652, 350, 350, 350, 350, 350, 350, 350,
	350, 1739, 1263, 1304, 1218, 1321, 835, 350, 350, 1307,
	1309, 1022, 1105, 1028, 1530, 1106, 1433, 652, 1298, 1342,
	1046, 1111, 1047, 1112, 1328, 1048, 652, 818, 1327, 1080,
	1092, 23, 1478, 1265, 50, 50, 577, 554, 1217, 1089,
	350, 1218, 1382, 1269, 1270, 1080, 305, 47, 1177, 1377,
	90, 1353, 1347, 1500, 1499, 1289, 1287, 1288, 90, 1290,
	1291, 1140, 925, 1345, 677, 1111, 930, 1080, 680, 810,
	257, 1364, 1365, 1091, 1367, 1368, 1369, 50, 50, 1841,
	1781, 867, 1088, 350, 1757, 1659, 90, 1366, 1658, 1178,
	1182, 1648, 882, 882, 47, 1647, 1607, 273, 882, 1606,
	1573, 1514, 256, 1389, 90, 944, 984, 944, 336, 273,
	1011, 1390, 1362, 1395, 1406, 1361, 1359, 50, 1349, 1315,
	1313, 1006, 1397, 1179, 1168, 1181, 1180, 657, 660, 661,
	662, 658, 1143, 659, 663, 882, 1400, 273, 1403, 1209,
	1210, 766, 1358, 1360, 273, 1116, 1117, 1801, 1000, 999,
	65, 1629, 1407, 1501, 1298, 1119, 784, 770, 528, 822,
	90, 1440, 1758, 912, 350, 1414, 910, 914, 913, 661,
	662, 911, 350, 1122, 1457, 1259, 1121, 909, 350, 1452,
	1453, 1454, 1432, 908, 335, 261, 262, 1170, 1053, 273,
	1467, 545, 1171, 1172, 1173, 1799, 1063, 1062, 533, 1455,
	1176, 1174, 300, 301, 543, 1194, 693, 1472, 510, 1141,
	534, 1473, 1475, 565, 564, 574, 575, 567, 568, 569,
	570, 571, 572, 573, 566, 1265, 1351, 576, 1431, 1790,
	812, 813, 1177, 1515, 1020, 1480, 1409, 1411, 1412, 1506,
	1413, 1507, 1508, 1509, 1415, 783, 1417, 1013, 1350, 1216,
	1491, 350, 1014, 350, 1505, 776, 1816, 665, 545, 1502,
	703, 258, 259, 273, 273, 1503, 273, 273, 273, 350,
	1492, 1510, 1494, 1061, 518, 518, 518, 518, 1385, 518,
	1335, 1060, 252, 1779, 1613, 253, 518, 54, 1612, 1518,
	1112, 1747, 944, 350, 1460, 1461, 1025, 1026, 1027, 1646,
	1261, 1302, 1746, 47, 1745, 1529, 1744, 1334, 1333, 58,
	1519, 547, 273, 1645, 1621, 1159, 805, 273, 586, 56,
	1223, 588, 1594, 8, 1591, 7, 1391, 1559, 676, 1542,
	1557, 1531, 1563, 1558, 1567, 1171, 1172, 1173, 51, 1565,
	1592, 6, 90, 1176, 1174, 300, 301, 1214, 944, 598,
	1590, 5, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 1582, 614, 616, 616, 616, 616, 616, 616, 616,
	616, 1589, 644, 645, 646, 647, 1578, 1608, 1579, 1,
	1577, 1821, 1794, 667, 278, 1444, 1740, 1178, 1182, 1630,
	1521, 1522, 1666, 1523, 1524, 1525, 1735, 1588, 1302, 1622,
	1672, 1654, 1598, 1627, 1165, 1626, 1129, 67, 1731, 1660,
	273, 1355, 1384, 1215, 1232, 1017, 815, 1212, 1034, 1683,
	1697, 1179, 1544, 1181, 1180, 952, 350, 1623, 941, 481,
	64, 1635, 953, 951, 950, 948, 696, 978, 1148, 1184,
	981, 702, 700, 701, 1572, 273, 273, 698, 1664, 1158,
	1380, 266, 705, 273, 273, 231, 577, 342, 1388, 1677,
	1679, 664, 273, 689, 548, 1246, 1245, 1030, 1680, 1681,
	1254, 1688, 801, 1665, 1050, 873, 875, 1698, 1693, 1598,
	902, 526, 233, 585, 1059, 1134, 1399, 349, 1727, 1712,
	1305, 891, 537, 1611, 1705, 1706, 1707, 1708, 1709, 1517,
	350, 1710, 1711, 273, 1095, 612, 887, 279, 826, 291,
	1713, 288, 290, 289, 817, 1714, 1104, 558, 1738, 334,
	1729, 1730, 648, 1736, 656, 654, 653, 1118, 1114, 333,
	1178, 1182, 350, 1753, 1262, 1428, 1618, 1748, 821, 25,
	55, 917, 263, 19, 18, 518, 17, 20, 16, 15,
	14, 29, 350, 13, 1598, 12, 518, 518, 518, 518,
	518, 518, 518, 518, 1179, 11, 1181, 1180, 1598, 10,
	518, 518, 1678, 1678, 350, 1764, 1765, 9, 1597, 1780,
	1596, 1768, 1595, 1593, 4, 254, 22, 1787, 1786, 882,
	2, 0, 1306, 1129, 1793, 882, 0, 1785, 1798, 1797,
	0, 0, 0, 0, 0, 0, 0, 0, 1803, 0,
	0, 0, 0, 0, 0, 0, 1805, 0, 0, 1800,
	90, 0, 0, 0, 350, 273, 350, 1331, 1598, 1810,
	0, 0, 1813, 0, 1812, 47, 0, 0, 0, 0,
	1598, 1598, 0, 0, 1811, 90, 0, 0, 0, 0,
	603, 1819, 1829, 1819, 0, 0, 0, 1831, 0, 0,
	0, 1833, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 0, 0, 576, 517, 0, 0, 0,
	0, 0, 1598, 1846, 1598, 273, 0, 1847, 625, 0,
	0, 0, 0, 0, 1381, 0, 0, 0, 0, 336,
	336, 336, 336, 336, 535, 539, 1394, 1819, 1396, 0,
	0, 1835, 0, 0, 667, 0, 922, 1398, 0, 0,
	0, 557, 627, 336, 574, 575, 567, 568, 569, 570,
	571, 572, 573, 566, 1598, 1401, 576, 0, 1598, 1077,
	0, 0, 1584, 1078, 350, 0, 0, 0, 0, 0,
	1238, 1082, 1083, 1084, 0, 0, 0, 602, 1040, 0,
	1093, 0, 0, 0, 0, 1099, 613, 0, 1100, 1101,
	1102, 1103, 1039, 0, 0, 0, 0, 632, 633, 634,
	635, 636, 637, 638, 639, 640, 641, 0, 0, 0,
	0, 0, 0, 0, 0, 1842, 0, 1442, 628, 1044,
	1442, 1442, 1442, 0, 1456, 0, 642, 626, 1038, 0,
	0, 350, 1848, 631, 518, 1239, 518, 0, 0, 0,
	1241, 1234, 1235, 0, 1242, 1237, 1236, 0, 0, 0,
	1244, 1240, 518, 1442, 0, 0, 0, 0, 0, 0,
	1481, 1243, 0, 0, 0, 0, 0, 0, 1233, 0,
	0, 0, 0, 0, 0, 0, 0, 1035, 1032, 1033,
	0, 1031, 0, 0, 0, 0, 350, 350, 257, 0,
	48, 26, 27, 0, 0, 1512, 536, 0, 0, 0,
	0, 1069, 1599, 0, 0, 0, 1516, 643, 0, 0,
	1042, 1045, 28, 0, 257, 0, 48, 26, 27, 0,
	1274, 0, 0, 0, 577, 520, 521, 522, 1599, 525,
	0, 88, 0, 0, 243, 0, 529, 0, 28, 0,
	0, 1533, 1534, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1276, 0, 267, 0, 88, 88,
	0, 0, 1851, 1331, 1108, 1109, 0, 0, 0, 0,
	88, 0, 0, 1566, 1271, 88, 0, 88, 0, 0,
	0, 0, 0, 88, 0, 577, 0, 0, 1820, 1037,
	0, 0, 336, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1331, 1583, 0, 0, 1605, 1586, 0,
	0, 0, 0, 0, 0, 0, 0, 1604, 1442, 0,
	1036, 824, 825, 1319, 1278, 0, 0, 0, 1283, 0,
	1277, 0, 0, 1605, 0, 1275, 0, 0, 0, 1625,
	0, 1281, 0, 1604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1279, 1280, 0, 0, 0, 0,
	1041, 0, 1600, 1601, 1603, 1828, 0, 0, 1602, 0,
	0, 0, 1282, 1284, 0, 602, 1043, 0, 879, 880,
	0, 47, 0, 0, 0, 0, 0, 0, 1600, 1601,
	1603, 0, 0, 0, 1602, 0, 0, 0, 0, 0,
	0, 0, 0, 1667, 1669, 1670, 1671, 0, 0, 0,
	1331, 1331, 0, 0, 0, 518, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 882, 0, 0, 1695, 0,
	0, 0, 0, 1696, 0, 0, 0, 1699, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1586, 1331, 0, 0, 0, 0, 0, 0, 936,
	0, 1408, 1331, 1331, 0, 1733, 0, 0, 1410, 0,
	0, 703, 0, 1303, 0, 47, 1743, 0, 49, 0,
	1419, 1420, 1421, 0, 0, 1424, 0, 0, 0, 1756,
	0, 0, 1316, 1317, 1318, 780, 0, 0, 1434, 1435,
	1436, 0, 1439, 0, 49, 0, 791, 792, 793, 794,
	795, 796, 797, 798, 0, 0, 0, 0, 0, 0,
	799, 800, 0, 0, 0, 0, 88, 0, 0, 1348,
	0, 0, 0, 88, 672, 88, 0, 0, 0, 0,
	0, 0, 0, 1788, 0, 1357, 0, 0, 0, 0,
	0, 0, 1487, 0, 0, 0, 0, 0, 0, 0,
	0, 1331, 0, 0, 0, 1802, 0, 0, 0, 23,
	24, 48, 26, 27, 0, 0, 0, 0, 0, 1054,
	1055, 0, 539, 0, 0, 1442, 0, 0, 0, 42,
	0, 0, 703, 28, 1817, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 0, 48, 26, 27, 0, 0,
	0, 257, 37, 48, 26, 27, 50, 1599, 0, 0,
	0, 0, 0, 1526, 0, 1599, 0, 28, 0, 0,
	336, 0, 0, 0, 350, 28, 0, 0, 0, 0,
	257, 0, 48, 26, 27, 1586, 1081, 1539, 1540, 1541,
	0, 0, 0, 0, 1599, 0, 0, 0, 0, 1427,
	0, 1098, 0, 0, 28, 0, 0, 0, 0, 1570,
	0, 0, 0, 0, 0, 0, 30, 31, 33, 32,
	35, 0, 0, 0, 88, 1818, 0, 0, 0, 0,
	0, 0, 88, 0, 88, 0, 0, 88, 0, 0,
	88, 36, 43, 44, 789, 1471, 45, 46, 34, 229,
	0, 0, 0, 0, 0, 0, 1614, 1615, 1616, 1617,
	0, 0, 1605, 0, 0, 88, 0, 0, 0, 0,
	1605, 0, 1604, 239, 0, 0, 0, 0, 0, 0,
	1604, 0, 0, 0, 88, 0, 257, 0, 48, 26,
	27, 0, 0, 789, 38, 39, 0, 40, 41, 1605,
	1599, 0, 0, 1649, 1019, 0, 1021, 0, 0, 1604,
	28, 0, 0, 0, 0, 0, 0, 1600, 1601, 1603,
	0, 0, 1049, 1602, 224, 1600, 1601, 1603, 1749, 0,
	226, 1602, 0, 0, 0, 267, 0, 232, 228, 0,
	1303, 267, 267, 1532, 0, 883, 883, 267, 0, 0,
	0, 883, 0, 1689, 1600, 1601, 1603, 0, 1694, 0,
	1602, 0, 0, 0, 0, 1737, 0, 0, 230, 0,
	0, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	1569, 267, 267, 267, 267, 1715, 88, 0, 883, 88,
	88, 88, 88, 88, 0, 0, 0, 0, 0, 49,
	0, 916, 0, 0, 88, 1605, 0, 0, 672, 1295,
	0, 0, 0, 88, 88, 1604, 0, 0, 1754, 0,
	0, 0, 1609, 0, 1310, 1311, 0, 0, 1312, 0,
	0, 1314, 0, 49, 0, 0, 0, 1303, 0, 47,
	0, 49, 0, 225, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1600, 1601, 1603, 0, 0, 0, 1602, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 235, 236, 237, 238, 242, 0, 0,
	0, 0, 241, 240, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 88,
	0, 0, 0, 0, 0, 0, 88, 0, 88, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1827, 0, 0,
	0, 0, 0, 0, 0, 0, 789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1405, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 1852, 1853, 1253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1761, 0, 0, 267, 0, 1430, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1474, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1164, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1844, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1568, 0, 0, 0, 0, 1257, 1258,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 789, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1650, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1687, 602, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1734, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 467, 457, 0,
	418, 469, 388, 406, 477, 408, 409, 444, 368, 427,
	155, 403, 386, 93, 391, 361, 398, 362, 389, 420,
	117, 387, 459, 430, 131, 475, 134, 435, 0, 177,
	143, 0, 0, 422, 461, 425, 452, 417, 445, 376,
	434, 470, 404, 440, 471, 0, 672, 0, 355, 0,
	945, 946, 0, 0, 0, 0, 0, 106, 0, 439,
	466, 400, 480, 443, 360, 437, 0, 366, 369, 476,
	464, 395, 396, 1142, 0, 0, 0, 0, 0, 0,
	421, 426, 449, 414, 0, 0, 1814, 0, 0, 0,
	0, 0, 392, 0, 433, 0, 0, 0, 373, 367,
	0, 419, 0, 0, 0, 375, 0, 393, 450, 0,
	357, 455, 462, 416, 204, 465, 413, 412, 162, 0,
	109, 0, 183, 121, 405, 132, 447, 478, 468, 423,
	460, 390, 399, 111, 397, 169, 156, 195, 432, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 365, 358, 394, 453,
	456, 380, 442, 370, 401, 448, 402, 424, 385, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 88, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 467, 457, 0,
	418, 469, 388, 406, 477, 408, 409, 444, 368, 427,
	155, 403, 386, 93, 391, 361, 398, 362, 389, 420,
	117, 387, 459, 430, 131, 475, 134, 435, 0, 177,
	143, 0, 0, 422, 461, 425, 452, 417, 445, 376,
	434, 470, 404, 440, 471, 0, 0, 0, 355, 0,
	945, 946, 0, 0, 0, 0, 0, 106, 0, 439,
	466, 400, 480, 443, 360, 437, 0, 366, 369, 476,
	464, 395, 396, 0, 0, 0, 0, 0, 0, 0,
	421, 426, 449, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 392, 0, 433, 0, 1809, 0, 373, 367,
	0, 419, 0, 0, 0, 375, 0, 393, 450, 0,
	357, 455, 462, 416, 204, 465, 413, 412, 162, 0,
	109, 88, 183, 121, 405, 132, 447, 478, 468, 423,
	460, 390, 399, 111, 397, 169, 156, 195, 432, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 365, 358, 394, 453,
	456, 380, 442, 370, 401, 448, 402, 424, 385, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 1264,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 363, 0,
	178, 197, 214, 215, 364, 384, 463, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 441, 170, 108, 196, 176, 0, 379, 383,
	377, 378, 428, 429, 472, 473, 474, 451, 374, 0,
	381, 382, 0, 458, 126, 431, 92, 100, 133, 479,
	211, 0, 164, 119, 198, 0, 407, 359, 411, 0,
	0, 0, 0, 0, 0, 0, 371, 372, 171, 415,
	410, 436, 438, 446, 454, 467, 457, 105, 418, 469,
	388, 406, 477, 408, 409, 444, 368, 427, 155, 403,
	386, 93, 391, 361, 398, 362, 389, 420, 117, 387,
	459, 430, 131, 475, 134, 435, 0, 177, 143, 0,
	0, 422, 461, 425, 452, 417, 445, 376, 434, 470,
	404, 440, 471, 50, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 439, 466, 400,
	480, 443, 360, 437, 0, 366, 369, 476, 464, 395,
	396, 0, 0, 0, 0, 0, 0, 0, 421, 426,
	449, 414, 0, 0, 0, 0, 0, 0, 0, 0,
	392, 0, 433, 0, 0, 0, 373, 367, 0, 419,
	0, 0, 0, 375, 0, 393, 450, 0, 357, 455,
	462, 416, 204, 465, 413, 412, 162, 0, 109, 0,
	183, 121, 405, 132, 447, 478, 468, 423, 460, 390,
	399, 111, 397, 169, 156, 195, 432, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 365, 358, 394, 453, 456, 380,
	442, 370, 401, 448, 402, 424, 385, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 363, 0, 178,
	197, 214, 215, 364, 384, 463, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 441, 170, 108, 196, 176, 0, 379, 383, 377,
	378, 428, 429, 472, 473, 474, 451, 374, 0, 381,
	382, 0, 458, 126, 431, 92, 100, 133, 479, 211,
	0, 164, 119, 198, 0, 407, 359, 411, 0, 0,
	0, 0, 0, 0, 0, 371, 372, 171, 415, 410,
	436, 438, 446, 454, 467, 457, 105, 418, 469, 388,
	406, 477, 408, 409, 444, 368, 427, 155, 403, 386,
	93, 391, 361, 398, 362, 389, 420, 117, 387, 459,
	430, 131, 475, 134, 435, 0, 177, 143, 0, 0,
	422, 461, 425, 452, 417, 445, 376, 434, 470, 404,
	440, 471, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 439, 466, 400, 480,
	443, 360, 437, 0, 366, 369, 476, 464, 395, 396,
	0, 0, 0, 0, 0, 0, 0, 421, 426, 449,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	0, 433, 0, 0, 0, 373, 367, 0, 419, 0,
	0, 0, 375, 0, 393, 450, 0, 357, 455, 462,
	416, 204, 465, 413, 412, 162, 0, 109, 0, 183,
	121, 405, 132, 447, 478, 468, 423, 460, 390, 399,
	111, 397, 169, 156, 195, 432, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 365, 358, 394, 453, 456, 380, 442,
	370, 401, 448, 402, 424, 385, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 353, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 363, 0, 178, 197,
	214, 215, 364, 384, 463, 207, 208, 209, 210, 0,
	0, 0, 354, 352, 125, 174, 129, 136, 165, 212,
	441, 170, 108, 196, 176, 348, 379, 383, 377, 378,
	428, 429, 472, 473, 474, 451, 374, 0, 381, 382,
	0, 458, 126, 431, 92, 100, 133, 479, 211, 0,
	164, 119, 198, 0, 407, 359, 411, 0, 0, 0,
	0, 0, 0, 0, 371, 372, 171, 415, 410, 436,
	438, 446, 454, 467, 457, 105, 418, 469, 388, 406,
	477, 408, 409, 444, 368, 427, 155, 403, 386, 93,
	391, 361, 398, 362, 389, 420, 117, 387, 459, 430,
	131, 475, 134, 435, 0, 177, 143, 0, 0, 422,
	461, 425, 452, 417, 445, 376, 434, 470, 404, 440,
	471, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 439, 466, 400, 480, 443,
	360, 437, 0, 366, 369, 476, 464, 395, 396, 0,
	0, 0, 0, 0, 0, 0, 421, 426, 449, 414,
	0, 0, 0, 0, 0, 0, 832, 0, 392, 0,
	433, 0, 0, 0, 373, 367, 0, 419, 0, 0,
	0, 375, 0, 393, 450, 0, 357, 455, 462, 416,
	204, 465, 413, 412, 162, 0, 109, 0, 183, 121,
	405, 132, 447, 478, 468, 423, 460, 390, 399, 111,
	397, 169, 156, 195, 432, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 365, 358, 394, 453, 456, 380, 442, 370,
	401, 448, 402, 424, 385, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 363, 0, 178, 197, 214,
	215, 364, 384, 463, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 441,
	170, 108, 196, 176, 0, 379, 383, 377, 378, 428,
	429, 472, 473, 474, 451, 374, 0, 381, 382, 0,
	458, 126, 431, 92, 100, 133, 479, 211, 0, 164,
	119, 198, 0, 407, 359, 411, 0, 0, 0, 0,
	0, 0, 0, 371, 372, 171, 415, 410, 436, 438,
	446, 454, 467, 457, 105, 418, 469, 388, 406, 477,
	408, 409, 444, 368, 427, 155, 403, 386, 93, 391,
	361, 398, 362, 389, 420, 117, 387, 459, 430, 131,
	475, 134, 435, 0, 177, 143, 0, 0, 422, 461,
	425, 452, 417, 445, 376, 434, 470, 404, 440, 471,
	0, 0, 0, 355, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 439, 466, 400, 480, 443, 360,
	437, 0, 366, 369, 476, 464, 395, 396, 0, 0,
	0, 0, 0, 0, 0, 421, 426, 449, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 392, 0, 433,
	0, 0, 0, 373, 367, 0, 419, 0, 0, 0,
	375, 0, 393, 450, 0, 357, 455, 462, 416, 204,
	465, 413, 412, 162, 0, 109, 0, 183, 121, 405,
	132, 447, 478, 468, 423, 460, 390, 399, 111, 397,
	169, 156, 195, 432, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 365, 358, 394, 453, 456, 380, 442, 370, 401,
	448, 402, 424, 385, 0, 0, 0, 0, 94, 184,
	682, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 353, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	354, 352, 125, 174, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 348, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 0, 0, 0, 0, 94, 184, 343,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 353, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 363, 0, 178, 197, 214, 215, 364,
	384, 463, 207, 208, 209, 210, 0, 0, 0, 354,
	352, 346, 345, 129, 136, 165, 212, 441, 170, 108,
	196, 176, 348, 379, 383, 377, 378, 428, 429, 472,
	473, 474, 451, 374, 0, 381, 382, 0, 458, 126,
	431, 92, 100, 133, 479, 211, 0, 164, 119, 198,
	0, 407, 359, 411, 0, 0, 0, 0, 0, 0,
	0, 371, 372, 171, 415, 410, 436, 438, 446, 454,
	467, 457, 105, 418, 469, 388, 406, 477, 408, 409,
	444, 368, 427, 155, 403, 386, 93, 391, 361, 398,
	362, 389, 420, 117, 387, 459, 430, 131, 475, 134,
	435, 0, 177, 143, 0, 0, 422, 461, 425, 452,
	417, 445, 376, 434, 470, 404, 440, 471, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 439, 466, 400, 480, 443, 360, 437, 0,
	366, 369, 476, 464, 395, 396, 0, 0, 0, 0,
	0, 0, 0, 421, 426, 449, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 392, 0, 433, 0, 0,
	0, 373, 367, 0, 419, 0, 0, 0, 375, 0,
	393, 450, 0, 357, 455, 462, 416, 204, 465, 413,
	412, 162, 0, 109, 0, 183, 121, 405, 132, 447,
	478, 468, 423, 460, 390, 399, 111, 397, 169, 156,
	195, 432, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 365,
	358, 394, 453, 456, 380, 442, 370, 401, 448, 402,
	424, 385, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 363, 0, 178, 197, 214, 215, 364, 384,
	463, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 441, 170, 108, 196,
	176, 0, 379, 383, 377, 378, 428, 429, 472, 473,
	474, 451, 374, 0, 381, 382, 0, 458, 126, 431,
	92, 100, 133, 479, 211, 0, 164, 119, 198, 0,
	407, 359, 411, 0, 0, 0, 0, 0, 0, 0,
	371, 372, 171, 415, 410, 436, 438, 446, 454, 467,
	457, 105, 418, 469, 388, 406, 477, 408, 409, 444,
	368, 427, 155, 403, 386, 93, 391, 361, 398, 362,
	389, 420, 117, 387, 459, 430, 131, 475, 134, 435,
	0, 177, 143, 0, 0, 422, 461, 425, 452, 417,
	445, 376, 434, 470, 404, 440, 471, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 439, 466, 400, 480, 443, 360, 437, 0, 366,
	369, 476, 464, 395, 396, 0, 0, 0, 0, 0,
	0, 0, 421, 426, 449, 414, 0, 0, 0, 0,
	0, 0, 0, 0, 392, 0, 433, 0, 0, 0,
	373, 367, 0, 419, 0, 0, 0, 375, 0, 393,
	450, 0, 357, 455, 462, 416, 204, 465, 413, 412,
	162, 0, 109, 0, 183, 121, 405, 132, 447, 478,
	468, 423, 460, 390, 399, 111, 397, 169, 156, 195,
	432, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 365, 358,
	394, 453, 456, 380, 442, 370, 401, 448, 402, 424,
	385, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 363, 0, 178, 197, 214, 215, 364, 384, 463,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 441, 170, 108, 196, 176,
	0, 379, 383, 377, 378, 428, 429, 472, 473, 474,
	451, 374, 0, 381, 382, 0, 458, 126, 431, 92,
	100, 133, 479, 211, 0, 164, 119, 198, 0, 407,
	359, 411, 0, 0, 0, 0, 0, 0, 0, 371,
	372, 171, 415, 410, 436, 438, 446, 454, 467, 457,
	105, 418, 469, 388, 406, 477, 408, 409, 444, 368,
	427, 155, 403, 386, 93, 391, 361, 398, 362, 389,
	420, 117, 387, 459, 430, 131, 475, 134, 435, 0,
	177, 143, 0, 0, 422, 461, 425, 452, 417, 445,
	376, 434, 470, 404, 440, 471, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	439, 466, 400, 480, 443, 360, 437, 0, 366, 369,
	476, 464, 395, 396, 0, 0, 0, 0, 0, 0,
	0, 421, 426, 449, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 433, 0, 0, 0, 373,
	367, 0, 419, 0, 0, 0, 375, 0, 393, 450,
	0, 357, 455, 462, 416, 204, 465, 413, 412, 162,
	0, 109, 0, 183, 121, 405, 132, 447, 478, 468,
	423, 460, 390, 399, 111, 397, 169, 156, 195, 432,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 365, 358, 394,
	453, 456, 380, 442, 370, 401, 448, 402, 424, 385,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	363, 0, 178, 197, 214, 215, 364, 384, 463, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 441, 170, 108, 196, 176, 0,
	379, 383, 377, 378, 428, 429, 472, 473, 474, 451,
	374, 0, 381, 382, 0, 458, 126, 431, 92, 100,
	133, 479, 211, 0, 164, 119, 198, 0, 407, 359,
	411, 0, 0, 0, 0, 0, 0, 0, 371, 372,
	171, 415, 410, 436, 438, 446, 454, 155, 0, 105,
	93, 0, 0, 274, 0, 0, 0, 117, 271, 0,
	0, 131, 315, 134, 0, 0, 177, 143, 0, 0,
	0, 0, 306, 307, 0, 0, 0, 0, 0, 0,
	934, 0, 50, 0, 0, 272, 293, 292, 295, 296,
	297, 298, 0, 0, 106, 294, 299, 300, 301, 935,
	0, 0, 269, 286, 0, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 327, 0, 285, 0, 0, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 325, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 303, 316, 326, 322, 323,
	320, 321, 319, 318, 317, 328, 308, 309, 310, 311,
	313, 0, 126, 312, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 869, 0, 274,
	0, 0, 0, 117, 271, 0, 171, 131, 315, 134,
	0, 0, 177, 143, 324, 105, 0, 0, 306, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 293, 292, 295, 296, 297, 298, 0, 0,
	106, 294, 299, 300, 301, 0, 0, 0, 269, 286,
	0, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 265, 0, 0, 0, 327, 0, 285,
	0, 0, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	325, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 303, 316, 326, 322, 323, 320, 321, 319, 318,
	317, 328, 308, 309, 310, 311, 313, 0, 126, 312,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 274, 0, 0, 0, 117,
	271, 0, 171, 131, 315, 134, 0, 0, 177, 143,
	324, 105, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 531, 272, 293, 292,
	295, 296, 297, 298, 0, 0, 106, 294, 299, 300,
	301, 0, 0, 0, 269, 286, 0, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 327, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 325, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 303, 316, 326,
	322, 323, 320, 321, 319, 318, 317, 328, 308, 309,
	310, 311, 313, 0, 126, 312, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 274, 0, 0, 0, 117, 271, 0, 171, 131,
	315, 134, 0, 0, 177, 143, 324, 105, 0, 0,
	306, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 293, 292, 295, 296, 297, 298,
	0, 0, 106, 294, 299, 300, 301, 0, 0, 0,
	269, 286, 0, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 265, 0, 0, 0, 327,
	0, 285, 0, 0, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 325, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 303, 316, 326, 322, 323, 320, 321,
	319, 318, 317, 328, 308, 309, 310, 311, 313, 23,
	126, 312, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 274, 0, 0,
	0, 117, 271, 0, 171, 131, 315, 134, 0, 0,
	177, 143, 324, 105, 0, 0, 306, 307, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 272,
	293, 292, 295, 296, 297, 298, 0, 0, 106, 294,
	299, 300, 301, 0, 0, 0, 269, 286, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 327, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 325, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 303,
	316, 326, 322, 323, 320, 321, 319, 318, 317, 328,
	308, 309, 310, 311, 313, 0, 126, 312, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 274, 0, 0, 0, 117, 271, 0,
	171, 131, 315, 134, 0, 0, 177, 143, 324, 105,
	0, 0, 306, 307, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 293, 292, 295, 296,
	297, 298, 0, 0, 106, 294, 299, 300, 301, 0,
	0, 0, 269, 286, 0, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 327, 0, 285, 0, 0, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 325, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 303, 316, 326, 322, 323,
	320, 321, 319, 318, 317, 328, 308, 309, 310, 311,
	313, 0, 126, 312, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 315, 134,
	0, 0, 177, 143, 324, 105, 0, 0, 306, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 293, 292, 295, 296, 297, 298, 0, 0,
	106, 294, 299, 300, 301, 0, 0, 0, 0, 286,
	0, 314, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 327, 0, 285,
	0, 0, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	325, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 1849, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 303, 316, 326, 322, 323, 320, 321, 319, 318,
	317, 328, 308, 309, 310, 311, 313, 0, 126, 312,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 274, 0, 0, 0, 117,
	0, 0, 171, 131, 315, 134, 0, 0, 177, 143,
	324, 105, 0, 0, 306, 307, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 293, 292,
	295, 296, 297, 298, 0, 0, 106, 294, 299, 300,
	301, 0, 0, 0, 0, 286, 0, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 327, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 325, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 303, 316, 326,
	322, 323, 320, 321, 319, 318, 317, 328, 308, 309,
	310, 311, 313, 0, 126, 312, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	315, 134, 0, 0, 177, 143, 324, 105, 0, 0,
	306, 307, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 293, 292, 295, 296, 297, 298,
	0, 0, 106, 294, 299, 300, 301, 0, 0, 0,
	0, 286, 0, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 283, 284, 0, 0, 0, 0, 327,
	0, 285, 0, 0, 281, 282, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 325, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 303, 316, 326, 322, 323, 320, 321,
	319, 318, 317, 328, 308, 309, 310, 311, 313, 0,
	126, 312, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 324, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 0, 0, 576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 729,
	171, 131, 0, 134, 0, 0, 177, 143, 577, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 714, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 1742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 0, 756, 757, 160, 758,
	759, 760, 762, 761, 731, 732, 733, 737, 735, 734,
	736, 708, 710, 202, 706, 709, 715, 711, 712, 713,
	727, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 728, 738, 739, 740, 741, 742, 743, 744,
	745, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 707, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 553, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 555, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 550, 549, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 729, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 0, 756, 757,
	160, 758, 759, 760, 762, 761, 731, 732, 733, 737,
	735, 734, 736, 708, 710, 202, 706, 709, 715, 711,
	712, 713, 727, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 728, 738, 739, 740, 741, 742,
	743, 744, 745, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 707, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	671, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 673, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 355, 0, 0, 819, 0, 0, 820, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	692, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 691,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	671, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 673, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 669, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	1443, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 1808, 117, 0, 171, 0, 131, 0,
	134, 0, 0, 177, 143, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 1332, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 1483, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 1482, 200,
	149, 154, 152, 199, 1485, 192, 142, 139, 0, 98,
	190, 140, 138, 1486, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 1484, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 673, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 555, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 779, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 649,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	338, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 171,
	0, 131, 0, 134, 0, 0, 177, 143, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2403, -1000, -226, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1432, 1474, -1000, -1000, -1000, -1000, -1000, -1000, 1257,
	728, 425, 426, 152, 15575, 418, 2517, 16167, -1000, 126,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1185, -1000, -1000,
	-1000, -1000, -1000, 1425, 1429, 1224, 1400, 1306, -1000, 7877,
	376, 13798, 15279, 5686, -1000, 989, -193, 384, 15871, 370,
	370, 15871, 15871, 16167, 370, -1000, -51, 417, 16167, -1000,
	16167, 364, 982, 364, 364, 364, 16167, -1000, 510, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16167, 973, 1338, 270, 4370, 4370, 4370,
	4370, 245, 4370, -11, 1267, -1000, -1000, -1000, -1000, 4370,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	892, 1339, 8469, 8469, 1432, -1000, 1185, -1000, -1000, -1000,
	1329, -1000, -1000, 683, 1460, -1000, 10245, 509, -1000, 8469,
	62, 1184, -1000, -1000, 1184, -1000, -1000, 444, -1000, -1000,
	-1000, 9357, 9357, 9357, 9357, 9357, 9357, 9357, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1184, 507, -1000, 8173, 1184, 1184, 1184, 1184,
	1184, 1184, 1184, 1184, 8469, 1184, 1184, 1184, 1184, 1184,
	1184, 1184, 1184, 1184, 1741, 1184, 1184, 1184, 1184, 14982,
	1098, 1246, -1000, -1000, -1000, 1394, 11429, 12317, 16167, 1014,
	-1000, 1174, 5357, -1, -1000, -1000, -1000, 628, 504, 12021,
	-1000, -1000, -1000, 1336, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1081, -1000, 10541, 413, -1000, -1000, 16167, 1249, 958,
	659, 949, 1266, 451, 1392, 16167, -1000, 14686, 4370, 380,
	16167, 1381, 1265, 16167, 940, 931, -1000, 6673, -1000, 4370,
	4370, 4370, 4370, 4370, 4370, 4370, 4370, -1000, -1000, -1000,
	-1000, -1000, -1000, 4370, 4370, -1000, 44, -1000, 16167, -1000,
	-1000, -1000, -1000, 1467, 540, 796, 502, 1175, -1000, 835,
	1425, 892, 1306, 11725, 1277, -1000, -1000, 16167, -1000, 8469,
	8469, 748, -1000, 14390, -1000, -1000, 5028, 548, 9357, 773,
	585, 9357, 9357, 9357, 9357, 9357, 9357, 9357, 9357, 9357,
	9357, 9357, 9357, 9357, 9357, 9357, 833, 1741, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 917, -1000, 1185, 951,
	951, 63, 63, 63, 63, 63, 63, 9653, 7285, 6015,
	892, 1064, 563, 8173, 7877, 7877, 8469, 8469, 16463, 16463,
	7877, 1396, 650, 563, 16463, -1000, 892, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 67, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7877, 7877, 7877, 7877, 281, 16167,
	-1000, 16463, 13798, 13798, 13798, 13798, 13798, -1000, 1302, 1296,
	-1000, 1285, 1282, 1286, 16167, -1000, 1053, 11429, 477, 1184,
	-1000, 14094, -1000, -1000, 281, 1170, 13798, 16167, -1000, -1000,
	4699, 1174, -1, 1172, -1000, -10, -18, 6989, 6015, 523,
	-1000, -1000, -1000, -1000, 3712, 995, 192, -122, 19, -1000,
	-1000, -1000, -1000, -1000, 1213, -1000, -1000, -1000, 1213, 228,
	1213, 1213, 1213, -1000, 1213, 1213, 54, 54, 54, 54,
	54, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1256, 1255,
	-1000, 1213, 1213, 1213, -1000, 1213, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1228, 260, 1228, 1217,
	1217, -1000, -1000, 15871, 1389, -91, 910, 4370, 1370, 4370,
	16167, 1448, 16167, -1000, -1000, -1000, 10541, -1000, 1903, 16167,
	-1000, 16167, -1000, -1000, 16167, 4370, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 550, -1000, -1000, -1000, -1000, 1311, 8469, 8469, 6344,
	8469, -1000, -1000, -1000, 1339, -1000, 1396, 1422, -1000, 1324,
	1323, 7877, -1000, -1000, 548, 595, -1000, -1000, 673, -1000,
	-1000, -1000, -1000, 492, 1184, -1000, 1281, -1000, -1000, -1000,
	-1000, 773, 9357, 9357, 9357, 283, 1281, 861, 1790, 1729,
	63, 149, 149, 23, 23, 23, 23, 23, 96, 96,
	-1000, -1000, -1000, -1000, 892, -1000, -1000, -1000, 892, 7877,
	1173, -1000, -1000, -1000, 8469, -1000, 892, 1049, 1049, 732,
	856, 1188, -1000, 486, 1179, 1049, 7877, 640, -1000, 8469,
	892, -1000, -1000, 1049, 892, 1049, 1049, 1142, 1184, -1000,
	1171, -1000, 627, 1246, 1254, 1264, 947, -1000, -1000, -1000,
	-1000, 1295, -1000, 1292, -1000, -1000, -1000, -1000, -83, 409,
	403, 389, 15871, -1000, 1438, 13798, 1132, -1000, -1000, 1172,
	-1, -21, -1000, -1000, -1000, -1000, 563, 625, -1000, -1000,
	884, 1167, 3302, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1239, 776, 15871, 306, 362, 479, 343, 879,
	-1000, -1000, -1000, 827, -1000, 15871, 1466, -1000, -1000, 302,
	-1000, 299, 655, 842, 16167, 125, 1231, 1294, -1000, -232,
	-1000, 16, -1000, -1000, 806, 54, 54, 1213, 54, 54,
	54, -1000, -1000, 523, 1335, 523, 523, 523, 523, 841,
	841, -86, -86, -1000, -1000, -1000, 793, 1228, -1000, -1000,
	-1000, 792, -1000, 1248, 1185, -1000, 6015, -1000, -1000, -1000,
	-1000, -1000, 1386, 1147, -1000, -1000, -1000, -1000, 423, -1000,
	-1000, 785, 1854, 500, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 276, 434, -1000, 4370, -1000,
	649, 16167, 16167, 1297, 563, 563, 485, -1000, -1000, 16167,
	-1000, -1000, -1000, -1000, 1151, -1000, -1000, -1000, 4041, 7877,
	-1000, 283, 1281, 268, -1000, 9357, 9357, -1000, -1000, 1049,
	7877, 563, -1000, -1000, -1000, 1953, 833, 1953, 9357, 9357,
	6344, 9357, 9357, -65, 1135, 631, -1000, 8469, 853, -1000,
	-1000, -1000, -1000, -1000, 1263, 16463, 1184, -1000, 11133, 15871,
	1432, 16463, 8469, 8469, -1000, -1000, 8469, 1227, -1000, 8469,
	-1000, -1000, -1000, -1000, 1226, 1184, 1184, 1184, 1030, -1000,
	1432, 1132, -1000, -1000, -1000, -33, -17, -1000, 8469, -1000,
	3712, -1000, 3712, 13206, -1000, 1458, 1421, 321, -14, -1000,
	874, 862, -1000, 858, -1000, -2, -1000, -188, 84, 140,
	-1000, -1000, 1184, -1000, 1225, 1385, -1000, 1357, 783, -1000,
	996, -212, -1000, -1000, -1000, -1000, -1000, -1000, 1184, 1223,
	1222, -1000, 1219, -1000, -1000, -1000, 1050, 523, 523, 54,
	523, 523, 523, -1000, 566, -1000, -1000, -1000, -1000, 1047,
	-1000, 1042, -1000, 95, 77, -1000, 1155, -1000, 1040, 16167,
	15871, -1000, 1148, -1000, 606, 1419, 210, 16167, 1448, 1448,
	-1000, 345, 15871, -1000, 15871, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15871, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 16167, -1000, -1000, -1000, -1000,
	-1000, 15871, 340, -1000, -1000, 839, 8469, -1000, -1000, -1000,
	6015, -1000, 1438, 13798, -1000, -1000, 892, -1000, 9357, 1281,
	1281, -1000, -1000, 892, 1213, 1213, -1000, 1213, 1217, -1000,
	-1000, 1213, 115, 1213, 110, 892, 892, 136, 695, -1000,
	112, 419, 1184, -58, -1000, 563, 8469, -1000, 1360, 1127,
	1122, -1000, -1000, 7581, 892, 1032, 476, 1030, 1425, -1000,
	563, 563, 563, 12613, 563, -213, 12613, 12613, 12613, 10837,
	15871, 1425, -1000, -1000, -1000, -1000, 563, 3302, -1000, 1028,
	-1000, 1213, 1213, 373, 373, -191, 297, 296, 1184, -1000,
	-1000, -1000, -1000, -193, -1000, -1000, 655, -1000, 8469, 12613,
	87, -1000, 1138, 1033, 1437, -1000, 13502, 892, -1000, 804,
	-1000, 798, 1006, -1000, -1000, -1000, 523, -1000, -1000, -1000,
	-1000, -1000, 54, 837, 54, 13, 7, 780, -1000, 769,
	1161, 1262, 6015, 3712, 374, 1393, -1000, -1000, 1412, -1000,
	1110, 15871, -1000, -1000, 271, -1000, 1208, -1000, -1000, -1000,
	-1000, 1366, 15871, -1000, -1000, 563, 1436, 1123, -1000, 1281,
	-1000, -1000, 252, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9357, 9357, -1000, 9357, 9357, 9357, 892, 834,
	563, 295, -1000, 1184, -1000, -1000, 1141, 15871, 15871, -1000,
	-1000, 1020, -1000, -1000, 1017, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1003, 1003, 1003, 477, -1000, -1000, 372, 13206,
	1365, -1000, 767, -1000, -1000, 678, 198, 708, -1000, 15871,
	-193, 8469, -1000, 1184, 831, 981, 9357, 1207, 766, -1000,
	978, -1000, 66, -86, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 523, -1000, 523, -1000, -1000, 952, 948, 13206,
	15871, 16167, -1000, -1000, 15871, -1000, -1000, -1000, -1000, -1000,
	181, 2580, 1206, 1203, 12613, 1184, 346, 1434, 1428, -1000,
	-1000, 201, 201, 201, 201, 83, -1000, -1000, 1465, -1000,
	1184, -1000, 1185, 467, -1000, 15871, -1000, -1000, -213, -1000,
	-1000, -1000, -83, 1260, 421, 134, -1000, 849, 604, 820,
	590, 583, 582, 578, 568, 558, 557, -1000, -1000, -1000,
	1464, -1000, -1000, -1000, 1449, 1202, -1000, 1198, 831, 8469,
	227, -1000, 250, -1000, 927, 896, -1000, -1000, -1000, -1000,
	-1000, -1000, 977, 1195, 1192, 1057, -1000, 177, 2580, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1432, 15871,
	15871, 15871, 15871, 292, 9061, 9061, 13206, 13206, 969, 261,
	269, -1000, 8469, 8469, -1000, -1000, -1000, -1000, 892, 179,
	-138, 16463, 1122, 892, 15871, -1000, -1000, -1000, -1000, 15871,
	-1000, -110, 421, 15871, -1000, 741, -1000, -1000, 704, 724,
	704, 704, 704, 704, 704, 373, 373, 15871, 13206, 227,
	831, -1000, -62, -164, 259, -1000, -1000, -197, 13206, 13206,
	-88, 15871, 8469, 2474, -1000, 1425, 1107, 9949, -1000, -1000,
	-1000, -1000, 15871, 1455, 1453, 1451, 1440, 2437, 62, 145,
	967, 965, 1249, 946, -1000, 15871, 1191, 563, 1097, -1000,
	1284, -81, -141, 1061, -1000, -1000, 1184, 926, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	655, 655, 924, 922, -1000, 227, -1000, -1000, -1000, 142,
	807, 713, 706, 699, 73, -1000, 1427, 1438, 1187, 914,
	895, -1000, -208, -1000, 563, -1000, -1000, 2580, 1339, 15871,
	162, -1000, -1000, 1362, -1000, -1000, -1000, -1000, -1000, 2580,
	2580, -1000, 258, -91, -1000, 261, 1322, 13206, -1000, 1269,
	-1000, 15871, -1000, 421, -1000, -1000, 325, 372, -1000, 697,
	-1000, 690, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12909,
	372, 12613, 1438, 372, 8469, -229, -1000, -1000, 10541, 1397,
	15871, 2445, -1000, 2048, 137, -1000, 148, -1000, -1000, 247,
	891, -105, 892, -1000, 16167, 1260, -1000, -1000, -1000, 450,
	1260, 888, 372, -1000, 563, 586, 1185, -1000, -1000, -1000,
	639, -1000, 144, -1000, 238, -1000, -139, -1000, 1186, -1000,
	6015, -1000, -1000, -1000, -1000, -1000, 141, -1000, -1000, 1184,
	-142, 15871, -1000, 2580, 8765, -1000, 854, 2022, 201, 892,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1750, 54, 50, 1746, 1745, 1744, 1510, 1500, 1484,
	1482, 1743, 1742, 1740, 1738, 1737, 1729, 1725, 1715, 1713,
	1711, 1710, 1709, 1708, 1707, 1706, 1704, 1703, 465, 1702,
	1700, 1699, 98, 1698, 99, 1696, 1695, 66, 115, 67,
	65, 1611, 1694, 48, 97, 89, 1689, 76, 1688, 1687,
	109, 1686, 88, 1685, 1684, 400, 1682, 1679, 33, 11,
	14, 37, 1677, 1676, 114, 127, 1674, 1673, 1672, 1671,
	1669, 1668, 78, 17, 28, 27, 31, 1667, 80, 18,
	1666, 77, 1665, 1664, 1659, 1653, 34, 1652, 82, 32,
	12, 9, 1650, 22, 1648, 86, 59, 42, 16, 103,
	84, 1647, 58, 85, 73, 1645, 1644, 751, 1643, 1642,
	1641, 1634, 1632, 1630, 684, 731, 1627, 1626, 1625, 75,
	0, 643, 124, 90, 1624, 68, 1623, 2036, 105, 92,
	39, 1621, 49, 1836, 53, 1617, 1615, 61, 104, 100,
	101, 91, 1612, 1607, 1603, 1602, 1601, 122, 52, 57,
	43, 1600, 1599, 1597, 56, 71, 46, 72, 83, 1596,
	1595, 1594, 1593, 45, 1592, 15, 29, 1, 69, 1591,
	1590, 1589, 1588, 47, 41, 1585, 30, 21, 6, 8,
	4, 1582, 1580, 1579, 2, 1578, 36, 1577, 5, 1575,
	10, 1574, 1573, 1572, 1571, 1569, 1568, 1567, 25, 1564,
	1561, 23, 24, 64, 40, 13, 70, 44, 1560, 51,
	1557, 3, 19, 1556, 7, 1552, 1546, 1545, 20, 26,
	1544, 1542, 1541, 1539, 1498, 1206, 1034, 1488, 1486, 1480,
	1469, 138,
}

var yyR1 = [...]int{
	0, 223, 224, 224, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 227,
	227, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 215, 215, 214, 216, 216, 12, 12, 12, 12,
	12, 208, 208, 208, 208, 208, 13, 13, 211, 211,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 206, 206, 206, 207, 207,
	207, 209, 209, 210, 210, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 213, 213, 192, 192, 192, 193,
	193, 193, 193, 193, 193, 195, 195, 196, 196, 125,
	125, 190, 190, 189, 188, 188, 187, 187, 186, 197,
	197, 20, 170, 171, 171, 171, 171, 171, 171, 171,
	158, 139, 139, 139, 139, 139, 139, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 203,
	203, 203, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 199, 199, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 148, 148, 148,
	148, 148, 148, 198, 198, 194, 194, 194, 194, 194,
	194, 143, 143, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 142, 142, 142, 142, 142, 142, 142,
	142, 144, 144, 144, 144, 144, 144, 144, 144, 140,
	140, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 157, 157, 147, 147, 155, 155, 156, 156,
	156, 154, 154, 154, 151, 151, 152, 152, 153, 153,
	153, 149, 149, 149, 150, 150, 150, 160, 179, 179,
	179, 181, 181, 182, 182, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 169, 169, 205, 205,
	178, 178, 178, 175, 175, 175, 175, 175, 175, 175,
	175, 168, 168, 177, 177, 176, 176, 163, 163, 163,
	163, 163, 164, 165, 165, 165, 165, 161, 162, 201,
	201, 201, 202, 202, 166, 166, 167, 167, 172, 172,
	172, 173, 173, 173, 174, 174, 174, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 228, 228, 229, 229, 229, 229, 229, 229, 229,
	185, 183, 183, 184, 184, 17, 18, 18, 18, 18,
	18, 19, 19, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 112, 112, 109,
	109, 110, 110, 111, 111, 111, 113, 113, 113, 136,
	136, 136, 23, 23, 25, 25, 26, 27, 24, 24,
	24, 24, 24, 230, 28, 29, 29, 30, 30, 30,
	34, 34, 34, 32, 32, 33, 33, 39, 39, 38,
	38, 40, 40, 40, 40, 124, 124, 124, 123, 123,
	42, 42, 43, 43, 44, 44, 45, 45, 45, 218,
	218, 217, 217, 219, 219, 219, 219, 219, 219, 57,
	57, 93, 93, 93, 96, 96, 46, 46, 46, 46,
	47, 47, 48, 48, 49, 49, 131, 131, 130, 130,
	130, 129, 129, 51, 51, 51, 53, 52, 52, 52,
	52, 54, 54, 56, 56, 55, 55, 58, 58, 58,
	58, 59, 59, 94, 94, 41, 41, 41, 41, 41,
	41, 41, 108, 108, 61, 61, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 71, 71, 71, 71,
	71, 71, 62, 62, 62, 62, 62, 62, 62, 37,
	37, 72, 72, 72, 78, 73, 73, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	69, 69, 69, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 231, 231, 70,
	70, 70, 70, 35, 35, 35, 35, 35, 134, 134,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 82, 82, 36, 36, 80, 80, 81, 83, 83,
	79, 79, 79, 220, 64, 64, 64, 64, 64, 64,
	64, 64, 66, 66, 66, 84, 84, 85, 85, 86,
	86, 87, 87, 88, 89, 89, 89, 90, 90, 90,
	90, 91, 91, 91, 63, 63, 63, 63, 63, 63,
	92, 92, 92, 92, 97, 97, 74, 74, 76, 76,
	75, 77, 98, 98, 102, 99, 99, 103, 103, 103,
	103, 103, 101, 101, 101, 126, 126, 126, 106, 106,
	114, 114, 115, 115, 107, 107, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 117, 117, 117, 118,
	118, 121, 121, 122, 122, 127, 127, 128, 128, 221,
	221, 221, 222, 222, 222, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 225, 226, 132, 133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 8, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 3, 0, 2, 0, 3, 3, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 2, 1, 2, 1, 1, 1,
	1, 4, 4, 4, 4, 4, 1, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 1, 0, 1, 0, 2,
	1, 0, 3, 3, 0, 1, 2, 6, 0, 1,
	4, 1, 2, 1, 3, 2, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 1, 1,
	0, 2, 5, 2, 3, 3, 2, 3, 2, 3,
	4, 1, 1, 1, 3, 3, 2, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 7, 0,
	1, 1, 0, 3, 0, 1, 1, 3, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 11, 13,
	13, 7, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 0,
	4, 1, 3, 1, 1, 1, 1, 1, 1, 4,
	8, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 0, 4, 1, 3, 3, 2, 3,
	1, 2, 0, 3, 1, 1, 3, 3, 4, 4,
	5, 3, 4, 5, 6, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 0,
	2, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	2, 2, 2, 2, 3, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -223, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 191, 192,
	194, 195, 26, 139, 140, 143, 144, -225, 8, 296,
	53, -224, 337, -86, 15, -30, 5, -28, -230, -28,
	-28, -28, -28, -28, -170, 53, -125, -197, 154, 288,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 288, 119, 120, -55, -127, 56,
	-120, 161, 305, 21, 191, 204, 205, 196, 237, 225,
	306, 159, 222, 226, 274, 336, 65, 194, 283, 128,
	165, 141, 217, 220, 219, 211, 208, 28, 243, 312,
	210, 131, 244, 248, 254, 275, 303, 201, 202, 277,
	241, 32, 133, 307, 34, 149, 278, 246, 240, 235,
	239, 200, 234, 38, 214, 250, 249, 251, 273, 228,
	160, 253, 230, 212, 229, 18, 144, 147, 245, 247,
	209, 162, 126, 151, 311, 279, 207, 148, 163, 143,
	282, 327, 158, 195, 276, 203, 285, 37, 259, 221,
	198, 213, 199, 130, 192, 156, 232, 150, 215, 216,
	238, 197, 233, 193, 152, 145, 284, 260, 313, 231,
	227, 223, 224, 157, 122, 154, 155, 266, 267, 268,
	269, 309, 280, 218, 261, 262, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 226, 113, 264, 121, 32,
	151, -136, 120, -109, 155, 266, 267, 268, 269, 56,
	276, 275, 270, -127, 193, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -225, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -220, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, 58, 57, 66, 59, 60, 61, 62, 67,
	68, 69, -121, 286, -75, -225, 43, 44, 297, 298,
	299, 300, 304, 301, 76, 33, 287, 295, 294, 293,
	291, 292, 289, 290, 335, 125, 288, 102, 296, -107,
	-43, -44, -45, -46, -57, -78, -225, -55, 11, -50,
	-55, -99, -135, 193, -103, 276, 275, -122, 286, -101,
	-121, -119, 274, 226, 273, 56, -120, 118, 175, 316,
	72, 23, 25, 257, 263, 174, 75, 107, 16, 76,
	181, 325, 326, 106, 297, 113, 47, 289, 290, 287,
	179, 299, 300, 288, 264, 186, 20, 29, 10, 26,
	139, 22, 100, 115, 176, 79, 80, 142, 24, 140,
	69, 182, 184, 19, 50, 132, 11, 315, 13, 14,
	329, 317, 125, 124, 91, 328, 121, 45, 8, 109,
	27, 88, 41, 137, 185, 43, 89, 17, 291, 292,
	31, 304, 146, 102, 48, 35, 330, 73, 331, 67,
	51, 281, 180, 71, 15, 46, 332, 134, 183, 90,
	116, 296, 44, 177, 333, 119, 178, 6, 302, 30,
	138, 42, 120, 265, 78, 123, 68, 5, 136, 9,
	49, 52, 293, 294, 295, 33, 77, 12, 135, 308,
	70, -171, -158, 56, -201, 325, 326, 122, -121, -115,
	125, -115, -121, -121, -55, -115, 296, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 288, 56, 151, 120, 152, 122, -133, -225, -122,
	-133, -133, -133, 156, 157, -133, -110, 271, 51, -133,
	-226, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 335, 81, 82,
	83, 84, 85, 86, 87, -108, -225, -78, -225, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -225, 110,
	-2, -73, -41, -225, -225, -225, -225, -225, -225, -225,
	-225, -225, -82, -41, -225, -231, -225, -231, -231, -231,
	-231, -231, -231, -231, -138, 107, 226, 141, 217, -141,
	-140, 232, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 225, 306, -225, -225, -225, -225, -56, 27,
	-55, 30, 54, -51, -53, -52, -54, 41, 45, 47,
	42, 43, 44, 48, -131, 23, -43, -225, -130, 147,
	-129, 23, -127, 58, -55, -50, -227, 54, 11, 52,
	54, -99, 193, -100, -104, 277, 279, 81, 110, -126,
	-121, 58, 29, 30, 55, 54, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 225, 306, 222, 226,
	223, 228, 229, 230, 107, 227, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 231, 243, 30,
	141, 215, 216, 217, 220, 219, 221, 218, 244, 245,
	246, 247, 248, 249, 250, 251, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 207, 208, 210, 211,
	212, 214, 213, 121, -55, -190, 52, 56, 73, 56,
	51, -206, 51, 19, 174, 175, 23, -55, -55, 281,
	-133, 123, -55, 24, 51, -55, 56, 56, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -112, 265, 272, -55, 9, 91, 54, 18, 110,
	54, -89, 25, 26, -90, -226, -34, -66, -121, 59,
	62, -33, 42, -55, -41, -41, -71, 67, 73, 68,
	69, -123, 98, -128, -122, -119, -65, -72, -75, -78,
	63, 91, 89, 90, 75, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-134, 56, 58, -138, 56, -64, -64, -121, -39, 22,
	-38, -40, -122, -226, 54, -226, -2, -38, -38, -41,
	-41, -79, -121, -127, -79, -38, -32, -80, -81, 77,
	-79, -226, 224, -38, -39, -38, -38, -95, 147, -55,
	-98, -102, -79, -44, -45, -45, -44, -45, 41, 41,
	41, 46, 41, 46, 41, -52, -127, -226, -58, 49,
	124, 50, -225, -129, -95, 52, -43, -55, -103, -100,
	54, 278, 280, 281, 51, 70, -41, -122, -150, 107,
	106, -172, -173, -174, -122, 58, 59, -158, -160, -163,
	-161, -162, -175, -164, 128, 126, 130, 131, 136, -168,
	121, 137, 67, 73, -203, 128, 51, 257, 263, 126,
	137, 136, 336, 65, 129, 315, 317, 29, -153, 338,
	252, -151, 260, -147, 53, -147, -147, 224, -147, -147,
	-147, -147, -147, -149, 226, -149, -149, -149, -149, 53,
	53, -147, -147, -147, -147, -155, 53, 209, -155, -155,
	-156, 53, -156, -121, 23, -188, 308, -189, 56, -133,
	24, -133, -55, -209, -207, 8, 9, 10, -55, -139,
	-116, 118, 115, 116, -185, 114, 257, 226, 65, 29,
	15, 297, 147, 313, 56, 148, -55, -55, -55, -133,
	-111, 11, 91, 37, -41, -41, -128, -88, -91, -106,
	19, 11, 33, 33, -38, 67, 68, 69, 110, -225,
	-72, -65, -65, -65, -37, 142, 72, -226, -226, -38,
	54, -41, -226, -226, -226, 54, 52, 23, 54, 11,
	110, 54, 11, -226, -38, -83, -81, 79, -41, -226,
	-226, -226, -226, -226, -63, 30, 33, -2, -225, -225,
	-59, 54, 12, 81, -48, -47, 51, 52, -49, 51,
	-47, 41, 41, -218, 308, 121, 121, 121, -96, -121,
	-59, -43, -59, -104, -105, 282, 279, 285, 81, 56,
	54, -174, 81, 53, -202, 51, 73, -166, -121, 137,
	-168, -168, 56, -168, 56, 56, 67, 19, -121, 9,
	137, 137, -202, 58, -127, -199, 316, 16, 53, -204,
	53, 58, 59, 60, 67, -148, 66, -61, 253, 287,
	290, 289, 254, 339, -152, 261, 59, -149, -149, -147,
	-149, -149, -149, -150, 30, -150, -150, -150, -150, -157,
	58, -157, -154, 308, 309, -154, 59, -155, 59, 51,
	52, -2, -187, -186, -122, -192, 23, 51, 54, -206,
	-132, -125, 128, -229, 154, 127, 132, 131, 56, 126,
	130, 147, -191, 154, 127, 128, 132, 131, 56, 121,
	137, 126, 130, 147, 136, -117, -118, 123, 23, 121,
	137, 147, 118, -133, -113, 89, 12, -127, -127, 38,
	110, -55, -42, 11, 98, -122, -39, -37, 72, -65,
	-65, -226, -40, -137, 107, 222, 141, 217, 211, 241,
	242, 228, 259, 215, 260, -134, -137, -65, -65, -122,
	-65, -65, 305, -86, 80, -41, 78, -97, 51, -98,
	-74, -76, -75, -225, -2, -92, -121, -96, -86, -102,
	-41, -41, -41, 53, -41, 53, -225, -225, -225, -226,
	54, -86, -59, 279, 283, 284, -41, -173, -174, -177,
	-176, -121, 137, 10, 9, 19, 132, 126, 336, 56,
	56, 56, -201, 136, 327, -203, 336, -148, -225, 53,
	23, 29, 59, -204, 53, -194, 335, -225, -147, 53,
	-147, 53, 53, 55, -150, -150, -149, -150, -150, -150,
	56, 107, 55, 54, 55, 215, 215, 54, 55, 54,
	-55, -121, 54, 81, -193, 19, 162, 163, -55, -207,
	-209, -228, 121, 137, -121, -132, -121, -132, -121, -55,
	-132, -121, 128, -163, 58, -41, -59, -43, -226, -65,
	-226, -147, -147, -147, -156, -147, 202, -147, 202, -226,
	-226, -226, 54, 19, -226, 54, 19, -225, -36, 302,
	-41, 28, -97, 54, -226, -226, -226, 54, 110, -226,
	-90, -93, -121, 137, -217, -219, 329, 330, 331, 332,
	333, 334, -93, -93, -93, -130, -121, -90, 55, 54,
	-147, -147, -165, 158, 159, 30, 160, -165, 327, 137,
	137, -225, -201, -202, -41, -93, 53, 317, 54, 55,
	-204, -121, 226, 216, 255, 232, 241, -226, 55, 55,
	55, -150, -149, 58, -149, 262, 262, 59, 59, 53,
	52, 51, -186, -174, 123, 21, 6, 8, 9, 10,
	19, 23, -121, 136, 53, 27, -121, -84, 13, -149,
	56, -65, -65, -65, -65, -65, -226, 58, 137, -76,
	33, -2, -225, -121, -121, 54, 55, 55, 54, -226,
	-226, -226, -58, -179, -181, 308, -180, 52, 133, 65,
	167, 168, 169, 170, 171, 172, 173, -176, -89, -202,
	51, 67, 161, -202, 51, -166, -121, -201, -41, -225,
	-226, 55, -65, 53, 59, 55, 224, -154, -150, -150,
	55, 55, -177, -121, -55, -167, -121, 176, -210, -212,
	-7, -9, -8, -11, -10, -12, -13, -14, -3, 20,
	180, 181, 186, 182, 135, 125, 53, 53, -93, -225,
	126, -85, 14, 16, -226, -226, -226, -226, -35, 91,
	308, 9, -74, -2, 110, -121, -219, -218, -178, 51,
	-180, 308, 53, 310, 56, -169, 81, 58, 81, 81,
	81, 81, 81, 81, 81, 9, 10, 53, 53, -226,
	-41, -198, 160, 55, -200, 55, 55, 55, 53, 53,
	-195, 54, 52, 177, -212, -86, -215, -121, -214, -121,
	-121, -121, -208, 35, 183, 184, 185, -60, -65, -60,
	-177, -177, 55, -183, -184, 147, 137, -41, -73, -226,
	306, 48, 311, -98, -226, -121, -121, -182, -180, -121,
	59, -205, 51, 70, 59, -205, -205, -205, -205, -205,
	-165, -165, -167, -177, -198, -226, 303, 314, 55, 192,
	319, 320, 146, 321, 160, 322, 323, -94, 328, -177,
	-177, -196, 308, -121, -41, -213, -212, 191, -90, 54,
	-216, -139, 178, -121, 11, 11, 11, 11, -212, 191,
	191, 55, 55, -190, -226, 54, -121, 53, 38, 307,
	312, -225, 55, 54, -202, -202, 55, 55, -198, 308,
	59, 16, 59, 59, 59, 59, 320, 146, 322, 16,
	-59, 53, 55, 55, 336, -212, -91, -214, -121, 179,
	27, -211, -212, -211, -221, 187, 73, -188, -184, 33,
	-177, 38, -121, -180, 129, -179, 59, 59, 324, -127,
	-179, -93, -59, -179, -41, 337, 19, -121, 80, -212,
	80, -222, 188, 187, 149, 55, 308, -226, -55, -178,
	110, -178, 55, -179, 80, -2, 79, 190, 189, 150,
	311, 53, -122, 191, -225, 312, -167, -211, -65, 146,
	55, 80, -226, -226,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 729, 0, 473, 473, 473, 473, 473, 473, 0,
	-2, 784, 0, 0, 0, 0, -2, 463, 464, 0,
	466, 467, 1073, 1073, 1073, 1073, 1073, 0, 33, 34,
	1071, 1, 3, 737, 0, 0, 477, 480, 475, 0,
	784, 0, 0, 0, 83, 143, 359, 0, 0, 782,
	782, 0, 0, 0, 782, 130, 0, 0, 0, 785,
	0, 780, 0, 780, 780, 780, 0, 422, 555, 805,
	806, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 0, 0, 0, 0, 1074, 1074, 1074,
	1074, 0, 1074, 451, 440, 442, 443, 444, 445, 1074,
	460, 461, 450, 462, 465, 468, 469, 470, 471, 472,
	27, 741, 0, 0, 729, 29, 0, 473, 478, 479,
	483, 481, 482, 474, 0, 491, 495, 0, 565, 0,
	570, 572, -2, -2, 0, 607, 608, 609, 610, 611,
	612, 0, 0, 0, 0, 0, 0, 0, 636, 637,
	638, 639, 714, 715, 716, 717, 718, 719, 720, 721,
	574, 575, 710, 0, 761, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 667, 667, 667, 667,
	667, 667, 667, 667, 0, 0, 0, 0, 0, 0,
	0, 502, 504, 505, 506, 536, 0, 538, 0, 0,
	41, 45, 0, 1041, 765, -2, -2, 0, 0, 0,
	803, 804, -2, 951, -2, 801, 802, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 0, 144, 0, 0, 360, 361, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 1074, 0,
	0, 0, 0, 0, 0, 0, 421, 0, 423, 1074,
	1074, 1074, 1074, 1074, 1074, 1074, 1074, 432, 1075, 1076,
	433, 434, 435, 1074, 1074, 437, 0, 452, 0, 446,
	28, 1072, 22, 0, 0, 738, 0, 730, 731, 734,
	737, 27, 480, 0, 485, 484, 476, 0, 492, 0,
	0, 0, 496, 0, 498, 499, 0, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 593,
	594, 595, 596, 597, 598, 571, 0, 585, 0, 0,
	0, 628, 629, 630, 631, 632, 633, 0, 487, 0,
	27, 0, 605, 0, 0, 0, 0, 0, 0, 0,
	0, 483, 0, 702, 0, 658, 0, 659, 660, 661,
	662, 663, 664, 665, 666, 694, 0, 696, 697, 698,
	699, 700, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 249, 250, 0, 487, 0, 0, 43, 0,
	554, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	546, 0, 0, 0, 0, 537, 0, 0, 557, 1005,
	539, 0, 541, 542, -2, 0, 0, 0, 39, 40,
	0, 46, 1041, 48, 72, 0, 0, 0, 0, 304,
	775, 776, 777, 773, 368, 0, 150, 298, 294, 152,
	153, 154, 155, 156, 284, 222, 249, 250, 284, 284,
	284, 284, 284, 256, 284, 284, 301, 301, 301, 301,
	301, 265, 266, 267, 268, 269, 270, 271, 966, 0,
	241, 284, 284, 284, 245, 284, 247, 248, 274, 275,
	276, 277, 278, 279, 280, 281, 223, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 286, 286, 286, 288,
	288, 239, 240, 0, 0, 134, 0, 1074, 0, 1074,
	0, 0, 0, 95, 96, 97, 0, 141, 0, 0,
	388, 0, 416, 781, 0, 1074, 419, 420, 556, 807,
	808, 424, 425, 426, 427, 428, 429, 430, 431, 436,
	439, 453, 447, 448, 441, 742, 0, 0, 0, 0,
	0, 733, 735, 736, 741, 30, 483, 0, 722, 0,
	0, 0, 486, 25, 566, 567, 569, 586, 0, 588,
	590, 497, 493, 0, 711, -2, 576, 577, 601, 602,
	603, 0, 0, 0, 0, 599, 581, 0, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 623, 624,
	627, 678, 679, 635, 0, 625, 626, 634, 0, 0,
	488, 489, 713, 604, 0, 760, 27, 0, 0, 0,
	0, 0, 710, 0, 0, 0, 0, 708, 705, 0,
	0, 668, 695, 0, 0, 0, 0, 0, 0, 553,
	561, 762, 0, 503, 532, 534, 0, 529, 544, 545,
	547, 0, 549, 0, 551, 552, 507, 508, 509, 0,
	0, 0, 0, 540, 561, 0, 561, 42, 766, 47,
	0, 0, 75, 76, 767, 768, 769, 0, 771, 305,
	0, 142, 369, 371, 374, 375, 376, 145, 146, 147,
	148, 149, 0, 362, 364, 0, 0, 0, 0, 0,
	341, 342, 158, 0, 160, 0, 0, 163, 164, 0,
	166, 168, 362, 0, 0, 0, 0, 0, 157, 0,
	300, 296, 295, 221, 0, 301, 301, 284, 301, 301,
	301, 258, 259, 304, 0, 304, 304, 304, 304, 0,
	0, 291, 291, 244, 246, 233, 0, 286, 235, 236,
	237, 0, 238, 0, 0, 88, 0, 132, 133, 89,
	783, 90, 116, 0, 101, 98, 99, 100, 0, 94,
	1073, 129, 0, 796, 389, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 0, 0, 415, 1074, 418,
	456, 0, 0, 0, 739, 740, 0, 732, 23, 0,
	778, 779, 723, 724, 500, 587, 589, 591, 0, 487,
	578, 599, 582, 0, 579, 0, 0, 573, 640, 0,
	0, 606, -2, 643, 644, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 706, 0, 0, 657,
	669, 670, 671, 672, 754, 0, 0, -2, 0, 0,
	729, 0, 0, 0, 526, 533, 0, 0, 527, 0,
	528, 548, 550, 519, 0, 0, 0, 0, 0, 524,
	729, 561, 38, 73, 74, 0, 0, 80, 0, 306,
	0, 372, 0, 0, 347, 0, 0, 0, 365, 333,
	0, 0, 336, 0, 338, 359, 159, 0, 0, 0,
	165, 167, 0, 171, 172, 0, 191, 0, 0, 179,
	0, 215, 183, 184, 185, 186, 187, 188, 0, 284,
	284, 211, 0, 299, 151, 297, 0, 304, 304, 301,
	304, 304, 304, 260, 0, 261, 262, 263, 264, 0,
	282, 0, 242, 0, 0, 243, 0, 234, 0, 0,
	0, -2, 135, 136, 0, 119, 0, 0, 0, 0,
	377, 0, 0, 1073, 0, 403, 404, 405, 406, 407,
	408, 409, 1073, 0, 390, 391, 392, 393, 394, 395,
	396, 397, 398, 399, 400, 0, 1073, 797, 798, 799,
	800, 0, 0, 417, 438, 0, 0, 454, 455, 743,
	0, 24, 561, 0, 494, 712, 0, 580, 0, 600,
	583, 641, 490, 0, 284, 284, 683, 284, 288, 686,
	687, 284, 689, 284, 692, 0, 0, 0, 0, 711,
	0, 0, 0, 703, 656, 709, 0, 31, 0, 754,
	744, 756, 758, 0, 27, 0, 750, 0, 737, 763,
	562, 764, 530, 0, 535, 0, 0, 0, 0, 538,
	0, 737, 37, 77, 78, 79, 770, 370, 373, 0,
	343, 284, 284, 0, 0, 0, 0, 0, 0, 334,
	335, 337, 339, 359, 178, 161, 362, 162, 0, 0,
	0, 192, 0, 0, 0, 182, 0, 0, 207, 0,
	209, 0, 0, 285, 251, 252, 304, 253, 254, 255,
	302, 303, 301, 0, 301, 0, 0, 0, 289, 0,
	0, 0, 0, 0, 0, 0, 117, 118, 0, 102,
	0, 0, 401, 402, 0, 382, 0, 383, 385, 386,
	387, 0, 364, 381, 457, 458, 725, 501, 642, 584,
	645, 680, 301, 684, 685, 688, 690, 691, 693, 647,
	646, 648, 0, 0, 651, 0, 0, 0, 0, 0,
	707, 0, 32, 0, 759, -2, 0, 0, 0, 44,
	35, 0, 521, 522, 0, 511, 513, 514, 515, 516,
	517, 518, 0, 0, 0, 557, 525, 36, 308, 0,
	734, 346, 362, 353, 354, 0, 0, 362, 363, 364,
	359, 0, 340, 0, 0, 0, 0, 175, 0, 180,
	0, 190, 951, 291, 218, 219, 220, 189, 208, 210,
	212, 257, 304, 283, 304, 292, 293, 0, 0, 0,
	0, 0, 137, 138, 0, 120, 121, 122, 123, 124,
	0, 0, 0, 0, 0, 0, 365, 727, 0, 681,
	682, 0, 0, 0, 0, 673, 655, 704, 0, 757,
	0, -2, 0, 752, 751, 0, 531, 510, 0, 558,
	559, 560, 509, 330, 309, 0, 311, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 344, 345, 348,
	0, 355, 356, 349, 0, 0, 365, 0, 0, 0,
	213, 173, 0, 193, 0, 0, 216, 217, 272, 273,
	287, 290, 0, 0, 0, 125, 366, 0, 93, 103,
	105, 106, 107, 108, 109, 110, 111, 112, 729, 0,
	0, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 26, 0, 0, 649, 650, 652, 653, 0, 0,
	0, 0, 747, 27, 0, 523, 512, 520, 307, 0,
	312, 0, 0, 0, 315, 0, 327, 317, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 169, 0, 0, 0, 177, 181, 563, 0, 0,
	127, 0, 0, 0, 104, 737, 49, 54, 51, 56,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 0, 411, 0, 0, 728, 726, 654,
	0, 0, 0, 755, -2, 753, 331, 0, 313, 318,
	316, 319, 328, 329, 320, 321, 322, 323, 324, 325,
	362, 362, 0, 0, 358, 213, 214, 174, 176, 0,
	0, 0, 0, 0, 0, 204, 0, 561, 0, 0,
	0, 91, 0, 367, 126, 92, 114, 0, 741, 0,
	0, 53, 55, 59, 62, 63, 64, 65, 66, 0,
	0, 378, 809, 134, 410, 0, 0, 0, 674, 0,
	677, 0, 310, 0, 350, 351, 0, 308, 170, 0,
	195, 0, 197, 198, 199, 200, 201, 202, 203, 0,
	308, 0, 561, 308, 0, 0, 113, 52, 0, 0,
	0, 0, 68, 0, 812, 810, 0, 384, 412, 0,
	0, 675, 0, 314, 0, 330, 194, 196, 205, 0,
	330, 0, 308, 85, 128, 0, 0, 60, 67, 69,
	70, 380, 0, 811, 0, 379, 0, 332, 0, 357,
	0, 84, 564, 86, 115, -2, 0, 813, 814, 0,
	0, 0, 206, 0, 0, 676, 0, 0, 0, 0,
	352, 71, 413, 414,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 337,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 338, 3, 339, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:368
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:373
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:378
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:401
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:409
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:413
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:419
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:436
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:442
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:446
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:453
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:465
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:477
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:481
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:487
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:506
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:511
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:515
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:520
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:524
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:542
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:552
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:565
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:569
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:580
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:584
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:590
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:604
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:629
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:645
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:651
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:658
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:668
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:672
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:678
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:686
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:697
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:701
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:707
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:715
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:733
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:739
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:743
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:754
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:774
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:790
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:805
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:813
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:829
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:841
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:852
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:863
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:883
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:897
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:903
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:907
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:913
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:917
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:923
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:934
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:946
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:953
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:957
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:966
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:970
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:982
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:986
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:991
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:995
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1000
		{
			yyVAL.expr = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1004
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1009
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1013
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1018
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1022
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1028
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1049
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1055
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1060
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1064
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1070
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1077
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1083
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1087
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1092
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1096
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1100
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1104
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1108
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1114
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1120
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1137
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1149
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1154
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1159
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1164
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1169
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1174
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1179
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1184
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1194
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1199
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1213
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1223
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1228
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1233
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1240
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1246
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1252
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1258
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1264
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1271
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1275
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1279
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1285
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1289
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1293
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1297
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1301
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1305
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1309
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1313
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1317
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1327
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1332
		{
			yyVAL.sequence = &Sequence{}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1336
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1341
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1346
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1351
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1356
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1361
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1366
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1371
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1376
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1391
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1396
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1403
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1407
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1411
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1415
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1419
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1423
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1428
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1432
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1437
		{
			yyVAL.bytes = nil
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1448
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1453
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1531
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1547
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1551
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1559
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1563
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1571
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1575
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1595
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1619
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1623
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1627
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1631
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1635
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1639
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1643
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1647
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1651
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1655
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1659
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1663
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1714
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1725
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1730
		{
			yyVAL.optVal = nil
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1734
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1739
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1743
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1751
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1755
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1761
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1769
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1773
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1777
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1782
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1786
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1791
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1795
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1800
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1804
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1808
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1813
		{
			yyVAL.str = ""
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1817
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1821
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1826
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1830
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1834
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1840
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1845
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1849
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1853
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1859
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1863
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1869
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1873
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1879
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1883
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1888
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1892
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1896
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1900
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1904
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1908
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1912
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1916
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1920
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1926
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1930
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1936
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1940
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1946
		{
			yyVAL.indexPartition = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1950
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 332:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1954
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1960
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1964
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1968
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1972
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1976
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1980
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1984
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1988
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1994
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1998
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2004
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2008
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2014
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2019
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2025
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 348:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2030
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 349:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2037
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 350:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2044
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2051
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 352:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2060
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2072
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2076
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2080
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2084
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 357:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2090
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2101
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2111
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2115
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2119
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2125
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2129
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2134
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2141
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2145
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2150
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2154
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2158
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2166
		{
			yyVAL.str = yyDollar[1].str
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2170
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2174
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2180
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2184
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2188
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2194
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2198
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 379:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2212
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 380:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2226
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 381:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2245
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2254
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2258
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2262
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 385:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2275
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2285
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 387:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2290
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2295
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2299
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2331
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2337
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2341
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 413:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2347
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 414:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2351
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2357
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2363
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 417:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2371
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2376
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2384
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2388
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2394
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2398
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2403
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2409
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2422
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2426
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2458
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2466
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2476
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2488
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2496
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2500
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2516
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2520
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2526
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2530
		{
			yyVAL.str = "extended "
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2536
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2540
		{
			yyVAL.str = "full "
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2546
		{
			yyVAL.str = ""
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2560
		{
			yyVAL.showFilter = nil
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2564
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2574
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2578
		{
			yyVAL.str = SessionStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2582
		{
			yyVAL.str = GlobalStr
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2588
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2592
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2598
		{
			yyVAL.statement = &Begin{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2602
		{
			yyVAL.statement = &Begin{}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2608
		{
			yyVAL.statement = &Commit{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2614
		{
			yyVAL.statement = &Rollback{}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2620
		{
			yyVAL.statement = &OtherRead{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2624
		{
			yyVAL.statement = &OtherRead{}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2628
		{
			yyVAL.statement = &OtherRead{}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2632
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2636
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2641
		{
			setAllowComments(yylex, true)
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2645
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2651
		{
			yyVAL.bytes2 = nil
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2655
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2661
		{
			yyVAL.str = UnionStr
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2665
		{
			yyVAL.str = UnionAllStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2669
		{
			yyVAL.str = UnionDistinctStr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2674
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2678
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2682
		{
			yyVAL.str = SQLCacheStr
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2687
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2691
		{
			yyVAL.str = DistinctStr
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2696
		{
			yyVAL.str = ""
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2700
		{
			yyVAL.str = StraightJoinHint
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2705
		{
			yyVAL.selectExprs = nil
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2709
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2715
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2719
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2725
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2729
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2733
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2737
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2742
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2746
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2757
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2762
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2766
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2772
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2776
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2786
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2790
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2794
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2799
		{
			yyVAL.strs = []string{}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2803
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2809
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2813
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2819
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2831
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2835
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2839
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2845
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2849
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2855
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2864
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2870
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2874
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2887
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2891
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2895
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2899
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2905
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2907
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2911
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2913
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2917
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2919
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2922
		{
			yyVAL.empty = struct{}{}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2924
		{
			yyVAL.empty = struct{}{}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2927
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2931
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2935
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2942
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2948
		{
			yyVAL.str = JoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2952
		{
			yyVAL.str = JoinStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2956
		{
			yyVAL.str = JoinStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2962
		{
			yyVAL.str = StraightJoinStr
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2968
		{
			yyVAL.str = LeftJoinStr
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2972
		{
			yyVAL.str = LeftJoinStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2976
		{
			yyVAL.str = RightJoinStr
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2980
		{
			yyVAL.str = RightJoinStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2986
		{
			yyVAL.str = NaturalJoinStr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2990
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3000
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3004
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3010
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3014
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 557:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3019
		{
			yyVAL.indexHints = nil
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3023
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 559:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3027
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 560:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3031
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3036
		{
			yyVAL.expr = nil
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3040
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3045
		{
			yyVAL.columns = nil
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3049
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3055
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3059
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3063
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3067
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3071
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3075
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3079
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3085
		{
			yyVAL.str = ""
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3089
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3105
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3109
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3113
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3117
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3121
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3125
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3129
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3133
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 584:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3137
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3141
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3147
		{
			yyVAL.str = IsNullStr
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3151
		{
			yyVAL.str = IsNotNullStr
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3155
		{
			yyVAL.str = IsTrueStr
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3159
		{
			yyVAL.str = IsNotTrueStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3163
		{
			yyVAL.str = IsFalseStr
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3167
		{
			yyVAL.str = IsNotFalseStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3173
		{
			yyVAL.str = EqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3177
		{
			yyVAL.str = LessThanStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3181
		{
			yyVAL.str = GreaterThanStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3185
		{
			yyVAL.str = LessEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3189
		{
			yyVAL.str = GreaterEqualStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3193
		{
			yyVAL.str = NotEqualStr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3197
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3202
		{
			yyVAL.expr = nil
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3206
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3220
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3226
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3232
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3236
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3242
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3246
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3250
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3254
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3258
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3262
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3294
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3298
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3302
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3306
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3310
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3314
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3318
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3322
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3326
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3330
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3334
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3342
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3356
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3360
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3364
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3372
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3390
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3394
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3412
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 646:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3416
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 647:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3420
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3424
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 649:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3428
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 650:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3432
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 651:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3436
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 652:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 653:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 654:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 655:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3456
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 657:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3460
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3487
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3492
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3502
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 670:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 671:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3538
		{
			yyVAL.str = ""
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3542
		{
			yyVAL.str = BooleanModeStr
		}
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3546
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 676:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3550
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3554
		{
			yyVAL.str = QueryExpansionStr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3608
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3612
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3616
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3624
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3630
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3634
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3638
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3646
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3650
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3659
		{
			yyVAL.expr = nil
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3663
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3668
		{
			yyVAL.str = string("")
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3672
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3678
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3682
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3688
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3693
		{
			yyVAL.expr = nil
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3697
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3703
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3707
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 712:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3711
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 713:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3717
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3723
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3727
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3731
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3735
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3739
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3743
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3747
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3751
		{
			yyVAL.expr = &NullVal{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3757
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3766
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3770
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3775
		{
			yyVAL.exprs = nil
		}
	case 726:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3779
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3784
		{
			yyVAL.expr = nil
		}
	case 728:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3788
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3793
		{
			yyVAL.orderBy = nil
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3797
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3803
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3807
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3813
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3818
		{
			yyVAL.str = AscScr
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3822
		{
			yyVAL.str = AscScr
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3826
		{
			yyVAL.str = DescScr
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3831
		{
			yyVAL.limit = nil
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3835
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 739:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3839
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3843
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3848
		{
			yyVAL.str = ""
		}
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3852
		{
			yyVAL.str = ForUpdateStr
		}
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3856
		{
			yyVAL.str = ShareModeStr
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3869
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3873
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3877
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3882
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3886
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 749:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3890
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3897
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 751:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3901
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 752:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3905
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 753:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3909
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3914
		{
			yyVAL.updateExprs = nil
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3918
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3924
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3928
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3934
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3938
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3944
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3950
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3960
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3964
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3970
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3976
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3980
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3986
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3990
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3994
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 770:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3999
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4003
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 773:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4010
		{
			yyVAL.bytes = []byte("charset")
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4017
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4021
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4025
		{
			yyVAL.expr = &Default{}
		}
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4034
		{
			yyVAL.byt = 0
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4036
		{
			yyVAL.byt = 1
		}
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4039
		{
			yyVAL.empty = struct{}{}
		}
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4041
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4044
		{
			yyVAL.str = ""
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4046
		{
			yyVAL.str = IgnoreStr
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4050
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4052
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4054
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4056
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4058
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4060
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4064
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4066
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4068
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4071
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4073
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4075
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4079
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4081
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4085
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4096
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4102
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4106
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4113
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 809:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4119
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4123
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4127
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 812:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4133
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4137
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4141
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4423
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4432
		{
			decNesting(yylex)
		}
	case 1073:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4437
		{
			forceEOF(yylex)
		}
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4442
		{
			forceEOF(yylex)
		}
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4446
		{
			forceEOF(yylex)
		}
	case 1076:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4450
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
