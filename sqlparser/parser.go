// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const SMALLSERIAL = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const SERIAL = 57508
const BIGINT = 57509
const BIGSERIAL = 57510
const INTNUM = 57511
const REAL = 57512
const DOUBLE = 57513
const PRECISION = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const SMALLMONEY = 57518
const MONEY = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const DATETIMEOFFSET = 57524
const DATETIME2 = 57525
const SMALLDATETIME = 57526
const CHAR = 57527
const VARCHAR = 57528
const VARYING = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NTEXT = 57535
const UUID = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const CITEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const JSONB = 57547
const ENUM = 57548
const GEOMETRY = 57549
const POINT = 57550
const LINESTRING = 57551
const POLYGON = 57552
const GEOMETRYCOLLECTION = 57553
const MULTIPOINT = 57554
const MULTILINESTRING = 57555
const MULTIPOLYGON = 57556
const ARRAY = 57557
const NOW = 57558
const BPCHAR = 57559
const NULLX = 57560
const AUTO_INCREMENT = 57561
const APPROXNUM = 57562
const SIGNED = 57563
const UNSIGNED = 57564
const ZEROFILL = 57565
const ZONE = 57566
const AUTOINCREMENT = 57567
const DATABASES = 57568
const TABLES = 57569
const VITESS_KEYSPACES = 57570
const VITESS_SHARDS = 57571
const VITESS_TABLETS = 57572
const VSCHEMA_TABLES = 57573
const EXTENDED = 57574
const FULL = 57575
const PROCESSLIST = 57576
const NAMES = 57577
const CHARSET = 57578
const GLOBAL = 57579
const SESSION = 57580
const ISOLATION = 57581
const LEVEL = 57582
const READ = 57583
const WRITE = 57584
const ONLY = 57585
const REPEATABLE = 57586
const COMMITTED = 57587
const UNCOMMITTED = 57588
const SERIALIZABLE = 57589
const CURRENT_TIMESTAMP = 57590
const DATABASE = 57591
const CURRENT_DATE = 57592
const CURRENT_TIME = 57593
const LOCALTIME = 57594
const LOCALTIMESTAMP = 57595
const UTC_DATE = 57596
const UTC_TIME = 57597
const UTC_TIMESTAMP = 57598
const REPLACE = 57599
const CONVERT = 57600
const CAST = 57601
const SUBSTR = 57602
const SUBSTRING = 57603
const GROUP_CONCAT = 57604
const SEPARATOR = 57605
const INHERIT = 57606
const MATCH = 57607
const AGAINST = 57608
const BOOLEAN = 57609
const LANGUAGE = 57610
const WITH = 57611
const WITHOUT = 57612
const PARSER = 57613
const QUERY = 57614
const EXPANSION = 57615
const UNUSED = 57616
const GENERATED = 57617
const ALWAYS = 57618
const IDENTITY = 57619
const SEQUENCE = 57620
const INCREMENT = 57621
const MINVALUE = 57622
const CACHE = 57623
const CYCLE = 57624
const OWNED = 57625
const NONE = 57626
const CLUSTERED = 57627
const NONCLUSTERED = 57628
const INCLUDE = 57629
const TYPECAST = 57630
const CHECK = 57631

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 92,
	-2, 82,
	-1, 36,
	153, 397,
	154, 397,
	-2, 387,
	-1, 269,
	109, 730,
	-2, 726,
	-1, 270,
	109, 731,
	-2, 727,
	-1, 340,
	80, 918,
	-2, 58,
	-1, 341,
	80, 870,
	-2, 59,
	-1, 346,
	80, 850,
	-2, 697,
	-1, 348,
	80, 893,
	-2, 699,
	-1, 644,
	51, 41,
	53, 41,
	-2, 43,
	-1, 785,
	109, 733,
	-2, 729,
	-1, 1022,
	5, 28,
	-2, 532,
	-1, 1047,
	5, 27,
	-2, 671,
	-1, 1142,
	5, 27,
	-2, 64,
	-1, 1350,
	5, 28,
	-2, 672,
	-1, 1427,
	5, 27,
	-2, 674,
	-1, 1540,
	5, 28,
	-2, 675,
}

const yyPrivate = 57344

const yyLast = 14250

var yyAct = [...]int{
	270, 1496, 1437, 1475, 1050, 1530, 267, 1356, 1440, 962,
	721, 1227, 849, 1254, 1369, 274, 571, 1133, 457, 570,
	3, 761, 1082, 299, 1255, 886, 1228, 867, 1144, 638,
	1224, 1547, 957, 636, 490, 88, 891, 897, 88, 1107,
	1066, 911, 890, 850, 248, 821, 818, 1014, 276, 66,
	952, 1200, 53, 1130, 345, 242, 810, 332, 273, 654,
	837, 787, 88, 88, 350, 503, 509, 247, 906, 350,
	1055, 339, 350, 455, 820, 653, 846, 88, 625, 88,
	594, 640, 327, 515, 272, 88, 1114, 326, 996, 257,
	523, 924, 85, 52, 1606, 325, 1276, 1266, 342, 243,
	244, 245, 246, 599, 600, 261, 927, 1570, 458, 459,
	330, 1381, 538, 539, 540, 541, 542, 543, 544, 537,
	335, 1599, 547, 547, 336, 537, 488, 1101, 547, 334,
	1640, 1585, 1636, 1560, 469, 1538, 470, 1500, 1501, 940,
	1134, 1135, 477, 540, 541, 542, 543, 544, 537, 1627,
	531, 547, 534, 1592, 963, 1574, 1584, 930, 549, 550,
	551, 552, 553, 554, 555, 1537, 532, 533, 530, 536,
	535, 545, 546, 538, 539, 540, 541, 542, 543, 544,
	537, 1219, 926, 547, 1518, 1344, 467, 1250, 1251, 1111,
	74, 1113, 1112, 585, 83, 79, 80, 81, 881, 882,
	1489, 536, 535, 545, 546, 538, 539, 540, 541, 542,
	543, 544, 537, 1074, 1249, 547, 1073, 880, 57, 1075,
	655, 88, 656, 1564, 752, 350, 350, 350, 350, 498,
	350, 753, 1395, 1394, 1116, 929, 1566, 350, 70, 72,
	941, 1416, 931, 59, 60, 61, 62, 63, 1466, 841,
	1295, 1561, 1294, 71, 73, 1333, 953, 1331, 695, 241,
	1305, 1306, 1372, 483, 350, 458, 459, 1384, 1625, 1340,
	502, 68, 1455, 512, 1598, 1531, 1600, 1383, 479, 1462,
	494, 495, 1635, 1386, 562, 563, 564, 565, 566, 567,
	568, 545, 546, 538, 539, 540, 541, 542, 543, 544,
	537, 1178, 847, 547, 511, 1385, 1532, 536, 535, 545,
	546, 538, 539, 540, 541, 542, 543, 544, 537, 1089,
	558, 547, 548, 548, 1424, 88, 1308, 485, 548, 487,
	907, 1376, 88, 88, 88, 680, 1375, 1095, 350, 1480,
	1094, 1309, 82, 1260, 350, 908, 1084, 1614, 1317, 1261,
	472, 548, 491, 492, 493, 463, 496, 484, 486, 76,
	77, 77, 1403, 500, 731, 460, 1065, 1064, 696, 1268,
	1063, 719, 342, 1501, 468, 1562, 1563, 1565, 1567, 1568,
	330, 1591, 620, 548, 907, 220, 69, 78, 1370, 1371,
	1373, 644, 941, 954, 934, 1179, 1490, 560, 561, 908,
	1087, 1175, 1536, 1631, 1100, 602, 603, 604, 605, 606,
	607, 608, 609, 610, 611, 548, 712, 713, 1494, 714,
	715, 716, 718, 717, 697, 698, 699, 703, 701, 700,
	702, 674, 676, 298, 612, 675, 681, 677, 678, 679,
	693, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 694, 704, 705, 706, 707, 708, 709, 710,
	711, 88, 651, 645, 1353, 907, 1187, 88, 1030, 88,
	350, 1008, 88, 513, 482, 88, 759, 527, 478, 88,
	908, 350, 350, 350, 350, 350, 350, 350, 350, 888,
	887, 756, 991, 868, 870, 350, 350, 344, 522, 1176,
	88, 1174, 461, 548, 1289, 465, 587, 588, 589, 590,
	591, 592, 593, 613, 1177, 350, 1183, 1512, 720, 88,
	1511, 548, 520, 1510, 727, 350, 728, 1509, 1508, 732,
	1507, 1221, 735, 740, 1506, 1504, 786, 1302, 522, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 788, 1290, 764, 754, 1053, 657,
	672, 668, 784, 838, 1103, 1104, 1105, 738, 869, 350,
	794, 992, 1108, 1106, 296, 297, 773, 724, 838, 789,
	1037, 462, 785, 1548, 792, 793, 791, 521, 520, 1454,
	1091, 1027, 1182, 825, 830, 833, 730, 263, 517, 1593,
	839, 502, 1549, 766, 522, 75, 1617, 741, 742, 743,
	744, 745, 746, 747, 748, 781, 783, 521, 520, 1616,
	88, 749, 750, 88, 88, 88, 88, 88, 1597, 813,
	777, 779, 780, 50, 522, 88, 778, 851, 88, 521,
	520, 1594, 88, 790, 1596, 815, 816, 88, 88, 826,
	827, 350, 464, 1595, 466, 834, 522, 825, 344, 344,
	344, 344, 843, 344, 350, 835, 324, 1550, 762, 763,
	344, 330, 330, 330, 330, 330, 1546, 848, 1389, 1465,
	875, 1026, 1117, 1025, 471, 342, 330, 521, 520, 842,
	1397, 844, 845, 1396, 1223, 330, 1274, 525, 892, 1388,
	521, 520, 1502, 1117, 522, 876, 853, 854, 1139, 856,
	852, 456, 864, 855, 521, 520, 811, 522, 812, 1505,
	350, 873, 877, 872, 350, 1137, 350, 88, 878, 1117,
	88, 522, 88, 1423, 1392, 88, 350, 1319, 895, 1131,
	1110, 1005, 1006, 1007, 1097, 1525, 1644, 1431, 1633, 959,
	535, 545, 546, 538, 539, 540, 541, 542, 543, 544,
	537, 21, 1264, 547, 955, 956, 474, 475, 476, 1366,
	1626, 344, 1111, 1263, 1113, 1112, 907, 659, 1366, 1605,
	502, 902, 1195, 901, 969, 903, 904, 986, 1262, 987,
	905, 908, 988, 1090, 784, 1366, 1604, 1366, 1590, 1011,
	1012, 1013, 536, 535, 545, 546, 538, 539, 540, 541,
	542, 543, 544, 537, 785, 788, 547, 252, 1441, 1525,
	1589, 1588, 1587, 942, 943, 944, 945, 997, 1441, 1076,
	998, 1443, 932, 933, 935, 936, 937, 965, 938, 939,
	789, 1443, 1580, 502, 1366, 1577, 1004, 506, 510, 814,
	966, 737, 968, 1010, 736, 948, 949, 950, 725, 951,
	1431, 1528, 989, 723, 528, 480, 1047, 1366, 1521, 1431,
	1463, 1520, 350, 1431, 502, 88, 1431, 1432, 1068, 473,
	1070, 501, 1471, 289, 288, 291, 292, 293, 294, 1366,
	1365, 350, 290, 295, 1019, 1246, 502, 1036, 572, 1442,
	1352, 502, 350, 344, 1298, 1297, 1470, 583, 1069, 1442,
	1034, 1292, 1293, 350, 344, 344, 344, 344, 344, 344,
	344, 344, 88, 330, 456, 892, 1060, 1078, 344, 344,
	1282, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 648, 1071,
	1190, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 768, 1292,
	1291, 758, 1020, 502, 622, 502, 823, 502, 525, 664,
	663, 344, 23, 548, 350, 23, 1124, 1136, 1126, 1127,
	1128, 1129, 1085, 1086, 1088, 1526, 1225, 1525, 649, 1051,
	647, 1142, 1020, 1109, 1052, 1045, 757, 1032, 1046, 350,
	54, 1426, 88, 88, 1051, 874, 1052, 647, 1145, 1029,
	88, 1132, 817, 521, 520, 1138, 621, 823, 50, 350,
	1348, 50, 831, 831, 23, 622, 548, 1382, 831, 1301,
	522, 1149, 1196, 1197, 1296, 622, 1148, 1077, 1020, 1031,
	622, 1399, 1398, 722, 879, 1214, 1215, 1051, 1217, 1218,
	254, 1028, 1020, 1192, 650, 760, 50, 1637, 1603, 350,
	350, 1582, 1523, 1439, 1522, 831, 1193, 1188, 1226, 1194,
	50, 851, 1516, 1499, 1515, 1216, 1199, 851, 1231, 1477,
	1229, 1464, 1118, 1119, 1248, 1121, 1122, 1123, 350, 1213,
	350, 350, 1410, 1212, 344, 785, 50, 1220, 931, 958,
	1234, 1281, 1120, 1201, 1279, 1236, 1271, 344, 627, 630,
	631, 632, 628, 1235, 629, 633, 1240, 1140, 1141, 1265,
	1497, 953, 892, 1102, 892, 1180, 1253, 1080, 774, 775,
	1252, 1247, 1056, 1057, 1456, 947, 1203, 946, 65, 1453,
	1400, 1225, 1081, 1269, 1267, 1059, 734, 726, 499, 772,
	1062, 88, 350, 1061, 1283, 1284, 861, 1286, 1287, 1288,
	859, 862, 350, 960, 858, 860, 857, 344, 1611, 344,
	863, 350, 631, 632, 258, 259, 1583, 1186, 993, 344,
	516, 572, 1609, 88, 828, 829, 1003, 1002, 1205, 350,
	1125, 662, 1210, 514, 1204, 504, 481, 1273, 350, 1202,
	1346, 88, 1155, 344, 1321, 1208, 505, 1411, 1299, 762,
	763, 967, 1324, 733, 1272, 1147, 1310, 961, 1206, 1207,
	635, 255, 256, 516, 1304, 1312, 249, 1318, 1601, 1001,
	1483, 250, 1192, 1482, 1322, 1209, 1211, 1000, 54, 1315,
	1314, 1414, 1052, 1259, 1258, 1513, 518, 1514, 1329, 330,
	1491, 350, 1093, 350, 350, 350, 88, 350, 755, 56,
	1359, 1360, 1361, 350, 58, 885, 1150, 1347, 1307, 646,
	1285, 51, 1156, 1152, 1, 1519, 1157, 1154, 1153, 1278,
	1280, 73, 350, 1099, 1374, 1362, 1461, 67, 1573, 1380,
	1355, 1524, 1158, 1275, 1303, 1377, 1146, 892, 1151, 1078,
	1159, 964, 1364, 1405, 1143, 1406, 1407, 1408, 974, 1529,
	1543, 1438, 350, 350, 899, 1067, 889, 1404, 350, 454,
	64, 1390, 1503, 900, 898, 896, 665, 925, 350, 1115,
	928, 671, 669, 670, 344, 667, 673, 666, 228, 337,
	1401, 634, 658, 519, 1173, 1083, 1145, 892, 1172, 1402,
	970, 1181, 751, 990, 1417, 1418, 1092, 1419, 1420, 1421,
	497, 230, 556, 350, 350, 994, 995, 999, 510, 1326,
	1327, 1072, 1328, 343, 1569, 1232, 1330, 350, 1332, 508,
	1481, 1427, 1229, 1413, 1035, 1425, 350, 627, 630, 631,
	632, 628, 582, 629, 633, 836, 275, 1056, 1057, 1452,
	1436, 1451, 776, 287, 765, 1459, 284, 344, 1457, 350,
	350, 88, 1467, 286, 350, 285, 767, 1044, 529, 265,
	329, 350, 1472, 618, 1367, 1368, 626, 1468, 1478, 1469,
	624, 1021, 344, 623, 1058, 1054, 328, 1189, 1343, 1488,
	771, 1391, 350, 1393, 25, 55, 1038, 260, 1492, 19,
	18, 17, 344, 20, 16, 15, 14, 1498, 1493, 29,
	1229, 13, 822, 824, 12, 11, 10, 9, 1474, 8,
	7, 6, 5, 4, 344, 251, 22, 1415, 840, 2,
	0, 0, 0, 0, 0, 0, 0, 0, 350, 831,
	0, 0, 1233, 1067, 0, 831, 0, 0, 0, 0,
	0, 1527, 0, 0, 0, 350, 0, 0, 350, 0,
	1534, 0, 350, 0, 1539, 0, 0, 851, 0, 1544,
	0, 344, 0, 344, 1256, 0, 350, 350, 866, 1558,
	0, 1337, 502, 350, 350, 0, 350, 0, 1556, 1557,
	1559, 0, 350, 0, 0, 0, 1571, 1572, 0, 1578,
	1551, 1552, 1553, 1554, 1555, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 536,
	535, 545, 546, 538, 539, 540, 541, 542, 543, 544,
	537, 300, 47, 547, 1602, 1300, 0, 0, 0, 0,
	0, 0, 0, 350, 0, 1311, 1608, 350, 1607, 0,
	0, 0, 0, 1615, 1313, 0, 1610, 1613, 0, 0,
	0, 0, 88, 0, 350, 1620, 0, 0, 1623, 1622,
	0, 1621, 1316, 0, 0, 88, 0, 1630, 0, 47,
	0, 344, 1632, 0, 0, 1634, 0, 253, 0, 0,
	0, 0, 350, 331, 0, 1222, 0, 0, 350, 0,
	0, 1641, 0, 924, 0, 0, 1642, 0, 0, 0,
	1237, 1238, 0, 0, 1239, 0, 0, 1241, 0, 0,
	0, 0, 0, 0, 0, 913, 1638, 0, 0, 0,
	0, 0, 1629, 0, 1357, 0, 1357, 1357, 1357, 920,
	1363, 909, 0, 0, 0, 0, 344, 910, 0, 0,
	0, 0, 0, 507, 1270, 0, 1017, 0, 0, 0,
	1018, 0, 0, 0, 0, 1357, 0, 1022, 1023, 1024,
	0, 0, 0, 0, 0, 0, 1033, 0, 0, 0,
	502, 1039, 0, 0, 1040, 1041, 1042, 1043, 86, 0,
	0, 240, 0, 0, 0, 344, 344, 0, 0, 0,
	916, 1409, 912, 921, 0, 0, 0, 0, 0, 918,
	917, 1412, 0, 264, 0, 86, 86, 536, 535, 545,
	546, 538, 539, 540, 541, 542, 543, 544, 537, 0,
	86, 547, 86, 548, 0, 0, 0, 0, 86, 0,
	0, 1320, 0, 0, 0, 0, 1429, 1430, 0, 0,
	0, 0, 0, 0, 0, 0, 489, 489, 489, 489,
	1256, 489, 0, 0, 0, 0, 0, 0, 489, 1458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1345, 0, 0, 0, 47, 0, 0, 572, 0,
	0, 0, 1256, 1473, 0, 0, 0, 1476, 0, 0,
	557, 0, 0, 559, 1357, 0, 0, 0, 0, 0,
	0, 914, 0, 0, 0, 0, 0, 915, 0, 0,
	0, 0, 0, 0, 0, 1495, 0, 595, 0, 0,
	569, 0, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 0, 584, 586, 586, 586, 586, 586, 586, 586,
	586, 0, 614, 615, 616, 617, 0, 0, 0, 0,
	597, 1198, 0, 637, 0, 1341, 0, 922, 0, 923,
	0, 1256, 0, 0, 86, 0, 0, 0, 0, 0,
	1338, 919, 0, 0, 0, 831, 0, 0, 1541, 0,
	0, 1542, 0, 0, 0, 1545, 0, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 0, 1245, 1476,
	1256, 0, 0, 0, 0, 0, 1256, 1256, 598, 1575,
	0, 0, 0, 0, 0, 1581, 612, 596, 0, 0,
	0, 548, 0, 601, 0, 0, 1460, 536, 535, 545,
	546, 538, 539, 540, 541, 542, 543, 544, 537, 0,
	0, 547, 536, 535, 545, 546, 538, 539, 540, 541,
	542, 543, 544, 537, 0, 0, 547, 0, 0, 0,
	0, 0, 0, 1165, 0, 0, 1256, 0, 86, 0,
	1612, 0, 0, 0, 0, 86, 642, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1357, 0, 0,
	0, 489, 0, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 489, 489, 489, 489, 489, 489, 489, 489,
	0, 0, 0, 0, 0, 344, 489, 489, 0, 0,
	0, 1476, 0, 0, 0, 1323, 0, 0, 1166, 0,
	1533, 572, 1325, 1168, 1161, 1162, 0, 1169, 1164, 1163,
	0, 0, 1171, 1167, 1334, 1335, 1336, 0, 0, 1339,
	0, 0, 0, 1170, 0, 0, 0, 0, 0, 1160,
	0, 0, 1349, 1350, 1351, 0, 1354, 0, 0, 0,
	0, 0, 0, 0, 1576, 0, 0, 0, 0, 0,
	0, 47, 536, 535, 545, 546, 538, 539, 540, 541,
	542, 543, 544, 537, 0, 573, 547, 0, 0, 0,
	0, 0, 1379, 0, 86, 0, 0, 0, 0, 1387,
	86, 0, 86, 0, 0, 86, 0, 0, 86, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 548, 0, 86, 331, 331, 331, 331, 331, 0,
	0, 0, 0, 0, 1624, 0, 548, 0, 0, 637,
	0, 871, 86, 0, 0, 0, 0, 0, 331, 0,
	0, 739, 0, 0, 1016, 1422, 536, 535, 545, 546,
	538, 539, 540, 541, 542, 543, 544, 537, 0, 0,
	547, 1433, 1434, 1435, 536, 535, 545, 546, 538, 539,
	540, 541, 542, 543, 544, 537, 0, 0, 547, 0,
	0, 0, 0, 264, 0, 0, 0, 0, 264, 264,
	0, 0, 832, 832, 264, 0, 0, 0, 832, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 489, 979, 489, 0, 1484,
	1485, 1486, 1487, 226, 0, 0, 0, 489, 264, 264,
	264, 264, 0, 86, 0, 832, 86, 86, 86, 86,
	86, 0, 0, 984, 0, 0, 0, 236, 865, 0,
	0, 86, 978, 0, 0, 642, 0, 0, 0, 0,
	86, 86, 1517, 0, 0, 0, 548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1535, 0, 0, 0, 0, 1540, 0, 0, 221, 0,
	0, 975, 972, 973, 223, 971, 0, 0, 0, 0,
	0, 229, 225, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1579, 0, 982, 985, 0, 0, 0, 1048, 1049,
	86, 227, 0, 86, 231, 86, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 23, 24, 48, 26, 27, 331, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 548, 0,
	42, 0, 0, 0, 28, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 977, 0, 0, 0, 222, 0,
	0, 0, 0, 37, 0, 0, 0, 50, 0, 0,
	0, 1096, 0, 0, 1628, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 224, 0, 232, 233, 234,
	235, 239, 0, 0, 1645, 1646, 238, 237, 0, 264,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 981, 0, 0, 0, 30, 31, 33,
	32, 35, 0, 0, 0, 0, 0, 0, 0, 983,
	489, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 36, 43, 44, 0, 0, 45, 46, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 39, 0, 40,
	41, 0, 0, 0, 0, 1098, 0, 0, 1230, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1242, 1243, 1244, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1277, 0, 0, 1184, 1185, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 264, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	1378, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 128, 0, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1230, 0, 0, 1428, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 642,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 536, 535, 545, 546, 538, 539, 540,
	541, 542, 543, 544, 537, 0, 0, 547, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 1230, 107,
	47, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 86, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 1586, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 103, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1639, 0, 442,
	432, 0, 402, 444, 376, 391, 452, 393, 394, 424,
	360, 410, 152, 388, 91, 379, 354, 385, 355, 377,
	404, 115, 375, 434, 413, 128, 450, 131, 418, 0,
	173, 140, 0, 0, 406, 436, 408, 430, 401, 425,
	367, 417, 445, 389, 421, 446, 0, 0, 0, 349,
	0, 893, 894, 0, 0, 0, 0, 0, 104, 0,
	420, 441, 387, 453, 423, 353, 419, 0, 358, 361,
	451, 439, 382, 383, 1079, 0, 0, 0, 0, 0,
	0, 405, 409, 427, 398, 1619, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 416, 0, 0, 86, 364,
	359, 0, 403, 0, 0, 0, 366, 0, 381, 428,
	0, 351, 431, 437, 400, 200, 440, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 426, 443, 407,
	435, 378, 386, 109, 384, 166, 153, 191, 415, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 438, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 422, 167, 106, 192, 172, 370,
	373, 368, 369, 411, 412, 447, 448, 449, 429, 365,
	0, 371, 372, 0, 433, 123, 414, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 399, 0,
	103, 442, 432, 0, 402, 444, 376, 391, 452, 393,
	394, 424, 360, 410, 152, 388, 91, 379, 354, 385,
	355, 377, 404, 115, 375, 434, 413, 128, 450, 131,
	418, 0, 173, 140, 0, 0, 406, 436, 408, 430,
	401, 425, 367, 417, 445, 389, 421, 446, 0, 0,
	0, 349, 0, 893, 894, 0, 0, 0, 0, 0,
	104, 0, 420, 441, 387, 453, 423, 353, 419, 0,
	358, 361, 451, 439, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 427, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 0, 416, 0, 0,
	0, 364, 359, 0, 403, 0, 0, 0, 366, 0,
	381, 428, 0, 351, 431, 437, 400, 200, 440, 397,
	396, 159, 0, 107, 0, 179, 119, 390, 129, 426,
	443, 407, 435, 378, 386, 109, 384, 166, 153, 191,
	415, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 356, 0, 174, 193, 211, 212, 357, 374,
	438, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 422, 167, 106, 192,
	172, 370, 373, 368, 369, 411, 412, 447, 448, 449,
	429, 365, 0, 371, 372, 0, 433, 123, 414, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 392, 352,
	395, 0, 0, 0, 0, 0, 0, 0, 362, 363,
	399, 0, 103, 442, 432, 0, 402, 444, 376, 391,
	452, 393, 394, 424, 360, 410, 152, 388, 91, 379,
	354, 385, 355, 377, 404, 115, 375, 434, 413, 128,
	450, 131, 418, 0, 173, 140, 0, 0, 406, 436,
	408, 430, 401, 425, 367, 417, 445, 389, 421, 446,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 420, 441, 387, 453, 423, 353,
	419, 0, 358, 361, 451, 439, 382, 383, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 427, 398, 0,
	0, 0, 0, 0, 0, 1191, 0, 380, 0, 416,
	0, 0, 0, 364, 359, 0, 403, 0, 0, 0,
	366, 0, 381, 428, 0, 351, 431, 437, 400, 200,
	440, 397, 396, 159, 0, 107, 0, 179, 119, 390,
	129, 426, 443, 407, 435, 378, 386, 109, 384, 166,
	153, 191, 415, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 356, 0, 174, 193, 211, 212,
	357, 374, 438, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 422, 167,
	106, 192, 172, 370, 373, 368, 369, 411, 412, 447,
	448, 449, 429, 365, 0, 371, 372, 0, 433, 123,
	414, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	392, 352, 395, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 399, 0, 103, 442, 432, 0, 402, 444,
	376, 391, 452, 393, 394, 424, 360, 410, 152, 388,
	91, 379, 354, 385, 355, 377, 404, 115, 375, 434,
	413, 128, 450, 131, 418, 0, 173, 140, 0, 0,
	406, 436, 408, 430, 401, 425, 367, 417, 445, 389,
	421, 446, 50, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 420, 441, 387, 453,
	423, 353, 419, 0, 358, 361, 451, 439, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 427,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	0, 416, 0, 0, 0, 364, 359, 0, 403, 0,
	0, 0, 366, 0, 381, 428, 0, 351, 431, 437,
	400, 200, 440, 397, 396, 159, 0, 107, 0, 179,
	119, 390, 129, 426, 443, 407, 435, 378, 386, 109,
	384, 166, 153, 191, 415, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 356, 0, 174, 193,
	211, 212, 357, 374, 438, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	422, 167, 106, 192, 172, 370, 373, 368, 369, 411,
	412, 447, 448, 449, 429, 365, 0, 371, 372, 0,
	433, 123, 414, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 392, 352, 395, 0, 0, 0, 0, 0,
	0, 0, 362, 363, 399, 0, 103, 442, 432, 0,
	402, 444, 376, 391, 452, 393, 394, 424, 360, 410,
	152, 388, 91, 379, 354, 385, 355, 377, 404, 115,
	375, 434, 413, 128, 450, 131, 418, 0, 173, 140,
	0, 0, 406, 436, 408, 430, 401, 425, 367, 417,
	445, 389, 421, 446, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 420, 441,
	387, 453, 423, 353, 419, 0, 358, 361, 451, 439,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 427, 398, 0, 0, 0, 0, 0, 0, 782,
	0, 380, 0, 416, 0, 0, 0, 364, 359, 0,
	403, 0, 0, 0, 366, 0, 381, 428, 0, 351,
	431, 437, 400, 200, 440, 397, 396, 159, 0, 107,
	0, 179, 119, 390, 129, 426, 443, 407, 435, 378,
	386, 109, 384, 166, 153, 191, 415, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 356, 0,
	174, 193, 211, 212, 357, 374, 438, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 422, 167, 106, 192, 172, 370, 373, 368,
	369, 411, 412, 447, 448, 449, 429, 365, 0, 371,
	372, 0, 433, 123, 414, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 392, 352, 395, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 399, 0, 103, 442,
	432, 0, 402, 444, 376, 391, 452, 393, 394, 424,
	360, 410, 152, 388, 91, 379, 354, 385, 355, 377,
	404, 115, 375, 434, 413, 128, 450, 131, 418, 0,
	173, 140, 0, 0, 406, 436, 408, 430, 401, 425,
	367, 417, 445, 389, 421, 446, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	420, 441, 387, 453, 423, 353, 419, 0, 358, 361,
	451, 439, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 427, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 416, 0, 0, 0, 364,
	359, 0, 403, 0, 0, 0, 366, 0, 381, 428,
	0, 351, 431, 437, 400, 200, 440, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 426, 443, 407,
	435, 378, 386, 109, 384, 166, 153, 191, 415, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 438, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 422, 167, 106, 192, 172, 370,
	373, 368, 369, 411, 412, 447, 448, 449, 429, 365,
	0, 371, 372, 0, 433, 123, 414, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 399, 0,
	103, 442, 432, 0, 402, 444, 376, 391, 452, 393,
	394, 424, 360, 410, 152, 388, 91, 379, 354, 385,
	355, 377, 404, 115, 375, 434, 413, 128, 450, 131,
	418, 0, 173, 140, 0, 0, 406, 436, 408, 430,
	401, 425, 367, 417, 445, 389, 421, 446, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 420, 441, 387, 453, 423, 353, 419, 0,
	358, 361, 451, 439, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 427, 398, 0, 0, 0,
	0, 0, 0, 0, 0, 380, 0, 416, 0, 0,
	0, 364, 359, 0, 403, 0, 0, 0, 366, 0,
	381, 428, 0, 351, 431, 437, 400, 200, 440, 397,
	396, 159, 0, 107, 0, 179, 119, 390, 129, 426,
	443, 407, 435, 378, 386, 109, 384, 166, 153, 191,
	415, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 356, 0, 174, 193, 211, 212, 357, 374,
	438, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 422, 167, 106, 192,
	172, 370, 373, 368, 369, 411, 412, 447, 448, 449,
	429, 365, 0, 371, 372, 0, 433, 123, 414, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 392, 352,
	395, 0, 0, 0, 0, 0, 0, 0, 362, 363,
	399, 0, 103, 442, 432, 0, 402, 444, 376, 391,
	452, 393, 394, 424, 360, 410, 152, 388, 91, 379,
	354, 385, 355, 377, 404, 115, 375, 434, 413, 128,
	450, 131, 418, 0, 173, 140, 0, 0, 406, 436,
	408, 430, 401, 425, 367, 417, 445, 389, 421, 446,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 420, 441, 387, 453, 423, 353,
	419, 0, 358, 361, 451, 439, 382, 383, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 427, 398, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 0, 416,
	0, 0, 0, 364, 359, 0, 403, 0, 0, 0,
	366, 0, 381, 428, 0, 351, 431, 437, 400, 200,
	440, 397, 396, 159, 0, 107, 0, 179, 119, 390,
	129, 426, 443, 407, 435, 378, 386, 109, 384, 166,
	153, 191, 415, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 347, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 356, 0, 174, 193, 211, 212,
	357, 374, 438, 203, 204, 205, 206, 0, 0, 0,
	348, 346, 122, 170, 126, 133, 162, 209, 422, 167,
	106, 192, 172, 370, 373, 368, 369, 411, 412, 447,
	448, 449, 429, 365, 0, 371, 372, 0, 433, 123,
	414, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	392, 352, 395, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 399, 0, 103, 442, 432, 0, 402, 444,
	376, 391, 452, 393, 394, 424, 360, 410, 152, 388,
	91, 379, 354, 385, 355, 377, 404, 115, 375, 434,
	413, 128, 450, 131, 418, 0, 173, 140, 0, 0,
	406, 436, 408, 430, 401, 425, 367, 417, 445, 389,
	421, 446, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 420, 441, 387, 453,
	423, 353, 419, 0, 358, 361, 451, 439, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 427,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	0, 416, 0, 0, 0, 364, 359, 0, 403, 0,
	0, 0, 366, 0, 381, 428, 0, 351, 431, 437,
	400, 200, 440, 397, 396, 159, 0, 107, 0, 179,
	119, 390, 129, 426, 443, 407, 435, 378, 386, 109,
	384, 166, 153, 191, 415, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 356, 0, 174, 193,
	211, 212, 357, 374, 438, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	422, 167, 106, 192, 172, 370, 373, 368, 369, 411,
	412, 447, 448, 449, 429, 365, 0, 371, 372, 0,
	433, 123, 414, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 392, 352, 395, 0, 0, 0, 0, 0,
	0, 0, 362, 363, 399, 0, 103, 442, 432, 0,
	402, 444, 376, 391, 452, 393, 394, 424, 360, 410,
	152, 388, 91, 379, 354, 385, 355, 377, 404, 115,
	375, 434, 413, 128, 450, 131, 418, 0, 173, 140,
	0, 0, 406, 436, 408, 430, 401, 425, 367, 417,
	445, 389, 421, 446, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 420, 441,
	387, 453, 423, 353, 419, 0, 358, 361, 451, 439,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 427, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 0, 416, 0, 0, 0, 364, 359, 0,
	403, 0, 0, 0, 366, 0, 381, 428, 0, 351,
	431, 437, 400, 200, 440, 397, 396, 159, 0, 107,
	0, 179, 119, 390, 129, 426, 443, 407, 435, 378,
	386, 109, 384, 166, 153, 191, 415, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 652, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 347, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 356, 0,
	174, 193, 211, 212, 357, 374, 438, 203, 204, 205,
	206, 0, 0, 0, 348, 346, 122, 170, 126, 133,
	162, 209, 422, 167, 106, 192, 172, 370, 373, 368,
	369, 411, 412, 447, 448, 449, 429, 365, 0, 371,
	372, 0, 433, 123, 414, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 392, 352, 395, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 399, 0, 103, 442,
	432, 0, 402, 444, 376, 391, 452, 393, 394, 424,
	360, 410, 152, 388, 91, 379, 354, 385, 355, 377,
	404, 115, 375, 434, 413, 128, 450, 131, 418, 0,
	173, 140, 0, 0, 406, 436, 408, 430, 401, 425,
	367, 417, 445, 389, 421, 446, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	420, 441, 387, 453, 423, 353, 419, 0, 358, 361,
	451, 439, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 427, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 416, 0, 0, 0, 364,
	359, 0, 403, 0, 0, 0, 366, 0, 381, 428,
	0, 351, 431, 437, 400, 200, 440, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 426, 443, 407,
	435, 378, 386, 109, 384, 166, 153, 191, 415, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 338, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	347, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 438, 203,
	204, 205, 206, 0, 0, 0, 348, 346, 341, 340,
	126, 133, 162, 209, 422, 167, 106, 192, 172, 370,
	373, 368, 369, 411, 412, 447, 448, 449, 429, 365,
	0, 371, 372, 0, 433, 123, 414, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 399, 152,
	103, 91, 0, 0, 271, 0, 0, 0, 115, 268,
	0, 0, 128, 310, 131, 0, 0, 173, 140, 0,
	0, 0, 0, 301, 302, 0, 0, 0, 0, 0,
	0, 883, 0, 50, 0, 0, 269, 289, 288, 291,
	292, 293, 294, 0, 0, 104, 290, 295, 296, 297,
	884, 0, 0, 266, 282, 0, 309, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 322, 0, 281, 0, 0, 277, 278, 283,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 200, 0, 0, 320, 159, 0, 107, 0,
	179, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 191, 0, 154, 164, 132, 183,
	160, 190, 201, 202, 181, 199, 168, 99, 147, 89,
	158, 165, 0, 108, 0, 213, 214, 215, 216, 217,
	218, 219, 92, 180, 189, 105, 169, 95, 187, 176,
	178, 138, 124, 125, 171, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 177, 141, 184, 185, 110, 210,
	112, 111, 175, 100, 197, 198, 97, 101, 196, 146,
	151, 149, 195, 182, 188, 139, 136, 0, 96, 186,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 174,
	193, 211, 212, 0, 0, 0, 203, 204, 205, 206,
	0, 0, 0, 145, 102, 122, 170, 126, 133, 162,
	209, 0, 167, 106, 192, 172, 311, 321, 317, 318,
	315, 316, 314, 313, 312, 323, 303, 304, 305, 306,
	308, 0, 123, 307, 90, 98, 130, 207, 208, 0,
	161, 117, 194, 0, 0, 152, 0, 91, 819, 0,
	271, 0, 0, 0, 115, 268, 319, 103, 128, 310,
	131, 0, 0, 173, 140, 0, 0, 0, 0, 301,
	302, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 269, 289, 288, 291, 292, 293, 294, 0,
	0, 104, 290, 295, 296, 297, 0, 0, 0, 266,
	282, 0, 309, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 280, 262, 0, 0, 0, 322, 0,
	281, 0, 0, 277, 278, 283, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 320, 159, 0, 107, 0, 179, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	191, 0, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 174, 193, 211, 212, 0,
	0, 0, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 0, 167, 106,
	192, 172, 311, 321, 317, 318, 315, 316, 314, 313,
	312, 323, 303, 304, 305, 306, 308, 0, 123, 307,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 0,
	0, 152, 0, 91, 0, 0, 271, 0, 0, 0,
	115, 268, 319, 103, 128, 310, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 502, 269, 289,
	288, 291, 292, 293, 294, 0, 0, 104, 290, 295,
	296, 297, 0, 0, 0, 266, 282, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 322, 0, 281, 0, 0, 277,
	278, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 320, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 311, 321,
	317, 318, 315, 316, 314, 313, 312, 323, 303, 304,
	305, 306, 308, 0, 123, 307, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 0, 0, 152, 0, 91,
	0, 0, 271, 0, 0, 0, 115, 268, 319, 103,
	128, 310, 131, 0, 0, 173, 140, 0, 0, 0,
	0, 301, 302, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 269, 289, 288, 291, 292, 293,
	294, 0, 0, 104, 290, 295, 296, 297, 0, 0,
	0, 266, 282, 0, 309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 280, 262, 0, 0, 0,
	322, 0, 281, 0, 0, 277, 278, 283, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 320, 159, 0, 107, 0, 179, 119,
	0, 129, 0, 0, 0, 0, 0, 0, 109, 0,
	166, 153, 191, 0, 154, 164, 132, 183, 160, 190,
	201, 202, 181, 199, 168, 99, 147, 89, 158, 165,
	0, 108, 0, 213, 214, 215, 216, 217, 218, 219,
	92, 180, 189, 105, 169, 95, 187, 176, 178, 138,
	124, 125, 171, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 177, 141, 184, 185, 110, 210, 112, 111,
	175, 100, 197, 198, 97, 101, 196, 146, 151, 149,
	195, 182, 188, 139, 136, 0, 96, 186, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 0, 0, 174, 193, 211,
	212, 0, 0, 0, 203, 204, 205, 206, 0, 0,
	0, 145, 102, 122, 170, 126, 133, 162, 209, 0,
	167, 106, 192, 172, 311, 321, 317, 318, 315, 316,
	314, 313, 312, 323, 303, 304, 305, 306, 308, 0,
	123, 307, 90, 98, 130, 207, 208, 0, 161, 117,
	194, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 103, 152, 0, 91, 0,
	0, 271, 0, 0, 0, 115, 268, 0, 0, 128,
	310, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	301, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 269, 289, 288, 291, 292, 293, 294,
	0, 0, 104, 290, 295, 296, 297, 0, 0, 0,
	266, 282, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 322,
	0, 281, 0, 0, 277, 278, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 320, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 311, 321, 317, 318, 315, 316, 314,
	313, 312, 323, 303, 304, 305, 306, 308, 0, 123,
	307, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	0, 0, 152, 0, 91, 0, 0, 271, 0, 0,
	0, 115, 268, 319, 103, 128, 310, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 301, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 269,
	289, 288, 291, 292, 293, 294, 0, 0, 104, 290,
	295, 296, 297, 0, 0, 0, 266, 282, 0, 309,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	280, 0, 0, 0, 0, 322, 0, 281, 0, 0,
	277, 278, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 320, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 311,
	321, 317, 318, 315, 316, 314, 313, 312, 323, 303,
	304, 305, 306, 308, 0, 123, 307, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 0, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 319,
	103, 128, 310, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 269, 289, 288, 291, 292,
	293, 294, 0, 0, 104, 290, 295, 296, 297, 0,
	0, 0, 0, 282, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 322, 0, 281, 0, 0, 277, 278, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 320, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 1643, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 311, 321, 317, 318, 315,
	316, 314, 313, 312, 323, 303, 304, 305, 306, 308,
	0, 123, 307, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 0, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 319, 103, 128, 310, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 301, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 269, 289, 288, 291, 292, 293, 294, 0, 0,
	104, 290, 295, 296, 297, 0, 0, 0, 0, 282,
	0, 309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 322, 0, 281,
	0, 0, 277, 278, 283, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	320, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 311, 321, 317, 318, 315, 316, 314, 313, 312,
	323, 303, 304, 305, 306, 308, 0, 123, 307, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 0, 0,
	152, 0, 91, 0, 524, 0, 0, 0, 0, 115,
	0, 319, 103, 128, 0, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 526,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 521, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 152, 0, 91, 0, 641, 0,
	0, 0, 0, 115, 0, 0, 0, 128, 103, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 643, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 123, 0, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 128, 103, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 152, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 128, 103, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 152, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 128,
	103, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 0, 769, 0, 0, 770,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	661, 0, 0, 128, 103, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 660,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 152, 0, 91, 0, 641, 0,
	0, 0, 0, 115, 0, 0, 0, 128, 103, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 643, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 639, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 0, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	0, 128, 103, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 1358, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 152, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 128, 103, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 0, 0, 152, 0,
	91, 0, 0, 0, 0, 1618, 0, 115, 0, 0,
	103, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 1257, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 152, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 0, 0, 128, 103, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 152, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 0, 0, 0, 128,
	103, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 643, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 0, 128, 103, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 526,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 152, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 0, 0, 128, 103, 131,
	0, 0, 173, 140, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 200, 0, 0,
	0, 159, 0, 107, 0, 179, 119, 0, 129, 0,
	0, 0, 0, 0, 0, 109, 0, 166, 153, 191,
	0, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 0, 0, 174, 193, 211, 212, 0, 0,
	0, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 729, 167, 106, 192,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 152, 0,
	91, 0, 0, 0, 0, 0, 619, 115, 0, 0,
	0, 128, 103, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 333, 161,
	117, 194, 0, 0, 0, 152, 0, 91, 0, 0,
	0, 0, 0, 0, 115, 0, 103, 0, 128, 0,
	131, 0, 0, 173, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 159, 0, 107, 0, 179, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	191, 0, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 174, 193, 211, 212, 0,
	0, 0, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 0, 167, 106,
	192, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 152,
	0, 91, 0, 0, 0, 0, 0, 0, 115, 0,
	0, 0, 128, 103, 131, 0, 0, 173, 140, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 200, 0, 0, 0, 159, 0, 107, 0,
	179, 119, 0, 129, 0, 0, 0, 0, 0, 0,
	109, 0, 166, 153, 191, 0, 154, 164, 132, 183,
	160, 190, 201, 202, 181, 199, 168, 99, 147, 89,
	158, 165, 0, 108, 0, 213, 214, 215, 216, 217,
	218, 219, 92, 180, 189, 105, 169, 95, 187, 176,
	178, 138, 124, 125, 171, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 177, 141, 184, 185, 110, 210,
	112, 111, 175, 100, 197, 198, 97, 101, 196, 146,
	151, 149, 195, 182, 188, 139, 136, 0, 96, 186,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 0, 0, 174,
	193, 211, 212, 0, 0, 0, 203, 204, 205, 206,
	0, 0, 0, 145, 102, 122, 170, 126, 133, 162,
	209, 0, 167, 106, 192, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 0, 90, 98, 130, 207, 208, 0,
	161, 117, 194, 152, 0, 91, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 0, 128, 103, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 152, 0, 91,
	0, 0, 0, 0, 0, 0, 115, 0, 0, 0,
	128, 103, 131, 0, 0, 173, 140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 0, 0, 159, 0, 107, 0, 179, 119,
	0, 129, 0, 0, 0, 0, 0, 0, 109, 0,
	166, 153, 191, 0, 154, 164, 132, 183, 160, 190,
	201, 202, 181, 199, 168, 99, 147, 89, 158, 165,
	0, 108, 0, 213, 214, 215, 216, 217, 218, 219,
	92, 180, 189, 105, 169, 95, 187, 176, 178, 138,
	124, 125, 171, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 177, 141, 184, 185, 110, 210, 112, 111,
	175, 100, 197, 198, 97, 101, 196, 146, 151, 149,
	195, 182, 188, 139, 136, 0, 96, 186, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 0, 0, 174, 193, 211,
	212, 0, 0, 0, 203, 204, 205, 206, 0, 0,
	0, 145, 102, 122, 170, 126, 133, 162, 209, 0,
	167, 106, 192, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 0, 90, 98, 130, 207, 208, 0, 161, 117,
	194, 152, 0, 91, 0, 0, 0, 0, 0, 0,
	115, 0, 0, 0, 128, 103, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 103,
}

var yyPact = [...]int{
	2435, -1000, -214, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1213, 1244, -1000, -1000, -1000, -1000, -1000, -1000, 1076,
	120, 238, 268, 76, 13121, 266, 2272, 13669, -1000, 86,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1008, -1000, -1000,
	-1000, -1000, -1000, 1199, 1205, 1034, 1191, 1126, -1000, 7339,
	237, 11474, 12847, 6224, -1000, 869, -194, 244, 13395, 231,
	231, 13395, 231, -1000, -88, 255, 13669, -1000, 13669, 226,
	824, 226, 226, 226, 13669, -1000, 369, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13669, 810, 1157, 208, 4110, 4110, 4110, 4110, 127, 4110,
	-21, 1088, -1000, -1000, -1000, -1000, 4110, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 726, 1166, 7904,
	7904, 1213, -1000, 1008, -1000, -1000, -1000, 1149, -1000, -1000,
	535, 1225, -1000, 8732, 368, -1000, 7904, 78, 994, -1000,
	-1000, 994, -1000, -1000, 287, -1000, -1000, 8456, 8456, 8456,
	8456, 8456, 8456, 8456, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 994, -1000,
	7628, 994, 994, 994, 994, 994, 994, 994, 994, 7904,
	994, 994, 994, 994, 994, 994, 994, 994, 994, 1761,
	994, 994, 994, 994, 12570, 977, 1058, -1000, -1000, -1000,
	1188, 9554, 10376, 13669, 927, -1000, 991, 5922, -36, -1000,
	-1000, -1000, 479, 10102, -1000, -1000, -1000, 1152, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 906, -1000, 229, 251, -1000, -1000,
	13669, 982, 808, 505, 803, 1087, 13669, -1000, 12296, 4110,
	242, 13669, 1180, 1086, 13669, 799, 796, -1000, 5620, -1000,
	4110, 4110, 4110, 4110, 4110, 4110, 4110, 4110, -1000, -1000,
	-1000, -1000, -1000, -1000, 4110, 4110, -1000, -20, -1000, 13669,
	-1000, -1000, -1000, -1000, 1239, 401, 933, 367, 992, -1000,
	644, 1199, 726, 1126, 9828, 1098, -1000, -1000, 13669, -1000,
	7904, 7904, 564, -1000, 12022, -1000, -1000, 4412, 411, 8456,
	581, 496, 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456,
	8456, 8456, 8456, 8456, 8456, 8456, 8456, 661, 1761, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 794, -1000, 1008,
	827, 827, 18, 18, 18, 18, 18, 18, 2872, 6787,
	726, 903, 517, 7628, 7339, 7339, 7904, 7904, 13943, 13943,
	7339, 1192, 487, 517, 13943, -1000, 726, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7339, 7339, 7339, 7339, 157, 13669,
	-1000, 13943, 11474, 11474, 11474, 11474, 11474, -1000, 1116, 1114,
	-1000, 1110, 1106, 1120, 13669, -1000, 901, 9554, 445, 994,
	-1000, 11748, -1000, -1000, 157, 944, 11474, 13669, -1000, -1000,
	5318, 991, -36, 981, -1000, -40, -61, 6511, 384, -1000,
	-1000, -1000, -1000, 3506, 656, 1615, -126, -4, -1000, -1000,
	-1000, -1000, 1036, -1000, 1036, 190, 1036, 1036, 1036, -1000,
	1036, 1036, 34, 34, 34, 34, 34, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1075, 1073, -1000, 1036, 1036, 1036,
	-1000, 1036, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1059, 204, 1059, 1037, 1037, -1000, -1000, 13395,
	1185, -132, 782, 4110, 1178, 4110, 13669, -1000, 2268, 13669,
	-1000, 13669, -1000, -1000, 13669, 4110, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 481, -1000, -1000, -1000, -1000, 1132, 7904, 7904, 5016,
	7904, -1000, -1000, -1000, 1166, -1000, 1192, 1208, -1000, 1145,
	1144, 7339, -1000, -1000, 411, 451, -1000, -1000, 675, -1000,
	-1000, -1000, -1000, 362, 994, -1000, 2135, -1000, -1000, -1000,
	-1000, 581, 8456, 8456, 8456, 2041, 2135, 2153, 198, 658,
	18, 46, 46, 23, 23, 23, 23, 23, 17, 17,
	-1000, -1000, -1000, -1000, 726, -1000, -1000, -1000, 726, 7339,
	989, -1000, -1000, 7904, -1000, 726, 899, 899, 630, 569,
	988, -1000, 359, 976, 899, 7339, 502, -1000, 7904, 726,
	-1000, -1000, 899, 726, 899, 899, 956, 994, -1000, 984,
	-1000, 478, 1058, 1072, 1085, 1337, -1000, -1000, -1000, -1000,
	1103, -1000, 1100, -1000, -1000, -1000, -1000, -1000, 250, 247,
	246, 13395, -1000, 1220, 11474, 972, -1000, -1000, 981, -36,
	-45, -1000, -1000, -1000, -1000, 517, -1000, -1000, 774, 974,
	3204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1065,
	1082, 13395, 211, 210, 345, 264, 738, -1000, -1000, -1000,
	524, -1000, 13395, 1233, -1000, -1000, 205, -1000, 202, 994,
	687, 13669, 111, 1061, 507, -1000, -223, -1000, -6, -1000,
	-1000, 671, 34, 34, 1036, 34, 34, 34, -1000, -1000,
	384, 1151, 384, 384, 384, 384, 682, 682, -146, -146,
	-1000, -1000, -1000, 667, 1059, -1000, -1000, -1000, 650, -1000,
	1057, 1008, -1000, 4714, -1000, -1000, -1000, -1000, -1000, 1183,
	-1000, 1137, 1958, 379, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 156, 278, -1000, 4110, -1000,
	504, 13669, 13669, 1130, 517, 517, 357, -1000, -1000, 13669,
	-1000, -1000, -1000, -1000, 929, -1000, -1000, -1000, 3808, 7339,
	-1000, 2041, 2135, 711, -1000, 8456, 8456, -1000, -1000, 899,
	7339, 517, -1000, -1000, -1000, 987, 661, 987, 8456, 8456,
	5016, 8456, 8456, -102, 975, 452, -1000, 7904, 617, -1000,
	-1000, -1000, -1000, -1000, 1081, 13943, 994, -1000, 9280, 13395,
	1213, 13943, 7904, 7904, -1000, -1000, 7904, 1054, -1000, 7904,
	-1000, -1000, -1000, 994, 994, 994, 842, -1000, 1213, 972,
	-1000, -1000, -1000, -44, -75, -1000, -1000, 3506, -1000, 3506,
	11200, 1224, 212, 224, -1000, 733, 718, -1000, 707, -1000,
	-37, -1000, 63, -76, -1000, -1000, 7904, -1000, 1044, 1182,
	-1000, 1159, 638, -209, -1000, -1000, -1000, -1000, -1000, -1000,
	994, 1042, 1039, -1000, -1000, -1000, -1000, 876, 384, 384,
	34, 384, 384, 384, -1000, 449, -1000, -1000, -1000, -1000,
	896, -1000, 858, -1000, 57, 55, -1000, 971, -1000, 851,
	13669, 13395, -1000, 966, -1000, 457, 1195, 101, -1000, 206,
	-1000, 13395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13395, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13669, -1000, -1000, -1000, -1000, -1000, 13395, 221,
	-1000, -1000, 680, 7904, -1000, -1000, -1000, 4714, -1000, 1220,
	11474, -1000, -1000, 726, -1000, 8456, 2135, 2135, -1000, -1000,
	726, 1036, 1036, -1000, 1036, 1037, -1000, -1000, 1036, 75,
	1036, 73, 726, 726, 1468, 1901, -1000, 216, 1886, 994,
	-95, -1000, 517, 7904, -1000, 1163, 926, 957, -1000, -1000,
	7063, 726, 847, 355, 842, 1199, -1000, 517, 517, 517,
	10650, 517, 10650, 10650, 10650, 9006, 13395, 1199, -1000, -1000,
	-1000, -1000, 3204, -1000, 836, -1000, 1036, 1036, 233, 233,
	201, 196, -1000, -1000, -1000, -1000, -194, -1000, 994, -1000,
	547, 10650, -183, -1000, 964, -1000, 71, 726, -1000, 645,
	-1000, 624, -1000, -1000, -1000, 384, -1000, -1000, -1000, -1000,
	-1000, 34, 677, 34, -8, -9, 635, -1000, 632, 980,
	1080, 4714, 3506, 240, 1287, -1000, -1000, 13395, -1000, -1000,
	-1000, 1030, -1000, -1000, -1000, -1000, 1171, 13395, -1000, -1000,
	517, 1218, 962, -1000, 2135, -1000, -1000, 186, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8456, 8456, -1000,
	8456, 8456, 8456, 726, 676, 517, 189, -1000, 994, -1000,
	-1000, 959, 13395, 13395, -1000, -1000, 823, -1000, -1000, 820,
	820, 820, 445, -1000, -1000, 767, 11200, 1175, -1000, 1079,
	-1000, -1000, 523, 114, 1074, 13395, -194, -1000, 7904, 122,
	816, 1019, 621, 44, -146, -1000, -1000, -1000, -1000, -1000,
	-1000, 384, -1000, 384, -1000, -1000, 852, 828, 11200, 13395,
	13669, -1000, -1000, 13395, -1000, -1000, -1000, -1000, -1000, 1017,
	10650, 994, 214, 1209, 1204, -1000, -1000, 1666, 1666, 1666,
	1666, 110, -1000, -1000, 1231, -1000, 994, -1000, 1008, 309,
	-1000, 13395, -1000, -1000, -1000, -1000, -1000, 1060, 777, 85,
	-1000, 647, 455, 662, 454, 450, 448, 447, 443, 440,
	437, -1000, -1000, 1226, -1000, -1000, 1227, 1012, -1000, 1010,
	547, -1000, -97, -1000, -1000, 817, -1000, -1000, -1000, -1000,
	-1000, -1000, 814, 1002, 1000, 924, -1000, 11200, 807, 130,
	171, -1000, 7904, 7904, -1000, -1000, -1000, -1000, 726, 118,
	-154, 13943, 957, 726, 13395, -1000, -1000, 13395, -1000, -150,
	777, 13395, -1000, 618, -1000, -1000, 533, 609, 533, 533,
	533, 533, 533, 233, 233, 13395, 11200, -1000, -1000, 79,
	-1000, -197, 11200, 11200, -131, 13395, 7904, 791, 982, 789,
	-1000, 13395, 999, 517, 954, -1000, 1129, -129, -159, 941,
	-1000, -1000, 994, 768, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 766, 744,
	-1000, 95, 583, 595, 586, 570, -23, -1000, 1202, 1220,
	996, 742, 725, -1000, -212, -1000, 517, -1000, -132, -1000,
	130, 1140, 11200, -1000, 1121, -1000, 13395, -1000, 777, 219,
	767, 561, -1000, 548, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10924, 767, 10650, 1220, 767, 7904, -1000, -1000, 121,
	716, -137, 726, -1000, 13669, 1060, -1000, -1000, -1000, 294,
	1060, 694, 767, -1000, 517, 134, -1000, -157, -1000, 995,
	-1000, 4714, -1000, -1000, -1000, 994, -160, 13395, -1000, 8180,
	-1000, 692, 1666, 726, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1469, 19, 761, 1466, 1465, 1463, 1462, 1461, 1460,
	1459, 1457, 1456, 1455, 1454, 1451, 1449, 1446, 1445, 1444,
	1443, 1441, 1440, 1439, 218, 1437, 1435, 1434, 83, 1430,
	89, 1429, 1428, 47, 74, 46, 45, 597, 1427, 33,
	87, 82, 1426, 70, 1425, 1424, 129, 1423, 78, 1420,
	1416, 57, 1413, 1410, 27, 4, 1409, 58, 1408, 1407,
	84, 6, 1406, 1405, 1403, 1396, 1393, 1392, 61, 16,
	11, 23, 26, 1386, 48, 15, 1385, 60, 1382, 1374,
	1373, 1370, 52, 1369, 66, 21, 44, 65, 1365, 7,
	1364, 76, 40, 30, 12, 124, 75, 1363, 43, 71,
	59, 1361, 1357, 605, 1352, 1351, 1350, 1343, 1342, 1341,
	684, 581, 1340, 1338, 1334, 54, 0, 433, 34, 90,
	1333, 49, 1332, 1693, 88, 81, 29, 1331, 55, 126,
	56, 1329, 1328, 51, 80, 1327, 104, 103, 1326, 1325,
	1323, 1322, 1321, 157, 39, 139, 25, 1320, 1319, 1317,
	17, 50, 32, 53, 73, 1316, 1315, 1314, 37, 1313,
	14, 22, 3, 68, 1312, 1310, 1309, 1306, 42, 36,
	1304, 24, 13, 1, 2, 8, 1301, 1300, 1299, 5,
	1298, 28, 1294, 9, 1291, 10, 1290, 1286, 1284, 1283,
	1281, 1278, 1277, 1276, 1273, 1265, 18, 41, 31, 1264,
	1261, 1571, 881, 1259, 1258, 1256, 1254, 193,
}

var yyR1 = [...]int{
	0, 199, 200, 200, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 203,
	203, 46, 46, 91, 91, 10, 10, 10, 10, 96,
	96, 100, 100, 100, 101, 101, 101, 101, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 187,
	187, 187, 188, 188, 188, 188, 188, 188, 190, 190,
	191, 191, 121, 121, 185, 185, 184, 183, 183, 182,
	182, 181, 192, 192, 16, 165, 166, 166, 166, 166,
	166, 154, 135, 135, 135, 135, 135, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 197, 197, 197,
	197, 197, 197, 197, 197, 194, 194, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 144, 144, 144, 144, 144, 193, 193, 189, 189,
	189, 189, 189, 139, 139, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 138, 140, 140, 140, 140, 140, 140, 140,
	140, 136, 136, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 142, 142, 142, 142,
	142, 142, 142, 142, 153, 153, 143, 143, 151, 151,
	152, 152, 152, 150, 150, 150, 147, 147, 148, 148,
	149, 149, 149, 145, 145, 145, 146, 146, 146, 156,
	174, 174, 174, 176, 176, 177, 177, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 164, 164,
	198, 198, 173, 173, 173, 170, 170, 170, 170, 170,
	170, 170, 170, 163, 163, 172, 172, 171, 171, 158,
	158, 158, 158, 158, 159, 160, 160, 160, 160, 157,
	196, 196, 196, 161, 161, 162, 162, 167, 167, 167,
	168, 168, 168, 169, 169, 169, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 204,
	204, 205, 205, 205, 205, 205, 205, 205, 180, 178,
	178, 179, 179, 13, 14, 14, 14, 14, 14, 15,
	15, 17, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 108, 108, 105, 105, 106,
	106, 107, 107, 107, 109, 109, 109, 132, 132, 132,
	19, 19, 21, 21, 22, 23, 20, 20, 20, 20,
	20, 206, 24, 25, 25, 26, 26, 26, 30, 30,
	30, 28, 28, 29, 29, 35, 35, 34, 34, 36,
	36, 36, 36, 120, 120, 120, 119, 119, 38, 38,
	39, 39, 40, 40, 41, 41, 41, 53, 53, 89,
	89, 89, 92, 92, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 127, 127, 126, 126, 126, 125,
	125, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 90, 90, 37, 37, 37, 37, 37, 37, 37,
	104, 104, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 207, 207, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 130, 130, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 134, 134, 134, 134, 134, 134, 134, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	93, 93, 70, 70, 72, 72, 71, 73, 94, 94,
	98, 95, 95, 99, 99, 99, 99, 97, 97, 97,
	122, 122, 122, 102, 102, 110, 110, 111, 111, 103,
	103, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 113, 113, 113, 114, 114, 117, 117, 118, 118,
	123, 123, 124, 124, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 201, 202,
	128, 129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 14, 13, 14, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 6,
	7, 3, 3, 6, 5, 8, 7, 3, 2, 2,
	2, 2, 2, 2, 4, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 6,
	0, 1, 4, 1, 2, 1, 3, 2, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	1, 1, 0, 2, 5, 2, 3, 3, 2, 3,
	2, 3, 4, 1, 1, 1, 3, 3, 2, 1,
	4, 4, 7, 7, 13, 1, 1, 2, 2, 10,
	0, 1, 1, 0, 1, 1, 3, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 11, 13, 7,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 6, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -199, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 171, 172,
	174, 175, 25, 137, 138, 141, 142, -201, 8, 274,
	52, -200, 307, -82, 15, -26, 5, -24, -206, -24,
	-24, -24, -24, -24, -165, 52, -121, -192, 151, 266,
	118, 133, 119, 134, 70, -103, 121, 123, 119, 119,
	120, 121, 266, 118, 119, -51, -123, 55, -116, 158,
	283, 20, 171, 184, 185, 176, 217, 205, 284, 156,
	202, 206, 253, 306, 64, 174, 262, 127, 162, 139,
	197, 200, 199, 191, 188, 27, 223, 290, 190, 130,
	224, 228, 254, 281, 181, 182, 256, 221, 31, 132,
	285, 33, 147, 257, 226, 220, 215, 219, 180, 214,
	37, 194, 230, 229, 231, 252, 208, 157, 233, 210,
	192, 209, 18, 142, 145, 225, 227, 189, 159, 125,
	149, 289, 258, 187, 146, 160, 141, 261, 155, 175,
	255, 183, 264, 36, 238, 201, 178, 193, 179, 129,
	172, 153, 212, 148, 195, 196, 218, 177, 213, 173,
	150, 143, 263, 239, 291, 211, 207, 203, 204, 154,
	121, 151, 152, 245, 246, 247, 248, 286, 287, 259,
	198, 240, 241, 164, 165, 166, 167, 168, 169, 170,
	119, 106, 206, 112, 243, 120, 31, 149, -132, 119,
	-105, 152, 245, 246, 247, 248, 55, 255, 254, 249,
	-123, 173, -128, -128, -128, -128, -128, -2, -86, 17,
	16, -5, -3, -201, 6, 20, 21, -30, 38, 39,
	-25, -36, 97, -37, -123, -56, 72, -61, 28, 55,
	-116, 23, -60, -57, -75, -73, -74, 106, 107, 95,
	96, 103, 73, 108, -65, -63, -64, -66, 57, 56,
	65, 58, 59, 60, 61, 66, 67, 68, -117, -71,
	-201, 42, 43, 275, 276, 277, 278, 282, 279, 75,
	32, 265, 273, 272, 271, 269, 270, 267, 268, 305,
	124, 266, 101, 274, -103, -39, -40, -41, -42, -53,
	-74, -201, -51, 11, -46, -51, -95, -131, 173, -99,
	255, 254, -118, -97, -117, -115, 253, 206, 252, 55,
	-116, 117, 293, 71, 22, 24, 236, 242, 74, 106,
	16, 75, 302, 303, 105, 275, 112, 46, 267, 268,
	265, 277, 278, 266, 243, 28, 10, 25, 137, 21,
	99, 114, 78, 79, 140, 23, 138, 68, 19, 49,
	131, 11, 292, 13, 14, 294, 124, 123, 90, 304,
	120, 44, 8, 108, 26, 87, 40, 135, 42, 88,
	17, 269, 270, 30, 282, 144, 101, 47, 34, 72,
	66, 50, 260, 70, 15, 45, 133, 89, 115, 274,
	43, 118, 6, 280, 29, 136, 41, 119, 244, 77,
	122, 67, 5, 134, 9, 48, 51, 271, 272, 273,
	32, 76, 12, 69, -166, -154, 55, -196, 302, 303,
	121, -117, -111, 124, -111, -117, -111, 274, 119, -51,
	-51, -110, 124, 55, -110, -110, -110, -51, 109, -51,
	55, 29, 266, 55, 149, 119, 150, 121, -129, -201,
	-118, -129, -129, -129, 153, 154, -129, -106, 250, 50,
	-129, -202, 54, -87, 19, 30, -37, -123, -83, -84,
	-37, -82, -2, -24, 34, -28, 21, 63, 11, -120,
	71, 70, 87, -119, 22, -117, 57, 109, -37, -58,
	90, 72, 88, 89, 74, 92, 91, 102, 95, 96,
	97, 98, 99, 100, 101, 93, 94, 105, 305, 80,
	81, 82, 83, 84, 85, 86, -104, -201, -74, -201,
	110, 111, -61, -61, -61, -61, -61, -61, -61, -201,
	-2, -69, -37, -201, -201, -201, -201, -201, -201, -201,
	-201, -201, -78, -37, -201, -207, -201, -207, -207, -207,
	-207, -207, -207, -207, -134, 106, 206, 139, 197, -137,
	-136, 212, 176, 177, 178, 179, 180, 181, 182, 183,
	184, 185, 205, 284, -201, -201, -201, -201, -52, 26,
	-51, 29, 53, -47, -49, -48, -50, 40, 44, 46,
	41, 42, 43, 47, -127, 22, -39, -201, -126, 145,
	-125, 22, -123, 57, -51, -46, -203, 53, 11, 51,
	53, -95, 173, -96, -100, 256, 258, 80, -122, -117,
	57, 28, 29, 54, 53, -155, -135, -139, -136, -141,
	-140, -142, -137, -138, 202, 206, 203, 208, 209, 210,
	106, 207, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 211, 223, 29, 139, 195, 196, 197,
	200, 199, 201, 198, 224, 225, 226, 227, 228, 229,
	230, 231, 187, 188, 190, 191, 192, 194, 193, 120,
	-51, -185, 51, 55, 72, 55, 50, -51, -51, 260,
	-129, 122, -51, 23, 50, -51, 55, 55, -124, -123,
	-115, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -108, 244, 251, -51, 9, 90, 53, 18, 109,
	53, -85, 24, 25, -86, -202, -30, -62, -117, 58,
	61, -29, 41, -51, -37, -37, -67, 66, 72, 67,
	68, -119, 97, -124, -118, -115, -61, -68, -71, -74,
	62, 90, 88, 89, 74, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-130, 55, 57, -134, 55, -60, -60, -117, -35, 21,
	-34, -36, -202, 53, -202, -2, -34, -34, -37, -37,
	-75, -117, -123, -75, -34, -28, -76, -77, 76, -75,
	-202, 204, -34, -35, -34, -34, -91, 145, -51, -94,
	-98, -75, -40, -41, -41, -40, -41, 40, 40, 40,
	45, 40, 45, 40, -48, -123, -202, -54, 48, 123,
	49, -201, -125, -91, 51, -39, -51, -99, -96, 53,
	257, 259, 260, 50, 69, -37, -146, 106, 105, -167,
	-168, -169, -118, 57, 58, -154, -156, -158, -157, -170,
	-159, 127, 125, 129, 130, 134, -163, 120, 135, 66,
	72, -197, 127, 50, 236, 242, 125, 135, 134, 306,
	64, 128, 292, 294, 28, -149, 308, 232, -147, 239,
	-143, 52, -143, -143, 204, -143, -143, -143, -143, -143,
	-145, 206, -145, -145, -145, -145, 52, 52, -143, -143,
	-143, -143, -151, 52, 189, -151, -151, -152, 52, -152,
	-117, 22, -183, 286, -184, 55, -129, 23, -129, -51,
	-112, 117, 114, 115, -180, 113, 236, 206, 64, 28,
	15, 275, 145, 291, 55, 146, -51, -51, -51, -129,
	-107, 11, 90, 36, -37, -37, -124, -84, -87, -102,
	19, 11, 32, 32, -34, 66, 67, 68, 109, -201,
	-68, -61, -61, -61, -33, 140, 71, -202, -202, -34,
	53, -37, -202, -202, -202, 53, 51, 22, 53, 11,
	109, 53, 11, -202, -34, -79, -77, 78, -37, -202,
	-202, -202, -202, -202, -59, 29, 32, -2, -201, -201,
	-55, 53, 12, 80, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 120, 120, 120, -92, -117, -55, -39,
	-55, -100, -101, 261, 258, 264, 55, 53, -169, 80,
	52, 50, -161, -117, 135, -163, -163, 55, -163, 55,
	55, 66, -117, 9, 135, 135, -201, 57, -123, -194,
	293, 16, 52, 57, 58, 59, 66, -144, 65, -57,
	233, 265, 268, 267, 309, -148, 240, 58, -145, -145,
	-143, -145, -145, -145, -146, 29, -146, -146, -146, -146,
	-153, 57, -153, -150, 286, 287, -150, 58, -151, 58,
	50, 51, -2, -182, -181, -118, -187, 22, -128, -121,
	-205, 151, 126, 131, 130, 55, 125, 129, 145, -186,
	151, 126, 127, 131, 130, 55, 120, 135, 125, 129,
	145, 134, -113, -114, 122, 22, 120, 135, 145, 117,
	-129, -109, 88, 12, -123, -123, 37, 109, -51, -38,
	11, 97, -118, -35, -33, 71, -61, -61, -202, -36,
	-133, 106, 202, 139, 197, 191, 221, 222, 208, 238,
	195, 239, -130, -133, -61, -61, -118, -61, -61, 283,
	-82, 79, -37, 77, -93, 50, -94, -70, -72, -71,
	-201, -2, -88, -117, -92, -82, -98, -37, -37, -37,
	52, -37, -201, -201, -201, -202, 53, -82, -55, 258,
	262, 263, -168, -169, -172, -171, -117, 135, 10, 9,
	131, 125, 55, 55, 55, -196, 134, -197, 306, -144,
	-37, 52, 22, 28, 58, -189, 305, -201, -143, 52,
	-143, 52, 54, -146, -146, -145, -146, -146, -146, 55,
	106, 54, 53, 54, 195, 195, 53, 54, 53, -51,
	-117, 53, 80, -188, 19, 159, 160, -204, 120, 135,
	-128, -117, -128, -117, -51, -128, -117, 127, -158, 57,
	-37, -55, -39, -202, -61, -202, -143, -143, -143, -152,
	-143, 182, -143, 182, -202, -202, -202, 53, 19, -202,
	53, 19, -201, -32, 280, -37, 27, -93, 53, -202,
	-202, -202, 53, 109, -202, -86, -89, -117, 135, -89,
	-89, -89, -126, -117, -86, 54, 53, -143, -143, -160,
	155, 156, 29, 157, -160, 135, 135, -196, -201, -202,
	-89, 294, 53, 206, 196, 234, 212, -202, 54, 54,
	-146, -145, 57, -145, 241, 241, 58, 58, 52, 51,
	50, -181, -169, 122, 20, 6, 8, 9, 10, -117,
	52, 26, -117, -80, 13, -145, 55, -61, -61, -61,
	-61, -61, -202, 57, 135, -72, 32, -2, -201, -117,
	-117, 53, 54, -202, -202, -202, -54, -174, -176, 286,
	-175, 51, 132, 64, 164, 165, 166, 167, 168, 169,
	170, -171, -85, 50, 66, 158, 50, -161, -117, -196,
	-37, -193, 157, 54, 52, 58, 204, -150, -146, -146,
	54, 54, -172, -117, -51, -162, -117, 52, -89, -201,
	125, -81, 14, 16, -202, -202, -202, -202, -31, 90,
	286, 9, -70, -2, 109, -117, -173, 50, -175, 286,
	52, 288, 55, -164, 80, 57, 80, 80, 80, 80,
	80, 80, 80, 9, 10, 52, 52, -202, 281, -195,
	54, 54, 52, 52, -190, 53, 51, -172, 54, -178,
	-179, 145, 135, -37, -69, -202, 284, 47, 289, -94,
	-202, -117, -117, -177, -175, -117, 58, -198, 50, 69,
	58, -198, -198, -198, -198, -198, -160, -160, -162, -172,
	54, 172, 296, 297, 144, 298, 157, 299, 300, -90,
	304, -172, -172, -191, 286, -117, -37, 54, -185, -202,
	53, -117, 52, 37, 285, 290, -201, 54, 53, 54,
	54, 286, 58, 16, 58, 58, 58, 58, 297, 144,
	299, 16, -55, 52, 54, 54, 306, -183, -179, 32,
	-172, 37, -117, -175, 128, -174, 58, 58, 301, -123,
	-174, -89, -55, -174, -37, 147, 54, 286, -202, -51,
	-173, 109, -173, 54, -174, 148, 289, 52, -118, -201,
	290, -162, -61, 144, 54, -202, -202,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 655, 0, 411, 411, 411, 411, 411, 411, 0,
	-2, 709, 0, 0, 0, 0, -2, 401, 402, 0,
	404, 405, 970, 970, 970, 970, 970, 0, 33, 34,
	968, 1, 3, 663, 0, 0, 415, 418, 413, 0,
	709, 0, 0, 0, 60, 0, 300, 0, 0, 707,
	707, 0, 707, 83, 0, 0, 0, 710, 0, 705,
	0, 705, 705, 705, 0, 360, 483, 730, 731, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	0, 0, 0, 0, 971, 971, 971, 971, 0, 971,
	389, 378, 380, 381, 382, 383, 971, 398, 399, 388,
	400, 403, 406, 407, 408, 409, 410, 27, 667, 0,
	0, 655, 29, 0, 411, 416, 417, 421, 419, 420,
	412, 0, 429, 433, 0, 493, 0, 498, 500, -2,
	-2, 0, 535, 536, 537, 538, 539, 0, 0, 0,
	0, 0, 0, 0, 563, 564, 565, 566, 640, 641,
	642, 643, 644, 645, 646, 647, 502, 503, 637, 687,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 594, 594, 594, 594, 594, 594, 594, 594, 0,
	0, 0, 0, 0, 0, 0, 440, 442, 443, 444,
	464, 0, 466, 0, 0, 41, 45, 0, 937, 691,
	-2, -2, 0, 0, 728, 729, -2, 849, -2, 726,
	727, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 0, 96, 0, 0, 301, 302,
	0, 84, 0, 0, 0, 0, 0, 93, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 359, 0, 361,
	971, 971, 971, 971, 971, 971, 971, 971, 370, 972,
	973, 371, 372, 373, 971, 971, 375, 0, 390, 0,
	384, 28, 969, 22, 0, 0, 664, 0, 656, 657,
	660, 663, 27, 418, 0, 423, 422, 414, 0, 430,
	0, 0, 0, 434, 0, 436, 437, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 520,
	521, 522, 523, 524, 525, 526, 499, 0, 513, 0,
	0, 0, 555, 556, 557, 558, 559, 560, 0, 425,
	27, 0, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 421, 0, 629, 0, 585, 0, 586, 587, 588,
	589, 590, 591, 592, 593, 621, 0, 623, 624, 625,
	626, 627, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 191, 192, 0, 425, 0, 0, 43, 0,
	482, 0, 0, 0, 0, 0, 0, 471, 0, 0,
	474, 0, 0, 0, 0, 465, 0, 0, 485, 902,
	467, 0, 469, 470, -2, 0, 0, 0, 39, 40,
	0, 46, 937, 48, 49, 0, 0, 0, 246, 700,
	701, 702, 698, 307, 0, 101, 240, 236, 103, 104,
	105, 106, 226, 164, 226, 226, 226, 226, 226, 198,
	226, 226, 243, 243, 243, 243, 243, 207, 208, 209,
	210, 211, 212, 213, 0, 0, 183, 226, 226, 226,
	187, 226, 189, 190, 216, 217, 218, 219, 220, 221,
	222, 223, 228, 228, 228, 230, 230, 181, 182, 0,
	0, 87, 0, 971, 0, 971, 0, 94, 0, 0,
	326, 0, 354, 706, 0, 971, 357, 358, 484, 732,
	733, 362, 363, 364, 365, 366, 367, 368, 369, 374,
	377, 391, 385, 386, 379, 668, 0, 0, 0, 0,
	0, 659, 661, 662, 667, 30, 421, 0, 648, 0,
	0, 0, 424, 25, 494, 495, 497, 514, 0, 516,
	518, 435, 431, 0, 638, -2, 504, 505, 529, 530,
	531, 0, 0, 0, 0, 527, 509, 0, 540, 541,
	542, 543, 544, 545, 546, 547, 548, 549, 550, 551,
	554, 605, 606, 562, 0, 552, 553, 561, 0, 0,
	426, 427, 532, 0, 686, 27, 0, 0, 0, 0,
	0, 637, 0, 0, 0, 0, 635, 632, 0, 0,
	595, 622, 0, 0, 0, 0, 0, 0, 481, 489,
	688, 0, 441, 460, 462, 0, 457, 472, 473, 475,
	0, 477, 0, 479, 480, 445, 446, 447, 0, 0,
	0, 0, 468, 489, 0, 489, 42, 692, 47, 0,
	0, 52, 53, 693, 694, 695, 696, 247, 0, 95,
	308, 310, 313, 314, 315, 97, 98, 99, 100, 0,
	289, 303, 0, 0, 0, 0, 0, 283, 284, 108,
	0, 110, 0, 0, 113, 114, 0, 116, 118, 0,
	0, 0, 0, 0, 0, 107, 0, 242, 238, 237,
	163, 0, 243, 243, 226, 243, 243, 243, 200, 201,
	246, 0, 246, 246, 246, 246, 0, 0, 233, 233,
	186, 188, 175, 0, 228, 177, 178, 179, 0, 180,
	0, 0, 65, 0, 85, 86, 66, 708, 67, 69,
	970, 82, 0, 721, 327, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 0, 0, 353, 971, 356,
	394, 0, 0, 0, 665, 666, 0, 658, 23, 0,
	703, 704, 649, 650, 438, 515, 517, 519, 0, 425,
	506, 527, 510, 0, 507, 0, 0, 501, 567, 0,
	0, 534, -2, 570, 571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 655, 0, 633, 0, 0, 584,
	596, 597, 598, 599, 680, 0, 0, -2, 0, 0,
	655, 0, 0, 0, 454, 461, 0, 0, 455, 0,
	456, 476, 478, 0, 0, 0, 0, 452, 655, 489,
	38, 50, 51, 0, 0, 57, 248, 0, 311, 0,
	0, 0, 0, 304, 275, 0, 0, 278, 0, 280,
	300, 109, 0, 0, 115, 117, 0, 121, 122, 0,
	135, 0, 0, 158, 128, 129, 130, 131, 132, 133,
	0, 226, 226, 155, 241, 102, 239, 0, 246, 246,
	243, 246, 246, 246, 202, 0, 203, 204, 205, 206,
	0, 224, 0, 184, 0, 0, 185, 0, 176, 0,
	0, 0, -2, 88, 89, 0, 72, 0, 316, 0,
	970, 0, 341, 342, 343, 344, 345, 346, 347, 970,
	0, 328, 329, 330, 331, 332, 333, 334, 335, 336,
	337, 338, 0, 970, 722, 723, 724, 725, 0, 0,
	355, 376, 0, 0, 392, 393, 669, 0, 24, 489,
	0, 432, 639, 0, 508, 0, 528, 511, 568, 428,
	0, 226, 226, 610, 226, 230, 613, 614, 226, 616,
	226, 619, 0, 0, 0, 0, 638, 0, 0, 0,
	630, 583, 636, 0, 31, 0, 680, 670, 682, 684,
	0, 27, 0, 676, 0, 663, 689, 490, 690, 458,
	0, 463, 0, 0, 0, 466, 0, 663, 37, 54,
	55, 56, 309, 312, 0, 285, 226, 226, 0, 0,
	0, 0, 276, 277, 279, 281, 300, 111, 0, 112,
	0, 0, 0, 136, 0, 127, 0, 0, 151, 0,
	153, 0, 227, 193, 194, 246, 195, 196, 197, 244,
	245, 243, 0, 243, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 70, 71, 0, 339, 340,
	320, 0, 321, 323, 324, 325, 0, 303, 319, 395,
	396, 651, 439, 569, 512, 572, 607, 243, 611, 612,
	615, 617, 618, 620, 574, 573, 575, 0, 0, 578,
	0, 0, 0, 0, 0, 634, 0, 32, 0, 685,
	-2, 0, 0, 0, 44, 35, 0, 449, 450, 0,
	0, 0, 485, 453, 36, 250, 0, 660, 288, 290,
	295, 296, 0, 0, 291, 303, 300, 282, 0, 156,
	0, 124, 0, 0, 233, 161, 162, 134, 152, 154,
	199, 246, 225, 246, 234, 235, 0, 0, 0, 0,
	0, 90, 91, 0, 73, 74, 75, 76, 77, 0,
	0, 0, 304, 653, 0, 608, 609, 0, 0, 0,
	0, 600, 582, 631, 0, 683, 0, -2, 0, 678,
	677, 0, 459, 486, 487, 488, 448, 272, 251, 0,
	253, 0, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 0, 297, 298, 0, 0, 304, 0,
	0, 119, 0, 123, 137, 0, 159, 160, 214, 215,
	229, 232, 0, 0, 0, 78, 305, 0, 0, 0,
	0, 26, 0, 0, 576, 577, 579, 580, 0, 0,
	0, 0, 673, 27, 0, 451, 249, 0, 254, 0,
	0, 0, 257, 0, 269, 259, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 120, 157, 0,
	126, 491, 0, 0, 80, 0, 0, 0, 84, 0,
	349, 0, 0, 654, 652, 581, 0, 0, 0, 681,
	-2, 679, 273, 0, 255, 260, 258, 261, 270, 271,
	262, 263, 264, 265, 266, 267, 292, 293, 0, 0,
	125, 0, 0, 0, 0, 0, 0, 148, 0, 489,
	0, 0, 0, 68, 0, 306, 79, 317, 87, 348,
	0, 0, 0, 601, 0, 604, 0, 252, 0, 0,
	250, 0, 139, 0, 141, 142, 143, 144, 145, 146,
	147, 0, 250, 0, 489, 250, 0, 322, 350, 0,
	0, 602, 0, 256, 0, 272, 138, 140, 149, 0,
	272, 0, 250, 62, 81, 0, 318, 0, 274, 0,
	299, 0, 61, 492, 63, 0, 0, 0, 150, 0,
	603, 0, 0, 0, 294, 351, 352,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 307,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 308, 3, 309, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:342
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:347
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:348
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:352
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:375
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:383
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:387
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:393
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:400
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:406
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:410
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:416
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:420
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:427
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:439
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:451
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:455
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:461
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:467
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:471
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:475
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:480
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:481
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:485
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:489
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:494
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:498
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:504
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:508
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:512
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:522
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:526
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:532
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:546
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:550
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:554
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:558
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:564
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:568
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:574
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:579
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:599
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:615
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:630
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:638
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:646
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:650
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:654
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:666
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:670
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:674
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:679
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:683
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:687
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:691
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:695
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:699
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:704
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:708
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:713
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:717
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:722
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:726
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:731
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:735
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:741
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:746
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:751
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:757
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:762
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:768
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:773
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:777
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:783
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:790
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:797
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:802
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:806
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:810
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:814
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:820
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:825
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:836
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:848
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:853
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:858
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:863
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:868
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:873
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:878
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:883
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:888
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:893
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:898
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:903
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[4].expr)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:909
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[6].expr), ConstraintName: yyDollar[3].colIdent}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:914
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:919
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:924
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:930
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:936
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:949
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:953
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:957
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:961
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:965
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:969
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:973
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[2].boolVal))
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:983
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:987
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:992
		{
			yyVAL.sequence = &Sequence{}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:996
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1001
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1006
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1011
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1016
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1021
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1026
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1031
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1036
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1041
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1046
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1051
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1056
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1063
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1067
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1071
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1075
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1079
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1084
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1088
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1093
		{
			yyVAL.bytes = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1108
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1130
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1134
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1142
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1180
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1206
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1210
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1214
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1278
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1282
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1286
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1290
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1294
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1302
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1306
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1314
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1318
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1326
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1341
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1345
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1349
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1357
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1369
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1375
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1380
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1385
		{
			yyVAL.optVal = nil
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1389
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1394
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1398
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1406
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1410
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1416
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1424
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1428
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1432
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1437
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1441
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1446
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1450
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1455
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1459
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1468
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1472
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1476
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1481
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1485
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1489
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1495
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1500
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1504
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1508
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1514
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1518
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1524
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1528
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1534
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1538
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1543
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1547
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1551
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1555
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1559
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1563
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1567
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1571
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1575
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1581
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1585
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1591
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1595
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.indexPartition = nil
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1605
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1609
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1615
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1619
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1623
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1631
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1635
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1639
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1643
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1649
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1653
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1659
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1663
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1674
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1681
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1687
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1699
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 294:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1707
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1719
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1723
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1727
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1731
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 299:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1737
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1748
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1752
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1761
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1768
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1772
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1777
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1781
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1785
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1793
		{
			yyVAL.str = yyDollar[1].str
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1797
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1801
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1807
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1811
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1815
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1821
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 317:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1825
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 318:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1839
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1853
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1862
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1866
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1870
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 323:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1883
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 324:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1893
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1898
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1903
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1907
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1939
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1949
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 351:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1955
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 352:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1959
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1965
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1971
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 355:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1979
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1984
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1992
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1996
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2002
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2006
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2011
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2017
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2021
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2025
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2030
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2034
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2038
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2042
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2046
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2050
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2054
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2058
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2062
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2066
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2070
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2074
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2084
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2088
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2092
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2096
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2118
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2124
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2128
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2134
		{
			yyVAL.str = ""
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2138
		{
			yyVAL.str = "extended "
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2144
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2148
		{
			yyVAL.str = "full "
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2154
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2158
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2162
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2168
		{
			yyVAL.showFilter = nil
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2172
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2176
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2182
		{
			yyVAL.str = ""
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2186
		{
			yyVAL.str = SessionStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2190
		{
			yyVAL.str = GlobalStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2196
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2200
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2206
		{
			yyVAL.statement = &Begin{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2210
		{
			yyVAL.statement = &Begin{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2216
		{
			yyVAL.statement = &Commit{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2222
		{
			yyVAL.statement = &Rollback{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2228
		{
			yyVAL.statement = &OtherRead{}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2232
		{
			yyVAL.statement = &OtherRead{}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2236
		{
			yyVAL.statement = &OtherRead{}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2240
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2244
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2249
		{
			setAllowComments(yylex, true)
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2253
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2259
		{
			yyVAL.bytes2 = nil
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2263
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2269
		{
			yyVAL.str = UnionStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2273
		{
			yyVAL.str = UnionAllStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2277
		{
			yyVAL.str = UnionDistinctStr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2282
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2286
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2290
		{
			yyVAL.str = SQLCacheStr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2295
		{
			yyVAL.str = ""
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2299
		{
			yyVAL.str = DistinctStr
		}
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2304
		{
			yyVAL.str = ""
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2308
		{
			yyVAL.str = StraightJoinHint
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2313
		{
			yyVAL.selectExprs = nil
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2317
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2323
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2327
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2333
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2337
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2341
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2345
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2350
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2354
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2358
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2365
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 438:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2374
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2380
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2384
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2394
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2398
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2402
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2408
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 448:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2412
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2418
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2423
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2427
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2450
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 455:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2454
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2458
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2468
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2470
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2474
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2476
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2480
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2482
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2485
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2487
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2490
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2494
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2498
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2505
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2511
		{
			yyVAL.str = JoinStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2515
		{
			yyVAL.str = JoinStr
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2519
		{
			yyVAL.str = JoinStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2525
		{
			yyVAL.str = StraightJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2531
		{
			yyVAL.str = LeftJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2535
		{
			yyVAL.str = LeftJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2539
		{
			yyVAL.str = RightJoinStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2543
		{
			yyVAL.str = RightJoinStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2549
		{
			yyVAL.str = NaturalJoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2553
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2563
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2567
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2573
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2577
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2582
		{
			yyVAL.indexHints = nil
		}
	case 486:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2586
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 487:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2590
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 488:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2594
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2599
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2603
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2608
		{
			yyVAL.columns = nil
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2612
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2642
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2648
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2652
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2658
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2662
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2668
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2672
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2676
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2680
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2692
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 511:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2696
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2700
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2704
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2710
		{
			yyVAL.str = IsNullStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2714
		{
			yyVAL.str = IsNotNullStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2718
		{
			yyVAL.str = IsTrueStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2722
		{
			yyVAL.str = IsNotTrueStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2726
		{
			yyVAL.str = IsFalseStr
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2730
		{
			yyVAL.str = IsNotFalseStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2736
		{
			yyVAL.str = EqualStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.str = LessThanStr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2744
		{
			yyVAL.str = GreaterThanStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2748
		{
			yyVAL.str = LessEqualStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2752
		{
			yyVAL.str = GreaterEqualStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2756
		{
			yyVAL.str = NotEqualStr
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2760
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2765
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2769
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2775
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2779
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2789
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2799
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2813
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2817
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2821
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2825
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2829
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2837
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2841
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2845
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2849
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2853
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2857
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2861
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2865
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2869
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2873
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2877
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2881
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2885
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2889
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2893
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2901
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2915
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2923
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2931
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2945
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2949
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2953
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2963
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2967
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2979
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 575:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2983
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 576:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2987
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 577:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2991
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 578:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2995
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 579:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 580:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3003
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 581:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 582:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 583:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3015
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 584:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3019
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3029
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3033
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3037
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3041
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3046
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3051
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3056
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3061
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3065
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3083
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3087
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3091
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3097
		{
			yyVAL.str = ""
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3101
		{
			yyVAL.str = BooleanModeStr
		}
	case 602:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3105
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 603:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3109
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3113
		{
			yyVAL.str = QueryExpansionStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3119
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3123
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3129
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3133
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3137
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3141
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3145
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3149
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3183
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3197
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3201
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3205
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3209
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3213
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3218
		{
			yyVAL.expr = nil
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3222
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3227
		{
			yyVAL.str = string("")
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3231
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3237
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3241
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3247
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3252
		{
			yyVAL.expr = nil
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3256
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3262
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3270
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3276
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3284
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3288
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3292
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3296
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3300
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3304
		{
			yyVAL.expr = &NullVal{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3310
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3319
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3323
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3328
		{
			yyVAL.exprs = nil
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3332
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3337
		{
			yyVAL.expr = nil
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3341
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3346
		{
			yyVAL.orderBy = nil
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3350
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3356
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3360
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3366
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3371
		{
			yyVAL.str = AscScr
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3375
		{
			yyVAL.str = AscScr
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3379
		{
			yyVAL.str = DescScr
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3384
		{
			yyVAL.limit = nil
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3388
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3392
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3396
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3401
		{
			yyVAL.str = ""
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3405
		{
			yyVAL.str = ForUpdateStr
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3409
		{
			yyVAL.str = ShareModeStr
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3422
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3426
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3430
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3435
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3439
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3443
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3450
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3454
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3458
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 679:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3462
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.updateExprs = nil
		}
	case 681:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3477
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3481
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3487
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3491
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3497
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3503
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3513
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3523
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3529
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3533
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3543
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3547
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3558
		{
			yyVAL.bytes = []byte("charset")
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3565
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3569
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3573
		{
			yyVAL.expr = &Default{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3582
		{
			yyVAL.byt = 0
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3584
		{
			yyVAL.byt = 1
		}
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3587
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3589
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3592
		{
			yyVAL.str = ""
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3594
		{
			yyVAL.str = IgnoreStr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3598
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3600
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3602
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3604
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3606
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3608
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3610
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3612
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3614
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3616
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3619
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3621
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3623
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3627
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3629
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3633
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3637
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3644
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3650
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3654
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3661
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3921
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 969:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3930
		{
			decNesting(yylex)
		}
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3935
		{
			forceEOF(yylex)
		}
	case 971:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3940
		{
			forceEOF(yylex)
		}
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3944
		{
			forceEOF(yylex)
		}
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3948
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
