// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const BPCHAR = 57544
const NULLX = 57545
const AUTO_INCREMENT = 57546
const APPROXNUM = 57547
const SIGNED = 57548
const UNSIGNED = 57549
const ZEROFILL = 57550
const ZONE = 57551
const AUTOINCREMENT = 57552
const DATABASES = 57553
const TABLES = 57554
const VITESS_KEYSPACES = 57555
const VITESS_SHARDS = 57556
const VITESS_TABLETS = 57557
const VSCHEMA_TABLES = 57558
const EXTENDED = 57559
const FULL = 57560
const PROCESSLIST = 57561
const NAMES = 57562
const CHARSET = 57563
const GLOBAL = 57564
const SESSION = 57565
const ISOLATION = 57566
const LEVEL = 57567
const READ = 57568
const WRITE = 57569
const ONLY = 57570
const REPEATABLE = 57571
const COMMITTED = 57572
const UNCOMMITTED = 57573
const SERIALIZABLE = 57574
const CURRENT_TIMESTAMP = 57575
const DATABASE = 57576
const CURRENT_DATE = 57577
const CURRENT_TIME = 57578
const LOCALTIME = 57579
const LOCALTIMESTAMP = 57580
const UTC_DATE = 57581
const UTC_TIME = 57582
const UTC_TIMESTAMP = 57583
const REPLACE = 57584
const CONVERT = 57585
const CAST = 57586
const SUBSTR = 57587
const SUBSTRING = 57588
const GROUP_CONCAT = 57589
const SEPARATOR = 57590
const INHERIT = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const WITHOUT = 57597
const PARSER = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const GENERATED = 57602
const ALWAYS = 57603
const IDENTITY = 57604
const SEQUENCE = 57605
const INCREMENT = 57606
const MINVALUE = 57607
const CACHE = 57608
const CYCLE = 57609
const OWNED = 57610
const NONE = 57611
const TYPECAST = 57612
const CHECK = 57613

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 365,
	153, 365,
	-2, 355,
	-1, 255,
	108, 695,
	-2, 691,
	-1, 256,
	108, 696,
	-2, 692,
	-1, 326,
	79, 874,
	-2, 58,
	-1, 327,
	79, 829,
	-2, 59,
	-1, 332,
	79, 811,
	-2, 662,
	-1, 334,
	79, 851,
	-2, 664,
	-1, 624,
	51, 41,
	53, 41,
	-2, 43,
	-1, 757,
	108, 698,
	-2, 694,
	-1, 988,
	5, 28,
	-2, 498,
	-1, 1013,
	5, 27,
	-2, 637,
	-1, 1104,
	5, 27,
	-2, 64,
	-1, 1306,
	5, 28,
	-2, 638,
	-1, 1380,
	5, 27,
	-2, 640,
	-1, 1469,
	5, 28,
	-2, 641,
}

const yyPrivate = 57344

const yyLast = 13361

var yyAct = [...]int{
	256, 1417, 928, 253, 1459, 551, 1216, 470, 693, 260,
	1391, 1325, 821, 1189, 1312, 1095, 1048, 1217, 1016, 839,
	285, 1190, 1106, 618, 862, 1186, 922, 616, 1062, 262,
	861, 868, 822, 1032, 331, 88, 857, 782, 88, 793,
	1162, 53, 234, 790, 980, 66, 259, 917, 1092, 634,
	228, 483, 1021, 759, 489, 437, 633, 877, 809, 906,
	550, 3, 88, 88, 336, 818, 325, 605, 313, 336,
	574, 328, 336, 620, 312, 495, 962, 88, 258, 88,
	503, 243, 322, 320, 1078, 88, 895, 52, 1514, 311,
	565, 316, 249, 579, 229, 230, 231, 232, 580, 247,
	517, 527, 1228, 527, 1510, 1342, 1536, 1500, 233, 1532,
	1467, 1443, 1503, 1077, 1096, 1097, 511, 1528, 514, 929,
	1489, 1499, 1181, 1448, 529, 530, 531, 532, 533, 534,
	535, 792, 512, 513, 510, 516, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 1296, 482, 527,
	1300, 447, 853, 854, 1297, 1066, 1466, 1068, 1067, 894,
	1211, 318, 1431, 516, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 1212, 1213, 527, 852, 478,
	83, 79, 80, 81, 516, 515, 525, 526, 518, 519,
	520, 521, 522, 523, 524, 517, 85, 1392, 527, 1040,
	74, 635, 1039, 636, 1348, 1041, 1347, 88, 724, 1080,
	1394, 336, 336, 336, 336, 725, 336, 897, 907, 1404,
	813, 1250, 899, 336, 321, 516, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 1249, 449, 527,
	450, 1289, 1287, 1509, 227, 1511, 457, 1369, 70, 72,
	336, 1293, 482, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 71, 73, 527, 1407, 542, 543, 544,
	545, 546, 547, 548, 1261, 1262, 918, 1393, 1399, 491,
	1531, 68, 474, 475, 528, 1526, 528, 538, 516, 515,
	525, 526, 518, 519, 520, 521, 522, 523, 524, 517,
	492, 1460, 527, 518, 519, 520, 521, 522, 523, 524,
	517, 88, 482, 527, 82, 1140, 819, 1461, 88, 88,
	88, 1264, 1055, 1053, 336, 1502, 878, 1377, 486, 490,
	336, 328, 528, 1332, 1331, 1071, 1265, 1070, 57, 1050,
	284, 879, 1222, 1520, 1432, 508, 1273, 316, 516, 515,
	525, 526, 518, 519, 520, 521, 522, 523, 524, 517,
	528, 902, 527, 59, 60, 61, 62, 63, 459, 520,
	521, 522, 523, 524, 517, 1076, 1328, 527, 1465, 552,
	463, 528, 69, 1422, 1223, 907, 878, 878, 563, 567,
	568, 569, 570, 571, 572, 573, 840, 842, 452, 443,
	77, 879, 879, 625, 330, 919, 631, 1356, 1157, 441,
	703, 440, 445, 1334, 76, 1031, 77, 1395, 1030, 1029,
	1333, 439, 528, 448, 1336, 206, 78, 1141, 516, 515,
	525, 526, 518, 519, 520, 521, 522, 523, 524, 517,
	336, 88, 527, 465, 1530, 467, 1335, 88, 528, 88,
	336, 1436, 88, 540, 541, 88, 1244, 1309, 1149, 88,
	1137, 336, 336, 336, 336, 336, 336, 336, 336, 996,
	841, 974, 600, 464, 466, 336, 336, 731, 507, 458,
	88, 624, 859, 858, 728, 528, 957, 1441, 502, 1258,
	1019, 993, 1117, 712, 766, 336, 528, 501, 500, 88,
	1183, 1326, 1327, 1329, 1185, 336, 1245, 1145, 764, 765,
	763, 637, 696, 758, 502, 756, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 760, 652, 810, 736, 710, 1398, 648, 501, 500,
	761, 810, 757, 1003, 1057, 528, 971, 972, 973, 336,
	497, 330, 330, 330, 330, 502, 330, 1138, 1522, 1136,
	528, 1118, 1114, 330, 958, 1119, 1116, 1115, 802, 805,
	73, 1521, 1139, 500, 811, 738, 462, 1508, 1507, 493,
	482, 1120, 1144, 1506, 755, 753, 1471, 1113, 438, 502,
	505, 50, 442, 746, 747, 501, 500, 75, 1504, 785,
	88, 762, 692, 88, 88, 88, 88, 88, 699, 1350,
	700, 823, 502, 704, 797, 88, 707, 1339, 88, 787,
	788, 1081, 88, 1477, 1349, 528, 1338, 88, 88, 1101,
	1081, 336, 316, 316, 316, 316, 316, 807, 328, 815,
	1505, 726, 1099, 783, 336, 784, 552, 316, 1081, 800,
	801, 863, 878, 1442, 847, 1376, 316, 873, 310, 872,
	745, 874, 875, 444, 330, 446, 876, 879, 501, 500,
	639, 1345, 825, 826, 1275, 828, 1093, 824, 797, 1073,
	827, 836, 21, 1454, 1540, 502, 798, 799, 1439, 850,
	845, 1226, 806, 1322, 1527, 844, 336, 849, 336, 88,
	866, 1225, 88, 1224, 88, 1454, 1501, 88, 336, 1056,
	734, 735, 1481, 1042, 451, 1495, 482, 924, 1322, 1492,
	908, 909, 910, 911, 931, 1483, 814, 730, 816, 817,
	856, 1322, 1487, 1478, 786, 920, 921, 709, 238, 756,
	992, 482, 991, 516, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 501, 500, 527, 501, 500,
	708, 820, 729, 1322, 1486, 1413, 757, 697, 977, 978,
	979, 695, 502, 1322, 1476, 502, 1384, 1457, 501, 500,
	691, 749, 751, 752, 760, 460, 750, 963, 964, 848,
	330, 453, 981, 761, 438, 502, 454, 455, 456, 1322,
	1414, 330, 330, 330, 330, 330, 330, 330, 330, 275,
	274, 277, 278, 279, 280, 330, 330, 976, 276, 281,
	1384, 1408, 960, 961, 1455, 490, 1454, 607, 610, 611,
	612, 608, 1412, 609, 613, 740, 1294, 1022, 1023, 1384,
	482, 1384, 1385, 1187, 336, 505, 1017, 88, 330, 1239,
	1479, 1480, 1482, 1484, 1485, 1322, 1321, 1208, 482, 1017,
	935, 1018, 336, 952, 1034, 953, 1036, 1002, 954, 863,
	694, 1308, 482, 336, 1035, 970, 316, 1253, 1252, 1013,
	1026, 1247, 1248, 1247, 1246, 795, 1044, 54, 987, 789,
	986, 482, 88, 602, 482, 898, 795, 482, 23, 803,
	803, 1037, 602, 1004, 846, 803, 627, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 644,
	643, 527, 1152, 985, 1379, 986, 88, 336, 23, 1064,
	336, 1098, 1051, 1052, 1054, 1018, 1304, 1107, 998, 1000,
	528, 602, 803, 1086, 50, 1088, 1089, 1090, 1091, 628,
	995, 1011, 1257, 601, 1012, 336, 1251, 23, 88, 88,
	1082, 1083, 1094, 1085, 986, 946, 88, 1100, 1255, 1254,
	50, 330, 1043, 851, 50, 336, 1017, 602, 945, 986,
	997, 630, 1154, 1111, 330, 1158, 1159, 1110, 1104, 629,
	732, 627, 994, 240, 1533, 1497, 1446, 1419, 1176, 1177,
	1416, 1179, 1180, 50, 1178, 950, 607, 610, 611, 612,
	608, 1415, 609, 613, 944, 336, 336, 481, 1028, 1155,
	1409, 823, 1156, 1403, 1188, 1363, 1161, 823, 899, 923,
	1174, 757, 1236, 1191, 1175, 1233, 330, 1231, 330, 50,
	1202, 918, 1182, 882, 336, 1046, 336, 336, 330, 1196,
	1198, 863, 913, 863, 1210, 1022, 1023, 1400, 1197, 925,
	926, 1397, 941, 938, 939, 883, 937, 744, 912, 65,
	1215, 1256, 330, 1187, 1214, 1193, 1209, 1047, 1025, 890,
	706, 880, 698, 479, 833, 831, 881, 1102, 1027, 834,
	832, 830, 829, 1519, 948, 951, 1184, 959, 1234, 1163,
	835, 1498, 611, 612, 528, 244, 245, 1148, 496, 1517,
	969, 1199, 1200, 968, 336, 1201, 1238, 484, 1203, 1240,
	1241, 494, 1243, 336, 1087, 642, 461, 1150, 485, 1302,
	1364, 933, 1165, 705, 1237, 88, 1109, 927, 615, 886,
	496, 336, 891, 943, 1242, 241, 242, 967, 888, 887,
	336, 1260, 235, 88, 1512, 966, 1425, 1154, 1058, 1059,
	1060, 1280, 236, 1266, 54, 1235, 1063, 1061, 282, 283,
	1277, 942, 1268, 1274, 1424, 1367, 1018, 1167, 498, 1172,
	1278, 1166, 316, 1164, 1033, 1445, 1271, 1221, 1220, 1170,
	1444, 1433, 1069, 727, 1285, 56, 58, 1112, 1263, 626,
	1168, 1169, 330, 336, 51, 336, 336, 336, 88, 336,
	947, 1, 1449, 1049, 1303, 336, 1075, 1171, 1173, 1315,
	1316, 1317, 863, 1406, 67, 1488, 949, 1453, 1227, 1259,
	1108, 1318, 1121, 1330, 930, 1105, 884, 336, 1276, 1044,
	1311, 940, 885, 1458, 1390, 870, 1358, 860, 1359, 1360,
	1361, 1341, 1320, 436, 64, 336, 336, 88, 336, 336,
	1357, 1351, 1440, 871, 336, 1107, 863, 1103, 869, 867,
	330, 645, 893, 1079, 336, 896, 651, 649, 1301, 1343,
	1354, 650, 647, 1355, 653, 552, 646, 214, 323, 614,
	638, 499, 892, 1135, 1134, 330, 1270, 1370, 1371, 936,
	1372, 1373, 1374, 889, 1143, 723, 1344, 956, 1346, 336,
	336, 477, 216, 536, 965, 330, 1038, 329, 1194, 1065,
	733, 488, 1423, 336, 1366, 1191, 1378, 1001, 562, 808,
	261, 748, 336, 273, 270, 272, 271, 330, 1389, 739,
	1396, 1010, 509, 1368, 251, 315, 598, 606, 1401, 604,
	1405, 1066, 803, 1068, 1067, 1195, 1033, 336, 803, 603,
	1024, 1020, 314, 1151, 336, 1299, 1430, 743, 1380, 25,
	55, 246, 19, 18, 17, 20, 16, 15, 1420, 14,
	29, 1410, 13, 1411, 330, 336, 330, 1218, 12, 11,
	487, 10, 9, 1434, 8, 7, 6, 468, 5, 4,
	1191, 1438, 237, 22, 336, 2, 0, 0, 0, 0,
	1447, 0, 0, 0, 0, 0, 336, 336, 1353, 0,
	336, 0, 1451, 1452, 0, 86, 1456, 0, 226, 286,
	47, 1463, 0, 1450, 0, 0, 0, 336, 0, 0,
	0, 0, 1435, 823, 336, 0, 1468, 336, 1475, 0,
	250, 0, 86, 86, 1267, 336, 1473, 1474, 0, 0,
	0, 336, 0, 1269, 0, 0, 1493, 86, 0, 86,
	0, 0, 0, 0, 0, 86, 0, 47, 0, 0,
	0, 1272, 0, 0, 0, 239, 0, 0, 0, 0,
	330, 317, 0, 575, 0, 0, 1515, 0, 336, 0,
	1516, 0, 0, 0, 1518, 1513, 0, 0, 0, 0,
	737, 0, 0, 88, 0, 0, 0, 1462, 552, 0,
	0, 88, 0, 0, 0, 0, 577, 0, 0, 0,
	0, 336, 0, 0, 336, 1537, 0, 0, 1534, 1538,
	0, 0, 0, 1313, 0, 1313, 1313, 1313, 1491, 1319,
	900, 901, 903, 904, 905, 330, 582, 583, 584, 585,
	586, 587, 588, 589, 590, 591, 0, 0, 794, 796,
	914, 915, 916, 0, 0, 578, 0, 1313, 0, 0,
	592, 576, 0, 0, 812, 581, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1218, 1352, 86, 330, 330,
	0, 982, 0, 0, 1362, 0, 0, 1525, 0, 471,
	472, 473, 0, 476, 1365, 0, 0, 0, 0, 0,
	480, 516, 515, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 0, 838, 527, 0, 0, 0, 0,
	469, 469, 469, 469, 0, 469, 0, 0, 0, 1382,
	1383, 0, 469, 0, 0, 0, 0, 593, 0, 0,
	0, 0, 0, 1218, 0, 0, 0, 0, 0, 47,
	0, 0, 1402, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1529, 0, 537, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 86, 0, 0, 1313, 0, 0, 0, 86, 622,
	86, 0, 0, 0, 549, 0, 553, 554, 555, 556,
	557, 558, 559, 560, 561, 1437, 564, 566, 566, 566,
	566, 566, 566, 566, 566, 0, 594, 595, 596, 597,
	0, 0, 0, 0, 1218, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 1218, 1218, 0, 0,
	1218, 516, 515, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 0, 803, 527, 0, 1470, 0, 0,
	0, 0, 0, 0, 1472, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 1490, 0, 0, 1084, 0,
	0, 1496, 0, 0, 983, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 988, 989, 990, 528, 0,
	0, 0, 0, 0, 999, 0, 0, 0, 0, 1005,
	0, 86, 1006, 1007, 1008, 1009, 0, 86, 1218, 86,
	0, 0, 86, 0, 0, 86, 0, 702, 0, 711,
	0, 0, 0, 1127, 0, 0, 0, 0, 713, 714,
	715, 716, 717, 718, 719, 720, 0, 0, 0, 0,
	86, 330, 721, 722, 1418, 0, 0, 0, 0, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	469, 469, 469, 469, 469, 469, 469, 469, 711, 0,
	0, 0, 0, 0, 469, 469, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 1128, 0, 527,
	0, 0, 1130, 1123, 1124, 0, 1131, 1126, 1125, 0,
	0, 1133, 1129, 0, 0, 0, 0, 0, 0, 0,
	250, 212, 1132, 0, 0, 250, 250, 0, 1122, 804,
	804, 250, 0, 0, 0, 804, 0, 0, 528, 0,
	0, 0, 1230, 1232, 0, 222, 0, 0, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 250, 250, 250, 250, 0,
	86, 0, 804, 86, 86, 86, 86, 86, 0, 0,
	0, 0, 0, 1160, 0, 837, 0, 0, 86, 0,
	0, 0, 622, 0, 0, 207, 0, 86, 86, 0,
	0, 209, 0, 0, 0, 0, 0, 0, 215, 211,
	0, 0, 317, 317, 317, 317, 317, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 617, 0, 843,
	1207, 0, 0, 0, 0, 0, 317, 0, 213, 1282,
	1283, 217, 1284, 0, 0, 0, 1286, 0, 1288, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 86, 932, 86, 934, 0, 86, 0, 0,
	0, 0, 528, 208, 0, 955, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 1324, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 469, 0, 469, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 469, 210, 0,
	218, 219, 220, 221, 225, 0, 0, 0, 0, 224,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1279, 0, 0, 0, 0, 0, 0,
	1281, 0, 250, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 1290, 1291, 1292, 0, 0, 1295, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 1306, 1307, 0, 1310, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 23, 24,
	48, 26, 27, 0, 0, 0, 0, 1337, 1014, 1015,
	0, 0, 0, 1340, 0, 0, 0, 42, 0, 0,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	37, 0, 1074, 0, 50, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 1375, 0, 1072,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1386, 1387, 1388, 0, 0, 0, 0,
	0, 0, 0, 30, 31, 33, 32, 35, 1146, 1147,
	0, 0, 1142, 0, 0, 0, 86, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 250, 0, 0,
	0, 0, 0, 0, 469, 0, 0, 711, 1426, 1427,
	1428, 1429, 0, 0, 0, 38, 39, 0, 40, 41,
	0, 0, 804, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1192, 0, 47, 0, 0, 0, 1464, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 0, 1204,
	1205, 1206, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 1229, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 91, 0, 504, 0, 0,
	0, 0, 113, 86, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 1541, 1542, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 506, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 317, 0, 501, 500, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 622, 0,
	0, 502, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 86, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 1192, 0, 0, 1381, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 0, 1421, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 1192,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 415, 0, 385, 427, 360,
	375, 435, 377, 378, 407, 346, 393, 147, 372, 91,
	363, 340, 369, 341, 361, 387, 113, 359, 417, 396,
	126, 433, 129, 401, 0, 168, 138, 0, 0, 389,
	419, 391, 413, 384, 408, 351, 400, 428, 373, 404,
	429, 0, 0, 1524, 335, 0, 864, 865, 0, 0,
	0, 86, 0, 104, 0, 403, 424, 371, 406, 339,
	402, 0, 344, 347, 434, 422, 366, 367, 1045, 0,
	0, 0, 0, 0, 0, 388, 392, 410, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 364, 0, 399,
	0, 0, 0, 348, 345, 0, 386, 0, 0, 0,
	350, 1535, 365, 411, 0, 337, 414, 420, 383, 193,
	423, 381, 380, 154, 0, 107, 0, 172, 117, 374,
	127, 409, 426, 390, 418, 362, 370, 109, 368, 161,
	148, 184, 398, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	342, 0, 169, 186, 204, 205, 343, 358, 421, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 405, 162, 106, 185, 167, 354,
	357, 352, 353, 394, 395, 430, 431, 432, 412, 349,
	0, 355, 356, 0, 416, 121, 397, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 376, 338, 379, 0,
	0, 0, 0, 0, 0, 425, 415, 103, 385, 427,
	360, 375, 435, 377, 378, 407, 346, 393, 147, 372,
	91, 363, 340, 369, 341, 361, 387, 113, 359, 417,
	396, 126, 433, 129, 401, 0, 168, 138, 0, 0,
	389, 419, 391, 413, 384, 408, 351, 400, 428, 373,
	404, 429, 0, 0, 0, 335, 0, 864, 865, 0,
	0, 0, 0, 0, 104, 0, 403, 424, 371, 406,
	339, 402, 0, 344, 347, 434, 422, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 388, 392, 410, 382,
	0, 0, 0, 0, 0, 0, 0, 0, 364, 0,
	399, 0, 0, 0, 348, 345, 0, 386, 0, 0,
	0, 350, 0, 365, 411, 0, 337, 414, 420, 383,
	193, 423, 381, 380, 154, 0, 107, 0, 172, 117,
	374, 127, 409, 426, 390, 418, 362, 370, 109, 368,
	161, 148, 184, 398, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 1153, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 342, 0, 169, 186, 204, 205, 343, 358,
	421, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 405, 162, 106, 185,
	167, 354, 357, 352, 353, 394, 395, 430, 431, 432,
	412, 349, 0, 355, 356, 0, 416, 121, 397, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 376, 338,
	379, 0, 0, 0, 0, 0, 0, 425, 415, 103,
	385, 427, 360, 375, 435, 377, 378, 407, 346, 393,
	147, 372, 91, 363, 340, 369, 341, 361, 387, 113,
	359, 417, 396, 126, 433, 129, 401, 0, 168, 138,
	0, 0, 389, 419, 391, 413, 384, 408, 351, 400,
	428, 373, 404, 429, 50, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 403, 424,
	371, 406, 339, 402, 0, 344, 347, 434, 422, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 388, 392,
	410, 382, 0, 0, 0, 0, 0, 0, 0, 0,
	364, 0, 399, 0, 0, 0, 348, 345, 0, 386,
	0, 0, 0, 350, 0, 365, 411, 0, 337, 414,
	420, 383, 193, 423, 381, 380, 154, 0, 107, 0,
	172, 117, 374, 127, 409, 426, 390, 418, 362, 370,
	109, 368, 161, 148, 184, 398, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 342, 0, 169, 186, 204, 205, 343,
	358, 421, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 405, 162, 106,
	185, 167, 354, 357, 352, 353, 394, 395, 430, 431,
	432, 412, 349, 0, 355, 356, 0, 416, 121, 397,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 376,
	338, 379, 0, 0, 0, 0, 0, 0, 425, 415,
	103, 385, 427, 360, 375, 435, 377, 378, 407, 346,
	393, 147, 372, 91, 363, 340, 369, 341, 361, 387,
	113, 359, 417, 396, 126, 433, 129, 401, 0, 168,
	138, 0, 0, 389, 419, 391, 413, 384, 408, 351,
	400, 428, 373, 404, 429, 0, 0, 0, 255, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 403,
	424, 371, 406, 339, 402, 0, 344, 347, 434, 422,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 388,
	392, 410, 382, 0, 0, 0, 0, 0, 0, 754,
	0, 364, 0, 399, 0, 0, 0, 348, 345, 0,
	386, 0, 0, 0, 350, 0, 365, 411, 0, 337,
	414, 420, 383, 193, 423, 381, 380, 154, 0, 107,
	0, 172, 117, 374, 127, 409, 426, 390, 418, 362,
	370, 109, 368, 161, 148, 184, 398, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 342, 0, 169, 186, 204, 205,
	343, 358, 421, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 405, 162,
	106, 185, 167, 354, 357, 352, 353, 394, 395, 430,
	431, 432, 412, 349, 0, 355, 356, 0, 416, 121,
	397, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	376, 338, 379, 0, 0, 0, 0, 0, 0, 425,
	415, 103, 385, 427, 360, 375, 435, 377, 378, 407,
	346, 393, 147, 372, 91, 363, 340, 369, 341, 361,
	387, 113, 359, 417, 396, 126, 433, 129, 401, 0,
	168, 138, 0, 0, 389, 419, 391, 413, 384, 408,
	351, 400, 428, 373, 404, 429, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	403, 424, 371, 406, 339, 402, 0, 344, 347, 434,
	422, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	388, 392, 410, 382, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 0, 399, 0, 0, 0, 348, 345,
	0, 386, 0, 0, 0, 350, 0, 365, 411, 0,
	337, 414, 420, 383, 193, 423, 381, 380, 154, 0,
	107, 0, 172, 117, 374, 127, 409, 426, 390, 418,
	362, 370, 109, 368, 161, 148, 184, 398, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 342, 0, 169, 186, 204,
	205, 343, 358, 421, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 405,
	162, 106, 185, 167, 354, 357, 352, 353, 394, 395,
	430, 431, 432, 412, 349, 0, 355, 356, 0, 416,
	121, 397, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 376, 338, 379, 0, 0, 0, 0, 0, 0,
	425, 415, 103, 385, 427, 360, 375, 435, 377, 378,
	407, 346, 393, 147, 372, 91, 363, 340, 369, 341,
	361, 387, 113, 359, 417, 396, 126, 433, 129, 401,
	0, 168, 138, 0, 0, 389, 419, 391, 413, 384,
	408, 351, 400, 428, 373, 404, 429, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 403, 424, 371, 406, 339, 402, 0, 344, 347,
	434, 422, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 388, 392, 410, 382, 0, 0, 0, 0, 0,
	0, 0, 0, 364, 0, 399, 0, 0, 0, 348,
	345, 0, 386, 0, 0, 0, 350, 0, 365, 411,
	0, 337, 414, 420, 383, 193, 423, 381, 380, 154,
	0, 107, 0, 172, 117, 374, 127, 409, 426, 390,
	418, 362, 370, 109, 368, 161, 148, 184, 398, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 342, 0, 169, 186,
	204, 205, 343, 358, 421, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	405, 162, 106, 185, 167, 354, 357, 352, 353, 394,
	395, 430, 431, 432, 412, 349, 0, 355, 356, 0,
	416, 121, 397, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 376, 338, 379, 0, 0, 0, 0, 0,
	0, 425, 415, 103, 385, 427, 360, 375, 435, 377,
	378, 407, 346, 393, 147, 372, 91, 363, 340, 369,
	341, 361, 387, 113, 359, 417, 396, 126, 433, 129,
	401, 0, 168, 138, 0, 0, 389, 419, 391, 413,
	384, 408, 351, 400, 428, 373, 404, 429, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 403, 424, 371, 406, 339, 402, 0, 344,
	347, 434, 422, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 388, 392, 410, 382, 0, 0, 0, 0,
	0, 0, 0, 0, 364, 0, 399, 0, 0, 0,
	348, 345, 0, 386, 0, 0, 0, 350, 0, 365,
	411, 0, 337, 414, 420, 383, 193, 423, 381, 380,
	154, 0, 107, 0, 172, 117, 374, 127, 409, 426,
	390, 418, 362, 370, 109, 368, 161, 148, 184, 398,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 333,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 342, 0, 169,
	186, 204, 205, 343, 358, 421, 196, 197, 198, 199,
	0, 0, 0, 334, 332, 120, 165, 124, 131, 157,
	202, 405, 162, 106, 185, 167, 354, 357, 352, 353,
	394, 395, 430, 431, 432, 412, 349, 0, 355, 356,
	0, 416, 121, 397, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 376, 338, 379, 0, 0, 0, 0,
	0, 0, 425, 415, 103, 385, 427, 360, 375, 435,
	377, 378, 407, 346, 393, 147, 372, 91, 363, 340,
	369, 341, 361, 387, 113, 359, 417, 396, 126, 433,
	129, 401, 0, 168, 138, 0, 0, 389, 419, 391,
	413, 384, 408, 351, 400, 428, 373, 404, 429, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 403, 424, 371, 406, 339, 402, 0,
	344, 347, 434, 422, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 388, 392, 410, 382, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 0, 399, 0, 0,
	0, 348, 345, 0, 386, 0, 0, 0, 350, 0,
	365, 411, 0, 337, 414, 420, 383, 193, 423, 381,
	380, 154, 0, 107, 0, 172, 117, 374, 127, 409,
	426, 390, 418, 362, 370, 109, 368, 161, 148, 184,
	398, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 342, 0,
	169, 186, 204, 205, 343, 358, 421, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 405, 162, 106, 185, 167, 354, 357, 352,
	353, 394, 395, 430, 431, 432, 412, 349, 0, 355,
	356, 0, 416, 121, 397, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 376, 338, 379, 0, 0, 0,
	0, 0, 0, 425, 415, 103, 385, 427, 360, 375,
	435, 377, 378, 407, 346, 393, 147, 372, 91, 363,
	340, 369, 341, 361, 387, 113, 359, 417, 396, 126,
	433, 129, 401, 0, 168, 138, 0, 0, 389, 419,
	391, 413, 384, 408, 351, 400, 428, 373, 404, 429,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 403, 424, 371, 406, 339, 402,
	0, 344, 347, 434, 422, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 388, 392, 410, 382, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 0, 399, 0,
	0, 0, 348, 345, 0, 386, 0, 0, 0, 350,
	0, 365, 411, 0, 337, 414, 420, 383, 193, 423,
	381, 380, 154, 0, 107, 0, 172, 117, 374, 127,
	409, 426, 390, 418, 362, 370, 109, 368, 161, 148,
	184, 398, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 632, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 333, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 342,
	0, 169, 186, 204, 205, 343, 358, 421, 196, 197,
	198, 199, 0, 0, 0, 334, 332, 120, 165, 124,
	131, 157, 202, 405, 162, 106, 185, 167, 354, 357,
	352, 353, 394, 395, 430, 431, 432, 412, 349, 0,
	355, 356, 0, 416, 121, 397, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 376, 338, 379, 0, 0,
	0, 0, 0, 0, 425, 415, 103, 385, 427, 360,
	375, 435, 377, 378, 407, 346, 393, 147, 372, 91,
	363, 340, 369, 341, 361, 387, 113, 359, 417, 396,
	126, 433, 129, 401, 0, 168, 138, 0, 0, 389,
	419, 391, 413, 384, 408, 351, 400, 428, 373, 404,
	429, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 403, 424, 371, 406, 339,
	402, 0, 344, 347, 434, 422, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 388, 392, 410, 382, 0,
	0, 0, 0, 0, 0, 0, 0, 364, 0, 399,
	0, 0, 0, 348, 345, 0, 386, 0, 0, 0,
	350, 0, 365, 411, 0, 337, 414, 420, 383, 193,
	423, 381, 380, 154, 0, 107, 0, 172, 117, 374,
	127, 409, 426, 390, 418, 362, 370, 109, 368, 161,
	148, 184, 398, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 324, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 333, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	342, 0, 169, 186, 204, 205, 343, 358, 421, 196,
	197, 198, 199, 0, 0, 0, 334, 332, 327, 326,
	124, 131, 157, 202, 405, 162, 106, 185, 167, 354,
	357, 352, 353, 394, 395, 430, 431, 432, 412, 349,
	0, 355, 356, 0, 416, 121, 397, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 376, 338, 379, 147,
	0, 91, 791, 0, 257, 0, 0, 103, 113, 254,
	0, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 252, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 248, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 297, 307, 303, 304, 301, 302, 300, 299, 298,
	309, 289, 290, 291, 292, 294, 0, 121, 293, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 0, 0,
	0, 147, 0, 91, 0, 0, 257, 0, 305, 103,
	113, 254, 0, 0, 126, 296, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 482, 255, 275,
	274, 277, 278, 279, 280, 0, 0, 104, 276, 281,
	282, 283, 0, 0, 252, 268, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 0,
	0, 0, 0, 308, 0, 267, 0, 0, 263, 264,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 306, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 0, 0, 147, 0, 91, 0, 0, 257, 0,
	305, 103, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 248, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 0, 0, 147, 0, 91, 0, 0,
	257, 0, 305, 103, 113, 254, 0, 0, 126, 296,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 287,
	288, 0, 0, 0, 0, 0, 0, 855, 0, 50,
	0, 0, 255, 275, 274, 277, 278, 279, 280, 0,
	0, 104, 276, 281, 282, 283, 0, 0, 252, 268,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 265, 266, 0, 0, 0, 0, 308, 0, 267,
	0, 0, 263, 264, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	306, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 103, 147, 0, 91, 0,
	0, 257, 0, 0, 0, 113, 254, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 252,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 297, 307,
	303, 304, 301, 302, 300, 299, 298, 309, 289, 290,
	291, 292, 294, 0, 121, 293, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 0, 0, 147, 0,
	91, 0, 0, 257, 0, 305, 103, 113, 254, 0,
	0, 126, 296, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 287, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 255, 275, 274, 277, 278,
	279, 280, 0, 0, 104, 276, 281, 282, 283, 0,
	0, 252, 268, 0, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 265, 266, 0, 0, 0, 0,
	308, 0, 267, 0, 0, 263, 264, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 306, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	297, 307, 303, 304, 301, 302, 300, 299, 298, 309,
	289, 290, 291, 292, 294, 0, 121, 293, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 305, 103, 0,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	0, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 1539, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 305, 103, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 0,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 297, 307,
	303, 304, 301, 302, 300, 299, 298, 309, 289, 290,
	291, 292, 294, 0, 121, 293, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 305, 103, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 0,
	0, 527, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 0, 91, 0, 621, 0,
	0, 0, 0, 113, 528, 103, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 623, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 103, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 103, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 103, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 741, 0, 0, 742, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	641, 103, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 640,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	0, 91, 0, 621, 0, 0, 0, 0, 113, 0,
	103, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 623, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 619, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 0,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 103,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 147, 0,
	91, 0, 0, 0, 0, 0, 1523, 113, 103, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 1219, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 103, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 1314, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 103, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 103, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 623, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 103, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 506, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 103, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	701, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 0, 91, 0, 0, 0, 0, 0,
	599, 113, 0, 103, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 319, 156, 115,
	187, 0, 0, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 103, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 103, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 103, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 103, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 103, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	672, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 657, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 673,
	103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 0,
	686, 687, 0, 688, 689, 690, 674, 675, 676, 677,
	654, 656, 0, 592, 655, 658, 0, 670, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 671,
	678, 679, 680, 681, 682, 683, 684, 685, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	593,
}

var yyPact = [...]int{
	2232, -1000, -202, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1149, 1190, -1000, -1000, -1000, -1000, -1000, -1000, 1017,
	131, 294, 308, 63, 12165, 307, 1910, 12683, -1000, 79,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 951, -1000, -1000,
	-1000, -1000, -1000, 1135, 1146, 987, 1125, 1067, -1000, 6445,
	278, 10608, 11906, 5659, -1000, 739, 302, 291, 12424, 276,
	276, 12424, 276, -1000, -108, 305, 12683, -1000, 12683, 275,
	736, 275, 275, 275, 12683, -1000, 371, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12683, 730, 1097, 325,
	3692, 3692, 3692, 3692, 130, 3692, -56, 1033, -1000, -1000,
	-1000, -1000, 3692, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 687, 1098, 7240, 7240, 1149, -1000, 951,
	-1000, -1000, -1000, 1087, -1000, -1000, 487, 1167, -1000, 2515,
	370, -1000, 7240, 45, 918, -1000, -1000, 918, -1000, -1000,
	344, -1000, -1000, 7758, 7758, 7758, 7758, 7758, 7758, 7758,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 918, -1000, 6978, 918, 918, 918,
	918, 918, 918, 918, 918, 7240, 918, 918, 918, 918,
	918, 918, 918, 918, 918, 1388, 918, 918, 918, 918,
	11644, 924, 966, -1000, -1000, -1000, 1116, 8794, 9571, 12683,
	938, -1000, 928, 5378, -40, -1000, -1000, -1000, 432, 9312,
	-1000, -1000, -1000, 1096, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 866, -1000, 13091, 12424,
	12683, 819, 716, 441, 712, 1032, 12683, -1000, 11385, 3692,
	289, 12683, 1110, 1030, 12683, 705, 682, -1000, 5097, -1000,
	3692, 3692, 3692, 3692, 3692, 3692, 3692, 3692, -1000, -1000,
	-1000, -1000, -1000, -1000, 3692, 3692, -1000, -21, -1000, 12683,
	-1000, -1000, -1000, -1000, 1184, 395, 709, 369, 937, -1000,
	686, 1135, 687, 1067, 9053, 1026, -1000, -1000, 12683, -1000,
	7240, 7240, 715, -1000, 11126, -1000, -1000, 3973, 402, 7758,
	539, 421, 7758, 7758, 7758, 7758, 7758, 7758, 7758, 7758,
	7758, 7758, 7758, 7758, 7758, 7758, 7758, 588, 1388, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 679, -1000, 951,
	753, 753, -3, -3, -3, -3, -3, -3, 8017, 5921,
	687, 843, 599, 6978, 6445, 6445, 7240, 7240, 12942, 12942,
	6445, 1119, 458, 599, 12942, -1000, 687, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 29, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6445, 6445, 6445, 6445, 172, 12683,
	-1000, 12942, 10608, 10608, 10608, 10608, 10608, -1000, 1052, 1051,
	-1000, 1045, 1044, 1060, 12683, -1000, 840, 8794, 348, 918,
	-1000, 10867, -1000, -1000, 172, 853, 10608, 12683, -1000, -1000,
	4816, 928, -40, 920, -1000, -64, -92, 6707, 378, -1000,
	-1000, -1000, -1000, 3130, 533, 1015, -131, -7, -1000, -1000,
	-1000, -1000, 976, -1000, 976, 170, 976, 976, 976, 25,
	25, 25, 25, 25, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1016, 1000, -1000, 976, 976, 976, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 989, 224, 989, 977,
	977, 1009, 1115, -152, 669, 3692, 1108, 3692, 12683, -1000,
	950, 12683, -1000, 12683, -1000, -1000, 12683, 3692, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 475, -1000, -1000, -1000, -1000, 1061, 7240,
	7240, 4535, 7240, -1000, -1000, -1000, 1098, -1000, 1119, 1136,
	-1000, 1081, 1078, 6445, -1000, -1000, 402, 503, -1000, -1000,
	480, -1000, -1000, -1000, -1000, 363, 918, -1000, 1671, -1000,
	-1000, -1000, -1000, 539, 7758, 7758, 7758, 653, 1671, 1531,
	161, 1815, -3, 273, 273, -1, -1, -1, -1, -1,
	209, 209, -1000, -1000, -1000, -1000, 687, -1000, -1000, -1000,
	687, 6445, 926, -1000, -1000, 7240, -1000, 687, 837, 837,
	689, 469, 939, -1000, 361, 927, 837, 6445, 466, -1000,
	7240, 687, -1000, -1000, 837, 687, 837, 837, 922, 918,
	-1000, 923, -1000, 411, 966, 1005, 1028, 787, -1000, -1000,
	-1000, -1000, 1048, -1000, 978, -1000, -1000, -1000, -1000, -1000,
	300, 299, 296, 12424, -1000, 1164, 10608, 849, -1000, -1000,
	920, -40, -44, -1000, -1000, -1000, 599, -1000, -1000, 658,
	919, 2849, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	993, 1027, 12424, 205, 207, 268, 267, 654, -1000, -1000,
	-1000, 478, 1101, 1183, -1000, -1000, 203, -1000, 201, 918,
	622, 12683, 97, -1000, -207, -1000, -16, -1000, -1000, 590,
	25, 25, 976, 25, -1000, -1000, 378, 1095, 378, 378,
	378, 378, 619, 619, -157, -157, -1000, -1000, 584, 989,
	-1000, -1000, -1000, 571, -1000, 12683, 12424, 951, -1000, 4254,
	-1000, -1000, -1000, -1000, -1000, 1114, -1000, 437, 1798, 438,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 171, 311, -1000, 3692, -1000, 495, 12683, 12683, 1070,
	599, 599, 350, -1000, -1000, 12683, -1000, -1000, -1000, -1000,
	911, -1000, -1000, -1000, 3411, 6445, -1000, 653, 1671, 338,
	-1000, 7758, 7758, -1000, -1000, 837, 6445, 599, -1000, -1000,
	-1000, 994, 588, 994, 7758, 7758, 4535, 7758, 7758, -146,
	872, 422, -1000, 7240, 428, -1000, -1000, -1000, -1000, -1000,
	1023, 12942, 918, -1000, 8535, 12424, 1149, 12942, 7240, 7240,
	-1000, -1000, 7240, 988, -1000, 7240, -1000, -1000, -1000, 918,
	918, 918, 804, -1000, 1149, 849, -1000, -1000, -1000, -83,
	-72, -1000, -1000, 3130, -1000, 3130, 10090, 1178, 212, 260,
	-1000, 648, 646, -1000, 636, -1000, -1000, -1000, -185, -1000,
	-1000, -1000, -1000, -1000, -1000, 918, 985, 983, -1000, -95,
	-1000, -1000, 7240, -1000, 980, 1112, -1000, 1088, -1000, -1000,
	-1000, 795, 378, 378, 25, 378, -1000, 401, -1000, -1000,
	-1000, -1000, 830, -1000, 828, -1000, 52, 36, -1000, 903,
	-1000, 824, 917, 1021, -1000, 899, -1000, 410, 1132, 116,
	-1000, 202, -1000, 12424, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12424, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12683, -1000, -1000, -1000, -1000, -1000,
	12424, 220, -1000, -1000, 617, 7240, -1000, -1000, -1000, 4254,
	-1000, 1164, 10608, -1000, -1000, 687, -1000, 7758, 1671, 1671,
	-1000, -1000, 687, 976, 976, -1000, 976, 977, -1000, -1000,
	976, 68, 976, 67, 687, 687, 198, 817, -1000, 94,
	135, 918, -115, -1000, 599, 7240, -1000, 1102, 793, 883,
	-1000, -1000, 6183, 687, 818, 349, 804, 1135, -1000, 599,
	599, 599, 10349, 599, 10349, 10349, 10349, 8276, 12424, 1135,
	-1000, -1000, -1000, -1000, 2849, -1000, 802, -1000, 976, 976,
	347, 347, 200, 199, -1000, -1000, -1000, -1000, 227, 687,
	-1000, 572, -1000, 563, -1000, 526, 10349, -174, -1000, -1000,
	-1000, -1000, 378, -1000, -1000, -1000, 25, 614, 25, -20,
	-22, 566, -1000, 551, 10090, 12424, 12683, 4254, 3130, 286,
	1240, -1000, -1000, 12424, -1000, -1000, -1000, 973, -1000, -1000,
	-1000, -1000, 1104, 12424, -1000, -1000, 599, 1162, 888, -1000,
	1671, -1000, -1000, 192, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7758, 7758, -1000, 7758, 7758, 7758, 687,
	598, 599, 193, -1000, 918, -1000, -1000, 892, 12424, 12424,
	-1000, -1000, 788, -1000, -1000, 786, 786, 786, 348, -1000,
	-1000, 146, 10090, -1000, -1000, 1011, -1000, -1000, 470, 121,
	1007, 12424, 971, 28, -157, -1000, -1000, -1000, -1000, -1000,
	110, 767, 968, -1000, 378, -1000, 378, -1000, -1000, 778,
	711, 746, 959, 948, -1000, -1000, 12424, -1000, -1000, -1000,
	-1000, -1000, 945, 10349, 918, 259, 1160, 1140, -1000, -1000,
	258, 258, 258, 258, 73, -1000, -1000, 1182, -1000, 918,
	-1000, 951, 343, -1000, 12424, -1000, -1000, -1000, -1000, -1000,
	146, -1000, 633, 408, 596, -162, -1000, 1181, -1000, -1000,
	1175, 944, -1000, 10090, -1000, -1000, -1000, -143, -1000, -1000,
	-1000, -1000, -1000, -1000, 1164, 10090, 10090, 773, -1000, 10090,
	723, 157, 183, -1000, 7240, 7240, -1000, -1000, -1000, -1000,
	687, 109, -164, 12942, 883, 687, 12424, -1000, -1000, -1000,
	528, -1000, -1000, 12424, 347, 347, 12424, 720, -1000, 569,
	-1000, 710, 678, -151, 12424, 7240, 665, 819, 662, -1000,
	12424, 943, 599, 832, -1000, 1064, -149, -168, 806, -1000,
	-1000, -1000, -1000, -1000, -1000, 652, -1000, -1000, 54, 582,
	525, 520, 519, -39, -1000, 1138, 1164, -1000, -1000, -200,
	-1000, 599, -1000, -152, -1000, 157, 1077, 10090, -1000, 1056,
	-1000, 216, 513, -1000, 500, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9830, -1000, 7240, -1000, -1000, 139, 640, -154,
	12683, -1000, -1000, -1000, 336, 599, 133, -1000, -165, 942,
	4254, 918, -169, 12424, -1000, 7499, -1000, 630, 258, 687,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1405, 60, 682, 1403, 1402, 1399, 1398, 1396, 1395,
	1394, 1392, 1391, 1389, 1388, 1382, 1380, 1379, 1377, 1376,
	1375, 1374, 1373, 1372, 338, 1371, 1370, 1369, 75, 1367,
	81, 1366, 1365, 44, 131, 43, 39, 92, 1363, 27,
	74, 68, 1362, 52, 1361, 1360, 83, 1359, 67, 1349,
	1347, 161, 1346, 1345, 19, 18, 1344, 46, 1342, 1341,
	78, 3, 1339, 1336, 1335, 1334, 1333, 1331, 53, 5,
	13, 20, 21, 1330, 29, 9, 1329, 58, 1328, 1327,
	1324, 1322, 41, 1321, 54, 1320, 42, 51, 1318, 14,
	65, 33, 25, 12, 82, 56, 1317, 32, 66, 49,
	1316, 1314, 597, 1313, 1312, 1311, 1307, 1305, 1304, 714,
	592, 1299, 1294, 1293, 34, 0, 340, 7, 80, 1291,
	45, 1290, 1390, 76, 73, 23, 1289, 50, 1397, 37,
	1288, 1287, 40, 70, 1286, 98, 93, 1284, 1282, 1281,
	1277, 1276, 895, 28, 59, 36, 1275, 1273, 1272, 15,
	47, 26, 48, 55, 1271, 1269, 1268, 31, 1263, 11,
	16, 1, 57, 1262, 1254, 1253, 1247, 30, 24, 1245,
	17, 6, 10, 1244, 1243, 4, 1241, 22, 1235, 2,
	1234, 8, 1232, 1230, 1229, 1228, 1227, 1225, 1224, 1223,
	1216, 1212, 1211, 1204, 1429, 1017, 1199, 1198, 1197, 1196,
	90,
}

var yyR1 = [...]int{
	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 196,
	196, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 183,
	183, 183, 184, 184, 184, 184, 184, 184, 186, 186,
	187, 187, 120, 120, 181, 181, 180, 179, 179, 178,
	178, 177, 188, 188, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 190, 190, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 143, 143, 143,
	143, 143, 189, 189, 185, 185, 185, 185, 185, 138,
	138, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 137, 137, 137, 137, 137, 137, 139, 139, 139,
	139, 139, 135, 135, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 141, 141, 141, 141, 141, 141,
	141, 141, 152, 152, 142, 142, 150, 150, 151, 151,
	151, 149, 149, 149, 146, 146, 147, 147, 148, 148,
	148, 144, 144, 144, 145, 145, 145, 155, 155, 173,
	173, 172, 172, 172, 172, 163, 163, 169, 169, 169,
	169, 169, 169, 169, 162, 162, 171, 171, 170, 170,
	157, 157, 157, 157, 157, 158, 159, 159, 159, 159,
	156, 160, 160, 161, 161, 166, 166, 166, 167, 167,
	167, 168, 168, 168, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 197, 197, 198,
	198, 198, 198, 198, 198, 198, 176, 174, 174, 175,
	175, 13, 14, 14, 14, 14, 14, 15, 15, 17,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 107, 107, 104, 104, 105, 105, 106,
	106, 106, 108, 108, 108, 131, 131, 131, 19, 19,
	21, 21, 22, 23, 20, 20, 20, 20, 20, 199,
	24, 25, 25, 26, 26, 26, 30, 30, 30, 28,
	28, 29, 29, 35, 35, 34, 34, 36, 36, 36,
	36, 119, 119, 119, 118, 118, 38, 38, 39, 39,
	40, 40, 41, 41, 41, 53, 53, 89, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 126, 126, 125, 125, 125, 124, 124, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 103, 103, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	200, 200, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 129, 129, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 78, 78, 32, 32, 76, 76,
	77, 79, 79, 75, 75, 75, 60, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 92, 92, 70, 70,
	72, 72, 71, 73, 93, 93, 97, 94, 94, 98,
	98, 98, 96, 96, 96, 121, 121, 121, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 116, 116, 117, 117, 122, 122, 123, 123, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 194, 195, 127, 128, 128,
	128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 3, 3, 4, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 5,
	8, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 2,
	3, 1, 0, 2, 0, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 3, 3,
	2, 1, 1, 1, 4, 4, 4, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 1, 0, 1, 0, 2,
	1, 0, 3, 3, 0, 1, 2, 5, 4, 1,
	2, 2, 3, 2, 3, 0, 1, 2, 3, 3,
	2, 3, 2, 2, 1, 1, 1, 3, 2, 2,
	1, 4, 4, 7, 7, 13, 1, 1, 2, 2,
	7, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 7, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -194, 8, 259,
	52, -193, 289, -82, 15, -26, 5, -24, -199, -24,
	-24, -24, -24, -24, -164, 52, -120, -188, 150, 251,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 251, 117, 118, -51, -122, 55, -115, 157,
	268, 20, 163, 176, 177, 168, 202, 192, 269, 155,
	189, 193, 238, 288, 64, 166, 247, 126, 161, 138,
	187, 183, 180, 27, 208, 275, 182, 129, 209, 213,
	239, 266, 173, 174, 241, 206, 31, 131, 270, 33,
	146, 242, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 237, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 274, 243, 179, 145,
	159, 140, 246, 154, 167, 240, 175, 249, 36, 223,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 248, 224, 276, 196, 194,
	190, 191, 153, 120, 150, 151, 230, 231, 232, 233,
	271, 272, 244, 188, 225, 226, 118, 105, 193, 111,
	228, 119, 31, 148, -131, 118, -104, 151, 230, 231,
	232, 233, 55, 240, 239, 234, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -194,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -194, 42, 43, 260,
	261, 262, 263, 267, 264, 74, 32, 250, 258, 257,
	256, 254, 255, 252, 253, 287, 123, 251, 100, 259,
	-102, -39, -40, -41, -42, -53, -74, -194, -51, 11,
	-46, -51, -94, -130, 165, -98, 240, 239, -117, -96,
	-116, -114, 238, 193, 237, 55, -115, 116, 278, 70,
	22, 24, 221, 227, 73, 105, 16, 74, 104, 260,
	111, 46, 252, 253, 250, 262, 263, 251, 228, 28,
	10, 25, 136, 21, 98, 113, 77, 78, 139, 23,
	137, 68, 19, 49, 130, 11, 277, 13, 14, 279,
	123, 122, 89, 119, 44, 8, 107, 26, 86, 40,
	134, 42, 87, 17, 254, 255, 30, 267, 143, 100,
	47, 34, 71, 66, 50, 245, 69, 15, 45, 132,
	88, 114, 259, 43, 117, 6, 265, 29, 135, 41,
	118, 229, 76, 121, 67, 5, 133, 9, 48, 51,
	256, 257, 258, 32, 75, 12, -165, -153, 55, 119,
	120, -116, -110, 123, -110, -116, -110, 259, 118, -51,
	-51, -109, 123, 55, -109, -109, -109, -51, 108, -51,
	55, 29, 251, 55, 148, 118, 149, 120, -128, -194,
	-117, -128, -128, -128, 152, 153, -128, -105, 235, 50,
	-128, -195, 54, -87, 19, 30, -37, -122, -83, -84,
	-37, -82, -2, -24, 34, -28, 21, 63, 11, -119,
	70, 69, 86, -118, 22, -116, 57, 108, -37, -58,
	89, 71, 87, 88, 73, 91, 90, 101, 94, 95,
	96, 97, 98, 99, 100, 92, 93, 104, 287, 79,
	80, 81, 82, 83, 84, 85, -103, -194, -74, -194,
	109, 110, -61, -61, -61, -61, -61, -61, -61, -194,
	-2, -69, -37, -194, -194, -194, -194, -194, -194, -194,
	-194, -194, -78, -37, -194, -200, -194, -200, -200, -200,
	-200, -200, -200, -200, -133, 105, 193, 138, 187, -136,
	-135, 197, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 192, 269, -194, -194, -194, -194, -52, 26,
	-51, 29, 53, -47, -49, -48, -50, 40, 44, 46,
	41, 42, 43, 47, -126, 22, -39, -194, -125, 144,
	-124, 22, -122, 57, -51, -46, -196, 53, 11, 51,
	53, -94, 165, -95, -99, 241, 243, 79, -121, -116,
	57, 28, 29, 54, 53, -154, -134, -138, -135, -140,
	-139, -141, -136, -137, 189, 193, 190, 105, 194, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	196, 208, 29, 138, 185, 186, 187, 188, 209, 210,
	211, 212, 213, 214, 215, 216, 179, 180, 182, 183,
	184, -116, -51, -181, 51, 55, 71, 55, 50, -51,
	-51, 245, -128, 121, -51, 23, 50, -51, 55, 55,
	-123, -122, -114, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -128, -107, 229, 236, -51, 9, 89, 53,
	18, 108, 53, -85, 24, 25, -86, -195, -30, -62,
	-116, 58, 61, -29, 41, -51, -37, -37, -67, 66,
	71, 67, 68, -118, 96, -123, -117, -114, -61, -68,
	-71, -74, 62, 89, 87, 88, 73, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -129, 55, 57, -133, 55, -60, -60, -116,
	-35, 21, -34, -36, -195, 53, -195, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	75, -75, -195, 191, -34, -35, -34, -34, -90, 144,
	-51, -93, -97, -75, -40, -41, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -48, -122, -195, -54,
	48, 122, 49, -194, -124, -90, 51, -39, -51, -98,
	-95, 53, 242, 244, 245, 50, -37, -145, 105, 104,
	-166, -167, -168, -117, 57, 58, -153, -155, -157, -156,
	-169, -158, 126, 124, 128, 129, 133, -162, 119, 134,
	66, 71, 28, 50, 221, 227, 124, 134, 133, 288,
	64, 127, 277, -148, 290, 217, -146, 224, -142, 52,
	-142, -142, 191, -142, -142, -142, -144, 193, -144, -144,
	-144, -144, 52, 52, -142, -142, -142, -150, 52, 181,
	-150, -150, -151, 52, -151, 50, 51, 22, -179, 271,
	-180, 55, -128, 23, -128, -51, -111, 116, 113, 114,
	-176, 112, 221, 193, 64, 28, 15, 260, 144, 276,
	55, 145, -51, -51, -51, -128, -106, 11, 89, 36,
	-37, -37, -123, -84, -87, -101, 19, 11, 32, 32,
	-34, 66, 67, 68, 108, -194, -68, -61, -61, -61,
	-33, 139, 70, -195, -195, -34, 53, -37, -195, -195,
	-195, 53, 51, 22, 53, 11, 108, 53, 11, -195,
	-34, -79, -77, 77, -37, -195, -195, -195, -195, -195,
	-59, 29, 32, -2, -194, -194, -55, 53, 12, 79,
	-44, -43, 50, 51, -45, 50, -43, 40, 40, 119,
	119, 119, -91, -116, -55, -39, -55, -99, -100, 246,
	243, 249, 55, 53, -168, 79, 52, 50, -160, -116,
	134, -162, -162, 55, -162, 55, 55, 66, 57, 58,
	59, 66, -143, 65, -57, 218, 250, 253, 252, 9,
	134, 134, -194, 57, -122, -190, 278, 16, 291, -147,
	225, 58, -144, -144, -142, -144, -145, 29, -145, -145,
	-145, -145, -152, 57, -152, -149, 271, 272, -149, 58,
	-150, 58, -51, -116, -2, -178, -177, -117, -183, 22,
	-127, -120, -198, 150, 125, 130, 129, 55, 124, 128,
	144, -182, 150, 125, 126, 130, 129, 55, 119, 134,
	124, 128, 144, 133, -112, -113, 121, 22, 119, 134,
	144, 116, -128, -108, 87, 12, -122, -122, 37, 108,
	-51, -38, 11, 96, -117, -35, -33, 70, -61, -61,
	-195, -36, -132, 105, 189, 138, 187, 183, 206, 207,
	195, 223, 185, 224, -129, -132, -61, -61, -117, -61,
	-61, 268, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -194, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -194, -194, -194, -195, 53, -82,
	-55, 243, 247, 248, -167, -168, -171, -170, -116, 134,
	10, 9, 130, 124, 55, 55, 55, -185, 287, -194,
	-142, 52, -142, 52, -143, -37, 52, 22, 28, 54,
	-145, -145, -144, -145, 55, 105, 54, 53, 54, 185,
	185, 53, 54, 53, 52, 51, 50, 53, 79, -184,
	19, 158, 159, -197, 119, 134, -127, -116, -127, -116,
	-51, -127, -116, 126, -157, 57, -37, -55, -39, -195,
	-61, -195, -142, -142, -142, -151, -142, 174, -142, 174,
	-195, -195, -195, 53, 19, -195, 53, 19, -194, -32,
	265, -37, 27, -92, 53, -195, -195, -195, 53, 108,
	-195, -86, -89, -116, 134, -89, -89, -89, -125, -116,
	-86, 54, 53, -142, -142, -159, 154, 155, 29, 156,
	-159, 134, 134, 193, 186, 219, 197, -195, 54, 54,
	-195, -89, 279, -145, -144, 57, -144, 226, 226, 58,
	58, -171, -116, -51, -177, -168, 121, 20, 6, 8,
	9, 10, -116, 52, 26, -116, -80, 13, -144, 55,
	-61, -61, -61, -61, -61, -195, 57, 134, -72, 32,
	-2, -194, -116, -116, 53, 54, -195, -195, -195, -54,
	-173, -172, 51, 131, 64, 271, -170, 50, 66, 157,
	50, -160, -116, 52, 191, -149, -189, 156, 54, 52,
	-145, -145, 54, 54, 54, 52, 52, -161, -116, 52,
	-89, -194, 124, -81, 14, 16, -195, -195, -195, -195,
	-31, 89, 271, 9, -70, -2, 108, -116, -172, 55,
	-163, 79, 57, 273, 9, 10, 52, -171, 266, -191,
	-55, -171, -171, -186, 53, 51, -171, 54, -174, -175,
	144, 134, -37, -69, -195, 269, 47, 274, -93, -195,
	-116, 58, -116, -159, -159, -161, 54, 54, 164, 281,
	282, 143, 283, 156, 284, 285, 54, 54, -187, 271,
	-116, -37, 54, -181, -195, 53, -116, 52, 37, 270,
	275, 54, 271, 58, 16, 58, 58, 58, 58, 282,
	143, 284, 16, -55, 288, -179, -175, 32, -171, 37,
	127, 58, 58, 286, -122, -37, 146, 54, 271, -51,
	108, 147, 274, 52, -117, -194, 275, -161, -61, 143,
	54, -195, -195,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 621, 0, 379, 379, 379, 379, 379, 379, 0,
	-2, 674, 0, 0, 0, 0, -2, 369, 370, 0,
	372, 373, 917, 917, 917, 917, 917, 0, 33, 34,
	915, 1, 3, 629, 0, 0, 383, 386, 381, 0,
	674, 0, 0, 0, 60, 0, 0, 0, 0, 672,
	672, 0, 672, 83, 0, 0, 0, 675, 0, 670,
	0, 670, 670, 670, 0, 328, 451, 695, 696, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 0, 0, 0, 0,
	918, 918, 918, 918, 0, 918, 357, 346, 348, 349,
	350, 351, 918, 366, 367, 356, 368, 371, 374, 375,
	376, 377, 378, 27, 633, 0, 0, 621, 29, 0,
	379, 384, 385, 389, 387, 388, 380, 0, 397, 401,
	0, 459, 0, 464, 466, -2, -2, 0, 501, 502,
	503, 504, 505, 0, 0, 0, 0, 0, 0, 0,
	529, 530, 531, 532, 606, 607, 608, 609, 610, 611,
	612, 613, 468, 469, 603, 653, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 594, 0, 560, 560, 560,
	560, 560, 560, 560, 560, 0, 0, 0, 0, 0,
	0, 0, 408, 410, 411, 412, 432, 0, 434, 0,
	0, 41, 45, 0, 891, 657, -2, -2, 0, 0,
	693, 694, -2, 810, -2, 691, 692, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 0, 96, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 93, 0, 918,
	0, 0, 0, 0, 0, 0, 0, 327, 0, 329,
	918, 918, 918, 918, 918, 918, 918, 918, 338, 919,
	920, 339, 340, 341, 918, 918, 343, 0, 358, 0,
	352, 28, 916, 22, 0, 0, 630, 0, 622, 623,
	626, 629, 27, 386, 0, 391, 390, 382, 0, 398,
	0, 0, 0, 402, 0, 404, 405, 0, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 486,
	487, 488, 489, 490, 491, 492, 465, 0, 479, 0,
	0, 0, 521, 522, 523, 524, 525, 526, 0, 393,
	27, 0, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 595, 0, 551, 0, 552, 553, 554,
	555, 556, 557, 558, 559, 587, 0, 589, 590, 591,
	592, 593, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 182, 183, 0, 393, 0, 0, 43, 0,
	450, 0, 0, 0, 0, 0, 0, 439, 0, 0,
	442, 0, 0, 0, 0, 433, 0, 0, 453, 858,
	435, 0, 437, 438, -2, 0, 0, 0, 39, 40,
	0, 46, 891, 48, 49, 0, 0, 0, 234, 665,
	666, 667, 663, 275, 0, 101, 228, 224, 103, 104,
	105, 106, 214, 160, 214, 214, 214, 214, 214, 231,
	231, 231, 231, 231, 195, 196, 197, 198, 199, 200,
	201, 0, 0, 177, 214, 214, 214, 181, 204, 205,
	206, 207, 208, 209, 210, 211, 216, 216, 216, 218,
	218, 0, 0, 87, 0, 918, 0, 918, 0, 94,
	0, 0, 294, 0, 322, 671, 0, 918, 325, 326,
	452, 697, 698, 330, 331, 332, 333, 334, 335, 336,
	337, 342, 345, 359, 353, 354, 347, 634, 0, 0,
	0, 0, 0, 625, 627, 628, 633, 30, 389, 0,
	614, 0, 0, 0, 392, 25, 460, 461, 463, 480,
	0, 482, 484, 403, 399, 0, 604, -2, 470, 471,
	495, 496, 497, 0, 0, 0, 0, 493, 475, 0,
	506, 507, 508, 509, 510, 511, 512, 513, 514, 515,
	516, 517, 520, 571, 572, 528, 0, 518, 519, 527,
	0, 0, 394, 395, 498, 0, 652, 27, 0, 0,
	0, 0, 0, 603, 0, 0, 0, 0, 601, 598,
	0, 0, 561, 588, 0, 0, 0, 0, 0, 0,
	449, 457, 654, 0, 409, 428, 430, 0, 425, 440,
	441, 443, 0, 445, 0, 447, 448, 413, 414, 415,
	0, 0, 0, 0, 436, 457, 0, 457, 42, 658,
	47, 0, 0, 52, 53, 659, 660, 661, 235, 0,
	95, 276, 278, 281, 282, 283, 97, 98, 99, 100,
	0, 260, 271, 0, 0, 0, 0, 0, 254, 255,
	108, 0, 0, 0, 117, 118, 0, 120, 122, 0,
	0, 0, 0, 107, 0, 230, 226, 225, 159, 0,
	231, 231, 214, 231, 188, 189, 234, 0, 234, 234,
	234, 234, 0, 0, 221, 221, 180, 171, 0, 216,
	173, 174, 175, 0, 176, 0, 0, 0, 65, 0,
	85, 86, 66, 673, 67, 69, 917, 82, 0, 686,
	295, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 0, 0, 321, 918, 324, 362, 0, 0, 0,
	631, 632, 0, 624, 23, 0, 668, 669, 615, 616,
	406, 481, 483, 485, 0, 393, 472, 493, 476, 0,
	473, 0, 0, 467, 533, 0, 0, 500, -2, 536,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	621, 0, 599, 0, 0, 550, 562, 563, 564, 565,
	646, 0, 0, -2, 0, 0, 621, 0, 0, 0,
	422, 429, 0, 0, 423, 0, 424, 444, 446, 0,
	0, 0, 0, 420, 621, 457, 38, 50, 51, 0,
	0, 57, 236, 0, 279, 0, 0, 0, 0, 272,
	247, 0, 0, 250, 0, 252, 253, 109, 154, 111,
	112, 113, 114, 115, 125, 0, 214, 214, 151, 0,
	119, 121, 0, 124, 127, 0, 131, 0, 229, 102,
	227, 0, 234, 234, 231, 234, 190, 0, 191, 192,
	193, 194, 0, 212, 0, 178, 0, 0, 179, 0,
	172, 0, 0, 0, -2, 88, 89, 0, 72, 0,
	284, 0, 917, 0, 309, 310, 311, 312, 313, 314,
	315, 917, 0, 296, 297, 298, 299, 300, 301, 302,
	303, 304, 305, 306, 0, 917, 687, 688, 689, 690,
	0, 0, 323, 344, 0, 0, 360, 361, 635, 0,
	24, 457, 0, 400, 605, 0, 474, 0, 494, 477,
	534, 396, 0, 214, 214, 576, 214, 218, 579, 580,
	214, 582, 214, 585, 0, 0, 0, 0, 604, 0,
	0, 0, 596, 549, 602, 0, 31, 0, 646, 636,
	648, 650, 0, 27, 0, 642, 0, 629, 655, 458,
	656, 426, 0, 431, 0, 0, 0, 434, 0, 629,
	37, 54, 55, 56, 277, 280, 0, 256, 214, 214,
	0, 0, 0, 0, 248, 249, 251, 110, 0, 0,
	147, 0, 149, 0, 116, 0, 0, 0, 132, 215,
	184, 185, 234, 186, 232, 233, 231, 0, 231, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 71, 0, 307, 308, 288, 0, 289, 291,
	292, 293, 0, 271, 287, 363, 364, 617, 407, 535,
	478, 538, 573, 231, 577, 578, 581, 583, 584, 586,
	540, 539, 541, 0, 0, 544, 0, 0, 0, 0,
	0, 600, 0, 32, 0, 651, -2, 0, 0, 0,
	44, 35, 0, 417, 418, 0, 0, 0, 453, 421,
	36, 238, 0, 258, 259, 261, 266, 267, 0, 0,
	262, 271, 0, 0, 221, 157, 158, 126, 148, 150,
	152, 0, 129, 187, 234, 213, 234, 222, 223, 0,
	0, 0, 0, 0, 90, 91, 0, 73, 74, 75,
	76, 77, 0, 0, 0, 272, 619, 0, 574, 575,
	0, 0, 0, 0, 566, 548, 597, 0, 649, 0,
	-2, 0, 644, 643, 0, 427, 454, 455, 456, 416,
	237, 239, 0, 245, 0, 0, 257, 0, 268, 269,
	0, 0, 272, 0, 155, 156, 123, 0, 128, 133,
	202, 203, 217, 220, 457, 0, 0, 78, 273, 0,
	0, 0, 0, 26, 0, 0, 542, 543, 545, 546,
	0, 0, 0, 0, 639, 27, 0, 419, 240, 241,
	0, 246, 243, 0, 0, 0, 0, 0, 153, 0,
	61, 0, 0, 80, 0, 0, 0, 84, 0, 317,
	0, 0, 620, 618, 547, 0, 0, 0, 647, -2,
	645, 242, 244, 263, 264, 0, 270, 130, 0, 0,
	0, 0, 0, 0, 144, 0, 457, 62, 68, 0,
	274, 79, 285, 87, 316, 0, 0, 0, 567, 0,
	570, 0, 0, 135, 0, 137, 138, 139, 140, 141,
	142, 143, 0, 63, 0, 290, 318, 0, 0, 568,
	0, 134, 136, 145, 0, 81, 0, 286, 0, 0,
	0, 0, 0, 0, 146, 0, 569, 0, 0, 0,
	265, 319, 320,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 289,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 290, 3, 291, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:328
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:333
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:334
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:338
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:361
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:369
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:373
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:379
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:386
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:392
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:396
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:402
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:406
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:413
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:425
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:437
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:441
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:447
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:453
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:466
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:467
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:471
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:475
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:480
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:484
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:494
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:508
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:512
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:518
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:544
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:550
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:554
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:560
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:565
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:581
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:596
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:611
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:627
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:631
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:635
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:647
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:651
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:660
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:664
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:676
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:680
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:685
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:689
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:698
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:703
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:707
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:712
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:716
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:722
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:727
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:732
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:738
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:743
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:749
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:754
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:758
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:764
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:771
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:778
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:783
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:787
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:791
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:795
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:801
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:806
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:817
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:834
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:839
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:844
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:849
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:859
		{
			yyDollar[1].columnType.Default = yyDollar[3].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:864
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:869
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:874
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:884
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:894
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:899
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:904
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:910
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:915
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:920
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:925
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:930
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:936
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:942
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:950
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:954
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:959
		{
			yyVAL.sequence = &Sequence{}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:963
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:968
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:973
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:978
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:983
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:988
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:993
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:998
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1008
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1013
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1018
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1023
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1030
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1034
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1042
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1046
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1051
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1060
		{
			yyVAL.bytes = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1075
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1081
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1085
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1089
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1093
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1097
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1101
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1105
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1109
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1113
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1117
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1129
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1141
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1147
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1153
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1161
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1165
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1173
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1177
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1193
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1197
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1201
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1205
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1209
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1213
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1225
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1237
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1241
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1249
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1253
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1310
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1315
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1320
		{
			yyVAL.optVal = nil
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1324
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1329
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1333
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1341
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1345
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1351
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1359
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1363
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1367
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1372
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1376
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1381
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1385
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1390
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1394
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1398
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1403
		{
			yyVAL.str = ""
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1407
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1411
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1416
		{
			yyVAL.str = ""
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1420
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1424
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1430
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1434
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1440
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1444
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1450
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1454
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1459
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1463
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1469
		{
			yyVAL.str = ""
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1473
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1479
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1483
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1487
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1491
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1495
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1499
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1503
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1509
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1513
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1519
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1523
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1529
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1534
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1541
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1547
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1553
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1559
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 265:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1567
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1583
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1587
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1591
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 270:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1597
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true},
				Columns: yyDollar[6].indexColumns,
			}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1605
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1612
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1621
		{
			yyVAL.str = ""
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1625
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1629
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1637
		{
			yyVAL.str = yyDollar[1].str
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1641
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1645
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1651
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1655
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1665
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1669
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 286:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1683
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1697
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1706
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1710
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1714
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1727
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1737
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1742
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1747
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1783
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1793
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 319:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1799
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 320:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1803
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1809
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1815
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1823
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1828
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1836
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1840
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1846
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1850
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1855
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1861
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1865
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1869
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1874
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1878
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1882
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1886
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1890
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1894
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1898
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1902
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1906
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1910
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1914
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1918
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1928
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1932
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1936
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1940
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1944
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1948
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1952
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1962
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1968
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1978
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.str = "extended "
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1988
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1992
		{
			yyVAL.str = "full "
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1998
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2002
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2006
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2012
		{
			yyVAL.showFilter = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2016
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2020
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.str = SessionStr
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2034
		{
			yyVAL.str = GlobalStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2040
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2044
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2050
		{
			yyVAL.statement = &Begin{}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2054
		{
			yyVAL.statement = &Begin{}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2060
		{
			yyVAL.statement = &Commit{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2066
		{
			yyVAL.statement = &Rollback{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2072
		{
			yyVAL.statement = &OtherRead{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2076
		{
			yyVAL.statement = &OtherRead{}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2080
		{
			yyVAL.statement = &OtherRead{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2084
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2088
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2093
		{
			setAllowComments(yylex, true)
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2097
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2103
		{
			yyVAL.bytes2 = nil
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2107
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2113
		{
			yyVAL.str = UnionStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2117
		{
			yyVAL.str = UnionAllStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2121
		{
			yyVAL.str = UnionDistinctStr
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2126
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2130
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2134
		{
			yyVAL.str = SQLCacheStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2139
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2143
		{
			yyVAL.str = DistinctStr
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2148
		{
			yyVAL.str = ""
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2152
		{
			yyVAL.str = StraightJoinHint
		}
	case 393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2157
		{
			yyVAL.selectExprs = nil
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2161
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2167
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2171
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2177
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2181
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2185
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2189
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2194
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2198
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2202
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2209
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2214
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2218
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2224
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2228
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2246
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2252
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 416:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2256
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2262
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2267
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2271
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2281
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2294
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2298
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2302
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2306
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2312
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2314
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2318
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2320
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2324
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2326
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2329
		{
			yyVAL.empty = struct{}{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2331
		{
			yyVAL.empty = struct{}{}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2334
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2338
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2342
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2349
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2355
		{
			yyVAL.str = JoinStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2359
		{
			yyVAL.str = JoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2363
		{
			yyVAL.str = JoinStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2369
		{
			yyVAL.str = StraightJoinStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2375
		{
			yyVAL.str = LeftJoinStr
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2379
		{
			yyVAL.str = LeftJoinStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2383
		{
			yyVAL.str = RightJoinStr
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2387
		{
			yyVAL.str = RightJoinStr
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2393
		{
			yyVAL.str = NaturalJoinStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2397
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2407
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2411
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2417
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2421
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2426
		{
			yyVAL.indexHints = nil
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2430
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 455:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2434
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 456:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2438
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2443
		{
			yyVAL.expr = nil
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2447
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2477
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2483
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2487
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2493
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2497
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2511
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2515
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 474:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2519
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2523
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2527
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2531
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2535
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2539
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2545
		{
			yyVAL.str = IsNullStr
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2549
		{
			yyVAL.str = IsNotNullStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2553
		{
			yyVAL.str = IsTrueStr
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2557
		{
			yyVAL.str = IsNotTrueStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2561
		{
			yyVAL.str = IsFalseStr
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2565
		{
			yyVAL.str = IsNotFalseStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2571
		{
			yyVAL.str = EqualStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2575
		{
			yyVAL.str = LessThanStr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2579
		{
			yyVAL.str = GreaterThanStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2583
		{
			yyVAL.str = LessEqualStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2587
		{
			yyVAL.str = GreaterEqualStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2591
		{
			yyVAL.str = NotEqualStr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2595
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 493:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2600
		{
			yyVAL.expr = nil
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2604
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2610
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2614
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2618
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2624
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2630
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2634
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2640
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2644
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2648
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2652
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2656
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2696
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2700
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2704
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2708
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2712
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2716
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2720
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2724
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2728
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2754
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2758
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2766
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2780
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2784
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2788
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2798
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2802
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2806
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 539:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2810
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2814
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2818
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 542:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2822
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2826
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2830
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2834
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2838
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2842
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 548:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2846
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2850
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2854
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2864
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2868
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2872
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2891
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2896
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2900
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2914
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2918
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2922
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2926
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2932
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2936
		{
			yyVAL.str = BooleanModeStr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2940
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 569:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2944
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2948
		{
			yyVAL.str = QueryExpansionStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2958
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2968
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2972
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2980
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2984
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3002
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3006
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3032
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3040
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3044
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3053
		{
			yyVAL.expr = nil
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3057
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3062
		{
			yyVAL.str = string("")
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3066
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3076
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3082
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3087
		{
			yyVAL.expr = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3091
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3097
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3101
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3105
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3115
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3127
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3131
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3135
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3139
		{
			yyVAL.expr = &NullVal{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3154
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3158
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3163
		{
			yyVAL.exprs = nil
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3167
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3172
		{
			yyVAL.expr = nil
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3176
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3181
		{
			yyVAL.orderBy = nil
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3185
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3191
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3195
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3201
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3206
		{
			yyVAL.str = AscScr
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3210
		{
			yyVAL.str = AscScr
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3214
		{
			yyVAL.str = DescScr
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3219
		{
			yyVAL.limit = nil
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3223
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3227
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 632:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3231
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3236
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3240
		{
			yyVAL.str = ForUpdateStr
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3244
		{
			yyVAL.str = ShareModeStr
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3257
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3261
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3265
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3270
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3274
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3278
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3285
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3289
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3293
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 645:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3297
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3302
		{
			yyVAL.updateExprs = nil
		}
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3306
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3316
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3322
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 651:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3326
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3332
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3338
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3348
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3352
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3358
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3364
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3368
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3374
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 660:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3378
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3382
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3389
		{
			yyVAL.bytes = []byte("charset")
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3396
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3400
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3404
		{
			yyVAL.expr = &Default{}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3413
		{
			yyVAL.byt = 0
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3415
		{
			yyVAL.byt = 1
		}
	case 672:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3418
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3420
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3423
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3425
		{
			yyVAL.str = IgnoreStr
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3429
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3431
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3433
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3435
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3437
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3439
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3441
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3443
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3445
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3447
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3450
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3452
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3454
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3458
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3460
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3464
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3468
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3475
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3481
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3485
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3492
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3734
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 916:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3743
		{
			decNesting(yylex)
		}
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3748
		{
			forceEOF(yylex)
		}
	case 918:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3753
		{
			forceEOF(yylex)
		}
	case 919:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3757
		{
			forceEOF(yylex)
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3761
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
