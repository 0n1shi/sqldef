// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	newQualifierColName  *NewQualifierColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const BEGIN = 57512
const START = 57513
const TRANSACTION = 57514
const COMMIT = 57515
const ROLLBACK = 57516
const BIT = 57517
const TINYINT = 57518
const SMALLINT = 57519
const SMALLSERIAL = 57520
const MEDIUMINT = 57521
const INT = 57522
const INTEGER = 57523
const SERIAL = 57524
const BIGINT = 57525
const BIGSERIAL = 57526
const INTNUM = 57527
const REAL = 57528
const DOUBLE = 57529
const PRECISION = 57530
const FLOAT_TYPE = 57531
const DECIMAL = 57532
const NUMERIC = 57533
const SMALLMONEY = 57534
const MONEY = 57535
const TIME = 57536
const TIMESTAMP = 57537
const DATETIME = 57538
const YEAR = 57539
const DATETIMEOFFSET = 57540
const DATETIME2 = 57541
const SMALLDATETIME = 57542
const CHAR = 57543
const VARCHAR = 57544
const VARYING = 57545
const BOOL = 57546
const CHARACTER = 57547
const VARBINARY = 57548
const NCHAR = 57549
const NVARCHAR = 57550
const NTEXT = 57551
const UUID = 57552
const TEXT = 57553
const TINYTEXT = 57554
const MEDIUMTEXT = 57555
const LONGTEXT = 57556
const CITEXT = 57557
const BLOB = 57558
const TINYBLOB = 57559
const MEDIUMBLOB = 57560
const LONGBLOB = 57561
const JSON = 57562
const JSONB = 57563
const ENUM = 57564
const GEOMETRY = 57565
const POINT = 57566
const LINESTRING = 57567
const POLYGON = 57568
const GEOMETRYCOLLECTION = 57569
const MULTIPOINT = 57570
const MULTILINESTRING = 57571
const MULTIPOLYGON = 57572
const ARRAY = 57573
const NOW = 57574
const GETDATE = 57575
const BPCHAR = 57576
const NULLX = 57577
const AUTO_INCREMENT = 57578
const APPROXNUM = 57579
const SIGNED = 57580
const UNSIGNED = 57581
const ZEROFILL = 57582
const ZONE = 57583
const AUTOINCREMENT = 57584
const DATABASES = 57585
const TABLES = 57586
const VITESS_KEYSPACES = 57587
const VITESS_SHARDS = 57588
const VITESS_TABLETS = 57589
const VSCHEMA_TABLES = 57590
const EXTENDED = 57591
const FULL = 57592
const PROCESSLIST = 57593
const NAMES = 57594
const CHARSET = 57595
const GLOBAL = 57596
const SESSION = 57597
const ISOLATION = 57598
const LEVEL = 57599
const READ = 57600
const WRITE = 57601
const ONLY = 57602
const REPEATABLE = 57603
const COMMITTED = 57604
const UNCOMMITTED = 57605
const SERIALIZABLE = 57606
const NEW = 57607
const CURRENT_TIMESTAMP = 57608
const DATABASE = 57609
const CURRENT_DATE = 57610
const CURRENT_TIME = 57611
const LOCALTIME = 57612
const LOCALTIMESTAMP = 57613
const UTC_DATE = 57614
const UTC_TIME = 57615
const UTC_TIMESTAMP = 57616
const REPLACE = 57617
const CONVERT = 57618
const CAST = 57619
const SUBSTR = 57620
const SUBSTRING = 57621
const GROUP_CONCAT = 57622
const SEPARATOR = 57623
const INHERIT = 57624
const MATCH = 57625
const AGAINST = 57626
const BOOLEAN = 57627
const LANGUAGE = 57628
const WITH = 57629
const WITHOUT = 57630
const PARSER = 57631
const QUERY = 57632
const EXPANSION = 57633
const UNUSED = 57634
const VIRTUAL = 57635
const GENERATED = 57636
const ALWAYS = 57637
const IDENTITY = 57638
const SEQUENCE = 57639
const INCREMENT = 57640
const MINVALUE = 57641
const CACHE = 57642
const CYCLE = 57643
const OWNED = 57644
const NONE = 57645
const CLUSTERED = 57646
const NONCLUSTERED = 57647
const REPLICATION = 57648
const INCLUDE = 57649
const HOLDLOCK = 57650
const NOLOCK = 57651
const NOWAIT = 57652
const PAGLOCK = 57653
const ROWLOCK = 57654
const TABLELOCK = 57655
const TYPECAST = 57656
const CHECK = 57657

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 139,
	-2, 129,
	-1, 36,
	156, 456,
	157, 456,
	-2, 446,
	-1, 272,
	110, 802,
	-2, 798,
	-1, 273,
	110, 803,
	-2, 799,
	-1, 345,
	81, 1013,
	-2, 81,
	-1, 346,
	81, 964,
	-2, 82,
	-1, 352,
	81, 943,
	-2, 769,
	-1, 354,
	81, 987,
	-2, 771,
	-1, 674,
	52, 41,
	54, 41,
	-2, 43,
	-1, 835,
	110, 805,
	-2, 801,
	-1, 1081,
	5, 28,
	-2, 601,
	-1, 1106,
	5, 27,
	-2, 742,
	-1, 1210,
	5, 27,
	-2, 87,
	-1, 1433,
	5, 28,
	-2, 743,
	-1, 1528,
	5, 27,
	-2, 745,
	-1, 1689,
	5, 28,
	-2, 746,
	-1, 1822,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 16787

var yyAct = [...]int{

	356, 1581, 1785, 1784, 1624, 1540, 1014, 1543, 1109, 1679,
	1439, 1663, 21, 900, 532, 251, 601, 765, 600, 3,
	1460, 1143, 268, 1443, 277, 1299, 53, 1122, 1201, 1146,
	811, 484, 1329, 1300, 304, 90, 943, 918, 90, 1212,
	668, 276, 1168, 1296, 1009, 666, 1022, 949, 1023, 1328,
	963, 245, 942, 901, 1174, 1272, 1127, 860, 771, 1696,
	273, 871, 90, 90, 66, 1004, 250, 1198, 255, 958,
	351, 1114, 992, 1073, 90, 684, 280, 868, 888, 90,
	837, 90, 344, 538, 897, 482, 683, 90, 670, 337,
	655, 332, 275, 704, 331, 246, 247, 248, 249, 260,
	1735, 624, 1423, 531, 544, 552, 699, 330, 1182, 339,
	1805, 976, 1055, 1444, 1445, 1446, 1447, 1448, 1449, 341,
	979, 264, 566, 52, 87, 576, 1777, 576, 1354, 1722,
	870, 1341, 1466, 976, 485, 486, 1166, 1342, 335, 270,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 340, 1711, 576, 965, 1473, 1830, 615, 1770,
	1754, 1825, 1687, 494, 1629, 1202, 1203, 1763, 498, 972,
	499, 961, 560, 1813, 563, 1015, 506, 962, 1726, 1123,
	578, 579, 580, 581, 582, 583, 584, 938, 561, 562,
	559, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 1753, 519, 576, 978, 1615, 565, 564,
	574, 575, 567, 568, 569, 570, 571, 572, 573, 566,
	1628, 1291, 576, 1712, 90, 1710, 1427, 496, 1135, 1322,
	968, 1134, 964, 973, 1136, 1267, 1686, 685, 1181, 686,
	970, 969, 569, 570, 571, 572, 573, 566, 1323, 1324,
	576, 1420, 531, 273, 273, 565, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 931, 347, 576,
	273, 1178, 802, 1180, 1179, 541, 932, 933, 1493, 803,
	1492, 540, 273, 273, 273, 273, 273, 273, 273, 565,
	564, 574, 575, 567, 568, 569, 570, 571, 572, 573,
	566, 527, 1184, 576, 1517, 981, 273, 993, 1572, 85,
	81, 82, 83, 508, 1716, 273, 485, 486, 892, 1005,
	1374, 1373, 983, 1424, 1416, 1414, 244, 531, 1718, 1769,
	90, 1771, 1828, 57, 1744, 1782, 1658, 90, 90, 90,
	1583, 1384, 1385, 1648, 773, 1559, 1647, 523, 524, 1824,
	577, 587, 577, 1811, 1680, 1250, 1713, 966, 59, 60,
	61, 62, 63, 967, 565, 564, 574, 575, 567, 568,
	569, 570, 571, 572, 573, 566, 772, 1421, 576, 577,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 898, 1247, 576, 1390, 565, 564, 574, 575,
	567, 568, 569, 570, 571, 572, 573, 566, 1681, 1510,
	576, 1391, 1762, 335, 1344, 974, 1474, 975, 629, 650,
	1616, 591, 592, 593, 594, 595, 596, 597, 674, 1525,
	577, 630, 1165, 302, 1468, 1467, 971, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 577, 675, 576,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 681, 1160, 576, 1153, 1159, 1148, 773, 1335,
	993, 1006, 1463, 1629, 84, 577, 617, 618, 619, 620,
	621, 622, 623, 1714, 1715, 1717, 1719, 1720, 90, 986,
	1685, 1248, 1794, 1246, 577, 1400, 90, 350, 90, 774,
	775, 90, 488, 1606, 90, 492, 493, 1249, 90, 959,
	565, 564, 574, 575, 567, 568, 569, 570, 571, 572,
	573, 566, 1336, 501, 576, 960, 490, 79, 577, 90,
	959, 565, 564, 574, 575, 567, 568, 569, 570, 571,
	572, 573, 566, 1668, 1501, 576, 960, 347, 90, 76,
	273, 273, 781, 919, 921, 487, 814, 273, 1126, 273,
	1074, 1125, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 764, 790, 1151,
	78, 1124, 79, 763, 697, 777, 497, 778, 223, 80,
	782, 542, 1251, 785, 838, 589, 590, 70, 74, 273,
	1461, 1462, 1464, 577, 273, 273, 273, 273, 273, 273,
	273, 273, 71, 1817, 75, 273, 1620, 1436, 804, 577,
	788, 1259, 876, 774, 775, 1089, 1067, 835, 920, 809,
	72, 73, 68, 881, 884, 577, 839, 823, 688, 890,
	599, 556, 816, 507, 959, 273, 273, 273, 273, 806,
	90, 1255, 273, 90, 90, 90, 90, 90, 1050, 831,
	960, 350, 350, 350, 350, 90, 350, 1368, 90, 833,
	551, 629, 90, 350, 577, 1640, 902, 90, 90, 863,
	940, 939, 865, 866, 630, 1639, 876, 1638, 273, 577,
	1637, 1669, 1670, 1671, 1636, 1635, 1634, 1632, 836, 1381,
	554, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 886, 1137, 1369, 1112,
	550, 549, 926, 894, 982, 687, 1821, 1295, 1254, 335,
	335, 335, 335, 335, 1293, 877, 878, 551, 1051, 899,
	1823, 885, 844, 889, 335, 904, 905, 903, 907, 577,
	906, 812, 813, 335, 915, 1145, 842, 843, 841, 924,
	923, 834, 69, 928, 889, 517, 1096, 927, 549, 929,
	577, 90, 1561, 90, 1557, 893, 350, 895, 896, 768,
	90, 947, 90, 690, 551, 90, 531, 1544, 1697, 1558,
	994, 995, 996, 997, 1145, 530, 1145, 550, 549, 1797,
	1546, 512, 550, 549, 872, 1011, 1144, 1698, 273, 273,
	273, 273, 77, 546, 551, 827, 829, 830, 1796, 551,
	1768, 828, 273, 1007, 1008, 808, 1767, 1766, 1145, 1057,
	567, 568, 569, 570, 571, 572, 573, 566, 1156, 1227,
	576, 550, 549, 273, 273, 273, 564, 574, 575, 567,
	568, 569, 570, 571, 572, 573, 566, 1699, 551, 576,
	1021, 807, 1027, 489, 1085, 514, 1084, 516, 1545, 1045,
	273, 1046, 1695, 329, 1047, 273, 838, 1028, 550, 549,
	835, 1764, 50, 550, 549, 347, 1155, 273, 1633, 483,
	273, 1086, 840, 937, 1056, 551, 513, 515, 1570, 944,
	551, 1495, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1228,
	1224, 1221, 1494, 1229, 1226, 1225, 1106, 703, 839, 75,
	1350, 1486, 1069, 500, 1765, 1185, 90, 1064, 1065, 1066,
	1230, 1207, 350, 1129, 491, 1131, 1205, 1223, 495, 550,
	549, 1185, 1524, 350, 350, 350, 350, 350, 350, 350,
	350, 1485, 1063, 1490, 959, 1185, 551, 350, 350, 954,
	861, 953, 862, 955, 956, 1402, 1095, 1199, 1162, 957,
	960, 1130, 1656, 1835, 90, 1532, 1819, 818, 1119, 1140,
	1457, 1812, 1070, 1071, 1072, 1457, 1776, 554, 1457, 1775,
	350, 1457, 1761, 1161, 520, 521, 522, 1630, 525, 1339,
	1078, 1338, 335, 1656, 1760, 529, 1132, 503, 504, 505,
	1757, 1756, 1749, 531, 834, 1457, 1746, 1093, 1176, 1457,
	1745, 1532, 1677, 1457, 1652, 1149, 1150, 1152, 1337, 511,
	1204, 867, 1210, 350, 657, 660, 661, 662, 658, 1542,
	659, 663, 882, 882, 1115, 1116, 1532, 1567, 882, 1532,
	531, 90, 90, 1535, 1534, 1532, 1533, 1186, 1187, 90,
	1189, 1190, 1191, 1457, 1456, 577, 1154, 1200, 1138, 273,
	1319, 531, 1206, 1435, 531, 273, 273, 1377, 1376, 531,
	273, 1219, 1371, 1372, 577, 882, 1218, 1017, 273, 273,
	273, 273, 273, 1371, 1370, 1220, 864, 273, 293, 292,
	295, 296, 297, 298, 787, 273, 786, 294, 299, 1079,
	531, 273, 273, 273, 350, 769, 273, 1544, 1298, 273,
	1292, 1651, 350, 652, 531, 1650, 1303, 767, 350, 902,
	1546, 874, 531, 695, 694, 902, 1307, 509, 273, 1321,
	1301, 1271, 1285, 1284, 1266, 502, 1265, 944, 1260, 23,
	483, 1657, 1577, 1656, 1039, 1576, 1320, 1571, 1508, 678,
	835, 1170, 1171, 1172, 1308, 1306, 1487, 1476, 1038, 1175,
	1173, 300, 301, 1104, 1297, 1361, 1105, 1110, 1327, 23,
	1192, 1111, 1194, 1195, 1196, 1197, 1340, 1110, 1216, 1217,
	54, 1217, 1326, 50, 651, 1043, 50, 1012, 1545, 1262,
	679, 350, 677, 350, 1037, 1111, 1527, 1091, 1343, 90,
	703, 1176, 1351, 1345, 1268, 1269, 1088, 90, 652, 350,
	1213, 874, 925, 652, 677, 1733, 50, 1286, 1287, 1079,
	1289, 1290, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1431,
	1237, 23, 1079, 350, 652, 90, 1475, 1110, 1380, 1375,
	1090, 1273, 1139, 1034, 1031, 1032, 273, 1030, 930, 1087,
	1079, 1364, 680, 90, 780, 1388, 1387, 810, 273, 1826,
	1404, 257, 1264, 1774, 1393, 791, 792, 793, 794, 795,
	796, 797, 798, 1395, 1751, 1275, 1041, 1044, 50, 799,
	800, 1497, 1496, 1654, 1288, 1653, 273, 1398, 1378, 1401,
	1644, 1643, 1603, 273, 1602, 1238, 1386, 1569, 1405, 1511,
	1240, 1233, 1234, 983, 1241, 1236, 1235, 1010, 50, 90,
	1243, 1239, 1412, 1438, 1360, 1359, 1450, 1451, 1452, 1357,
	1347, 1242, 1314, 1312, 1397, 1005, 1455, 815, 1232, 335,
	1208, 1209, 1430, 1167, 944, 1142, 944, 273, 1115, 1116,
	766, 1277, 1177, 1181, 1465, 1282, 1128, 1276, 1472, 1453,
	999, 1036, 1274, 1140, 998, 65, 1470, 1625, 1280, 1627,
	1498, 1297, 1118, 1469, 1362, 1363, 350, 1365, 1366, 1367,
	784, 1278, 1279, 770, 528, 912, 1178, 1147, 1180, 1179,
	913, 822, 1035, 1121, 1176, 1477, 873, 875, 1157, 1281,
	1283, 1120, 657, 660, 661, 662, 658, 1407, 659, 663,
	910, 914, 891, 661, 662, 911, 909, 908, 1500, 1791,
	1499, 273, 273, 1752, 273, 273, 273, 261, 262, 1258,
	1052, 545, 1040, 984, 985, 987, 988, 989, 1789, 990,
	991, 1062, 533, 1489, 543, 1491, 1061, 1193, 1042, 350,
	693, 510, 1429, 1528, 534, 1349, 1000, 1001, 1002, 1783,
	1003, 1512, 917, 1019, 1264, 1526, 1301, 812, 813, 1503,
	783, 1504, 1505, 1506, 273, 1348, 1215, 1013, 776, 665,
	545, 350, 1556, 1516, 1502, 258, 259, 1560, 1060, 1555,
	1554, 1539, 1806, 1507, 1383, 1334, 1059, 1562, 252, 90,
	1564, 350, 1772, 1609, 253, 54, 1608, 1515, 1111, 1573,
	1741, 1585, 1024, 1025, 1026, 58, 1740, 1739, 1738, 1333,
	1332, 1594, 1604, 350, 547, 1642, 1641, 1617, 1158, 805,
	56, 944, 1222, 1018, 1389, 1020, 1590, 8, 882, 1587,
	7, 1305, 1128, 676, 882, 51, 1578, 1, 1619, 1626,
	278, 1048, 1488, 1618, 1588, 6, 1586, 5, 1442, 1622,
	1518, 1519, 1301, 1520, 1521, 1522, 273, 1623, 1734, 1661,
	1729, 1584, 1667, 350, 1649, 350, 1330, 1164, 1646, 67,
	1725, 1655, 1353, 1382, 1214, 1213, 944, 1659, 1580, 1231,
	1016, 1211, 1033, 1678, 1692, 1541, 951, 1594, 941, 481,
	64, 273, 273, 1631, 952, 950, 948, 696, 977, 273,
	273, 1183, 980, 1568, 702, 700, 701, 698, 273, 705,
	231, 1660, 342, 1672, 1674, 664, 1683, 689, 548, 1245,
	1244, 1688, 1029, 1253, 801, 1049, 1693, 526, 233, 585,
	1058, 1133, 902, 1379, 349, 1707, 1721, 1304, 537, 1607,
	1514, 1094, 1675, 1676, 612, 1392, 887, 1394, 273, 279,
	1076, 1730, 1705, 1706, 1077, 826, 1396, 305, 47, 291,
	288, 1594, 1081, 1082, 1083, 1742, 1732, 1574, 290, 1575,
	289, 1092, 817, 1103, 1399, 1594, 1098, 558, 334, 1099,
	1100, 1101, 1102, 350, 1708, 1747, 1700, 1701, 1702, 1703,
	1704, 648, 266, 1723, 1724, 656, 654, 653, 1117, 1113,
	333, 1188, 1261, 1426, 1614, 47, 821, 25, 55, 263,
	19, 18, 17, 256, 20, 16, 15, 1758, 1759, 336,
	1773, 14, 29, 13, 1778, 12, 11, 10, 9, 1593,
	1673, 1673, 1592, 1591, 1594, 1780, 1440, 1779, 1786, 1440,
	1440, 1440, 1589, 1454, 1787, 4, 1594, 1594, 254, 1788,
	350, 22, 2, 0, 0, 1793, 0, 1795, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 0, 273, 1800,
	0, 1440, 1803, 0, 1802, 1801, 0, 1809, 1478, 1809,
	0, 0, 0, 0, 0, 90, 0, 1594, 0, 1594,
	1816, 1790, 0, 0, 0, 1818, 0, 0, 1820, 0,
	0, 0, 0, 1252, 350, 350, 0, 0, 0, 0,
	0, 0, 0, 1509, 0, 1822, 625, 1075, 1831, 0,
	273, 0, 1832, 0, 1513, 1809, 0, 0, 0, 0,
	0, 1594, 0, 0, 0, 1594, 0, 565, 564, 574,
	575, 567, 568, 569, 570, 571, 572, 573, 566, 0,
	627, 576, 0, 0, 0, 0, 0, 0, 0, 1530,
	1531, 0, 0, 1352, 1270, 0, 0, 0, 1170, 1171,
	1172, 0, 0, 0, 1815, 0, 1175, 1173, 300, 301,
	0, 1330, 0, 0, 0, 518, 518, 518, 518, 0,
	518, 1563, 0, 1356, 1358, 0, 0, 518, 0, 0,
	0, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 0, 0, 1318, 47, 0, 0, 0, 0, 0,
	1330, 1579, 628, 0, 0, 1582, 0, 0, 0, 586,
	642, 626, 588, 0, 0, 1440, 0, 631, 0, 0,
	0, 0, 0, 0, 0, 535, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1621, 0, 0, 1833,
	598, 0, 557, 603, 604, 605, 606, 607, 608, 609,
	610, 611, 0, 614, 616, 616, 616, 616, 616, 616,
	616, 616, 0, 644, 645, 646, 647, 0, 1409, 1410,
	0, 1411, 0, 0, 667, 1413, 0, 1415, 602, 0,
	0, 0, 0, 0, 0, 0, 0, 613, 0, 0,
	0, 643, 1827, 0, 0, 0, 0, 0, 0, 1662,
	1664, 1665, 1666, 0, 0, 0, 1330, 1330, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 1690, 1458, 1459, 0, 0, 1691,
	0, 1406, 0, 1694, 0, 0, 0, 0, 1408, 1177,
	1181, 0, 0, 0, 0, 0, 0, 1582, 1330, 0,
	1417, 1418, 1419, 536, 0, 1422, 577, 1330, 1330, 0,
	1727, 23, 24, 48, 26, 27, 703, 0, 1432, 1433,
	1434, 1737, 1437, 1178, 0, 1180, 1179, 0, 0, 0,
	0, 42, 0, 0, 1750, 28, 0, 0, 88, 0,
	0, 243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 0, 0, 50, 0,
	0, 0, 0, 267, 0, 88, 88, 0, 0, 0,
	0, 1484, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 88, 0, 88, 0, 518, 1781, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 518, 518, 518,
	518, 518, 518, 518, 518, 1330, 0, 0, 0, 1792,
	0, 518, 518, 0, 0, 0, 0, 0, 30, 31,
	33, 32, 35, 0, 0, 0, 0, 257, 1440, 48,
	26, 27, 0, 0, 0, 703, 0, 1807, 0, 0,
	0, 1595, 1523, 36, 43, 44, 0, 0, 45, 46,
	34, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1536, 1537, 1538, 0,
	0, 350, 824, 825, 0, 0, 47, 0, 0, 0,
	1582, 0, 0, 0, 0, 0, 0, 1566, 0, 0,
	0, 603, 38, 39, 0, 40, 41, 0, 0, 0,
	0, 1836, 0, 0, 0, 0, 0, 257, 0, 48,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1595, 0, 0, 0, 0, 602, 88, 0, 879,
	880, 28, 0, 0, 1610, 1611, 1612, 1613, 0, 0,
	336, 336, 336, 336, 336, 257, 1601, 48, 26, 27,
	0, 0, 0, 0, 0, 667, 1600, 922, 0, 1595,
	0, 0, 0, 0, 336, 0, 0, 0, 0, 28,
	257, 0, 48, 26, 27, 0, 0, 0, 0, 0,
	0, 1810, 0, 0, 1595, 257, 0, 48, 26, 27,
	0, 0, 0, 0, 28, 0, 0, 49, 0, 1595,
	0, 1596, 1597, 1599, 0, 0, 0, 1598, 0, 28,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 1808,
	257, 0, 48, 26, 27, 0, 1601, 0, 0, 0,
	1684, 0, 0, 88, 1595, 1689, 1600, 0, 0, 0,
	88, 672, 88, 0, 28, 0, 0, 0, 229, 0,
	0, 0, 0, 0, 0, 518, 0, 518, 0, 0,
	0, 1709, 1169, 0, 1601, 0, 0, 1170, 1171, 1172,
	0, 0, 239, 518, 1600, 1175, 1173, 300, 301, 0,
	0, 1596, 1597, 1599, 0, 0, 0, 1598, 0, 1601,
	0, 0, 0, 0, 1748, 0, 0, 0, 0, 1600,
	0, 0, 0, 0, 1601, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 1600, 0, 0, 0, 0, 1596,
	1597, 1599, 1068, 224, 0, 1598, 0, 0, 0, 226,
	1053, 1054, 0, 539, 0, 0, 232, 228, 0, 1601,
	0, 0, 0, 0, 1596, 1597, 1599, 0, 0, 1600,
	1598, 1743, 0, 0, 0, 0, 0, 0, 0, 1596,
	1597, 1599, 0, 0, 0, 1598, 1731, 230, 0, 0,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 1108, 0, 0, 0,
	0, 88, 0, 49, 1596, 1597, 1599, 1080, 0, 88,
	1598, 88, 0, 0, 88, 0, 0, 88, 1814, 0,
	0, 789, 1097, 336, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 88, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1837,
	1838, 88, 0, 0, 0, 0, 49, 0, 1177, 1181,
	789, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 227, 0, 235, 236,
	237, 238, 242, 0, 0, 0, 0, 241, 240, 0,
	0, 0, 1178, 0, 1180, 1179, 0, 0, 0, 0,
	0, 47, 267, 0, 0, 0, 49, 0, 267, 267,
	0, 0, 883, 883, 267, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 518, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 267,
	267, 267, 0, 88, 0, 883, 88, 88, 88, 88,
	88, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 88, 0, 0, 0, 672, 0, 0, 0, 0,
	88, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1302, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1315, 1316, 1317, 0, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1309, 1310, 0, 0, 1311, 0,
	0, 1313, 0, 0, 0, 0, 0, 0, 0, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1325, 0, 0, 0, 0, 1355, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 88, 0, 0, 0,
	0, 0, 0, 88, 0, 88, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 1403, 1425,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1428, 0,
	0, 0, 0, 0, 0, 602, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 0, 1163, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1302,
	0, 0, 1529, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1256, 1257, 0, 0, 1565, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 789, 0, 0, 0, 0, 0, 0,
	1605, 0, 0, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 883, 1302, 0, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1682, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1755,
	1728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	1804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1829, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 467, 457, 0, 418, 469, 388,
	406, 477, 408, 409, 444, 368, 427, 155, 403, 386,
	93, 391, 361, 398, 362, 389, 420, 117, 387, 459,
	430, 131, 475, 134, 435, 0, 177, 143, 0, 0,
	422, 461, 425, 452, 417, 445, 376, 434, 470, 404,
	440, 471, 0, 0, 0, 355, 0, 945, 946, 0,
	0, 0, 0, 0, 106, 0, 439, 466, 400, 480,
	443, 360, 437, 0, 366, 369, 476, 464, 395, 396,
	1141, 0, 88, 0, 0, 0, 0, 421, 426, 449,
	414, 0, 0, 0, 0, 0, 0, 0, 0, 392,
	0, 433, 0, 0, 0, 373, 367, 0, 419, 0,
	0, 0, 375, 0, 393, 450, 0, 357, 455, 462,
	416, 204, 465, 413, 412, 162, 0, 109, 0, 183,
	121, 405, 132, 447, 478, 468, 423, 460, 390, 399,
	111, 397, 169, 156, 195, 432, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 365, 358, 394, 453, 456, 380, 442,
	370, 401, 448, 402, 424, 385, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 883, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 363, 0, 178, 197, 214, 215, 364, 384,
	463, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 441, 170, 108, 196,
	176, 0, 379, 383, 377, 378, 428, 429, 472, 473,
	474, 451, 374, 0, 381, 382, 0, 458, 126, 431,
	92, 100, 133, 479, 211, 0, 164, 119, 198, 0,
	407, 359, 411, 0, 0, 0, 0, 0, 0, 0,
	371, 372, 171, 415, 410, 436, 438, 446, 454, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1799, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 467, 457, 88, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 945,
	946, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 0, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 1263, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 50, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 0, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 353, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 354, 352, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 348, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 832,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 0, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 94, 184, 682, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 353, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 354, 352, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 348, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 94, 184,
	343, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 353, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	354, 352, 346, 345, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 348, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 467, 457, 105, 418,
	469, 388, 406, 477, 408, 409, 444, 368, 427, 155,
	403, 386, 93, 391, 361, 398, 362, 389, 420, 117,
	387, 459, 430, 131, 475, 134, 435, 0, 177, 143,
	0, 0, 422, 461, 425, 452, 417, 445, 376, 434,
	470, 404, 440, 471, 0, 0, 0, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 439, 466,
	400, 480, 443, 360, 437, 0, 366, 369, 476, 464,
	395, 396, 0, 0, 0, 0, 0, 0, 0, 421,
	426, 449, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 392, 0, 433, 0, 0, 0, 373, 367, 0,
	419, 0, 0, 0, 375, 0, 393, 450, 0, 357,
	455, 462, 416, 204, 465, 413, 412, 162, 0, 109,
	0, 183, 121, 405, 132, 447, 478, 468, 423, 460,
	390, 399, 111, 397, 169, 156, 195, 432, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 365, 358, 394, 453, 456,
	380, 442, 370, 401, 448, 402, 424, 385, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 363, 0, 178, 197, 214, 215,
	364, 384, 463, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 441, 170,
	108, 196, 176, 0, 379, 383, 377, 378, 428, 429,
	472, 473, 474, 451, 374, 0, 381, 382, 0, 458,
	126, 431, 92, 100, 133, 479, 211, 0, 164, 119,
	198, 0, 407, 359, 411, 0, 0, 0, 0, 0,
	0, 0, 371, 372, 171, 415, 410, 436, 438, 446,
	454, 467, 457, 105, 418, 469, 388, 406, 477, 408,
	409, 444, 368, 427, 155, 403, 386, 93, 391, 361,
	398, 362, 389, 420, 117, 387, 459, 430, 131, 475,
	134, 435, 0, 177, 143, 0, 0, 422, 461, 425,
	452, 417, 445, 376, 434, 470, 404, 440, 471, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 439, 466, 400, 480, 443, 360, 437,
	0, 366, 369, 476, 464, 395, 396, 0, 0, 0,
	0, 0, 0, 0, 421, 426, 449, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 392, 0, 433, 0,
	0, 0, 373, 367, 0, 419, 0, 0, 0, 375,
	0, 393, 450, 0, 357, 455, 462, 416, 204, 465,
	413, 412, 162, 0, 109, 0, 183, 121, 405, 132,
	447, 478, 468, 423, 460, 390, 399, 111, 397, 169,
	156, 195, 432, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	365, 358, 394, 453, 456, 380, 442, 370, 401, 448,
	402, 424, 385, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 363,
	0, 178, 197, 214, 215, 364, 384, 463, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 441, 170, 108, 196, 176, 0, 379,
	383, 377, 378, 428, 429, 472, 473, 474, 451, 374,
	0, 381, 382, 0, 458, 126, 431, 92, 100, 133,
	479, 211, 0, 164, 119, 198, 0, 407, 359, 411,
	0, 0, 0, 0, 0, 0, 0, 371, 372, 171,
	415, 410, 436, 438, 446, 454, 155, 0, 105, 93,
	0, 0, 274, 0, 0, 0, 117, 271, 0, 0,
	131, 315, 134, 0, 0, 177, 143, 0, 0, 0,
	0, 306, 307, 0, 0, 0, 0, 0, 0, 934,
	0, 50, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 106, 294, 299, 300, 301, 935, 0,
	0, 269, 286, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 325, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	303, 316, 326, 322, 323, 320, 321, 319, 318, 317,
	328, 308, 309, 310, 311, 313, 0, 126, 312, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 869, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 315, 134, 0, 0, 177, 143, 324,
	105, 0, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 106, 294, 299, 300, 301,
	0, 0, 0, 269, 286, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 265, 0,
	0, 0, 327, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 325, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 531, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 269, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 271, 0, 171, 131, 315, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 106,
	294, 299, 300, 301, 0, 0, 0, 269, 286, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 265, 0, 0, 0, 327, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 325,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 303, 316, 326, 322,
	323, 320, 321, 319, 318, 317, 328, 308, 309, 310,
	311, 313, 23, 126, 312, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	274, 0, 0, 0, 117, 271, 0, 171, 131, 315,
	134, 0, 0, 177, 143, 324, 105, 0, 0, 306,
	307, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 293, 292, 295, 296, 297, 298, 0,
	0, 106, 294, 299, 300, 301, 0, 0, 0, 269,
	286, 0, 314, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 283, 284, 0, 0, 0, 0, 327, 0,
	285, 0, 0, 281, 282, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 325, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 303, 316,
	326, 322, 323, 320, 321, 319, 318, 317, 328, 308,
	309, 310, 311, 313, 0, 126, 312, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 274, 0, 0, 0, 117, 271, 0, 171,
	131, 315, 134, 0, 0, 177, 143, 324, 105, 0,
	0, 306, 307, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 293, 292, 295, 296, 297,
	298, 0, 0, 106, 294, 299, 300, 301, 0, 0,
	0, 269, 286, 0, 314, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 283, 284, 0, 0, 0, 0,
	327, 0, 285, 0, 0, 281, 282, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 325, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	303, 316, 326, 322, 323, 320, 321, 319, 318, 317,
	328, 308, 309, 310, 311, 313, 0, 126, 312, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 315, 134, 0, 0, 177, 143, 324,
	105, 0, 0, 306, 307, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 293, 292, 295,
	296, 297, 298, 0, 0, 106, 294, 299, 300, 301,
	0, 0, 0, 0, 286, 0, 314, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 327, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 325, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 1834, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 303, 316, 326, 322, 323, 320, 321, 319,
	318, 317, 328, 308, 309, 310, 311, 313, 0, 126,
	312, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 0, 0, 171, 131, 315, 134, 0, 0, 177,
	143, 324, 105, 0, 0, 306, 307, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 293,
	292, 295, 296, 297, 298, 0, 0, 106, 294, 299,
	300, 301, 0, 0, 0, 0, 286, 0, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 327, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 325, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 303, 316, 326, 322, 323, 320,
	321, 319, 318, 317, 328, 308, 309, 310, 311, 313,
	0, 126, 312, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 315, 134, 0,
	0, 177, 143, 324, 105, 0, 0, 306, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 293, 292, 295, 296, 297, 298, 0, 0, 106,
	294, 299, 300, 301, 0, 0, 0, 0, 286, 0,
	314, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 327, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 325,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 303, 316, 326, 322,
	323, 320, 321, 319, 318, 317, 328, 308, 309, 310,
	311, 313, 0, 126, 312, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 324, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 565, 564,
	574, 575, 567, 568, 569, 570, 571, 572, 573, 566,
	0, 0, 576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 729, 171,
	131, 0, 134, 0, 0, 177, 143, 577, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 714, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 1736, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	0, 756, 757, 160, 758, 759, 760, 762, 761, 731,
	732, 733, 737, 735, 734, 736, 708, 710, 202, 706,
	709, 715, 711, 712, 713, 727, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 728, 738, 739,
	740, 741, 742, 743, 744, 745, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	707, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 553, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 555, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 550, 549, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 729, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 0, 756, 757, 160, 758, 759,
	760, 762, 761, 731, 732, 733, 737, 735, 734, 736,
	708, 710, 202, 706, 709, 715, 711, 712, 713, 727,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 728, 738, 739, 740, 741, 742, 743, 744, 745,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 707, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 671, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 673, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 23, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 819,
	0, 0, 820, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 692, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	691, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 671, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 673, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 669, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 1441, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 1798, 117,
	0, 171, 0, 131, 0, 134, 0, 0, 177, 143,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 1331, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 1480, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 1479, 200, 149, 154, 152,
	199, 1482, 192, 142, 139, 0, 98, 190, 140, 138,
	1483, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 1481, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 151, 124, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 673, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 151, 124, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 355, 0, 555, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 151, 124,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	151, 124, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 779, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	649, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 151, 124, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 338, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 171, 0, 131, 0,
	134, 0, 0, 177, 143, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 151, 124, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 151, 124, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 151,
	124, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 151, 124, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 151, 124, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 105,
}
var yyPact = [...]int{

	2085, -1000, -210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1490, 1525, -1000, -1000, -1000, -1000, -1000, -1000, 1312,
	478, 458, 469, 190, 15578, 468, 2396, 16162, -1000, 137,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1235, -1000, -1000,
	-1000, -1000, -1000, 1481, 1488, 1265, 1464, 1388, -1000, 7984,
	403, 13825, 15286, 5821, -1000, 1094, -187, 433, 15870, 401,
	401, 15870, 15870, 16162, 401, -1000, -65, 466, 16162, -1000,
	16162, 398, 1089, 398, 398, 398, 16162, -1000, 533, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16162, 1081, 1421, 745, 4521, 4521, 4521,
	4521, 191, 4521, 34, 1333, -1000, -1000, -1000, -1000, 4521,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1024, 1423, 8568, 8568, 1490, -1000, 1235, -1000, -1000, -1000,
	1409, -1000, -1000, 749, 1513, -1000, 10320, 531, -1000, 8568,
	99, 1140, -1000, -1000, 1140, -1000, -1000, 484, -1000, -1000,
	-1000, 9444, 9444, 9444, 9444, 9444, 9444, 9444, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1140, 530, -1000, 8276, 1140, 1140, 1140, 1140,
	1140, 1140, 1140, 1140, 8568, 1140, 1140, 1140, 1140, 1140,
	1140, 1140, 1140, 1140, 1719, 1140, 1140, 1140, 1140, 14993,
	1164, 1361, -1000, -1000, -1000, 1456, 11488, 12364, 16162, 1148,
	-1000, 1208, 5496, -36, -1000, -1000, -1000, 644, 528, 12072,
	-1000, -1000, -1000, 1420, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1079, -1000, 10612, 462, -1000, -1000, 16162, 1298, 1071,
	706, 1059, 1332, 325, 1455, 16162, -1000, 14701, 4521, 429,
	16162, 1446, 1329, 16162, 1050, 1048, -1000, 6796, -1000, 4521,
	4521, 4521, 4521, 4521, 4521, 4521, 4521, -1000, -1000, -1000,
	-1000, -1000, -1000, 4521, 4521, -1000, 11, -1000, 16162, -1000,
	-1000, -1000, -1000, 1520, 558, 807, 519, 1213, -1000, 726,
	1481, 1024, 1388, 11780, 1349, -1000, -1000, 16162, -1000, 8568,
	8568, 748, -1000, 14409, -1000, -1000, 5171, 582, 9444, 829,
	667, 9444, 9444, 9444, 9444, 9444, 9444, 9444, 9444, 9444,
	9444, 9444, 9444, 9444, 9444, 9444, 904, 1719, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1040, -1000, 1235, 1041,
	1041, 21, 21, 21, 21, 21, 21, 9736, 7400, 6146,
	1024, 1077, 770, 8276, 7984, 7984, 8568, 8568, 16454, 16454,
	7984, 1458, 666, 770, 16454, -1000, 1024, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 98, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 7984, 7984, 7984, 7984, 245, 16162,
	-1000, 16454, 13825, 13825, 13825, 13825, 13825, -1000, 1376, 1375,
	-1000, 1369, 1344, 1370, 16162, -1000, 1069, 11488, 504, 1140,
	-1000, 14117, -1000, -1000, 245, 1170, 13825, 16162, -1000, -1000,
	4846, 1208, -36, 1204, -1000, -7, 0, 7108, 6146, 574,
	-1000, -1000, -1000, -1000, 3871, 833, 104, -128, 49, -1000,
	-1000, -1000, -1000, -1000, 1260, -1000, -1000, -1000, 1260, 269,
	1260, 1260, 1260, -1000, 1260, 1260, 85, 85, 85, 85,
	85, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1311, 1307,
	-1000, 1260, 1260, 1260, -1000, 1260, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1282, 266, 1282, 1264,
	1264, -1000, -1000, 15870, 1454, -129, 1031, 4521, 1439, 4521,
	16162, 1504, 16162, -1000, -1000, -1000, 10612, -1000, 1139, 16162,
	-1000, 16162, -1000, -1000, 16162, 4521, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 647, -1000, -1000, -1000, -1000, 1393, 8568, 8568, 6471,
	8568, -1000, -1000, -1000, 1423, -1000, 1458, 1477, -1000, 1413,
	1408, 7984, -1000, -1000, 582, 696, -1000, -1000, 860, -1000,
	-1000, -1000, -1000, 516, 1140, -1000, 439, -1000, -1000, -1000,
	-1000, 829, 9444, 9444, 9444, 418, 439, 1755, 343, 753,
	21, 144, 144, 19, 19, 19, 19, 19, 734, 734,
	-1000, -1000, -1000, -1000, 1024, -1000, -1000, -1000, 1024, 7984,
	1206, -1000, -1000, -1000, 8568, -1000, 1024, 1055, 1055, 812,
	868, 1205, -1000, 515, 1196, 1055, 7984, 687, -1000, 8568,
	1024, -1000, -1000, 1055, 1024, 1055, 1055, 1143, 1140, -1000,
	1193, -1000, 638, 1361, 1297, 1321, 993, -1000, -1000, -1000,
	-1000, 1360, -1000, 1352, -1000, -1000, -1000, -1000, -125, 460,
	440, 437, 15870, -1000, 1496, 13825, 1169, -1000, -1000, 1204,
	-36, -47, -1000, -1000, -1000, -1000, 770, 636, -1000, -1000,
	1012, 1198, 3499, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1292, 755, 15870, 330, 388, 523, 409, 1010, -1000,
	-1000, -1000, 819, -1000, 15870, 1519, -1000, -1000, 329, -1000,
	326, 682, 910, 16162, 120, 1290, 2389, -1000, -227, -1000,
	45, -1000, -1000, 882, 85, 85, 1260, 85, 85, 85,
	-1000, -1000, 574, 1417, 574, 574, 574, 574, 909, 909,
	-139, -139, -1000, -1000, -1000, 877, 1282, -1000, -1000, -1000,
	872, -1000, 1289, 1235, -1000, 6146, -1000, -1000, -1000, -1000,
	-1000, 1453, 1137, -1000, -1000, -1000, -1000, 449, -1000, -1000,
	783, 1184, 370, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 208, 474, -1000, 4521, -1000, 639,
	16162, 16162, 1391, 770, 770, 511, -1000, -1000, 16162, -1000,
	-1000, -1000, -1000, 1188, -1000, -1000, -1000, 4196, 7984, -1000,
	418, 439, 163, -1000, 9444, 9444, -1000, -1000, 1055, 7984,
	770, -1000, -1000, -1000, 1144, 904, 1144, 9444, 9444, 6471,
	9444, 9444, -80, 1175, 654, -1000, 8568, 649, -1000, -1000,
	-1000, -1000, -1000, 1320, 16454, 1140, -1000, 11196, 15870, 1490,
	16454, 8568, 8568, -1000, -1000, 8568, 1280, -1000, 8568, -1000,
	-1000, -1000, -1000, 1279, 1140, 1140, 1140, 1016, -1000, 1490,
	1169, -1000, -1000, -1000, -46, -31, -1000, 8568, -1000, 3871,
	-1000, 3871, 13241, -1000, 1510, 1476, 337, 396, -1000, 972,
	945, -1000, 943, -1000, -5, -1000, -186, 82, -12, -1000,
	-1000, 1140, -1000, 1277, 1452, -1000, 1426, 861, -1000, 1820,
	-203, -1000, -1000, -1000, -1000, -1000, -1000, 1140, 1276, 1272,
	-1000, 1271, -1000, -1000, -1000, 1120, 574, 574, 85, 574,
	574, 574, -1000, 611, -1000, -1000, -1000, -1000, 1039, -1000,
	1028, -1000, 110, 109, -1000, 1195, -1000, 1023, 16162, 15870,
	-1000, 1194, -1000, 618, 1475, 179, 16162, 1504, 1504, -1000,
	274, 15870, -1000, 15870, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15870, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16162, -1000, -1000, -1000, -1000, -1000,
	15870, 367, -1000, -1000, 907, 8568, -1000, -1000, -1000, 6146,
	-1000, 1496, 13825, -1000, -1000, 1024, -1000, 9444, 439, 439,
	-1000, -1000, 1024, 1260, 1260, -1000, 1260, 1264, -1000, -1000,
	1260, 127, 1260, 126, 1024, 1024, 197, 358, -1000, 48,
	304, 1140, -72, -1000, 770, 8568, -1000, 1424, 1123, 1185,
	-1000, -1000, 7692, 1024, 1019, 507, 1016, 1481, -1000, 770,
	770, 770, 12656, 770, -212, 12656, 12656, 12656, 10904, 15870,
	1481, -1000, -1000, -1000, -1000, 770, 3499, -1000, 1009, -1000,
	1260, 1260, 442, 442, -191, 298, 297, -1000, -1000, -1000,
	-1000, -187, -1000, -1000, 682, -1000, 8568, 12656, 103, -1000,
	1192, 1112, 1103, -1000, 13533, 1024, -1000, 896, -1000, 866,
	1111, -1000, -1000, -1000, 574, -1000, -1000, -1000, -1000, -1000,
	85, 895, 85, 22, 20, 853, -1000, 842, 1239, 1319,
	6146, 3871, 421, 1463, -1000, -1000, 1474, -1000, 1135, 15870,
	-1000, -1000, 273, -1000, 1256, -1000, -1000, -1000, -1000, 1434,
	15870, -1000, -1000, 770, 1494, 1190, -1000, 439, -1000, -1000,
	248, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9444, 9444, -1000, 9444, 9444, 9444, 1024, 884, 770, 292,
	-1000, 1140, -1000, -1000, 1173, 15870, 15870, -1000, -1000, 1001,
	-1000, -1000, 999, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	995, 995, 995, 504, -1000, -1000, 735, 13241, 1442, -1000,
	723, -1000, -1000, 722, 184, 721, -1000, 15870, -187, -1000,
	1140, 731, 992, 9444, 1254, 839, -1000, 1102, -1000, 88,
	-139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 574,
	-1000, 574, -1000, -1000, 1100, 1097, 13241, 15870, 16162, -1000,
	-1000, 15870, -1000, -1000, -1000, -1000, -1000, 164, 2394, 1251,
	1249, 12656, 1140, 377, 1492, 1487, -1000, -1000, 272, 272,
	272, 272, 116, -1000, -1000, 1518, -1000, 1140, -1000, 1235,
	506, -1000, 15870, -1000, -1000, -212, -1000, -1000, -1000, -125,
	1316, 1065, 167, -1000, 941, 616, 830, 615, 614, 613,
	609, 606, 604, 594, -1000, -1000, -1000, 1517, -1000, -1000,
	-1000, 1515, 1248, -1000, 1247, 8568, 186, -1000, 288, -1000,
	1070, 1066, -1000, -1000, -1000, -1000, -1000, -1000, 969, 1242,
	1240, 1099, -1000, 159, 2394, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1490, 15870, 15870, 15870, 15870, 508,
	9152, 9152, 13241, 13241, 967, 207, 271, -1000, 8568, 8568,
	-1000, -1000, -1000, -1000, 1024, 188, -145, 16454, 1185, 1024,
	15870, -1000, -1000, -1000, -1000, 15870, -1000, -142, 1065, 15870,
	-1000, 813, -1000, -1000, 737, 798, 737, 737, 737, 737,
	737, 442, 442, 15870, 13241, 731, -1000, -74, -157, 168,
	-1000, -1000, -195, 13241, 13241, -126, 15870, 8568, 2359, -1000,
	1481, 1171, 10028, -1000, -1000, -1000, -1000, 15870, 1507, 1506,
	1505, 1499, 2344, 99, 147, 965, 961, 1298, 958, -1000,
	15870, 1231, 770, 1167, -1000, 1385, -100, -148, 1133, -1000,
	-1000, 1140, 956, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 682, 682, 949, 937, -1000,
	-1000, -1000, -1000, 108, 865, 768, 767, 761, 13, -1000,
	1486, 1496, 1220, 934, 931, -1000, -206, -1000, 770, -1000,
	-1000, 2394, 1423, 15870, 156, -1000, -1000, 1432, -1000, -1000,
	-1000, -1000, -1000, 2394, 2394, -1000, -1000, -129, -1000, 207,
	1405, 13241, -1000, 1381, -1000, 15870, -1000, 1065, -1000, -1000,
	363, 735, 759, -1000, 740, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12948, 735, 12656, 1496, 735, 8568, -223, -1000,
	-1000, 10612, 1473, 15870, 2319, -1000, 2281, -1000, -1000, 204,
	926, -131, 1024, -1000, 16162, 1316, -1000, -1000, -1000, 503,
	1316, 921, 735, -1000, 770, 646, 1235, -1000, -1000, -1000,
	661, 199, -1000, -146, -1000, 1216, -1000, 6146, -1000, -1000,
	-1000, -1000, -1000, 145, 1140, -151, 15870, -1000, 2394, 8860,
	-1000, 918, 2201, 272, 1024, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1762, 18, 12, 1761, 1758, 1755, 1556, 1554, 1539,
	1536, 1752, 1743, 1742, 1739, 1738, 1737, 1736, 1735, 1733,
	1732, 1731, 1726, 1725, 1724, 1722, 1721, 1720, 333, 1719,
	1718, 1717, 104, 1716, 99, 1714, 1713, 73, 130, 77,
	61, 1702, 1712, 45, 94, 91, 1710, 71, 1709, 1708,
	109, 1707, 90, 1706, 1705, 89, 1701, 1688, 37, 8,
	22, 41, 1687, 1683, 92, 139, 1682, 1680, 1678, 1670,
	1669, 1665, 80, 16, 25, 34, 33, 1659, 76, 24,
	1656, 78, 1654, 1651, 1650, 1649, 26, 1648, 83, 30,
	15, 14, 1647, 10, 1646, 84, 56, 43, 13, 119,
	86, 1644, 53, 82, 75, 1641, 1640, 812, 1639, 1638,
	1637, 1635, 1634, 1633, 923, 863, 1632, 1630, 1629, 70,
	0, 433, 204, 105, 1628, 64, 1627, 2083, 112, 88,
	40, 1625, 51, 765, 57, 1622, 1620, 55, 101, 100,
	106, 93, 1619, 1617, 1616, 1615, 1614, 724, 54, 72,
	187, 1612, 1611, 1608, 28, 65, 44, 67, 85, 1607,
	1606, 1605, 47, 1604, 20, 29, 1, 69, 1603, 1600,
	1599, 1598, 52, 36, 1596, 32, 49, 4, 5, 7,
	1595, 1594, 1593, 9, 1592, 39, 1591, 6, 1590, 17,
	1589, 1584, 1583, 1582, 1581, 1580, 1579, 1578, 1577, 1574,
	31, 21, 50, 42, 59, 58, 48, 1572, 46, 1571,
	3, 2, 1570, 11, 1569, 1568, 1558, 27, 23, 1550,
	1547, 1545, 1667, 795, 1543, 1534, 1532, 1515, 158,
}
var yyR1 = [...]int{

	0, 220, 221, 221, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 224,
	224, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 214, 214, 213, 215, 215, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 210, 210,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 205, 205, 205, 206, 206,
	206, 208, 208, 209, 209, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 212, 212, 191, 191, 191, 192,
	192, 192, 192, 192, 192, 194, 194, 195, 195, 125,
	125, 189, 189, 188, 187, 187, 186, 186, 185, 196,
	196, 20, 169, 170, 170, 170, 170, 170, 158, 139,
	139, 139, 139, 139, 139, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 202, 202, 202,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 198,
	198, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 148, 148, 148, 148, 148,
	148, 197, 197, 193, 193, 193, 193, 193, 193, 143,
	143, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 142, 142, 142, 142, 142, 142, 142, 142, 144,
	144, 144, 144, 144, 144, 144, 144, 140, 140, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 146, 146, 146, 146, 146, 146, 146, 146,
	157, 157, 147, 147, 155, 155, 156, 156, 156, 154,
	154, 154, 151, 151, 152, 152, 153, 153, 153, 149,
	149, 149, 150, 150, 150, 160, 178, 178, 178, 180,
	180, 181, 181, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 168, 168, 204, 204, 177, 177,
	177, 174, 174, 174, 174, 174, 174, 174, 174, 167,
	167, 176, 176, 175, 175, 162, 162, 162, 162, 162,
	163, 164, 164, 164, 164, 161, 200, 200, 200, 201,
	201, 165, 165, 166, 166, 171, 171, 171, 172, 172,
	172, 173, 173, 173, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 225, 225,
	226, 226, 226, 226, 226, 226, 226, 184, 182, 182,
	183, 183, 17, 18, 18, 18, 18, 18, 19, 19,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 136, 136, 136, 23,
	23, 25, 25, 26, 27, 24, 24, 24, 24, 24,
	227, 28, 29, 29, 30, 30, 30, 34, 34, 34,
	32, 32, 33, 33, 39, 39, 38, 38, 40, 40,
	40, 40, 124, 124, 124, 123, 123, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 217, 217, 216, 216,
	218, 218, 218, 218, 218, 218, 57, 57, 93, 93,
	93, 96, 96, 46, 46, 46, 46, 47, 47, 48,
	48, 49, 49, 131, 131, 130, 130, 130, 129, 129,
	51, 51, 51, 53, 52, 52, 52, 52, 54, 54,
	56, 56, 55, 55, 58, 58, 58, 58, 59, 59,
	94, 94, 41, 41, 41, 41, 41, 41, 41, 108,
	108, 61, 61, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 71, 71, 71, 71, 71, 71, 62,
	62, 62, 62, 62, 62, 62, 37, 37, 72, 72,
	72, 78, 73, 73, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 69, 69, 69,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 228, 228, 70, 70, 70, 70,
	35, 35, 35, 35, 35, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 138, 138, 138, 138, 138, 138, 138, 82, 82,
	36, 36, 80, 80, 81, 83, 83, 79, 79, 79,
	219, 64, 64, 64, 64, 64, 64, 64, 64, 66,
	66, 66, 84, 84, 85, 85, 86, 86, 87, 87,
	88, 89, 89, 89, 90, 90, 90, 90, 91, 91,
	91, 63, 63, 63, 63, 63, 63, 92, 92, 92,
	92, 97, 97, 74, 74, 76, 76, 75, 77, 98,
	98, 102, 99, 99, 103, 103, 103, 103, 103, 101,
	101, 101, 126, 126, 126, 106, 106, 114, 114, 115,
	115, 107, 107, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 117, 117, 117, 118, 118, 121, 121,
	122, 122, 127, 127, 128, 128, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 222, 223, 132, 133, 133, 133,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 1, 3, 3, 3, 3, 2, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 2, 4,
	4, 2, 2, 3, 2, 3, 2, 7, 8, 3,
	3, 6, 8, 5, 8, 7, 4, 2, 4, 6,
	2, 1, 1, 1, 1, 1, 1, 3, 3, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 3, 3, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 2, 1, 2, 1, 1, 1, 1, 4,
	4, 4, 4, 4, 1, 5, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 3, 4, 1,
	1, 1, 3, 3, 2, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 0, 1, 1, 0,
	3, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 11, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 5, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -220, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 187, 188,
	190, 191, 26, 139, 140, 143, 144, -222, 8, 292,
	53, -221, 333, -86, 15, -30, 5, -28, -227, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 154, 284,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 284, 119, 120, -55, -127, 56,
	-120, 161, 301, 21, 187, 200, 201, 192, 233, 221,
	302, 159, 218, 222, 270, 332, 65, 190, 279, 128,
	165, 141, 213, 216, 215, 207, 204, 28, 239, 308,
	206, 131, 240, 244, 250, 271, 299, 197, 198, 273,
	237, 32, 133, 303, 34, 149, 274, 242, 236, 231,
	235, 196, 230, 38, 210, 246, 245, 247, 269, 224,
	160, 249, 226, 208, 225, 18, 144, 147, 241, 243,
	205, 162, 126, 151, 307, 275, 203, 148, 163, 143,
	278, 323, 158, 191, 272, 199, 281, 37, 255, 217,
	194, 209, 195, 130, 188, 156, 228, 150, 211, 212,
	234, 193, 229, 189, 152, 145, 280, 256, 309, 227,
	223, 219, 220, 157, 122, 154, 155, 262, 263, 264,
	265, 305, 276, 214, 257, 258, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 222, 113, 260, 121, 32,
	151, -136, 120, -109, 155, 262, 263, 264, 265, 56,
	272, 271, 266, -127, 189, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -222, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -219, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, 58, 57, 66, 59, 60, 61, 62, 67,
	68, 69, -121, 282, -75, -222, 43, 44, 293, 294,
	295, 296, 300, 297, 76, 33, 283, 291, 290, 289,
	287, 288, 285, 286, 331, 125, 284, 102, 292, -107,
	-43, -44, -45, -46, -57, -78, -222, -55, 11, -50,
	-55, -99, -135, 189, -103, 272, 271, -122, 282, -101,
	-121, -119, 270, 222, 269, 56, -120, 118, 175, 312,
	72, 23, 25, 253, 259, 174, 75, 107, 16, 76,
	181, 321, 322, 106, 293, 113, 47, 285, 286, 283,
	179, 295, 296, 284, 260, 186, 20, 29, 10, 26,
	139, 22, 100, 115, 176, 79, 80, 142, 24, 140,
	69, 182, 184, 19, 50, 132, 11, 311, 13, 14,
	325, 313, 125, 124, 91, 324, 121, 45, 8, 109,
	27, 88, 41, 137, 185, 43, 89, 17, 287, 288,
	31, 300, 146, 102, 48, 35, 326, 73, 327, 67,
	51, 277, 180, 71, 15, 46, 328, 134, 183, 90,
	116, 292, 44, 177, 329, 119, 178, 6, 298, 30,
	138, 42, 120, 261, 78, 123, 68, 5, 136, 9,
	49, 52, 289, 290, 291, 33, 77, 12, 135, 304,
	70, -170, -158, 56, -200, 321, 322, 122, -121, -115,
	125, -115, -121, -121, -55, -115, 292, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 284, 56, 151, 120, 152, 122, -133, -222, -122,
	-133, -133, -133, 156, 157, -133, -110, 267, 51, -133,
	-223, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 331, 81, 82,
	83, 84, 85, 86, 87, -108, -222, -78, -222, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -222, 110,
	-2, -73, -41, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -82, -41, -222, -228, -222, -228, -228, -228,
	-228, -228, -228, -228, -138, 107, 222, 141, 213, -141,
	-140, 228, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 201, 221, 302, -222, -222, -222, -222, -56, 27,
	-55, 30, 54, -51, -53, -52, -54, 41, 45, 47,
	42, 43, 44, 48, -131, 23, -43, -222, -130, 147,
	-129, 23, -127, 58, -55, -50, -224, 54, 11, 52,
	54, -99, 189, -100, -104, 273, 275, 81, 110, -126,
	-121, 58, 29, 30, 55, 54, -159, -139, -143, -140,
	-145, -144, -146, -121, -141, -142, 221, 302, 218, 222,
	219, 224, 225, 226, 107, 223, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 227, 239, 30,
	141, 211, 212, 213, 216, 215, 217, 214, 240, 241,
	242, 243, 244, 245, 246, 247, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 203, 204, 206, 207,
	208, 210, 209, 121, -55, -189, 52, 56, 73, 56,
	51, -205, 51, 19, 174, 175, 23, -55, -55, 277,
	-133, 123, -55, 24, 51, -55, 56, 56, -128, -127,
	-119, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -112, 261, 268, -55, 9, 91, 54, 18, 110,
	54, -89, 25, 26, -90, -223, -34, -66, -121, 59,
	62, -33, 42, -55, -41, -41, -71, 67, 73, 68,
	69, -123, 98, -128, -122, -119, -65, -72, -75, -78,
	63, 91, 89, 90, 75, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-134, 56, 58, -138, 56, -64, -64, -121, -39, 22,
	-38, -40, -122, -223, 54, -223, -2, -38, -38, -41,
	-41, -79, -121, -127, -79, -38, -32, -80, -81, 77,
	-79, -223, 220, -38, -39, -38, -38, -95, 147, -55,
	-98, -102, -79, -44, -45, -45, -44, -45, 41, 41,
	41, 46, 41, 46, 41, -52, -127, -223, -58, 49,
	124, 50, -222, -129, -95, 52, -43, -55, -103, -100,
	54, 274, 276, 277, 51, 70, -41, -122, -150, 107,
	106, -171, -172, -173, -122, 58, 59, -158, -160, -162,
	-161, -174, -163, 128, 126, 130, 131, 136, -167, 121,
	137, 67, 73, -202, 128, 51, 253, 259, 126, 137,
	136, 332, 65, 129, 311, 313, 29, -153, 334, 248,
	-151, 256, -147, 53, -147, -147, 220, -147, -147, -147,
	-147, -147, -149, 222, -149, -149, -149, -149, 53, 53,
	-147, -147, -147, -147, -155, 53, 205, -155, -155, -156,
	53, -156, -121, 23, -187, 304, -188, 56, -133, 24,
	-133, -55, -208, -206, 8, 9, 10, -55, -139, -116,
	118, 115, 116, -184, 114, 253, 222, 65, 29, 15,
	293, 147, 309, 56, 148, -55, -55, -55, -133, -111,
	11, 91, 37, -41, -41, -128, -88, -91, -106, 19,
	11, 33, 33, -38, 67, 68, 69, 110, -222, -72,
	-65, -65, -65, -37, 142, 72, -223, -223, -38, 54,
	-41, -223, -223, -223, 54, 52, 23, 54, 11, 110,
	54, 11, -223, -38, -83, -81, 79, -41, -223, -223,
	-223, -223, -223, -63, 30, 33, -2, -222, -222, -59,
	54, 12, 81, -48, -47, 51, 52, -49, 51, -47,
	41, 41, -217, 304, 121, 121, 121, -96, -121, -59,
	-43, -59, -104, -105, 278, 275, 281, 81, 56, 54,
	-173, 81, 53, -201, 51, 73, -165, -121, 137, -167,
	-167, 56, -167, 56, 56, 67, 19, -121, 9, 137,
	137, -201, 58, -127, -198, 312, 16, 53, -203, 53,
	58, 59, 60, 67, -148, 66, -61, 249, 283, 286,
	285, 250, 335, -152, 257, 59, -149, -149, -147, -149,
	-149, -149, -150, 30, -150, -150, -150, -150, -157, 58,
	-157, -154, 304, 305, -154, 59, -155, 59, 51, 52,
	-2, -186, -185, -122, -191, 23, 51, 54, -205, -132,
	-125, 128, -226, 154, 127, 132, 131, 56, 126, 130,
	147, -190, 154, 127, 128, 132, 131, 56, 121, 137,
	126, 130, 147, 136, -117, -118, 123, 23, 121, 137,
	147, 118, -133, -113, 89, 12, -127, -127, 38, 110,
	-55, -42, 11, 98, -122, -39, -37, 72, -65, -65,
	-223, -40, -137, 107, 218, 141, 213, 207, 237, 238,
	224, 255, 211, 256, -134, -137, -65, -65, -122, -65,
	-65, 301, -86, 80, -41, 78, -97, 51, -98, -74,
	-76, -75, -222, -2, -92, -121, -96, -86, -102, -41,
	-41, -41, 53, -41, 53, -222, -222, -222, -223, 54,
	-86, -59, 275, 279, 280, -41, -172, -173, -176, -175,
	-121, 137, 10, 9, 19, 132, 126, 56, 56, 56,
	-200, 136, 323, -202, 332, -148, -222, 53, 23, 29,
	59, -203, 53, -193, 331, -222, -147, 53, -147, 53,
	53, 55, -150, -150, -149, -150, -150, -150, 56, 107,
	55, 54, 55, 211, 211, 54, 55, 54, -55, -121,
	54, 81, -192, 19, 162, 163, -55, -206, -208, -225,
	121, 137, -121, -132, -121, -132, -121, -55, -132, -121,
	128, -162, 58, -41, -59, -43, -223, -65, -223, -147,
	-147, -147, -156, -147, 198, -147, 198, -223, -223, -223,
	54, 19, -223, 54, 19, -222, -36, 298, -41, 28,
	-97, 54, -223, -223, -223, 54, 110, -223, -90, -93,
	-121, 137, -216, -218, 325, 326, 327, 328, 329, 330,
	-93, -93, -93, -130, -121, -90, 55, 54, -147, -147,
	-164, 158, 159, 30, 160, -164, 323, 137, 137, -200,
	-201, -41, -93, 53, 313, 54, 55, -203, -121, 222,
	212, 251, 228, 237, -223, 55, 55, 55, -150, -149,
	58, -149, 258, 258, 59, 59, 53, 52, 51, -185,
	-173, 123, 21, 6, 8, 9, 10, 19, 23, -121,
	136, 53, 27, -121, -84, 13, -149, 56, -65, -65,
	-65, -65, -65, -223, 58, 137, -76, 33, -2, -222,
	-121, -121, 54, 55, 55, 54, -223, -223, -223, -58,
	-178, -180, 304, -179, 52, 133, 65, 167, 168, 169,
	170, 171, 172, 173, -175, -89, -201, 51, 67, 161,
	-201, 51, -165, -121, -200, -222, -223, 55, -65, 53,
	59, 55, 220, -154, -150, -150, 55, 55, -176, -121,
	-55, -166, -121, 176, -209, -211, -7, -9, -8, -11,
	-10, -12, -13, -14, -3, 20, 180, 181, 186, 182,
	135, 125, 53, 53, -93, -222, 126, -85, 14, 16,
	-223, -223, -223, -223, -35, 91, 304, 9, -74, -2,
	110, -121, -218, -217, -177, 51, -179, 304, 53, 306,
	56, -168, 81, 58, 81, 81, 81, 81, 81, 81,
	81, 9, 10, 53, 53, -41, -197, 160, 55, -199,
	55, 55, 55, 53, 53, -194, 54, 52, 177, -211,
	-86, -214, -121, -213, -121, -121, -121, -207, 35, 183,
	184, 185, -60, -65, -60, -176, -176, 55, -182, -183,
	147, 137, -41, -73, -223, 302, 48, 307, -98, -223,
	-121, -121, -181, -179, -121, 59, -204, 51, 70, 59,
	-204, -204, -204, -204, -204, -164, -164, -166, -176, -223,
	299, 310, 55, 188, 315, 316, 146, 317, 160, 318,
	319, -94, 324, -176, -176, -195, 304, -121, -41, -212,
	-211, 187, -90, 54, -215, -139, 178, -121, 11, 11,
	11, 11, -211, 187, 187, 55, 55, -189, -223, 54,
	-121, 53, 38, 303, 308, -222, 55, 54, -201, -201,
	55, 55, 304, 59, 16, 59, 59, 59, 59, 316,
	146, 318, 16, -59, 53, 55, 55, 332, -211, -91,
	-213, -121, 179, 27, -210, -211, -210, -187, -183, 33,
	-176, 38, -121, -179, 129, -178, 59, 59, 320, -127,
	-178, -93, -59, -178, -41, 333, 19, -121, 80, -211,
	80, 149, 55, 304, -223, -55, -177, 110, -177, 55,
	-178, 80, -2, 79, 150, 307, 53, -122, 187, -222,
	308, -166, -210, -65, 146, 55, 80, -223, -223,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 726, 0, 470, 470, 470, 470, 470, 470, 0,
	-2, 781, 0, 0, 0, 0, -2, 460, 461, 0,
	463, 464, 1064, 1064, 1064, 1064, 1064, 0, 33, 34,
	1062, 1, 3, 734, 0, 0, 474, 477, 472, 0,
	781, 0, 0, 0, 83, 0, 356, 0, 0, 779,
	779, 0, 0, 0, 779, 130, 0, 0, 0, 782,
	0, 777, 0, 777, 777, 777, 0, 419, 552, 802,
	803, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 0, 0, 0, 0, 1065, 1065, 1065,
	1065, 0, 1065, 448, 437, 439, 440, 441, 442, 1065,
	457, 458, 447, 459, 462, 465, 466, 467, 468, 469,
	27, 738, 0, 0, 726, 29, 0, 470, 475, 476,
	480, 478, 479, 471, 0, 488, 492, 0, 562, 0,
	567, 569, -2, -2, 0, 604, 605, 606, 607, 608,
	609, 0, 0, 0, 0, 0, 0, 0, 633, 634,
	635, 636, 711, 712, 713, 714, 715, 716, 717, 718,
	571, 572, 707, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 664, 664, 664, 664,
	664, 664, 664, 664, 0, 0, 0, 0, 0, 0,
	0, 499, 501, 502, 503, 533, 0, 535, 0, 0,
	41, 45, 0, 1032, 762, -2, -2, 0, 0, 0,
	800, 801, -2, 942, -2, 798, 799, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 0, 143, 0, 0, 357, 358, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 1065, 0,
	0, 0, 0, 0, 0, 0, 418, 0, 420, 1065,
	1065, 1065, 1065, 1065, 1065, 1065, 1065, 429, 1066, 1067,
	430, 431, 432, 1065, 1065, 434, 0, 449, 0, 443,
	28, 1063, 22, 0, 0, 735, 0, 727, 728, 731,
	734, 27, 477, 0, 482, 481, 473, 0, 489, 0,
	0, 0, 493, 0, 495, 496, 0, 565, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 589, 590,
	591, 592, 593, 594, 595, 568, 0, 582, 0, 0,
	0, 625, 626, 627, 628, 629, 630, 0, 484, 0,
	27, 0, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 480, 0, 699, 0, 655, 0, 656, 657, 658,
	659, 660, 661, 662, 663, 691, 0, 693, 694, 695,
	696, 697, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 247, 248, 0, 484, 0, 0, 43, 0,
	551, 0, 0, 0, 0, 0, 0, 540, 0, 0,
	543, 0, 0, 0, 0, 534, 0, 0, 554, 996,
	536, 0, 538, 539, -2, 0, 0, 0, 39, 40,
	0, 46, 1032, 48, 72, 0, 0, 0, 0, 302,
	772, 773, 774, 770, 365, 0, 148, 296, 292, 150,
	151, 152, 153, 154, 282, 220, 247, 248, 282, 282,
	282, 282, 282, 254, 282, 282, 299, 299, 299, 299,
	299, 263, 264, 265, 266, 267, 268, 269, 957, 0,
	239, 282, 282, 282, 243, 282, 245, 246, 272, 273,
	274, 275, 276, 277, 278, 279, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 284, 284, 284, 286,
	286, 237, 238, 0, 0, 134, 0, 1065, 0, 1065,
	0, 0, 0, 95, 96, 97, 0, 141, 0, 0,
	385, 0, 413, 778, 0, 1065, 416, 417, 553, 804,
	805, 421, 422, 423, 424, 425, 426, 427, 428, 433,
	436, 450, 444, 445, 438, 739, 0, 0, 0, 0,
	0, 730, 732, 733, 738, 30, 480, 0, 719, 0,
	0, 0, 483, 25, 563, 564, 566, 583, 0, 585,
	587, 494, 490, 0, 708, -2, 573, 574, 598, 599,
	600, 0, 0, 0, 0, 596, 578, 0, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	624, 675, 676, 632, 0, 622, 623, 631, 0, 0,
	485, 486, 710, 601, 0, 757, 27, 0, 0, 0,
	0, 0, 707, 0, 0, 0, 0, 705, 702, 0,
	0, 665, 692, 0, 0, 0, 0, 0, 0, 550,
	558, 759, 0, 500, 529, 531, 0, 526, 541, 542,
	544, 0, 546, 0, 548, 549, 504, 505, 506, 0,
	0, 0, 0, 537, 558, 0, 558, 42, 763, 47,
	0, 0, 75, 76, 764, 765, 766, 0, 768, 303,
	0, 142, 366, 368, 371, 372, 373, 144, 145, 146,
	147, 0, 359, 361, 0, 0, 0, 0, 0, 339,
	340, 156, 0, 158, 0, 0, 161, 162, 0, 164,
	166, 359, 0, 0, 0, 0, 0, 155, 0, 298,
	294, 293, 219, 0, 299, 299, 282, 299, 299, 299,
	256, 257, 302, 0, 302, 302, 302, 302, 0, 0,
	289, 289, 242, 244, 231, 0, 284, 233, 234, 235,
	0, 236, 0, 0, 88, 0, 132, 133, 89, 780,
	90, 116, 0, 101, 98, 99, 100, 0, 94, 1064,
	129, 0, 793, 386, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 0, 0, 412, 1065, 415, 453,
	0, 0, 0, 736, 737, 0, 729, 23, 0, 775,
	776, 720, 721, 497, 584, 586, 588, 0, 484, 575,
	596, 579, 0, 576, 0, 0, 570, 637, 0, 0,
	603, -2, 640, 641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 703, 0, 0, 654, 666,
	667, 668, 669, 751, 0, 0, -2, 0, 0, 726,
	0, 0, 0, 523, 530, 0, 0, 524, 0, 525,
	545, 547, 516, 0, 0, 0, 0, 0, 521, 726,
	558, 38, 73, 74, 0, 0, 80, 0, 304, 0,
	369, 0, 0, 345, 0, 0, 0, 362, 331, 0,
	0, 334, 0, 336, 356, 157, 0, 0, 0, 163,
	165, 0, 169, 170, 0, 189, 0, 0, 177, 0,
	213, 181, 182, 183, 184, 185, 186, 0, 282, 282,
	209, 0, 297, 149, 295, 0, 302, 302, 299, 302,
	302, 302, 258, 0, 259, 260, 261, 262, 0, 280,
	0, 240, 0, 0, 241, 0, 232, 0, 0, 0,
	-2, 135, 136, 0, 119, 0, 0, 0, 0, 374,
	0, 0, 1064, 0, 400, 401, 402, 403, 404, 405,
	406, 1064, 0, 387, 388, 389, 390, 391, 392, 393,
	394, 395, 396, 397, 0, 1064, 794, 795, 796, 797,
	0, 0, 414, 435, 0, 0, 451, 452, 740, 0,
	24, 558, 0, 491, 709, 0, 577, 0, 597, 580,
	638, 487, 0, 282, 282, 680, 282, 286, 683, 684,
	282, 686, 282, 689, 0, 0, 0, 0, 708, 0,
	0, 0, 700, 653, 706, 0, 31, 0, 751, 741,
	753, 755, 0, 27, 0, 747, 0, 734, 760, 559,
	761, 527, 0, 532, 0, 0, 0, 0, 535, 0,
	734, 37, 77, 78, 79, 767, 367, 370, 0, 341,
	282, 282, 0, 0, 0, 0, 0, 332, 333, 335,
	337, 356, 176, 159, 359, 160, 0, 0, 0, 190,
	0, 0, 0, 180, 0, 0, 205, 0, 207, 0,
	0, 283, 249, 250, 302, 251, 252, 253, 300, 301,
	299, 0, 299, 0, 0, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 117, 118, 0, 102, 0, 0,
	398, 399, 0, 379, 0, 380, 382, 383, 384, 0,
	361, 378, 454, 455, 722, 498, 639, 581, 642, 677,
	299, 681, 682, 685, 687, 688, 690, 644, 643, 645,
	0, 0, 648, 0, 0, 0, 0, 0, 704, 0,
	32, 0, 756, -2, 0, 0, 0, 44, 35, 0,
	518, 519, 0, 508, 510, 511, 512, 513, 514, 515,
	0, 0, 0, 554, 522, 36, 306, 0, 731, 344,
	359, 351, 352, 0, 0, 359, 360, 361, 356, 338,
	0, 0, 0, 0, 173, 0, 178, 0, 188, 942,
	289, 216, 217, 218, 187, 206, 208, 210, 255, 302,
	281, 302, 290, 291, 0, 0, 0, 0, 0, 137,
	138, 0, 120, 121, 122, 123, 124, 0, 0, 0,
	0, 0, 0, 362, 724, 0, 678, 679, 0, 0,
	0, 0, 670, 652, 701, 0, 754, 0, -2, 0,
	749, 748, 0, 528, 507, 0, 555, 556, 557, 506,
	328, 307, 0, 309, 0, 324, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 343, 346, 0, 353, 354,
	347, 0, 0, 362, 0, 0, 211, 171, 0, 191,
	0, 0, 214, 215, 270, 271, 285, 288, 0, 0,
	0, 125, 363, 0, 93, 103, 105, 106, 107, 108,
	109, 110, 111, 112, 726, 0, 0, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	646, 647, 649, 650, 0, 0, 0, 0, 744, 27,
	0, 520, 509, 517, 305, 0, 310, 0, 0, 0,
	313, 0, 325, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 0, 0,
	175, 179, 560, 0, 0, 127, 0, 0, 0, 104,
	734, 49, 54, 51, 56, 57, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 408,
	0, 0, 725, 723, 651, 0, 0, 0, 752, -2,
	750, 329, 0, 311, 316, 314, 317, 326, 327, 318,
	319, 320, 321, 322, 323, 359, 359, 0, 0, 168,
	212, 172, 174, 0, 0, 0, 0, 0, 0, 202,
	0, 558, 0, 0, 0, 91, 0, 364, 126, 92,
	114, 0, 738, 0, 0, 53, 55, 59, 62, 63,
	64, 65, 66, 0, 0, 375, 377, 134, 407, 0,
	0, 0, 671, 0, 674, 0, 308, 0, 348, 349,
	0, 306, 0, 193, 0, 195, 196, 197, 198, 199,
	200, 201, 0, 306, 0, 558, 306, 0, 0, 113,
	52, 0, 0, 0, 0, 68, 0, 381, 409, 0,
	0, 672, 0, 312, 0, 328, 192, 194, 203, 0,
	328, 0, 306, 85, 128, 0, 0, 60, 67, 69,
	70, 0, 376, 0, 330, 0, 355, 0, 84, 561,
	86, 115, -2, 0, 0, 0, 0, 204, 0, 0,
	673, 0, 0, 0, 0, 350, 71, 410, 411,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 333,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 334, 3, 335, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:364
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:369
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:370
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:374
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:397
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:405
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:409
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:415
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:422
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:438
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:442
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:449
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:461
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:473
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:477
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:483
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:502
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:503
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:516
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:520
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:526
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:534
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:561
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:571
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:576
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:580
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:600
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:625
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:629
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:633
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:637
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:647
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:654
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:664
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:674
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:682
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:693
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:703
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:717
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:721
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:735
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:739
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:745
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:750
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:770
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:786
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:801
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:809
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:817
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:821
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:825
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:837
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:848
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:859
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:871
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:899
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:903
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:909
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:913
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:919
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:930
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:942
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:949
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:953
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:957
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:962
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:966
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:970
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:974
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:982
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:987
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:991
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:996
		{
			yyVAL.expr = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1000
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1009
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1014
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1018
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1024
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1029
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1034
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1040
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1045
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1051
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1056
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1066
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1073
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1085
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1089
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1093
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1109
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1120
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1126
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1138
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1143
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1148
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1153
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1158
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1168
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1173
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1183
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1188
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1193
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1199
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1214
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1221
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1227
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1233
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1239
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1245
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1252
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1256
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1260
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1266
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1270
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1274
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1278
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1282
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1286
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1290
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1294
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1298
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1304
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1308
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1313
		{
			yyVAL.sequence = &Sequence{}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1317
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1322
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1327
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1332
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1337
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1342
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1347
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1352
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1357
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1362
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1367
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1372
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1377
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1384
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1388
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1392
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1396
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1400
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1404
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1409
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1413
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1418
		{
			yyVAL.bytes = nil
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1429
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1434
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1476
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1482
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1488
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1500
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1584
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1588
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1592
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1667
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1671
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1675
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1679
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1683
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1687
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1691
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1695
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1701
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1706
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1711
		{
			yyVAL.optVal = nil
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1715
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1720
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1724
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1732
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1736
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1742
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1750
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1754
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1758
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1763
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1767
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1772
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1776
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1781
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1785
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1789
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1794
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1798
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1802
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1807
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1811
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1815
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1821
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1826
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1830
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1834
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1840
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1844
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1850
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1854
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1860
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1864
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1869
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1873
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1877
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1881
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1885
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1889
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1893
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1897
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1901
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1907
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1911
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1917
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexPartition = nil
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1935
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1941
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1945
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1949
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1957
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1961
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1965
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1969
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1985
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1989
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1995
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2000
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2006
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 346:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2011
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 347:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2018
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 348:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2025
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2032
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 350:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2041
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2053
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2057
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2061
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2065
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 355:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2071
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2082
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2086
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2090
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2096
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2100
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2105
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2112
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2116
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2121
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2125
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2129
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2137
		{
			yyVAL.str = yyDollar[1].str
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2141
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2145
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2151
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2155
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2159
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 374:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2165
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2169
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 376:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2183
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 377:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2197
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[7].colIdent,
					Unique:  true,
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 378:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2211
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 379:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2220
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 380:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2224
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 381:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2228
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 382:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2241
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 383:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2251
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2256
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2261
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2265
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 407:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2297
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2303
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2307
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 410:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2313
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 411:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2317
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 412:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2323
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2329
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2337
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2342
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2350
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2354
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2360
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2364
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2369
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2408
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2416
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2420
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2424
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2428
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2432
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2442
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2454
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2458
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2462
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2492
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2496
		{
			yyVAL.str = "extended "
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2502
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2506
		{
			yyVAL.str = "full "
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2512
		{
			yyVAL.str = ""
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2516
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2520
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2526
		{
			yyVAL.showFilter = nil
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2530
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2534
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2540
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2544
		{
			yyVAL.str = SessionStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2548
		{
			yyVAL.str = GlobalStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2558
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2564
		{
			yyVAL.statement = &Begin{}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.statement = &Begin{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2574
		{
			yyVAL.statement = &Commit{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2580
		{
			yyVAL.statement = &Rollback{}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2586
		{
			yyVAL.statement = &OtherRead{}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2590
		{
			yyVAL.statement = &OtherRead{}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2594
		{
			yyVAL.statement = &OtherRead{}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2598
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2602
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 470:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2607
		{
			setAllowComments(yylex, true)
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2611
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 472:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2617
		{
			yyVAL.bytes2 = nil
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2621
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2627
		{
			yyVAL.str = UnionStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2631
		{
			yyVAL.str = UnionAllStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2635
		{
			yyVAL.str = UnionDistinctStr
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2640
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2644
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2648
		{
			yyVAL.str = SQLCacheStr
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2653
		{
			yyVAL.str = ""
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2657
		{
			yyVAL.str = DistinctStr
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2662
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2666
		{
			yyVAL.str = StraightJoinHint
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2671
		{
			yyVAL.selectExprs = nil
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2675
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2681
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2685
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2691
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2695
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2699
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 491:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2703
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2708
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2712
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2716
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2723
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 497:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2728
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2732
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2738
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2742
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2752
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2756
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2760
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2765
		{
			yyVAL.strs = []string{}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2769
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2775
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2779
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2785
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2789
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2793
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2811
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 517:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2815
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2821
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2826
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2830
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2836
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2840
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2853
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2857
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2861
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2865
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2871
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2873
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2877
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2879
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2883
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2885
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2893
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2897
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2901
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2908
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2914
		{
			yyVAL.str = JoinStr
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2918
		{
			yyVAL.str = JoinStr
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2922
		{
			yyVAL.str = JoinStr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2928
		{
			yyVAL.str = StraightJoinStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2934
		{
			yyVAL.str = LeftJoinStr
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2938
		{
			yyVAL.str = LeftJoinStr
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2942
		{
			yyVAL.str = RightJoinStr
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2946
		{
			yyVAL.str = RightJoinStr
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2952
		{
			yyVAL.str = NaturalJoinStr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2956
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2966
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2970
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2976
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2980
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2985
		{
			yyVAL.indexHints = nil
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2989
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 556:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2993
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2997
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3002
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3006
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3011
		{
			yyVAL.columns = nil
		}
	case 561:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3015
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3021
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3025
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3029
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3033
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3037
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3041
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3045
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3051
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3055
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3061
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3065
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3071
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3075
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3079
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3083
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3087
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3091
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3095
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3099
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3103
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3107
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3113
		{
			yyVAL.str = IsNullStr
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3117
		{
			yyVAL.str = IsNotNullStr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.str = IsTrueStr
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3125
		{
			yyVAL.str = IsNotTrueStr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.str = IsFalseStr
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3133
		{
			yyVAL.str = IsNotFalseStr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3139
		{
			yyVAL.str = EqualStr
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3143
		{
			yyVAL.str = LessThanStr
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3147
		{
			yyVAL.str = GreaterThanStr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3151
		{
			yyVAL.str = LessEqualStr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3155
		{
			yyVAL.str = GreaterEqualStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3159
		{
			yyVAL.str = NotEqualStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3163
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 596:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3168
		{
			yyVAL.expr = nil
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3172
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3178
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3182
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3186
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3192
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3198
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3202
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3208
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3216
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3220
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3252
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3264
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3268
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3272
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3276
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3280
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3284
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3288
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3292
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3296
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3300
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3308
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3322
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3326
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3330
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3338
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3352
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3356
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 639:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3360
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3370
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3374
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 642:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3378
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 643:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3382
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 645:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3390
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 646:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3394
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 647:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3398
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 648:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3402
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 649:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3406
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 650:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3410
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 651:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3414
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 652:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3418
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 653:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3422
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3436
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3453
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3463
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3472
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 666:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3494
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3498
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3504
		{
			yyVAL.str = ""
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3508
		{
			yyVAL.str = BooleanModeStr
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3512
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 673:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3516
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3520
		{
			yyVAL.str = QueryExpansionStr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3526
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3530
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3536
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3540
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3544
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3548
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3552
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3556
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3562
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3566
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 685:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3570
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3574
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3578
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3582
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3586
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3590
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3596
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3600
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3604
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3608
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3612
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3616
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3620
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3625
		{
			yyVAL.expr = nil
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3629
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3634
		{
			yyVAL.str = string("")
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3638
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3644
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3648
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3654
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3659
		{
			yyVAL.expr = nil
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3663
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3669
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3673
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3677
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3683
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3689
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3693
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3697
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3701
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3705
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3709
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3713
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3717
		{
			yyVAL.expr = &NullVal{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3723
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3732
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3736
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3741
		{
			yyVAL.exprs = nil
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3745
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3750
		{
			yyVAL.expr = nil
		}
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3754
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 726:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3759
		{
			yyVAL.orderBy = nil
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3763
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3769
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3773
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 730:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3779
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 731:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3784
		{
			yyVAL.str = AscScr
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3788
		{
			yyVAL.str = AscScr
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3792
		{
			yyVAL.str = DescScr
		}
	case 734:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3797
		{
			yyVAL.limit = nil
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3801
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3805
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3809
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3814
		{
			yyVAL.str = ""
		}
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3818
		{
			yyVAL.str = ForUpdateStr
		}
	case 740:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3822
		{
			yyVAL.str = ShareModeStr
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3835
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3839
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3843
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3848
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3852
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 746:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3856
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3863
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3867
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3871
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 750:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3875
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3880
		{
			yyVAL.updateExprs = nil
		}
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3884
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3890
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3894
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3900
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3904
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 757:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3910
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3916
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3926
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3930
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3936
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3942
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 763:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3946
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 764:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3952
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3956
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3960
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 767:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3965
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3969
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 770:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3976
		{
			yyVAL.bytes = []byte("charset")
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3983
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3987
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3991
		{
			yyVAL.expr = &Default{}
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4000
		{
			yyVAL.byt = 0
		}
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4002
		{
			yyVAL.byt = 1
		}
	case 779:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4005
		{
			yyVAL.empty = struct{}{}
		}
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4007
		{
			yyVAL.empty = struct{}{}
		}
	case 781:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4010
		{
			yyVAL.str = ""
		}
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4012
		{
			yyVAL.str = IgnoreStr
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4016
		{
			yyVAL.empty = struct{}{}
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4018
		{
			yyVAL.empty = struct{}{}
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4020
		{
			yyVAL.empty = struct{}{}
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4022
		{
			yyVAL.empty = struct{}{}
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4024
		{
			yyVAL.empty = struct{}{}
		}
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4026
		{
			yyVAL.empty = struct{}{}
		}
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4028
		{
			yyVAL.empty = struct{}{}
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4030
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4032
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4034
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4037
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4039
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4041
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4045
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4047
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4051
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4055
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4062
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4068
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4072
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4079
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1062:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4361
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4370
		{
			decNesting(yylex)
		}
	case 1064:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4375
		{
			forceEOF(yylex)
		}
	case 1065:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4380
		{
			forceEOF(yylex)
		}
	case 1066:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4384
		{
			forceEOF(yylex)
		}
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4388
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
