// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const MEDIUMINT = 57490
const INT = 57491
const INTEGER = 57492
const BIGINT = 57493
const INTNUM = 57494
const REAL = 57495
const DOUBLE = 57496
const FLOAT_TYPE = 57497
const DECIMAL = 57498
const NUMERIC = 57499
const TIME = 57500
const TIMESTAMP = 57501
const DATETIME = 57502
const YEAR = 57503
const CHAR = 57504
const VARCHAR = 57505
const VARYING = 57506
const BOOL = 57507
const CHARACTER = 57508
const VARBINARY = 57509
const NCHAR = 57510
const TEXT = 57511
const TINYTEXT = 57512
const MEDIUMTEXT = 57513
const LONGTEXT = 57514
const BLOB = 57515
const TINYBLOB = 57516
const MEDIUMBLOB = 57517
const LONGBLOB = 57518
const JSON = 57519
const ENUM = 57520
const GEOMETRY = 57521
const POINT = 57522
const LINESTRING = 57523
const POLYGON = 57524
const GEOMETRYCOLLECTION = 57525
const MULTIPOINT = 57526
const MULTILINESTRING = 57527
const MULTIPOLYGON = 57528
const NULLX = 57529
const AUTO_INCREMENT = 57530
const APPROXNUM = 57531
const SIGNED = 57532
const UNSIGNED = 57533
const ZEROFILL = 57534
const DATABASES = 57535
const TABLES = 57536
const VITESS_KEYSPACES = 57537
const VITESS_SHARDS = 57538
const VITESS_TABLETS = 57539
const VSCHEMA_TABLES = 57540
const EXTENDED = 57541
const FULL = 57542
const PROCESSLIST = 57543
const NAMES = 57544
const CHARSET = 57545
const GLOBAL = 57546
const SESSION = 57547
const ISOLATION = 57548
const LEVEL = 57549
const READ = 57550
const WRITE = 57551
const ONLY = 57552
const REPEATABLE = 57553
const COMMITTED = 57554
const UNCOMMITTED = 57555
const SERIALIZABLE = 57556
const CURRENT_TIMESTAMP = 57557
const DATABASE = 57558
const CURRENT_DATE = 57559
const CURRENT_TIME = 57560
const LOCALTIME = 57561
const LOCALTIMESTAMP = 57562
const UTC_DATE = 57563
const UTC_TIME = 57564
const UTC_TIMESTAMP = 57565
const REPLACE = 57566
const CONVERT = 57567
const CAST = 57568
const SUBSTR = 57569
const SUBSTRING = 57570
const GROUP_CONCAT = 57571
const SEPARATOR = 57572
const MATCH = 57573
const AGAINST = 57574
const BOOLEAN = 57575
const LANGUAGE = 57576
const WITH = 57577
const QUERY = 57578
const EXPANSION = 57579
const UNUSED = 57580

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 294,
	152, 294,
	-2, 284,
	-1, 240,
	108, 613,
	-2, 609,
	-1, 241,
	108, 614,
	-2, 610,
	-1, 310,
	79, 778,
	-2, 58,
	-1, 311,
	79, 738,
	-2, 59,
	-1, 316,
	79, 722,
	-2, 580,
	-1, 318,
	79, 759,
	-2, 582,
	-1, 581,
	51, 41,
	53, 41,
	-2, 43,
	-1, 720,
	108, 616,
	-2, 612,
	-1, 936,
	5, 28,
	-2, 426,
	-1, 961,
	5, 27,
	-2, 555,
	-1, 1211,
	5, 28,
	-2, 556,
	-1, 1264,
	5, 27,
	-2, 558,
	-1, 1336,
	5, 28,
	-2, 559,
}

const yyPrivate = 57344

const yyLast = 11301

var yyAct = [...]int{

	241, 1341, 877, 528, 657, 1325, 1228, 1217, 1275, 234,
	782, 270, 1115, 1143, 1001, 800, 1116, 1035, 527, 3,
	822, 575, 1112, 219, 818, 871, 573, 213, 964, 821,
	783, 1089, 755, 53, 745, 87, 928, 1026, 87, 315,
	245, 752, 66, 980, 591, 247, 771, 834, 722, 969,
	461, 467, 416, 562, 297, 867, 590, 473, 481, 754,
	309, 228, 87, 87, 320, 302, 218, 779, 87, 857,
	320, 214, 215, 216, 217, 306, 87, 577, 87, 910,
	304, 52, 1376, 1354, 87, 894, 542, 1372, 295, 1334,
	1368, 878, 232, 1353, 1333, 296, 1107, 1205, 893, 420,
	84, 441, 1150, 1138, 1139, 68, 1137, 300, 243, 448,
	813, 1305, 494, 493, 503, 504, 496, 497, 498, 499,
	500, 501, 502, 495, 456, 898, 505, 592, 305, 593,
	1004, 1005, 1006, 419, 892, 814, 815, 1090, 1009, 1007,
	238, 427, 1015, 428, 82, 78, 79, 80, 848, 435,
	687, 57, 988, 71, 72, 987, 67, 688, 989, 1253,
	858, 1194, 850, 1192, 443, 212, 445, 1282, 73, 1092,
	452, 453, 1370, 312, 1231, 1365, 59, 60, 61, 62,
	63, 1326, 889, 886, 887, 69, 885, 1067, 780, 1328,
	999, 1327, 87, 442, 444, 1064, 320, 320, 320, 320,
	1261, 320, 1170, 1371, 836, 1094, 1276, 1098, 320, 1093,
	1234, 1091, 1012, 896, 899, 1011, 1171, 1096, 837, 1278,
	996, 1295, 1149, 840, 430, 1363, 1095, 1296, 1179, 423,
	464, 468, 666, 801, 803, 320, 75, 76, 76, 1097,
	1099, 656, 979, 470, 978, 841, 977, 486, 418, 426,
	191, 77, 1068, 891, 836, 1310, 469, 437, 1214, 846,
	81, 838, 517, 518, 1076, 944, 839, 922, 837, 70,
	694, 1054, 485, 269, 1306, 890, 436, 691, 819, 440,
	1156, 529, 495, 505, 905, 505, 1277, 858, 515, 1072,
	540, 853, 1065, 480, 1063, 87, 1315, 1332, 1229, 1230,
	1232, 729, 87, 87, 87, 1008, 1066, 802, 320, 479,
	478, 1168, 895, 967, 320, 727, 728, 726, 594, 843,
	478, 1109, 479, 478, 772, 897, 480, 845, 844, 1111,
	1157, 772, 660, 951, 941, 1055, 480, 314, 1281, 480,
	1057, 1050, 1051, 421, 1058, 1053, 1052, 300, 1060, 1056,
	1003, 496, 497, 498, 499, 500, 501, 502, 495, 1059,
	557, 505, 906, 1338, 1071, 1049, 919, 920, 921, 581,
	544, 545, 546, 547, 548, 549, 550, 471, 940, 429,
	939, 479, 478, 588, 582, 475, 417, 849, 1240, 519,
	520, 521, 522, 523, 524, 525, 479, 478, 480, 1239,
	842, 494, 493, 503, 504, 496, 497, 498, 499, 500,
	501, 502, 495, 480, 74, 505, 746, 312, 747, 320,
	320, 50, 697, 698, 422, 1030, 87, 87, 320, 1029,
	87, 725, 1016, 87, 1316, 1260, 1044, 87, 21, 320,
	320, 320, 320, 320, 320, 320, 320, 1237, 1180, 929,
	836, 693, 1027, 320, 320, 831, 1013, 835, 87, 832,
	432, 433, 434, 833, 837, 1356, 1385, 479, 478, 314,
	314, 314, 314, 320, 314, 294, 675, 87, 1356, 1381,
	460, 314, 1313, 320, 480, 1148, 692, 1147, 709, 710,
	1000, 662, 663, 699, 223, 667, 424, 425, 670, 990,
	723, 880, 479, 478, 748, 1045, 1041, 672, 483, 1046,
	1043, 1042, 671, 73, 661, 659, 673, 1356, 1367, 480,
	1268, 1366, 1288, 689, 1047, 720, 320, 712, 714, 715,
	1040, 438, 713, 701, 724, 1356, 1355, 1348, 460, 1287,
	529, 716, 708, 762, 763, 1268, 1345, 1268, 1344, 759,
	498, 499, 500, 501, 502, 495, 431, 87, 505, 417,
	87, 87, 87, 87, 87, 718, 1268, 1343, 1268, 1323,
	1268, 1289, 87, 1268, 460, 87, 764, 767, 1151, 87,
	966, 314, 773, 585, 87, 87, 965, 596, 320, 1268,
	1269, 760, 761, 759, 776, 719, 769, 768, 807, 784,
	584, 320, 1226, 1225, 817, 300, 300, 300, 300, 300,
	808, 775, 966, 777, 778, 786, 787, 1079, 789, 946,
	300, 559, 781, 586, 797, 584, 749, 750, 721, 300,
	757, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 811, 1209, 810, 806,
	809, 1134, 460, 965, 826, 785, 805, 87, 788, 934,
	320, 945, 320, 1213, 460, 87, 54, 87, 1163, 1162,
	87, 320, 260, 259, 262, 263, 264, 265, 943, 873,
	559, 261, 266, 1159, 1160, 1159, 1158, 934, 460, 859,
	860, 861, 654, 314, 559, 460, 23, 312, 23, 757,
	460, 314, 908, 909, 934, 468, 869, 870, 601, 600,
	823, 1167, 314, 314, 314, 314, 314, 314, 314, 314,
	942, 959, 876, 23, 960, 1113, 314, 314, 965, 1161,
	900, 991, 901, 812, 720, 902, 558, 934, 723, 1165,
	1164, 1380, 50, 50, 50, 658, 703, 911, 587, 1263,
	912, 564, 567, 568, 569, 565, 483, 566, 570, 314,
	559, 970, 971, 1084, 1283, 695, 918, 935, 225, 50,
	1373, 1351, 724, 1350, 1319, 924, 1292, 1291, 1290, 1247,
	850, 872, 952, 494, 493, 503, 504, 496, 497, 498,
	499, 500, 501, 502, 495, 1128, 994, 505, 961, 751,
	970, 971, 874, 875, 719, 320, 868, 863, 87, 765,
	765, 862, 65, 933, 50, 765, 1280, 950, 1166, 1113,
	995, 973, 320, 669, 564, 567, 568, 569, 565, 948,
	566, 570, 765, 457, 983, 982, 320, 984, 974, 794,
	792, 976, 992, 707, 795, 793, 796, 975, 568, 569,
	791, 1201, 460, 300, 790, 229, 230, 985, 1362, 1352,
	1075, 314, 907, 1359, 917, 474, 916, 1022, 925, 926,
	927, 599, 462, 1207, 314, 87, 320, 320, 472, 320,
	997, 998, 1021, 463, 1023, 1024, 1025, 439, 494, 493,
	503, 504, 496, 497, 498, 499, 500, 501, 502, 495,
	1248, 1028, 505, 320, 882, 668, 87, 87, 572, 1198,
	460, 474, 1037, 220, 87, 226, 227, 915, 1299, 221,
	54, 1017, 1018, 320, 1020, 914, 1298, 1251, 1038, 966,
	476, 823, 1318, 314, 1317, 314, 1146, 1145, 1307, 56,
	1031, 1010, 690, 58, 314, 459, 494, 493, 503, 504,
	496, 497, 498, 499, 500, 501, 502, 495, 1039, 1169,
	505, 1110, 1083, 320, 320, 1082, 583, 1088, 314, 51,
	1114, 1, 1117, 1101, 1048, 1100, 1125, 1126, 879, 1077,
	1127, 1119, 1108, 1129, 720, 1034, 888, 1324, 1036, 1274,
	1142, 829, 320, 820, 320, 320, 1124, 415, 1123, 64,
	784, 851, 852, 854, 855, 856, 784, 1122, 1314, 830,
	828, 827, 1136, 602, 1141, 1014, 1135, 847, 864, 865,
	866, 1140, 503, 504, 496, 497, 498, 499, 500, 501,
	502, 495, 1081, 608, 505, 606, 607, 604, 610, 609,
	605, 320, 1152, 1153, 603, 1155, 199, 307, 571, 595,
	320, 477, 1062, 1061, 1104, 884, 1070, 686, 904, 455,
	201, 513, 87, 913, 986, 313, 1120, 1172, 320, 696,
	1085, 1086, 466, 1297, 1250, 949, 1174, 320, 981, 539,
	87, 770, 1181, 1102, 1103, 246, 1105, 1106, 711, 1154,
	1177, 258, 255, 257, 256, 314, 702, 958, 487, 244,
	236, 823, 299, 823, 555, 563, 1183, 1182, 561, 1002,
	560, 972, 968, 298, 1078, 1204, 1304, 706, 25, 55,
	1190, 1206, 231, 19, 18, 300, 17, 1176, 529, 320,
	20, 320, 320, 320, 87, 320, 16, 1208, 1219, 1220,
	1221, 320, 15, 14, 29, 13, 12, 1216, 11, 1032,
	314, 10, 314, 1233, 9, 1222, 8, 7, 6, 1224,
	5, 992, 460, 4, 222, 320, 320, 87, 320, 320,
	320, 22, 1241, 2, 0, 0, 314, 0, 0, 1235,
	320, 0, 0, 0, 0, 1244, 1081, 0, 0, 1245,
	0, 0, 0, 0, 0, 0, 314, 0, 494, 493,
	503, 504, 496, 497, 498, 499, 500, 501, 502, 495,
	0, 0, 505, 0, 320, 320, 0, 0, 314, 0,
	0, 1117, 0, 0, 0, 1185, 1262, 320, 1236, 0,
	1238, 1264, 1243, 765, 0, 320, 1121, 981, 1273, 765,
	1279, 1019, 0, 0, 0, 0, 0, 0, 320, 1284,
	823, 0, 0, 0, 0, 1293, 0, 0, 1252, 0,
	0, 1285, 0, 1286, 0, 314, 0, 314, 1144, 320,
	0, 0, 0, 0, 0, 1117, 1308, 1036, 823, 0,
	0, 0, 0, 1312, 1309, 0, 0, 0, 0, 0,
	0, 320, 320, 320, 0, 0, 0, 0, 1320, 1321,
	1322, 0, 0, 1330, 0, 0, 0, 0, 1329, 529,
	0, 320, 197, 0, 1173, 0, 0, 0, 1335, 0,
	320, 0, 0, 1175, 1339, 1340, 0, 320, 1346, 271,
	47, 0, 0, 0, 0, 0, 207, 0, 0, 1254,
	1255, 1178, 1256, 1257, 1258, 0, 0, 0, 784, 1357,
	314, 320, 320, 1361, 1358, 0, 0, 320, 1360, 0,
	0, 0, 0, 0, 320, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 320, 1377, 0, 47, 0, 0,
	0, 320, 1384, 0, 0, 224, 192, 465, 0, 0,
	0, 301, 194, 0, 0, 0, 0, 0, 0, 200,
	196, 0, 1218, 0, 1218, 1218, 1218, 0, 1223, 0,
	0, 0, 0, 0, 314, 0, 700, 0, 0, 0,
	0, 0, 85, 0, 0, 211, 0, 0, 198, 0,
	0, 202, 0, 0, 0, 0, 0, 1375, 1218, 1242,
	0, 314, 314, 1246, 0, 0, 0, 235, 0, 85,
	85, 0, 0, 1249, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 85, 193, 85, 0, 0, 0, 0,
	0, 85, 0, 756, 758, 0, 0, 0, 1187, 1188,
	0, 1189, 0, 0, 1191, 0, 1193, 1266, 1267, 774,
	0, 195, 0, 203, 204, 205, 206, 210, 0, 0,
	1144, 0, 209, 208, 0, 0, 0, 0, 1002, 0,
	0, 0, 0, 0, 0, 1378, 0, 0, 0, 799,
	0, 1218, 0, 0, 0, 447, 447, 447, 447, 0,
	447, 0, 1227, 0, 0, 0, 0, 447, 0, 0,
	0, 0, 1311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 446, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1218, 1218, 1218, 0, 0, 514,
	0, 0, 516, 0, 0, 0, 0, 0, 0, 85,
	0, 765, 0, 0, 1337, 0, 0, 0, 0, 0,
	0, 0, 0, 1342, 0, 0, 0, 0, 0, 526,
	1349, 530, 531, 532, 533, 534, 535, 536, 537, 538,
	0, 541, 543, 543, 543, 543, 543, 543, 543, 543,
	551, 552, 553, 554, 1218, 1342, 0, 0, 0, 0,
	1364, 574, 0, 0, 0, 0, 0, 1369, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 489, 0,
	492, 0, 0, 0, 1342, 1202, 506, 507, 508, 509,
	510, 511, 512, 0, 490, 491, 488, 494, 493, 503,
	504, 496, 497, 498, 499, 500, 501, 502, 495, 0,
	0, 505, 85, 0, 0, 0, 0, 0, 0, 85,
	579, 85, 0, 0, 931, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 936, 937, 938, 0, 0,
	0, 0, 0, 1199, 947, 0, 0, 0, 0, 953,
	0, 954, 955, 956, 957, 0, 494, 493, 503, 504,
	496, 497, 498, 499, 500, 501, 502, 495, 0, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 447,
	449, 450, 451, 0, 454, 0, 0, 447, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 0, 447, 447,
	447, 447, 447, 447, 447, 447, 0, 0, 0, 0,
	0, 0, 447, 447, 494, 493, 503, 504, 496, 497,
	498, 499, 500, 501, 502, 495, 0, 0, 505, 0,
	0, 0, 23, 24, 48, 26, 27, 930, 0, 0,
	0, 0, 0, 85, 85, 0, 0, 85, 0, 0,
	85, 42, 0, 0, 674, 28, 0, 494, 493, 503,
	504, 496, 497, 498, 499, 500, 501, 502, 495, 0,
	0, 505, 0, 0, 37, 85, 47, 0, 50, 493,
	503, 504, 496, 497, 498, 499, 500, 501, 502, 495,
	530, 0, 505, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	301, 301, 301, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 574, 0, 804, 30, 31, 33,
	32, 35, 0, 301, 235, 0, 0, 0, 0, 235,
	235, 0, 0, 766, 766, 235, 1133, 0, 0, 766,
	36, 43, 44, 0, 0, 45, 46, 34, 0, 235,
	235, 235, 235, 0, 85, 0, 766, 85, 85, 85,
	85, 85, 0, 38, 39, 0, 40, 41, 0, 798,
	0, 0, 85, 0, 0, 0, 579, 0, 0, 0,
	0, 85, 85, 655, 0, 0, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 447,
	0, 447, 676, 677, 678, 679, 680, 681, 682, 683,
	447, 0, 0, 0, 0, 0, 684, 685, 494, 493,
	503, 504, 496, 497, 498, 499, 500, 501, 502, 495,
	0, 0, 505, 0, 0, 0, 0, 0, 1184, 0,
	0, 0, 0, 0, 0, 1186, 0, 49, 0, 0,
	0, 0, 0, 0, 85, 0, 1195, 1196, 1197, 923,
	0, 1200, 85, 0, 85, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 1210, 1211, 1212, 0, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 962,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 0, 0, 0, 235, 0, 0,
	0, 0, 0, 0, 0, 1270, 1271, 1272, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	1300, 1301, 1302, 1303, 0, 0, 447, 0, 0, 0,
	0, 0, 0, 881, 0, 883, 0, 0, 0, 0,
	0, 628, 0, 0, 903, 0, 0, 0, 0, 0,
	0, 0, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1331, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	1347, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 47, 1073, 1074, 0, 0, 616, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 1130, 1131, 1132,
	0, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 235, 0, 1382, 1383, 0, 0, 0, 629,
	0, 0, 674, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 766, 0, 0,
	0, 0, 0, 766, 642, 643, 644, 645, 646, 647,
	648, 0, 649, 650, 651, 652, 653, 630, 631, 632,
	633, 613, 615, 0, 611, 614, 617, 0, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 634, 635,
	636, 637, 638, 639, 640, 641, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 0, 0, 0, 0, 1203, 0, 0,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 1265, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	1374, 404, 394, 0, 365, 406, 342, 357, 414, 358,
	359, 387, 328, 373, 140, 354, 0, 345, 323, 351,
	324, 343, 367, 108, 341, 396, 376, 120, 412, 123,
	381, 0, 157, 132, 0, 0, 369, 398, 371, 392,
	364, 388, 333, 380, 407, 355, 384, 408, 0, 0,
	0, 319, 0, 824, 825, 0, 0, 0, 0, 85,
	100, 0, 383, 403, 353, 386, 322, 382, 0, 326,
	329, 413, 401, 348, 349, 993, 0, 0, 0, 0,
	0, 0, 368, 372, 389, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 379, 0, 0, 0,
	330, 327, 0, 366, 0, 0, 0, 332, 0, 347,
	390, 0, 321, 393, 399, 363, 180, 402, 361, 360,
	145, 0, 103, 0, 160, 112, 356, 121, 405, 370,
	397, 344, 352, 104, 350, 151, 141, 172, 378, 142,
	150, 124, 164, 146, 171, 181, 182, 162, 179, 153,
	96, 138, 88, 90, 161, 170, 101, 154, 92, 168,
	159, 130, 116, 117, 91, 0, 149, 107, 111, 106,
	139, 165, 166, 105, 189, 97, 177, 178, 94, 98,
	176, 137, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 325, 0, 158, 174, 190, 340, 400, 183, 184,
	185, 186, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 188, 385, 152, 102, 173, 156, 336, 339,
	334, 335, 374, 375, 409, 410, 411, 391, 331, 0,
	337, 338, 0, 395, 377, 89, 95, 122, 187, 147,
	110, 175, 404, 394, 0, 365, 406, 342, 357, 414,
	358, 359, 387, 328, 373, 140, 354, 0, 345, 323,
	351, 324, 343, 367, 108, 341, 396, 376, 120, 412,
	123, 381, 0, 157, 132, 0, 0, 369, 398, 371,
	392, 364, 388, 333, 380, 407, 355, 384, 408, 0,
	0, 0, 319, 0, 824, 825, 0, 0, 0, 0,
	0, 100, 0, 383, 403, 353, 386, 322, 382, 0,
	326, 329, 413, 401, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 368, 372, 389, 362, 0, 0, 0,
	0, 0, 0, 0, 0, 346, 0, 379, 0, 0,
	0, 330, 327, 0, 366, 0, 0, 0, 332, 0,
	347, 390, 0, 321, 393, 399, 363, 180, 402, 361,
	360, 145, 0, 103, 0, 160, 112, 356, 121, 405,
	370, 397, 344, 352, 104, 350, 151, 141, 172, 378,
	142, 150, 124, 164, 146, 171, 181, 182, 162, 179,
	153, 96, 138, 88, 90, 161, 170, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 189, 97, 177, 178, 94,
	98, 176, 137, 163, 169, 131, 128, 93, 167, 129,
	127, 119, 109, 113, 143, 126, 144, 114, 134, 133,
	135, 0, 325, 0, 158, 174, 190, 340, 400, 183,
	184, 185, 186, 0, 0, 0, 136, 99, 115, 155,
	118, 125, 148, 188, 385, 152, 102, 173, 156, 336,
	339, 334, 335, 374, 375, 409, 410, 411, 391, 331,
	0, 337, 338, 0, 395, 377, 89, 95, 122, 187,
	147, 110, 175, 404, 394, 0, 365, 406, 342, 357,
	414, 358, 359, 387, 328, 373, 140, 354, 0, 345,
	323, 351, 324, 343, 367, 108, 341, 396, 376, 120,
	412, 123, 381, 0, 157, 132, 0, 0, 369, 398,
	371, 392, 364, 388, 333, 380, 407, 355, 384, 408,
	0, 0, 0, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 383, 403, 353, 386, 322, 382,
	0, 326, 329, 413, 401, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 368, 372, 389, 362, 0, 0,
	0, 0, 0, 0, 1080, 0, 346, 0, 379, 0,
	0, 0, 330, 327, 0, 366, 0, 0, 0, 332,
	0, 347, 390, 0, 321, 393, 399, 363, 180, 402,
	361, 360, 145, 0, 103, 0, 160, 112, 356, 121,
	405, 370, 397, 344, 352, 104, 350, 151, 141, 172,
	378, 142, 150, 124, 164, 146, 171, 181, 182, 162,
	179, 153, 96, 138, 88, 90, 161, 170, 101, 154,
	92, 168, 159, 130, 116, 117, 91, 0, 149, 107,
	111, 106, 139, 165, 166, 105, 189, 97, 177, 178,
	94, 98, 176, 137, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 325, 0, 158, 174, 190, 340, 400,
	183, 184, 185, 186, 0, 0, 0, 136, 99, 115,
	155, 118, 125, 148, 188, 385, 152, 102, 173, 156,
	336, 339, 334, 335, 374, 375, 409, 410, 411, 391,
	331, 0, 337, 338, 0, 395, 377, 89, 95, 122,
	187, 147, 110, 175, 404, 394, 0, 365, 406, 342,
	357, 414, 358, 359, 387, 328, 373, 140, 354, 0,
	345, 323, 351, 324, 343, 367, 108, 341, 396, 376,
	120, 412, 123, 381, 0, 157, 132, 0, 0, 369,
	398, 371, 392, 364, 388, 333, 380, 407, 355, 384,
	408, 50, 0, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 383, 403, 353, 386, 322,
	382, 0, 326, 329, 413, 401, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 368, 372, 389, 362, 0,
	0, 0, 0, 0, 0, 0, 0, 346, 0, 379,
	0, 0, 0, 330, 327, 0, 366, 0, 0, 0,
	332, 0, 347, 390, 0, 321, 393, 399, 363, 180,
	402, 361, 360, 145, 0, 103, 0, 160, 112, 356,
	121, 405, 370, 397, 344, 352, 104, 350, 151, 141,
	172, 378, 142, 150, 124, 164, 146, 171, 181, 182,
	162, 179, 153, 96, 138, 88, 90, 161, 170, 101,
	154, 92, 168, 159, 130, 116, 117, 91, 0, 149,
	107, 111, 106, 139, 165, 166, 105, 189, 97, 177,
	178, 94, 98, 176, 137, 163, 169, 131, 128, 93,
	167, 129, 127, 119, 109, 113, 143, 126, 144, 114,
	134, 133, 135, 0, 325, 0, 158, 174, 190, 340,
	400, 183, 184, 185, 186, 0, 0, 0, 136, 99,
	115, 155, 118, 125, 148, 188, 385, 152, 102, 173,
	156, 336, 339, 334, 335, 374, 375, 409, 410, 411,
	391, 331, 0, 337, 338, 0, 395, 377, 89, 95,
	122, 187, 147, 110, 175, 404, 394, 0, 365, 406,
	342, 357, 414, 358, 359, 387, 328, 373, 140, 354,
	0, 345, 323, 351, 324, 343, 367, 108, 341, 396,
	376, 120, 412, 123, 381, 0, 157, 132, 0, 0,
	369, 398, 371, 392, 364, 388, 333, 380, 407, 355,
	384, 408, 0, 0, 0, 240, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 383, 403, 353, 386,
	322, 382, 0, 326, 329, 413, 401, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 368, 372, 389, 362,
	0, 0, 0, 0, 0, 0, 717, 0, 346, 0,
	379, 0, 0, 0, 330, 327, 0, 366, 0, 0,
	0, 332, 0, 347, 390, 0, 321, 393, 399, 363,
	180, 402, 361, 360, 145, 0, 103, 0, 160, 112,
	356, 121, 405, 370, 397, 344, 352, 104, 350, 151,
	141, 172, 378, 142, 150, 124, 164, 146, 171, 181,
	182, 162, 179, 153, 96, 138, 88, 90, 161, 170,
	101, 154, 92, 168, 159, 130, 116, 117, 91, 0,
	149, 107, 111, 106, 139, 165, 166, 105, 189, 97,
	177, 178, 94, 98, 176, 137, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 325, 0, 158, 174, 190,
	340, 400, 183, 184, 185, 186, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 188, 385, 152, 102,
	173, 156, 336, 339, 334, 335, 374, 375, 409, 410,
	411, 391, 331, 0, 337, 338, 0, 395, 377, 89,
	95, 122, 187, 147, 110, 175, 404, 394, 0, 365,
	406, 342, 357, 414, 358, 359, 387, 328, 373, 140,
	354, 0, 345, 323, 351, 324, 343, 367, 108, 341,
	396, 376, 120, 412, 123, 381, 0, 157, 132, 0,
	0, 369, 398, 371, 392, 364, 388, 333, 380, 407,
	355, 384, 408, 0, 0, 0, 319, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 0, 383, 403, 353,
	386, 322, 382, 0, 326, 329, 413, 401, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 368, 372, 389,
	362, 0, 0, 0, 0, 0, 0, 0, 0, 346,
	0, 379, 0, 0, 0, 330, 327, 0, 366, 0,
	0, 0, 332, 0, 347, 390, 0, 321, 393, 399,
	363, 180, 402, 361, 360, 145, 0, 103, 0, 160,
	112, 356, 121, 405, 370, 397, 344, 352, 104, 350,
	151, 141, 172, 378, 142, 150, 124, 164, 146, 171,
	181, 182, 162, 179, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 189,
	97, 177, 178, 94, 98, 176, 137, 163, 169, 131,
	128, 93, 167, 129, 127, 119, 109, 113, 143, 126,
	144, 114, 134, 133, 135, 0, 325, 0, 158, 174,
	190, 340, 400, 183, 184, 185, 186, 0, 0, 0,
	136, 99, 115, 155, 118, 125, 148, 188, 385, 152,
	102, 173, 156, 336, 339, 334, 335, 374, 375, 409,
	410, 411, 391, 331, 0, 337, 338, 0, 395, 377,
	89, 95, 122, 187, 147, 110, 175, 404, 394, 0,
	365, 406, 342, 357, 414, 358, 359, 387, 328, 373,
	140, 354, 0, 345, 323, 351, 324, 343, 367, 108,
	341, 396, 376, 120, 412, 123, 381, 0, 157, 132,
	0, 0, 369, 398, 371, 392, 364, 388, 333, 380,
	407, 355, 384, 408, 0, 0, 0, 240, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 0, 383, 403,
	353, 386, 322, 382, 0, 326, 329, 413, 401, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 368, 372,
	389, 362, 0, 0, 0, 0, 0, 0, 0, 0,
	346, 0, 379, 0, 0, 0, 330, 327, 0, 366,
	0, 0, 0, 332, 0, 347, 390, 0, 321, 393,
	399, 363, 180, 402, 361, 360, 145, 0, 103, 0,
	160, 112, 356, 121, 405, 370, 397, 344, 352, 104,
	350, 151, 141, 172, 378, 142, 150, 124, 164, 146,
	171, 181, 182, 162, 179, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	189, 97, 177, 178, 94, 98, 176, 137, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 325, 0, 158,
	174, 190, 340, 400, 183, 184, 185, 186, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 188, 385,
	152, 102, 173, 156, 336, 339, 334, 335, 374, 375,
	409, 410, 411, 391, 331, 0, 337, 338, 0, 395,
	377, 89, 95, 122, 187, 147, 110, 175, 404, 394,
	0, 365, 406, 342, 357, 414, 358, 359, 387, 328,
	373, 140, 354, 0, 345, 323, 351, 324, 343, 367,
	108, 341, 396, 376, 120, 412, 123, 381, 0, 157,
	132, 0, 0, 369, 398, 371, 392, 364, 388, 333,
	380, 407, 355, 384, 408, 0, 0, 0, 319, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 383,
	403, 353, 386, 322, 382, 0, 326, 329, 413, 401,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 368,
	372, 389, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 346, 0, 379, 0, 0, 0, 330, 327, 0,
	366, 0, 0, 0, 332, 0, 347, 390, 0, 321,
	393, 399, 363, 180, 402, 361, 360, 145, 0, 103,
	0, 160, 112, 356, 121, 405, 370, 397, 344, 352,
	104, 350, 151, 141, 172, 378, 142, 150, 124, 164,
	146, 171, 181, 182, 162, 179, 153, 96, 138, 88,
	90, 161, 170, 101, 154, 92, 168, 159, 130, 116,
	117, 91, 0, 149, 107, 111, 106, 139, 165, 166,
	105, 189, 97, 177, 178, 94, 317, 176, 137, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 325, 0,
	158, 174, 190, 340, 400, 183, 184, 185, 186, 0,
	0, 0, 318, 316, 115, 155, 118, 125, 148, 188,
	385, 152, 102, 173, 156, 336, 339, 334, 335, 374,
	375, 409, 410, 411, 391, 331, 0, 337, 338, 0,
	395, 377, 89, 95, 122, 187, 147, 110, 175, 404,
	394, 0, 365, 406, 342, 357, 414, 358, 359, 387,
	328, 373, 140, 354, 0, 345, 323, 351, 324, 343,
	367, 108, 341, 396, 376, 120, 412, 123, 381, 0,
	157, 132, 0, 0, 369, 398, 371, 392, 364, 388,
	333, 380, 407, 355, 384, 408, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	383, 403, 353, 386, 322, 382, 0, 326, 329, 413,
	401, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	368, 372, 389, 362, 0, 0, 0, 0, 0, 0,
	0, 0, 346, 0, 379, 0, 0, 0, 330, 327,
	0, 366, 0, 0, 0, 332, 0, 347, 390, 0,
	321, 393, 399, 363, 180, 402, 361, 360, 145, 0,
	103, 0, 160, 112, 356, 121, 405, 370, 397, 344,
	352, 104, 350, 151, 141, 172, 378, 142, 150, 124,
	164, 146, 171, 181, 182, 162, 179, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 189, 97, 177, 178, 94, 98, 176, 137,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 325,
	0, 158, 174, 190, 340, 400, 183, 184, 185, 186,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	188, 385, 152, 102, 173, 156, 336, 339, 334, 335,
	374, 375, 409, 410, 411, 391, 331, 0, 337, 338,
	0, 395, 377, 89, 95, 122, 187, 147, 110, 175,
	404, 394, 0, 365, 406, 342, 357, 414, 358, 359,
	387, 328, 373, 140, 354, 0, 345, 323, 351, 324,
	343, 367, 108, 341, 396, 376, 120, 412, 123, 381,
	0, 157, 132, 0, 0, 369, 398, 371, 392, 364,
	388, 333, 380, 407, 355, 384, 408, 0, 0, 0,
	319, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 383, 403, 353, 386, 322, 382, 0, 326, 329,
	413, 401, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 368, 372, 389, 362, 0, 0, 0, 0, 0,
	0, 0, 0, 346, 0, 379, 0, 0, 0, 330,
	327, 0, 366, 0, 0, 0, 332, 0, 347, 390,
	0, 321, 393, 399, 363, 180, 402, 361, 360, 145,
	0, 103, 0, 160, 112, 356, 121, 405, 370, 397,
	344, 352, 104, 350, 151, 141, 172, 378, 142, 150,
	124, 164, 146, 171, 181, 182, 162, 179, 153, 96,
	138, 88, 90, 161, 589, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 189, 97, 177, 178, 94, 317, 176,
	137, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	325, 0, 158, 174, 190, 340, 400, 183, 184, 185,
	186, 0, 0, 0, 318, 316, 115, 155, 118, 125,
	148, 188, 385, 152, 102, 173, 156, 336, 339, 334,
	335, 374, 375, 409, 410, 411, 391, 331, 0, 337,
	338, 0, 395, 377, 89, 95, 122, 187, 147, 110,
	175, 404, 394, 0, 365, 406, 342, 357, 414, 358,
	359, 387, 328, 373, 140, 354, 0, 345, 323, 351,
	324, 343, 367, 108, 341, 396, 376, 120, 412, 123,
	381, 0, 157, 132, 0, 0, 369, 398, 371, 392,
	364, 388, 333, 380, 407, 355, 384, 408, 0, 0,
	0, 319, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 383, 403, 353, 386, 322, 382, 0, 326,
	329, 413, 401, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 368, 372, 389, 362, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 379, 0, 0, 0,
	330, 327, 0, 366, 0, 0, 0, 332, 0, 347,
	390, 0, 321, 393, 399, 363, 180, 402, 361, 360,
	145, 0, 103, 0, 160, 112, 356, 121, 405, 370,
	397, 344, 352, 104, 350, 151, 141, 172, 378, 142,
	150, 124, 164, 146, 171, 181, 182, 162, 179, 153,
	96, 138, 88, 90, 161, 308, 101, 154, 92, 168,
	159, 130, 116, 117, 91, 0, 149, 107, 111, 106,
	139, 165, 166, 105, 189, 97, 177, 178, 94, 317,
	176, 137, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 325, 0, 158, 174, 190, 340, 400, 183, 184,
	185, 186, 0, 0, 0, 318, 316, 311, 310, 118,
	125, 148, 188, 385, 152, 102, 173, 156, 336, 339,
	334, 335, 374, 375, 409, 410, 411, 391, 331, 0,
	337, 338, 0, 395, 377, 89, 95, 122, 187, 147,
	110, 175, 140, 0, 0, 753, 0, 242, 0, 0,
	0, 108, 239, 0, 0, 120, 281, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 272, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 240,
	260, 259, 262, 263, 264, 265, 0, 0, 100, 261,
	266, 267, 268, 0, 0, 237, 253, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 251,
	233, 0, 0, 0, 292, 0, 252, 0, 0, 248,
	249, 254, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 290, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 0, 142, 150, 124,
	164, 146, 171, 181, 182, 162, 179, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 189, 97, 177, 178, 94, 98, 176, 137,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 0,
	0, 158, 174, 190, 0, 0, 183, 184, 185, 186,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	188, 0, 152, 102, 173, 156, 282, 291, 288, 289,
	286, 287, 285, 284, 283, 293, 274, 275, 276, 277,
	279, 0, 278, 89, 95, 122, 187, 147, 110, 175,
	140, 0, 0, 0, 0, 242, 0, 0, 0, 108,
	239, 0, 0, 120, 281, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 272, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 460, 240, 260, 259,
	262, 263, 264, 265, 0, 0, 100, 261, 266, 267,
	268, 0, 0, 237, 253, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 251, 0, 0,
	0, 0, 292, 0, 252, 0, 0, 248, 249, 254,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 290, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 181, 182, 162, 179, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	189, 97, 177, 178, 94, 98, 176, 137, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 190, 0, 0, 183, 184, 185, 186, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 188, 0,
	152, 102, 173, 156, 282, 291, 288, 289, 286, 287,
	285, 284, 283, 293, 274, 275, 276, 277, 279, 0,
	278, 89, 95, 122, 187, 147, 110, 175, 140, 0,
	0, 0, 0, 242, 0, 0, 0, 108, 239, 0,
	0, 120, 281, 123, 0, 0, 157, 132, 0, 0,
	0, 0, 272, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 240, 260, 259, 262, 263,
	264, 265, 0, 0, 100, 261, 266, 267, 268, 0,
	0, 237, 253, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 251, 233, 0, 0, 0,
	292, 0, 252, 0, 0, 248, 249, 254, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 290, 145, 0, 103, 0, 160, 112,
	0, 121, 0, 0, 0, 0, 0, 104, 0, 151,
	141, 172, 0, 142, 150, 124, 164, 146, 171, 181,
	182, 162, 179, 153, 96, 138, 88, 90, 161, 170,
	101, 154, 92, 168, 159, 130, 116, 117, 91, 0,
	149, 107, 111, 106, 139, 165, 166, 105, 189, 97,
	177, 178, 94, 98, 176, 137, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 0, 0, 158, 174, 190,
	0, 0, 183, 184, 185, 186, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 188, 0, 152, 102,
	173, 156, 282, 291, 288, 289, 286, 287, 285, 284,
	283, 293, 274, 275, 276, 277, 279, 0, 278, 89,
	95, 122, 187, 147, 110, 175, 140, 0, 0, 0,
	0, 242, 0, 0, 0, 108, 239, 0, 0, 120,
	281, 123, 0, 0, 157, 132, 0, 0, 0, 0,
	272, 273, 0, 0, 0, 0, 0, 0, 816, 0,
	50, 0, 0, 240, 260, 259, 262, 263, 264, 265,
	0, 0, 100, 261, 266, 267, 268, 0, 0, 237,
	253, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 251, 0, 0, 0, 0, 292, 0,
	252, 0, 0, 248, 249, 254, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 290, 145, 0, 103, 0, 160, 112, 0, 121,
	0, 0, 0, 0, 0, 104, 0, 151, 141, 172,
	0, 142, 150, 124, 164, 146, 171, 181, 182, 162,
	179, 153, 96, 138, 88, 90, 161, 170, 101, 154,
	92, 168, 159, 130, 116, 117, 91, 0, 149, 107,
	111, 106, 139, 165, 166, 105, 189, 97, 177, 178,
	94, 98, 176, 137, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 0, 0, 158, 174, 190, 0, 0,
	183, 184, 185, 186, 0, 0, 0, 136, 99, 115,
	155, 118, 125, 148, 188, 0, 152, 102, 173, 156,
	282, 291, 288, 289, 286, 287, 285, 284, 283, 293,
	274, 275, 276, 277, 279, 23, 278, 89, 95, 122,
	187, 147, 110, 175, 0, 0, 0, 140, 0, 0,
	0, 0, 242, 0, 0, 0, 108, 239, 0, 0,
	120, 281, 123, 0, 0, 157, 132, 0, 0, 0,
	0, 272, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 240, 260, 259, 262, 263, 264,
	265, 0, 0, 100, 261, 266, 267, 268, 0, 0,
	237, 253, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 251, 0, 0, 0, 0, 292,
	0, 252, 0, 0, 248, 249, 254, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 290, 145, 0, 103, 0, 160, 112, 0,
	121, 0, 0, 0, 0, 0, 104, 0, 151, 141,
	172, 0, 142, 150, 124, 164, 146, 171, 181, 182,
	162, 179, 153, 96, 138, 88, 90, 161, 170, 101,
	154, 92, 168, 159, 130, 116, 117, 91, 0, 149,
	107, 111, 106, 139, 165, 166, 105, 189, 97, 177,
	178, 94, 98, 176, 137, 163, 169, 131, 128, 93,
	167, 129, 127, 119, 109, 113, 143, 126, 144, 114,
	134, 133, 135, 0, 0, 0, 158, 174, 190, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 136, 99,
	115, 155, 118, 125, 148, 188, 0, 152, 102, 173,
	156, 282, 291, 288, 289, 286, 287, 285, 284, 283,
	293, 274, 275, 276, 277, 279, 0, 278, 89, 95,
	122, 187, 147, 110, 175, 140, 0, 0, 0, 0,
	242, 0, 0, 0, 108, 239, 0, 0, 120, 281,
	123, 0, 0, 157, 132, 0, 0, 0, 0, 272,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 240, 260, 259, 262, 263, 264, 265, 0,
	0, 100, 261, 266, 267, 268, 0, 0, 237, 253,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 251, 0, 0, 0, 0, 292, 0, 252,
	0, 0, 248, 249, 254, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	290, 145, 0, 103, 0, 160, 112, 0, 121, 0,
	0, 0, 0, 0, 104, 0, 151, 141, 172, 0,
	142, 150, 124, 164, 146, 171, 181, 182, 162, 179,
	153, 96, 138, 88, 90, 161, 170, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 189, 97, 177, 178, 94,
	98, 176, 137, 163, 169, 131, 128, 93, 167, 129,
	127, 119, 109, 113, 143, 126, 144, 114, 134, 133,
	135, 0, 0, 0, 158, 174, 190, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 136, 99, 115, 155,
	118, 125, 148, 188, 0, 152, 102, 173, 156, 282,
	291, 288, 289, 286, 287, 285, 284, 283, 293, 274,
	275, 276, 277, 279, 140, 278, 89, 95, 122, 187,
	147, 110, 175, 108, 0, 0, 0, 120, 281, 123,
	0, 0, 157, 132, 0, 0, 0, 0, 272, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 240, 260, 259, 262, 263, 264, 265, 0, 0,
	100, 261, 266, 267, 268, 0, 0, 0, 253, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 251, 0, 0, 0, 0, 292, 0, 252, 0,
	0, 248, 249, 254, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 290,
	145, 0, 103, 0, 160, 112, 0, 121, 0, 0,
	0, 0, 0, 104, 0, 151, 141, 172, 1379, 142,
	150, 124, 164, 146, 171, 181, 182, 162, 179, 153,
	96, 138, 88, 90, 161, 170, 101, 154, 92, 168,
	159, 130, 116, 117, 91, 0, 149, 107, 111, 106,
	139, 165, 166, 105, 189, 97, 177, 178, 94, 98,
	176, 137, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 0, 0, 158, 174, 190, 0, 0, 183, 184,
	185, 186, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 188, 0, 152, 102, 173, 156, 282, 291,
	288, 289, 286, 287, 285, 284, 283, 293, 274, 275,
	276, 277, 279, 140, 278, 89, 95, 122, 187, 147,
	110, 175, 108, 0, 0, 0, 120, 281, 123, 0,
	0, 157, 132, 0, 0, 0, 0, 272, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	240, 260, 259, 262, 263, 264, 265, 0, 0, 100,
	261, 266, 267, 268, 0, 0, 0, 253, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	251, 0, 0, 0, 0, 292, 0, 252, 0, 0,
	248, 249, 254, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 290, 145,
	0, 103, 0, 160, 112, 0, 121, 0, 0, 0,
	0, 0, 104, 0, 151, 141, 172, 0, 142, 150,
	124, 164, 146, 171, 181, 182, 162, 179, 153, 96,
	138, 88, 90, 161, 170, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 189, 97, 177, 178, 94, 98, 176,
	137, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	0, 0, 158, 174, 190, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 136, 99, 115, 155, 118, 125,
	148, 188, 0, 152, 102, 173, 156, 282, 291, 288,
	289, 286, 287, 285, 284, 283, 293, 274, 275, 276,
	277, 279, 140, 278, 89, 95, 122, 187, 147, 110,
	175, 108, 0, 0, 0, 120, 0, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 494, 493, 503, 504, 496, 497,
	498, 499, 500, 501, 502, 495, 0, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 0, 142, 150, 124,
	164, 146, 171, 181, 182, 162, 179, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 189, 97, 177, 178, 94, 98, 176, 137,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 0,
	0, 158, 174, 190, 0, 0, 183, 184, 185, 186,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	188, 0, 152, 102, 173, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 95, 122, 187, 147, 110, 175,
	140, 0, 0, 0, 482, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 319, 0, 484,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 479, 478, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 181, 182, 162, 179, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	189, 97, 177, 178, 94, 98, 176, 137, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 190, 0, 0, 183, 184, 185, 186, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 188, 0,
	152, 102, 173, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 95, 122, 187, 147, 110, 175, 140, 0,
	0, 0, 578, 0, 0, 0, 0, 108, 0, 0,
	0, 120, 0, 123, 0, 0, 157, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 580, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 145, 0, 103, 0, 160, 112,
	0, 121, 0, 0, 0, 0, 0, 104, 0, 151,
	141, 172, 0, 142, 150, 124, 164, 146, 171, 181,
	182, 162, 179, 153, 96, 138, 88, 90, 161, 170,
	101, 154, 92, 168, 159, 130, 116, 117, 91, 0,
	149, 107, 111, 106, 139, 165, 166, 105, 189, 97,
	177, 178, 94, 98, 176, 137, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 0, 0, 158, 174, 190,
	0, 0, 183, 184, 185, 186, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 188, 0, 152, 102,
	173, 156, 0, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 89,
	95, 122, 187, 147, 110, 175, 108, 0, 0, 0,
	120, 0, 123, 0, 0, 157, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 319, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 145, 0, 103, 0, 160, 112, 0,
	121, 0, 0, 0, 0, 0, 104, 0, 151, 141,
	172, 0, 142, 150, 124, 164, 146, 171, 181, 182,
	162, 179, 153, 96, 138, 88, 90, 161, 170, 101,
	154, 92, 168, 159, 130, 116, 117, 91, 0, 149,
	107, 111, 106, 139, 165, 166, 105, 189, 97, 177,
	178, 94, 98, 176, 137, 163, 169, 131, 128, 93,
	167, 129, 127, 119, 109, 113, 143, 126, 144, 114,
	134, 133, 135, 0, 0, 0, 158, 174, 190, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 136, 99,
	115, 155, 118, 125, 148, 188, 0, 152, 102, 173,
	156, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 89, 95,
	122, 187, 147, 110, 175, 108, 0, 0, 0, 120,
	0, 123, 0, 0, 157, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	0, 0, 145, 0, 103, 0, 160, 112, 0, 121,
	0, 0, 0, 0, 0, 104, 0, 151, 141, 172,
	0, 142, 150, 124, 164, 146, 171, 181, 182, 162,
	179, 153, 96, 138, 88, 90, 161, 170, 101, 154,
	92, 168, 159, 130, 116, 117, 91, 0, 149, 107,
	111, 106, 139, 165, 166, 105, 189, 97, 177, 178,
	94, 98, 176, 137, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 0, 0, 158, 174, 190, 0, 0,
	183, 184, 185, 186, 0, 0, 0, 136, 99, 115,
	155, 118, 125, 148, 188, 140, 152, 102, 173, 156,
	0, 0, 0, 0, 108, 0, 0, 0, 120, 0,
	123, 0, 0, 157, 132, 0, 0, 89, 95, 122,
	187, 147, 110, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 704, 0, 0, 705, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 145, 0, 103, 0, 160, 112, 0, 121, 0,
	0, 0, 0, 0, 104, 0, 151, 141, 172, 0,
	142, 150, 124, 164, 146, 171, 181, 182, 162, 179,
	153, 96, 138, 88, 90, 161, 170, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 189, 97, 177, 178, 94,
	98, 176, 137, 163, 169, 131, 128, 93, 167, 129,
	127, 119, 109, 113, 143, 126, 144, 114, 134, 133,
	135, 0, 0, 0, 158, 174, 190, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 136, 99, 115, 155,
	118, 125, 148, 188, 140, 152, 102, 173, 156, 0,
	0, 0, 0, 108, 598, 0, 0, 120, 0, 123,
	0, 0, 157, 132, 0, 0, 89, 95, 122, 187,
	147, 110, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 319, 0, 597, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	145, 0, 103, 0, 160, 112, 0, 121, 0, 0,
	0, 0, 0, 104, 0, 151, 141, 172, 0, 142,
	150, 124, 164, 146, 171, 181, 182, 162, 179, 153,
	96, 138, 88, 90, 161, 170, 101, 154, 92, 168,
	159, 130, 116, 117, 91, 0, 149, 107, 111, 106,
	139, 165, 166, 105, 189, 97, 177, 178, 94, 98,
	176, 137, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 0, 0, 158, 174, 190, 0, 0, 183, 184,
	185, 186, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 188, 0, 152, 102, 173, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 95, 122, 187, 147,
	110, 175, 140, 0, 0, 0, 578, 0, 0, 0,
	0, 108, 0, 0, 0, 120, 0, 123, 0, 0,
	157, 132, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 580, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 180, 0, 0, 0, 145, 0,
	103, 0, 160, 112, 0, 121, 0, 0, 0, 0,
	0, 104, 0, 151, 141, 172, 0, 576, 150, 124,
	164, 146, 171, 181, 182, 162, 179, 153, 96, 138,
	88, 90, 161, 170, 101, 154, 92, 168, 159, 130,
	116, 117, 91, 0, 149, 107, 111, 106, 139, 165,
	166, 105, 189, 97, 177, 178, 94, 98, 176, 137,
	163, 169, 131, 128, 93, 167, 129, 127, 119, 109,
	113, 143, 126, 144, 114, 134, 133, 135, 0, 0,
	0, 158, 174, 190, 0, 0, 183, 184, 185, 186,
	0, 0, 0, 136, 99, 115, 155, 118, 125, 148,
	188, 140, 152, 102, 173, 156, 0, 0, 0, 0,
	108, 0, 0, 0, 120, 0, 123, 0, 0, 157,
	132, 0, 0, 89, 95, 122, 187, 147, 110, 175,
	0, 0, 0, 0, 0, 50, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 180, 0, 0, 0, 145, 0, 103,
	0, 160, 112, 0, 121, 0, 0, 0, 0, 0,
	104, 0, 151, 141, 172, 0, 142, 150, 124, 164,
	146, 171, 181, 182, 162, 179, 153, 96, 138, 88,
	90, 161, 170, 101, 154, 92, 168, 159, 130, 116,
	117, 91, 0, 149, 107, 111, 106, 139, 165, 166,
	105, 189, 97, 177, 178, 94, 98, 176, 137, 163,
	169, 131, 128, 93, 167, 129, 127, 119, 109, 113,
	143, 126, 144, 114, 134, 133, 135, 0, 0, 0,
	158, 174, 190, 0, 0, 183, 184, 185, 186, 0,
	0, 0, 136, 99, 115, 155, 118, 125, 148, 188,
	140, 152, 102, 173, 156, 0, 0, 0, 0, 108,
	0, 0, 0, 120, 0, 123, 0, 0, 157, 132,
	0, 0, 89, 95, 122, 187, 147, 110, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 580,
	0, 0, 0, 0, 0, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 180, 0, 0, 0, 145, 0, 103, 0,
	160, 112, 0, 121, 0, 0, 0, 0, 0, 104,
	0, 151, 141, 172, 0, 142, 150, 124, 164, 146,
	171, 181, 182, 162, 179, 153, 96, 138, 88, 90,
	161, 170, 101, 154, 92, 168, 159, 130, 116, 117,
	91, 0, 149, 107, 111, 106, 139, 165, 166, 105,
	189, 97, 177, 178, 94, 98, 176, 137, 163, 169,
	131, 128, 93, 167, 129, 127, 119, 109, 113, 143,
	126, 144, 114, 134, 133, 135, 0, 0, 0, 158,
	174, 190, 0, 0, 183, 184, 185, 186, 0, 0,
	0, 136, 99, 115, 155, 118, 125, 148, 188, 140,
	152, 102, 173, 156, 0, 0, 0, 0, 108, 0,
	0, 0, 120, 0, 123, 0, 0, 157, 132, 0,
	0, 89, 95, 122, 187, 147, 110, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 319, 0, 484, 0,
	0, 0, 0, 0, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 180, 0, 0, 0, 145, 0, 103, 0, 160,
	112, 0, 121, 0, 0, 0, 0, 0, 104, 0,
	151, 141, 172, 0, 142, 150, 124, 164, 146, 171,
	181, 182, 162, 179, 153, 96, 138, 88, 90, 161,
	170, 101, 154, 92, 168, 159, 130, 116, 117, 91,
	0, 149, 107, 111, 106, 139, 165, 166, 105, 189,
	97, 177, 178, 94, 98, 176, 137, 163, 169, 131,
	128, 93, 167, 129, 127, 119, 109, 113, 143, 126,
	144, 114, 134, 133, 135, 0, 0, 0, 158, 174,
	190, 0, 0, 183, 184, 185, 186, 0, 0, 0,
	136, 99, 115, 155, 118, 125, 148, 188, 140, 152,
	102, 173, 156, 0, 0, 0, 0, 108, 0, 0,
	0, 120, 0, 123, 0, 0, 157, 132, 0, 0,
	89, 95, 122, 187, 147, 110, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 145, 0, 103, 0, 160, 112,
	0, 121, 0, 0, 0, 0, 0, 104, 0, 151,
	141, 172, 0, 142, 150, 124, 164, 146, 171, 181,
	182, 162, 179, 153, 96, 138, 88, 90, 161, 170,
	101, 154, 92, 168, 159, 130, 116, 117, 91, 0,
	149, 107, 111, 106, 139, 165, 166, 105, 189, 97,
	177, 178, 94, 98, 176, 137, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 0, 0, 158, 174, 190,
	0, 0, 183, 184, 185, 186, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 188, 664, 152, 102,
	173, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 89,
	95, 122, 187, 147, 110, 175, 556, 108, 0, 0,
	0, 120, 0, 123, 0, 0, 157, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	180, 0, 0, 0, 145, 0, 103, 0, 160, 112,
	0, 121, 0, 0, 0, 0, 0, 104, 0, 151,
	141, 172, 0, 142, 150, 124, 164, 146, 171, 181,
	182, 162, 179, 153, 96, 138, 88, 90, 161, 170,
	101, 154, 92, 168, 159, 130, 116, 117, 91, 0,
	149, 107, 111, 106, 139, 165, 166, 105, 189, 97,
	177, 178, 94, 98, 176, 137, 163, 169, 131, 128,
	93, 167, 129, 127, 119, 109, 113, 143, 126, 144,
	114, 134, 133, 135, 0, 0, 0, 158, 174, 190,
	0, 0, 183, 184, 185, 186, 0, 0, 0, 136,
	99, 115, 155, 118, 125, 148, 188, 0, 152, 102,
	173, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	303, 0, 0, 0, 0, 0, 0, 140, 0, 89,
	95, 122, 187, 147, 110, 175, 108, 0, 0, 0,
	120, 0, 123, 0, 0, 157, 132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 180,
	0, 0, 0, 145, 0, 103, 0, 160, 112, 0,
	121, 0, 0, 0, 0, 0, 104, 0, 151, 141,
	172, 0, 142, 150, 124, 164, 146, 171, 181, 182,
	162, 179, 153, 96, 138, 88, 90, 161, 170, 101,
	154, 92, 168, 159, 130, 116, 117, 91, 0, 149,
	107, 111, 106, 139, 165, 166, 105, 189, 97, 177,
	178, 94, 98, 176, 137, 163, 169, 131, 128, 93,
	167, 129, 127, 119, 109, 113, 143, 126, 144, 114,
	134, 133, 135, 0, 0, 0, 158, 174, 190, 0,
	0, 183, 184, 185, 186, 0, 0, 0, 136, 99,
	115, 155, 118, 125, 148, 188, 140, 152, 102, 173,
	156, 0, 0, 0, 0, 108, 0, 0, 0, 120,
	0, 123, 0, 0, 157, 132, 0, 0, 89, 95,
	122, 187, 147, 110, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 180, 0,
	0, 0, 145, 0, 103, 0, 160, 112, 0, 121,
	0, 0, 0, 0, 0, 104, 0, 151, 141, 172,
	0, 142, 150, 124, 164, 146, 171, 181, 182, 162,
	179, 153, 96, 138, 88, 90, 161, 170, 101, 154,
	92, 168, 159, 130, 116, 117, 91, 0, 149, 107,
	111, 106, 139, 165, 166, 105, 189, 97, 177, 178,
	94, 98, 176, 137, 163, 169, 131, 128, 93, 167,
	129, 127, 119, 109, 113, 143, 126, 144, 114, 134,
	133, 135, 0, 0, 0, 158, 174, 190, 0, 0,
	183, 184, 185, 186, 0, 0, 0, 136, 99, 115,
	155, 118, 125, 148, 188, 140, 152, 102, 173, 156,
	0, 0, 0, 0, 108, 0, 0, 0, 120, 0,
	123, 0, 0, 157, 132, 0, 0, 89, 95, 122,
	187, 147, 110, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 145, 0, 103, 0, 160, 112, 0, 121, 0,
	0, 0, 0, 0, 104, 0, 151, 141, 172, 0,
	142, 150, 124, 164, 146, 171, 181, 182, 162, 179,
	153, 96, 138, 88, 90, 161, 170, 101, 154, 92,
	168, 159, 130, 116, 117, 91, 0, 149, 107, 111,
	106, 139, 165, 166, 105, 189, 97, 177, 178, 94,
	98, 176, 137, 163, 169, 131, 128, 93, 167, 129,
	127, 119, 109, 113, 143, 126, 144, 114, 134, 133,
	135, 0, 0, 0, 158, 174, 190, 0, 0, 183,
	184, 185, 186, 0, 0, 0, 136, 99, 115, 155,
	118, 125, 148, 188, 140, 152, 102, 173, 156, 0,
	0, 0, 0, 108, 0, 0, 0, 120, 0, 123,
	0, 0, 157, 132, 0, 0, 89, 95, 122, 187,
	147, 110, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 180, 0, 0, 0,
	145, 0, 103, 0, 160, 112, 0, 121, 0, 0,
	0, 0, 0, 104, 0, 151, 141, 172, 0, 142,
	150, 124, 164, 146, 171, 181, 182, 162, 179, 153,
	96, 138, 88, 90, 161, 170, 101, 154, 92, 168,
	159, 130, 116, 117, 91, 0, 149, 107, 111, 106,
	139, 165, 166, 105, 189, 97, 177, 178, 94, 98,
	176, 137, 163, 169, 131, 128, 93, 167, 129, 127,
	119, 109, 113, 143, 126, 144, 114, 134, 133, 135,
	0, 0, 0, 158, 174, 190, 0, 0, 183, 184,
	185, 186, 0, 0, 0, 136, 99, 115, 155, 118,
	125, 148, 188, 140, 152, 102, 173, 156, 0, 0,
	0, 0, 108, 0, 0, 0, 120, 0, 123, 0,
	0, 157, 132, 0, 0, 89, 95, 122, 187, 147,
	110, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 180, 0, 0, 0, 145,
	0, 103, 0, 160, 112, 0, 121, 0, 0, 0,
	0, 0, 104, 0, 151, 141, 172, 0, 142, 150,
	124, 164, 146, 171, 181, 182, 162, 179, 153, 96,
	138, 88, 90, 161, 170, 101, 154, 92, 168, 159,
	130, 116, 117, 91, 0, 149, 107, 111, 106, 139,
	165, 166, 105, 189, 97, 177, 178, 94, 98, 176,
	137, 163, 169, 131, 128, 93, 167, 129, 127, 119,
	109, 113, 143, 126, 144, 114, 134, 133, 135, 0,
	0, 0, 158, 174, 190, 0, 0, 183, 184, 185,
	186, 0, 0, 0, 136, 99, 115, 155, 118, 125,
	148, 188, 0, 152, 102, 173, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 95, 122, 187, 147, 110,
	175,
}
var yyPact = [...]int{

	1796, -1000, -175, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 905, 934, -1000, -1000, -1000, -1000, -1000, -1000, 760,
	36, 116, 133, 27, 10418, 132, 1281, 10836, -1000, 6,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 690, -1000, -1000,
	-1000, -1000, -1000, 896, 903, 762, 895, 817, -1000, 5920,
	115, 9123, 10209, 5206, -1000, 504, 129, 10836, -142, 10627,
	106, 106, 106, -1000, 131, 10836, -1000, 10836, 101, 501,
	101, 101, 101, 10836, -1000, 168, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10836, 476, 858, 46, 3449, 3449, 3449, 3449, 19,
	3449, -93, 783, -1000, -1000, -1000, -1000, 3449, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 426, 853,
	6637, 6637, 905, -1000, 690, -1000, -1000, -1000, 844, -1000,
	-1000, 322, 919, -1000, 7562, 164, -1000, 6637, 1577, 691,
	-1000, -1000, 691, -1000, -1000, 153, -1000, -1000, 7095, 7095,
	7095, 7095, 7095, 7095, 7095, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 691,
	-1000, 6399, 691, 691, 691, 691, 691, 691, 691, 691,
	6637, 691, 691, 691, 691, 691, 691, 691, 691, 691,
	691, 691, 691, 691, 9980, 707, 784, -1000, -1000, -1000,
	886, 8258, 8914, 10836, 572, -1000, 695, 4955, -96, -1000,
	-1000, -1000, 239, 8676, -1000, -1000, -1000, 842, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 655, -1000, 2192, 10627, 3449,
	121, 694, 460, 261, 459, 10836, 9750, 3449, 111, 10836,
	882, 773, 10836, 457, 452, -1000, 4704, -1000, 3449, 3449,
	3449, 3449, 3449, 3449, 3449, 3449, -1000, -1000, -1000, -1000,
	-1000, -1000, 3449, 3449, -1000, -61, -1000, 10836, -1000, -1000,
	-1000, -1000, 933, 188, 433, 162, 712, -1000, 398, 896,
	426, 817, 8467, 802, -1000, -1000, 10836, -1000, 6637, 6637,
	461, -1000, 9541, -1000, -1000, 3700, 207, 7095, 369, 228,
	7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095, 7095,
	7095, 7095, 7095, 7095, 7095, 361, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 449, -1000, 690, 616, 616, 179,
	179, 179, 179, 179, 179, 7324, 5444, 426, 646, 240,
	6399, 5920, 5920, 6637, 6637, 11045, 11045, 5920, 890, 249,
	240, 11045, -1000, 426, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 5920, 5920, 5920, 5920, 45, 10836, -1000, 11045, 9123,
	9123, 9123, 9123, 9123, -1000, 814, 810, -1000, 800, 799,
	806, 10836, -1000, 641, 8258, 185, 691, -1000, 9332, -1000,
	-1000, 45, 547, 9123, 10836, -1000, -1000, 4453, 695, -96,
	680, -1000, -114, -91, 6158, 174, -1000, -1000, -1000, -1000,
	2947, 331, 195, -1000, -60, -1000, -1000, -1000, -1000, 728,
	-1000, -1000, -1000, 728, 110, 728, 728, 728, -23, -23,
	-23, -23, -1000, -1000, -1000, -1000, -1000, 759, 755, -1000,
	728, 728, 728, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 754,
	754, 754, 729, 729, 752, -1000, 10836, -161, 446, 3449,
	881, 3449, -1000, 70, 10836, -1000, 10836, -1000, -1000, 10836,
	3449, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 273, -1000, -1000, -1000,
	-1000, 826, 6637, 6637, 4202, 6637, -1000, -1000, -1000, 853,
	-1000, 890, 906, -1000, 834, 832, 5920, -1000, -1000, 207,
	250, -1000, -1000, 300, -1000, -1000, -1000, -1000, 159, 691,
	-1000, 1918, -1000, -1000, -1000, -1000, 369, 7095, 7095, 7095,
	311, 1918, 1737, 930, 1758, 179, 454, 454, 181, 181,
	181, 181, 181, 257, 257, -1000, -1000, -1000, 426, -1000,
	-1000, -1000, 426, 5920, 684, -1000, -1000, 6637, -1000, 426,
	634, 634, 327, 312, 667, -1000, 157, 608, 634, 5920,
	256, -1000, 6637, 426, -1000, 634, 426, 634, 634, 692,
	691, -1000, 600, -1000, 234, 784, 750, 771, 711, -1000,
	-1000, -1000, -1000, 807, -1000, 801, -1000, -1000, -1000, -1000,
	-1000, 127, 125, 123, 10627, -1000, 917, 9123, 568, -1000,
	-1000, 680, -96, -73, -1000, -1000, -1000, 240, -1000, 444,
	678, 2696, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 744,
	770, 87, 85, 135, 435, 10627, -1000, -1000, -1000, 284,
	73, 932, -1000, 82, -1000, 79, 399, -67, -1000, -1000,
	374, -23, -23, 728, -23, -1000, -1000, 174, 838, 174,
	174, 174, 395, 395, -1000, -1000, -1000, -1000, 371, -1000,
	-1000, -1000, 367, -1000, 10836, 10627, 3449, -1000, 3951, -1000,
	-1000, -1000, -1000, -1000, -1000, 381, 216, 173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44,
	136, -1000, 3449, -1000, 277, 10836, 10836, 823, 240, 240,
	156, -1000, -1000, 10836, -1000, -1000, -1000, -1000, 606, -1000,
	-1000, -1000, 3198, 5920, -1000, 311, 1918, 693, -1000, 7095,
	7095, -1000, -1000, 634, 5920, 240, -1000, -1000, -1000, 32,
	361, 32, 7095, 7095, 4202, 7095, 7095, -153, 651, 243,
	-1000, 6637, 253, -1000, -1000, -1000, -1000, -1000, 769, 11045,
	691, -1000, 8029, 10627, 905, 11045, 6637, 6637, -1000, -1000,
	6637, 743, -1000, 6637, -1000, -1000, -1000, 691, 691, 691,
	598, -1000, 905, 568, -1000, -1000, -1000, -119, -126, -1000,
	-1000, 2947, -1000, 2947, 10627, 927, -1000, 432, 430, -1000,
	-1000, 92, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-130, -1000, -1000, -1000, -1000, -1000, 524, 174, 174, -23,
	174, -1000, 225, -1000, -1000, -1000, 632, -1000, 630, 676,
	615, 688, 768, -1000, 658, -1000, 232, -1000, 83, -1000,
	10627, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10627,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10836, -1000, -1000, -1000, -1000, -1000, 10627, 102, -1000,
	-1000, 391, 6637, -1000, -1000, -1000, 3951, -1000, 917, 9123,
	-1000, -1000, 426, -1000, 7095, 1918, 1918, -1000, -1000, 426,
	728, 728, -1000, 728, 729, -1000, 728, -4, 728, -6,
	426, 426, 856, 1694, -1000, 798, 1636, 691, -150, -1000,
	240, 6637, -1000, 846, 675, 594, -1000, -1000, 5682, 426,
	610, 150, 598, 896, -1000, 240, 240, 240, 10627, 240,
	10627, 10627, 10627, 7800, 10627, 896, -1000, -1000, -1000, -1000,
	2696, -1000, 549, -1000, 728, 145, 145, -1000, -1000, 77,
	-1000, -1000, -1000, -1000, 174, -1000, -1000, -1000, -23, 390,
	-23, 341, -1000, 330, 10627, 10627, 10836, 3951, 2947, 10627,
	-1000, -1000, -1000, 727, -1000, -1000, -1000, -1000, 874, 10627,
	-1000, 240, 914, 627, -1000, 1918, -1000, -1000, 104, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7095, 7095,
	-1000, 7095, 7095, 7095, 426, 378, 240, 67, -1000, 691,
	-1000, -1000, 717, 10627, 10627, -1000, -1000, 536, -1000, 520,
	520, 520, 185, -1000, -1000, 155, 10627, -1000, 766, -1000,
	-1000, 272, 11, 714, 10627, -1000, 174, -1000, 174, 485,
	468, 517, 726, 725, -1000, -1000, 724, 10627, 691, 97,
	912, 902, -1000, -1000, 1108, 1108, 1108, 1108, 22, -1000,
	-1000, 929, -1000, 691, -1000, 690, 147, -1000, 10627, -1000,
	-1000, -1000, -1000, -1000, 155, -1000, 427, 217, 377, -1000,
	925, -1000, -1000, 922, 722, -1000, -1000, -1000, -1000, -1000,
	10627, 10627, 10627, 515, 38, 58, 56, -1000, 6637, 6637,
	-1000, -1000, -1000, -1000, 426, 47, -164, 11045, 594, 426,
	10627, -1000, -1000, -1000, 305, -1000, -1000, 145, 145, 10627,
	513, 494, 492, 694, 484, -1000, 10627, 721, 719, 240,
	577, -1000, 822, -158, -171, 533, -1000, -1000, -1000, -1000,
	-1000, 482, -1000, -1000, -1000, -1000, -161, -1000, 38, 831,
	10627, 10627, -1000, 821, -1000, 98, 10627, -1000, -1000, 30,
	467, 464, -162, 10627, -1000, 26, -1000, 76, -166, 718,
	691, 10836, -172, 10627, 6866, 689, -1000, 425, 1108, 426,
	10627, -1000, -1000, -1000, 412, -1000,
}
var yyPgo = [...]int{

	0, 1173, 18, 438, 1171, 1164, 1163, 1160, 1158, 1157,
	1156, 1154, 1151, 1148, 1146, 1145, 1144, 1143, 1142, 1136,
	1130, 1126, 1124, 1123, 151, 1122, 1119, 1118, 57, 1117,
	61, 1116, 1115, 36, 59, 41, 32, 9, 1114, 26,
	95, 54, 1113, 49, 1112, 1111, 80, 1110, 53, 1108,
	1105, 65, 1104, 1102, 15, 28, 1100, 1099, 1098, 1097,
	108, 140, 1096, 1094, 1093, 1092, 1091, 1088, 48, 3,
	12, 11, 16, 1085, 45, 40, 1081, 46, 1079, 1075,
	1074, 1073, 33, 1072, 51, 1069, 23, 50, 1066, 7,
	67, 43, 22, 10, 75, 56, 1065, 30, 60, 44,
	1064, 1063, 414, 1061, 1060, 1059, 1058, 1057, 1056, 379,
	424, 1055, 1053, 1052, 39, 0, 273, 109, 58, 1051,
	42, 1049, 1387, 79, 77, 21, 1048, 27, 1553, 34,
	1047, 1046, 31, 1044, 1040, 1039, 1038, 1037, 1036, 1035,
	1033, 387, 69, 24, 1017, 1015, 55, 25, 37, 52,
	1013, 1011, 1010, 1009, 6, 14, 1, 47, 1008, 999,
	997, 993, 29, 20, 991, 13, 990, 8, 989, 987,
	5, 986, 17, 985, 2, 978, 4, 974, 971, 969,
	1329, 945, 966, 959, 958, 943, 86,
}
var yyR1 = [...]int{

	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 176, 176, 175, 174, 174, 173, 173, 172, 16,
	159, 160, 160, 160, 160, 149, 133, 133, 133, 133,
	133, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 136, 136, 136, 136,
	136, 138, 138, 138, 138, 138, 134, 134, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 148, 148, 141, 141, 146, 146, 147,
	147, 147, 144, 144, 145, 145, 142, 142, 142, 143,
	143, 151, 151, 168, 168, 167, 167, 167, 158, 158,
	164, 164, 164, 164, 164, 157, 157, 166, 166, 165,
	152, 152, 152, 152, 152, 153, 154, 154, 154, 154,
	155, 155, 156, 156, 161, 161, 161, 162, 162, 162,
	163, 163, 163, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 183, 183, 184, 184,
	184, 184, 184, 184, 184, 171, 169, 169, 170, 170,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 107, 107, 104, 104, 105, 105, 106, 106,
	106, 108, 108, 108, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 185, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	126, 126, 125, 125, 125, 124, 124, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 103, 103, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 33, 33, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 186, 186, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 129, 129, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 97, 94, 94, 98, 98, 98,
	96, 96, 96, 121, 121, 121, 101, 101, 109, 109,
	110, 110, 102, 102, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 112, 112, 112, 113, 113, 116,
	116, 117, 117, 122, 122, 123, 123, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 180, 181, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 1, 1, 4, 4,
	4, 5, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 3, 3, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 3, 2,
	1, 4, 4, 7, 7, 13, 1, 1, 2, 2,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 18, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -180, 8, 241,
	52, -179, 256, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -159, 52, -120, 120, 69, 149,
	233, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 233, 117, 118, -51, -122, 55, -115, 156, 249,
	157, 168, 162, 190, 182, 250, 154, 179, 183, 220,
	64, 160, 229, 126, 137, 177, 173, 171, 27, 195,
	254, 172, 129, 196, 200, 221, 166, 167, 223, 194,
	31, 131, 251, 33, 145, 224, 198, 193, 189, 192,
	165, 188, 37, 202, 201, 203, 219, 185, 155, 174,
	18, 140, 143, 197, 199, 124, 147, 253, 225, 170,
	144, 139, 228, 153, 161, 222, 231, 36, 207, 164,
	128, 158, 151, 186, 146, 175, 176, 191, 163, 187,
	159, 148, 141, 230, 208, 255, 184, 180, 181, 152,
	120, 149, 150, 212, 213, 214, 215, 252, 226, 178,
	209, 118, 105, 183, 111, 210, 119, 31, 147, -131,
	118, -104, 150, 212, 213, 214, 215, 55, 222, 221,
	216, -122, 159, -127, -127, -127, -127, -127, -2, -86,
	17, 16, -5, -3, -180, 6, 20, 21, -30, 38,
	39, -25, -36, 96, -37, -122, -56, 71, -61, 28,
	55, -115, 23, -60, -57, -75, -73, -74, 105, 106,
	94, 95, 102, 72, 107, -65, -63, -64, -66, 57,
	56, 65, 58, 59, 60, 61, 66, 67, 68, -116,
	-71, -180, 42, 43, 242, 243, 244, 245, 248, 246,
	74, 32, 232, 240, 239, 238, 236, 237, 234, 235,
	123, 233, 100, 241, -102, -39, -40, -41, -42, -53,
	-74, -180, -51, 11, -46, -51, -94, -130, 159, -98,
	222, 221, -117, -96, -116, -114, 220, 183, 219, 55,
	-115, 116, 70, 22, 24, 205, 73, 105, 16, 74,
	104, 242, 111, 46, 234, 235, 232, 244, 245, 233,
	210, 28, 10, 25, 135, 21, 98, 113, 77, 78,
	138, 23, 136, 68, 19, 49, 130, 11, 13, 14,
	123, 122, 89, 119, 44, 8, 107, 26, 86, 40,
	133, 42, 87, 17, 236, 237, 30, 248, 142, 100,
	47, 34, 71, 66, 50, 227, 69, 15, 45, 88,
	114, 241, 43, 117, 6, 247, 29, 134, 41, 118,
	211, 76, 121, 67, 5, 132, 9, 48, 51, 238,
	239, 240, 32, 75, 12, -160, -149, 55, 119, -51,
	241, -116, -110, 123, -110, -110, 118, -51, -51, -109,
	123, 55, -109, -109, -109, -51, 108, -51, 55, 29,
	233, 55, 147, 118, 148, 120, -128, -180, -117, -128,
	-128, -128, 151, 152, -128, -105, 217, 50, -128, -181,
	54, -87, 19, 30, -37, -122, -83, -84, -37, -82,
	-2, -24, 34, -28, 21, 63, 11, -119, 70, 69,
	86, -118, 22, -116, 57, 108, -37, -58, 89, 71,
	87, 88, 73, 91, 90, 101, 94, 95, 96, 97,
	98, 99, 100, 92, 93, 104, 79, 80, 81, 82,
	83, 84, 85, -103, -180, -74, -180, 109, 110, -61,
	-61, -61, -61, -61, -61, -61, -180, -2, -69, -37,
	-180, -180, -180, -180, -180, -180, -180, -180, -180, -78,
	-37, -180, -186, -180, -186, -186, -186, -186, -186, -186,
	-186, -180, -180, -180, -180, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -180, -125, 143, -124, 22, -122,
	57, -51, -46, -182, 53, 11, 51, 53, -94, 159,
	-95, -99, 223, 225, 79, -121, -116, 57, 28, 29,
	54, 53, -150, -133, -137, -134, -139, -138, -140, -135,
	-136, 182, 250, 179, 183, 180, 105, 184, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 29, 137,
	175, 176, 177, 178, 196, 197, 198, 199, 200, 201,
	202, 203, 162, 163, 164, 165, 166, 167, 168, 170,
	171, 172, 173, 174, -116, -128, 120, -176, 51, 55,
	71, 55, -51, -51, 227, -128, 121, -51, 23, 50,
	-51, 55, 55, -123, -122, -114, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -128, -107, 211, 218, -51,
	9, 89, 53, 18, 108, 53, -85, 24, 25, -86,
	-181, -30, -62, -116, 58, 61, -29, 41, -51, -37,
	-37, -67, 66, 71, 67, 68, -118, 96, -123, -117,
	-114, -61, -68, -71, -74, 62, 89, 87, 88, 73,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -129, 55, 57, 55, -60,
	-60, -116, -35, 21, -34, -36, -181, 53, -181, -2,
	-34, -34, -37, -37, -75, -116, -122, -75, -34, -28,
	-76, -77, 75, -75, -181, -34, -35, -34, -34, -90,
	143, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	40, 40, 40, 45, 40, 45, 40, -48, -122, -181,
	-54, 48, 122, 49, -180, -124, -90, 51, -39, -51,
	-98, -95, 53, 224, 226, 227, 50, -37, -143, 104,
	-161, -162, -163, -117, 57, 58, -149, -151, -152, -164,
	-153, 124, 128, 132, -157, 126, 119, 133, 66, 71,
	28, 50, 205, 124, 133, 132, 64, -144, 208, -141,
	52, -141, -141, 181, -141, -141, -141, -142, 183, -142,
	-142, -142, 52, 52, -141, -141, -141, -146, 52, -146,
	-146, -147, 52, -147, 50, 51, -51, -174, 252, -175,
	55, -128, 23, -128, -111, 116, 113, 114, -171, 112,
	205, 183, 64, 28, 15, 242, 143, 255, 55, 144,
	-51, -51, -51, -128, -106, 11, 89, 36, -37, -37,
	-123, -84, -87, -101, 19, 11, 32, 32, -34, 66,
	67, 68, 108, -180, -68, -61, -61, -61, -33, 138,
	70, -181, -181, -34, 53, -37, -181, -181, -181, 53,
	51, 22, 53, 11, 108, 53, 11, -181, -34, -79,
	-77, 77, -37, -181, -181, -181, -181, -181, -59, 29,
	32, -2, -180, -180, -55, 53, 12, 79, -44, -43,
	50, 51, -45, 50, -43, 40, 40, 119, 119, 119,
	-91, -116, -55, -39, -55, -99, -100, 228, 225, 231,
	55, 53, -163, 79, 52, 50, 133, -157, -157, 55,
	55, -155, -116, 66, 57, 58, 59, 66, 232, 65,
	9, 133, 133, 57, -145, 209, 58, -142, -142, -141,
	-142, -143, 29, -143, -143, -143, -148, 57, -148, 58,
	58, -51, -116, -128, -173, -172, -117, -127, -120, -184,
	149, 125, 130, 129, 55, 124, 128, 143, -177, 149,
	125, 126, 130, 129, 55, 119, 133, 124, 128, 143,
	132, -112, -113, 121, 22, 119, 133, 143, 116, -128,
	-108, 87, 12, -122, -122, 37, 108, -51, -38, 11,
	96, -117, -35, -33, 70, -61, -61, -181, -36, -132,
	105, 179, 137, 177, 173, 194, 185, 207, 175, 208,
	-129, -132, -61, -61, -117, -61, -61, 249, -82, 78,
	-37, 76, -92, 50, -93, -70, -72, -71, -180, -2,
	-88, -116, -91, -82, -97, -37, -37, -37, 52, -37,
	-180, -180, -180, -181, 53, -82, -55, 225, 229, 230,
	-162, -163, -166, -165, -116, 10, 9, 55, 55, 130,
	232, 54, -143, -143, -142, -143, 55, 105, 54, 53,
	54, 53, 54, 53, 52, 51, 50, 53, 79, -183,
	119, 133, -127, -116, -127, -116, -51, -127, -116, 126,
	57, -37, -55, -39, -181, -61, -181, -141, -141, -141,
	-147, -141, 167, -141, 167, -181, -181, -181, 53, 19,
	-181, 53, 19, -180, -32, 247, -37, 27, -92, 53,
	-181, -181, -181, 53, 108, -181, -86, -89, -116, -89,
	-89, -89, -125, -116, -86, 54, 53, -141, -154, 153,
	154, 29, 155, -154, 133, -143, -142, 57, -142, 58,
	58, -89, -116, -51, -172, -163, -116, 52, 26, -116,
	-80, 13, -142, 55, -61, -61, -61, -61, -61, -181,
	57, 133, -72, 32, -2, -180, -116, -116, 53, 54,
	-181, -181, -181, -54, -168, -167, 51, 131, 64, -165,
	50, 66, 156, 50, -155, -143, -143, 54, 54, 54,
	52, 52, 52, -89, -180, 124, 130, -81, 14, 16,
	-181, -181, -181, -181, -31, 89, 252, 9, -70, -2,
	108, -116, -167, 55, -158, 79, 57, 9, 10, 52,
	-89, -89, -89, 54, -169, -170, 143, 133, 133, -37,
	-69, -181, 250, 47, 253, -93, -181, -116, 58, -154,
	-154, -156, -116, 54, 54, 54, -176, -181, 53, -116,
	52, 52, 37, 251, 254, 54, 53, -174, -170, 32,
	-89, -156, 37, 127, -116, 145, 54, 54, 252, -116,
	146, 127, 253, 52, -180, -51, 254, -156, -61, 142,
	52, 54, -181, -181, -156, 54,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 539, 0, 308, 308, 308, 308, 308, 308, 0,
	69, 592, 0, 0, 0, 0, -2, 298, 299, 0,
	301, 302, 816, 816, 816, 816, 816, 0, 33, 34,
	814, 1, 3, 547, 0, 0, 312, 315, 310, 0,
	592, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	590, 590, 590, 70, 0, 0, 593, 0, 588, 0,
	588, 588, 588, 0, 257, 379, 613, 614, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 0, 0, 0, 0, 817, 817, 817, 817, 0,
	817, 286, 275, 277, 278, 279, 280, 817, 295, 296,
	285, 297, 300, 303, 304, 305, 306, 307, 27, 551,
	0, 0, 539, 29, 0, 308, 313, 314, 318, 316,
	317, 309, 0, 326, 330, 0, 387, 0, 392, 394,
	-2, -2, 0, 429, 430, 431, 432, 433, 0, 0,
	0, 0, 0, 0, 0, 456, 457, 458, 459, 524,
	525, 526, 527, 528, 529, 530, 531, 396, 397, 521,
	571, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	512, 0, 486, 486, 486, 486, 486, 486, 486, 486,
	0, 0, 0, 0, 0, 0, 337, 339, 340, 341,
	360, 0, 362, 0, 0, 41, 45, 0, 793, 575,
	-2, -2, 0, 0, 611, 612, -2, 721, -2, 609,
	610, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 0, 81, 0, 0, 817,
	0, 71, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 256, 0, 258, 817, 817,
	817, 817, 817, 817, 817, 817, 267, 818, 819, 268,
	269, 270, 817, 817, 272, 0, 287, 0, 281, 28,
	815, 22, 0, 0, 548, 0, 540, 541, 544, 547,
	27, 315, 0, 320, 319, 311, 0, 327, 0, 0,
	0, 331, 0, 333, 334, 0, 390, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 414, 415, 416, 417,
	418, 419, 420, 393, 0, 407, 0, 0, 0, 449,
	450, 451, 452, 453, 454, 0, 322, 27, 0, 427,
	0, 0, 0, 0, 0, 0, 0, 0, 318, 0,
	513, 0, 478, 0, 479, 480, 481, 482, 483, 484,
	485, 0, 322, 0, 0, 43, 0, 378, 0, 0,
	0, 0, 0, 0, 367, 0, 0, 370, 0, 0,
	0, 0, 361, 0, 0, 381, 765, 363, 0, 365,
	366, -2, 0, 0, 0, 39, 40, 0, 46, 793,
	48, 49, 0, 0, 0, 169, 583, 584, 585, 581,
	204, 0, 85, 91, 162, 87, 88, 89, 90, 155,
	108, 126, 127, 155, 155, 155, 155, 155, 166, 166,
	166, 166, 138, 139, 140, 141, 142, 0, 0, 121,
	155, 155, 155, 125, 145, 146, 147, 148, 149, 150,
	151, 152, 109, 110, 111, 112, 113, 114, 115, 157,
	157, 157, 159, 159, 0, 64, 0, 74, 0, 817,
	0, 817, 79, 0, 0, 223, 0, 251, 589, 0,
	817, 254, 255, 380, 615, 616, 259, 260, 261, 262,
	263, 264, 265, 266, 271, 274, 288, 282, 283, 276,
	552, 0, 0, 0, 0, 0, 543, 545, 546, 551,
	30, 318, 0, 532, 0, 0, 0, 321, 25, 388,
	389, 391, 408, 0, 410, 412, 332, 328, 0, 522,
	-2, 398, 399, 423, 424, 425, 0, 0, 0, 0,
	421, 403, 0, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 448, 497, 498, 0, 446,
	447, 455, 0, 0, 323, 324, 426, 0, 570, 27,
	0, 0, 0, 0, 0, 521, 0, 0, 0, 0,
	519, 516, 0, 0, 487, 0, 0, 0, 0, 0,
	0, 377, 385, 572, 0, 338, 356, 358, 0, 353,
	368, 369, 371, 0, 373, 0, 375, 376, 342, 343,
	344, 0, 0, 0, 0, 364, 385, 0, 385, 42,
	576, 47, 0, 0, 52, 53, 577, 578, 579, 0,
	80, 205, 207, 210, 211, 212, 82, 83, 84, 0,
	190, 0, 0, 0, 0, 200, 185, 186, 92, 0,
	0, 0, 101, 0, 103, 105, 0, 164, 163, 107,
	0, 166, 166, 155, 166, 132, 133, 169, 0, 169,
	169, 169, 0, 0, 122, 123, 124, 116, 0, 117,
	118, 119, 0, 120, 0, 0, 817, 66, 0, 72,
	73, 67, 591, 68, 816, 69, 0, 604, 224, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 0,
	0, 250, 817, 253, 291, 0, 0, 0, 549, 550,
	0, 542, 23, 0, 586, 587, 533, 534, 335, 409,
	411, 413, 0, 322, 400, 421, 404, 0, 401, 0,
	0, 395, 460, 0, 0, 428, -2, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 0,
	517, 0, 0, 477, 488, 489, 490, 491, 564, 0,
	0, -2, 0, 0, 539, 0, 0, 0, 350, 357,
	0, 0, 351, 0, 352, 372, 374, 0, 0, 0,
	0, 348, 539, 385, 38, 50, 51, 0, 0, 57,
	170, 0, 208, 0, 0, 0, 180, 0, 0, 183,
	184, 0, 201, 93, 94, 95, 96, 97, 98, 99,
	0, 102, 104, 106, 86, 165, 0, 169, 169, 166,
	169, 134, 0, 135, 136, 137, 0, 153, 0, 0,
	0, 0, 0, 65, 75, 76, 0, 213, 0, 816,
	0, 238, 239, 240, 241, 242, 243, 244, 816, 0,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 0, 816, 605, 606, 607, 608, 0, 0, 252,
	273, 0, 0, 289, 290, 553, 0, 24, 385, 0,
	329, 523, 0, 402, 0, 422, 405, 461, 325, 0,
	155, 155, 502, 155, 159, 505, 155, 507, 155, 510,
	0, 0, 0, 0, 522, 0, 0, 0, 514, 476,
	520, 0, 31, 0, 564, 554, 566, 568, 0, 27,
	0, 560, 0, 547, 573, 386, 574, 354, 0, 359,
	0, 0, 0, 362, 0, 547, 37, 54, 55, 56,
	206, 209, 0, 187, 155, 0, 0, 181, 182, 0,
	100, 156, 128, 129, 169, 130, 167, 168, 166, 0,
	166, 0, 160, 0, 0, 0, 0, 0, 0, 0,
	236, 237, 217, 0, 218, 220, 221, 222, 0, 0,
	292, 293, 535, 336, 462, 406, 465, 499, 166, 503,
	504, 506, 508, 509, 511, 467, 466, 468, 0, 0,
	471, 0, 0, 0, 0, 0, 518, 0, 32, 0,
	569, -2, 0, 0, 0, 44, 35, 0, 346, 0,
	0, 0, 381, 349, 36, 172, 0, 189, 191, 196,
	197, 0, 0, 192, 200, 131, 169, 154, 169, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 0, 0,
	537, 0, 500, 501, 0, 0, 0, 0, 492, 475,
	515, 0, 567, 0, -2, 0, 562, 561, 0, 355,
	382, 383, 384, 345, 171, 173, 0, 178, 0, 188,
	0, 198, 199, 0, 0, 143, 144, 158, 161, 61,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	469, 470, 472, 473, 0, 0, 0, 0, 557, 27,
	0, 347, 174, 175, 0, 179, 177, 0, 0, 0,
	0, 0, 0, 71, 0, 246, 0, 0, 0, 538,
	536, 474, 0, 0, 0, 565, -2, 563, 176, 193,
	194, 0, 202, 63, 62, 214, 74, 245, 0, 0,
	0, 0, 493, 0, 496, 0, 0, 219, 247, 0,
	0, 0, 494, 0, 203, 0, 215, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 495, 0, 0, 0,
	0, 195, 248, 249, 0, 216,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 256,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:310
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:315
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:316
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:320
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:343
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:351
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:355
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:361
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:368
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:374
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:378
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:384
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:388
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:395
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:407
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:419
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:423
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:429
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:448
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:449
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:453
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:457
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:462
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:466
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:480
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:484
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:490
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:494
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:500
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:504
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:508
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:522
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:532
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:536
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:542
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:547
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:562
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:577
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:591
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:595
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:607
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:611
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:616
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:620
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:625
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:629
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:635
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:640
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:645
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:651
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:656
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:662
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:668
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:675
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:682
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:687
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:691
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:695
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:701
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:706
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:717
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:727
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:732
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:737
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:742
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:747
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:752
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:757
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:762
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:767
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:772
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:777
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:782
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:787
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:792
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:797
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:804
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:809
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:815
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:857
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:863
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:869
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:881
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:889
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:909
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:974
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1019
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1072
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1076
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1081
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1085
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1089
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1094
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1098
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1108
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1124
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1128
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1133
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1149
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1153
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1157
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1161
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1171
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1175
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1181
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1185
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1198
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1204
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1210
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1216
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 195:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:1224
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].colIdent,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1236
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1244
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1248
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1253
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1260
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1264
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1269
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1285
		{
			yyVAL.str = yyDollar[1].str
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1289
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1293
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1303
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1307
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 213:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1313
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 214:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 215:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:1331
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 216:
		yyDollar = yyS[yypt-18 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.statement = &DDL{
				Action:  AddForeignKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				ForeignKey: &ForeignKeyDefinition{
					ConstraintName:   yyDollar[8].colIdent,
					IndexName:        NewColIdent(""),
					IndexColumns:     yyDollar[12].colIdents,
					ReferenceName:    NewColIdent(yyDollar[15].tableName.Name.String()),
					ReferenceColumns: yyDollar[17].colIdents,
				},
			}
		}
	case 217:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1360
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 218:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1364
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:1368
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1391
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1396
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1437
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1443
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1447
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 249:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1463
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1469
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1477
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1482
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1494
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1500
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1504
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1509
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1523
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1572
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1582
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1632
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.str = "extended "
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1642
		{
			yyVAL.str = ""
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.str = "full "
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1652
		{
			yyVAL.str = ""
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.showFilter = nil
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1670
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1674
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.str = SessionStr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.str = GlobalStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1704
		{
			yyVAL.statement = &Begin{}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.statement = &Begin{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1714
		{
			yyVAL.statement = &Commit{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1720
		{
			yyVAL.statement = &Rollback{}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1726
		{
			yyVAL.statement = &OtherRead{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1730
		{
			yyVAL.statement = &OtherRead{}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1734
		{
			yyVAL.statement = &OtherRead{}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1738
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1742
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1747
		{
			setAllowComments(yylex, true)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1751
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1757
		{
			yyVAL.bytes2 = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1761
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1767
		{
			yyVAL.str = UnionStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1771
		{
			yyVAL.str = UnionAllStr
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1775
		{
			yyVAL.str = UnionDistinctStr
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1780
		{
			yyVAL.str = ""
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1784
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1788
		{
			yyVAL.str = SQLCacheStr
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1793
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1797
		{
			yyVAL.str = DistinctStr
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1802
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1806
		{
			yyVAL.str = StraightJoinHint
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1811
		{
			yyVAL.selectExprs = nil
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1815
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1821
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1825
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1831
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1835
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1839
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1843
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1848
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1852
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1856
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1863
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1868
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1872
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1878
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1882
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1892
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1896
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1900
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1906
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 345:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1910
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1916
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1920
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1926
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1930
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1943
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1947
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1951
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1955
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1961
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1963
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1967
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1969
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1973
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1975
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1978
		{
			yyVAL.empty = struct{}{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1980
		{
			yyVAL.empty = struct{}{}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1983
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1987
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1991
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1998
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2004
		{
			yyVAL.str = JoinStr
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2008
		{
			yyVAL.str = JoinStr
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2012
		{
			yyVAL.str = JoinStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2018
		{
			yyVAL.str = StraightJoinStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2024
		{
			yyVAL.str = LeftJoinStr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2028
		{
			yyVAL.str = LeftJoinStr
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2032
		{
			yyVAL.str = RightJoinStr
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2036
		{
			yyVAL.str = RightJoinStr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2042
		{
			yyVAL.str = NaturalJoinStr
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2046
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2056
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2060
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2066
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2070
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2075
		{
			yyVAL.indexHints = nil
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2079
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2083
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2087
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2092
		{
			yyVAL.expr = nil
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2096
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2102
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2106
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2110
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2114
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2118
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2122
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2126
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2132
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2136
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2142
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2146
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2152
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2156
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2160
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2164
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2168
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2172
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2176
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2180
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2184
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2188
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2194
		{
			yyVAL.str = IsNullStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2198
		{
			yyVAL.str = IsNotNullStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2202
		{
			yyVAL.str = IsTrueStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2206
		{
			yyVAL.str = IsNotTrueStr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2210
		{
			yyVAL.str = IsFalseStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2214
		{
			yyVAL.str = IsNotFalseStr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2220
		{
			yyVAL.str = EqualStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2224
		{
			yyVAL.str = LessThanStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2228
		{
			yyVAL.str = GreaterThanStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2232
		{
			yyVAL.str = LessEqualStr
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2236
		{
			yyVAL.str = GreaterEqualStr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2240
		{
			yyVAL.str = NotEqualStr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2244
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2249
		{
			yyVAL.expr = nil
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2253
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2259
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2263
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2267
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2273
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2279
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2283
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2289
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2293
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2297
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2301
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2305
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2309
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2313
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2317
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2321
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2325
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2329
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2333
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2337
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2341
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2345
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2349
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2353
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2357
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2361
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2365
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2369
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2373
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2377
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2385
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2399
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2403
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2407
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 460:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2425
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2429
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 462:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2433
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2443
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 464:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 465:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2451
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 466:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2455
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 467:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2459
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 468:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2463
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 469:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2467
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 470:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2471
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 471:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2475
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 472:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2479
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 473:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2483
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 474:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:2487
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 475:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:2491
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2495
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2499
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2513
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2517
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2521
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2526
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2531
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 488:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 490:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2563
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2573
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2577
		{
			yyVAL.str = BooleanModeStr
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2581
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 495:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:2585
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2589
		{
			yyVAL.str = QueryExpansionStr
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2595
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2599
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2605
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2613
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2617
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2621
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2625
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2631
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2635
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2639
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2643
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2647
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2651
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2655
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2660
		{
			yyVAL.expr = nil
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2664
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2669
		{
			yyVAL.str = string("")
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2673
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2679
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2683
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2689
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2694
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2698
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2704
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2708
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2712
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2718
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2722
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2726
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2730
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2734
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2738
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2742
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2746
		{
			yyVAL.expr = &NullVal{}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2752
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2761
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2765
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2770
		{
			yyVAL.exprs = nil
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2774
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2779
		{
			yyVAL.expr = nil
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2783
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2788
		{
			yyVAL.orderBy = nil
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2792
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2798
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2802
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2808
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2813
		{
			yyVAL.str = AscScr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2817
		{
			yyVAL.str = AscScr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2821
		{
			yyVAL.str = DescScr
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2826
		{
			yyVAL.limit = nil
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2830
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 549:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2834
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2838
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2843
		{
			yyVAL.str = ""
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2847
		{
			yyVAL.str = ForUpdateStr
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2851
		{
			yyVAL.str = ShareModeStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2864
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2868
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2872
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 557:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2877
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2881
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 559:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2885
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2892
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2896
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2900
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2904
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2909
		{
			yyVAL.updateExprs = nil
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2913
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2919
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2923
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2929
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2933
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2939
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2945
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2955
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2959
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2965
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2971
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2975
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2981
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2985
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2989
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2996
		{
			yyVAL.bytes = []byte("charset")
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3003
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3007
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3011
		{
			yyVAL.expr = &Default{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3020
		{
			yyVAL.byt = 0
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:3022
		{
			yyVAL.byt = 1
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3025
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:3027
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3030
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3032
		{
			yyVAL.str = IgnoreStr
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3036
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3038
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3040
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3042
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3044
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3046
		{
			yyVAL.empty = struct{}{}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3048
		{
			yyVAL.empty = struct{}{}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3050
		{
			yyVAL.empty = struct{}{}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3052
		{
			yyVAL.empty = struct{}{}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3054
		{
			yyVAL.empty = struct{}{}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3057
		{
			yyVAL.empty = struct{}{}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3059
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3061
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3065
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3067
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3071
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3075
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3082
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3088
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3092
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3099
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3322
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3331
		{
			decNesting(yylex)
		}
	case 816:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3336
		{
			forceEOF(yylex)
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3341
		{
			forceEOF(yylex)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3345
		{
			forceEOF(yylex)
		}
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3349
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
