// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const SMALLSERIAL = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const SERIAL = 57508
const BIGINT = 57509
const BIGSERIAL = 57510
const INTNUM = 57511
const REAL = 57512
const DOUBLE = 57513
const PRECISION = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const SMALLMONEY = 57518
const MONEY = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const DATETIMEOFFSET = 57524
const DATETIME2 = 57525
const SMALLDATETIME = 57526
const CHAR = 57527
const VARCHAR = 57528
const VARYING = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NTEXT = 57535
const UUID = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const CITEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const JSONB = 57547
const ENUM = 57548
const GEOMETRY = 57549
const POINT = 57550
const LINESTRING = 57551
const POLYGON = 57552
const GEOMETRYCOLLECTION = 57553
const MULTIPOINT = 57554
const MULTILINESTRING = 57555
const MULTIPOLYGON = 57556
const ARRAY = 57557
const NOW = 57558
const BPCHAR = 57559
const NULLX = 57560
const AUTO_INCREMENT = 57561
const APPROXNUM = 57562
const SIGNED = 57563
const UNSIGNED = 57564
const ZEROFILL = 57565
const ZONE = 57566
const AUTOINCREMENT = 57567
const DATABASES = 57568
const TABLES = 57569
const VITESS_KEYSPACES = 57570
const VITESS_SHARDS = 57571
const VITESS_TABLETS = 57572
const VSCHEMA_TABLES = 57573
const EXTENDED = 57574
const FULL = 57575
const PROCESSLIST = 57576
const NAMES = 57577
const CHARSET = 57578
const GLOBAL = 57579
const SESSION = 57580
const ISOLATION = 57581
const LEVEL = 57582
const READ = 57583
const WRITE = 57584
const ONLY = 57585
const REPEATABLE = 57586
const COMMITTED = 57587
const UNCOMMITTED = 57588
const SERIALIZABLE = 57589
const CURRENT_TIMESTAMP = 57590
const DATABASE = 57591
const CURRENT_DATE = 57592
const CURRENT_TIME = 57593
const LOCALTIME = 57594
const LOCALTIMESTAMP = 57595
const UTC_DATE = 57596
const UTC_TIME = 57597
const UTC_TIMESTAMP = 57598
const REPLACE = 57599
const CONVERT = 57600
const CAST = 57601
const SUBSTR = 57602
const SUBSTRING = 57603
const GROUP_CONCAT = 57604
const SEPARATOR = 57605
const INHERIT = 57606
const MATCH = 57607
const AGAINST = 57608
const BOOLEAN = 57609
const LANGUAGE = 57610
const WITH = 57611
const WITHOUT = 57612
const PARSER = 57613
const QUERY = 57614
const EXPANSION = 57615
const UNUSED = 57616
const GENERATED = 57617
const ALWAYS = 57618
const IDENTITY = 57619
const SEQUENCE = 57620
const INCREMENT = 57621
const MINVALUE = 57622
const CACHE = 57623
const CYCLE = 57624
const OWNED = 57625
const NONE = 57626
const CLUSTERED = 57627
const NONCLUSTERED = 57628
const TYPECAST = 57629
const CHECK = 57630

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 92,
	-2, 82,
	-1, 36,
	153, 394,
	154, 394,
	-2, 384,
	-1, 269,
	109, 725,
	-2, 721,
	-1, 270,
	109, 726,
	-2, 722,
	-1, 340,
	80, 912,
	-2, 58,
	-1, 341,
	80, 864,
	-2, 59,
	-1, 346,
	80, 844,
	-2, 692,
	-1, 348,
	80, 887,
	-2, 694,
	-1, 641,
	51, 41,
	53, 41,
	-2, 43,
	-1, 782,
	109, 728,
	-2, 724,
	-1, 1020,
	5, 28,
	-2, 527,
	-1, 1045,
	5, 27,
	-2, 666,
	-1, 1140,
	5, 27,
	-2, 64,
	-1, 1351,
	5, 28,
	-2, 667,
	-1, 1428,
	5, 27,
	-2, 669,
	-1, 1538,
	5, 28,
	-2, 670,
}

const yyPrivate = 57344

const yyLast = 14278

var yyAct = [...]int{
	270, 1528, 1475, 1540, 718, 1541, 960, 267, 568, 1048,
	1544, 567, 3, 1370, 1225, 274, 846, 1131, 1263, 758,
	1080, 1253, 1142, 864, 299, 1357, 1226, 1222, 1252, 888,
	894, 635, 954, 1105, 887, 88, 908, 847, 88, 487,
	1198, 1012, 53, 949, 1064, 248, 807, 815, 633, 242,
	66, 276, 345, 273, 1128, 818, 651, 834, 1053, 247,
	784, 506, 88, 88, 350, 903, 454, 500, 650, 350,
	843, 339, 350, 883, 637, 622, 326, 88, 512, 88,
	327, 591, 272, 994, 257, 88, 334, 520, 336, 582,
	1112, 52, 1597, 243, 244, 245, 246, 596, 921, 332,
	597, 1264, 1276, 342, 537, 538, 539, 540, 541, 534,
	325, 1382, 544, 330, 924, 261, 534, 544, 1593, 544,
	1623, 485, 535, 536, 537, 538, 539, 540, 541, 534,
	1265, 1266, 544, 1580, 85, 1618, 1536, 1099, 1498, 1489,
	533, 532, 542, 543, 535, 536, 537, 538, 539, 540,
	541, 534, 1499, 1586, 544, 937, 1132, 1133, 1613, 1605,
	961, 1569, 335, 817, 532, 542, 543, 535, 536, 537,
	538, 539, 540, 541, 534, 1579, 466, 544, 467, 1535,
	1217, 1516, 1345, 464, 474, 298, 528, 1247, 531, 923,
	1109, 877, 1111, 1110, 546, 547, 548, 549, 550, 551,
	552, 495, 529, 530, 527, 533, 532, 542, 543, 535,
	536, 537, 538, 539, 540, 541, 534, 1072, 1396, 544,
	1071, 88, 652, 1073, 653, 350, 350, 350, 350, 1395,
	350, 83, 79, 80, 81, 1248, 1249, 350, 1114, 542,
	543, 535, 536, 537, 538, 539, 540, 541, 534, 344,
	57, 544, 878, 879, 458, 1466, 926, 462, 1341, 499,
	749, 938, 480, 838, 350, 509, 1417, 750, 1295, 1265,
	1266, 1592, 1294, 1594, 1334, 59, 60, 61, 62, 63,
	928, 1332, 950, 241, 1455, 559, 560, 561, 562, 563,
	564, 565, 1306, 1307, 508, 1462, 533, 532, 542, 543,
	535, 536, 537, 538, 539, 540, 541, 534, 491, 492,
	544, 545, 1617, 1342, 1385, 1611, 545, 1529, 545, 1176,
	476, 1338, 499, 555, 1384, 88, 482, 844, 484, 1530,
	1387, 545, 88, 88, 88, 1490, 1425, 1377, 350, 1309,
	904, 1376, 1604, 1093, 350, 1092, 1480, 488, 489, 490,
	1082, 493, 1386, 545, 1310, 905, 481, 483, 497, 533,
	532, 542, 543, 535, 536, 537, 538, 539, 540, 541,
	534, 1258, 1318, 544, 1499, 1268, 545, 342, 1259, 82,
	1373, 1585, 1087, 330, 469, 533, 532, 542, 543, 535,
	536, 537, 538, 539, 540, 541, 534, 499, 1173, 544,
	865, 867, 584, 585, 586, 587, 588, 589, 590, 1085,
	344, 344, 344, 344, 1098, 344, 1534, 938, 545, 951,
	642, 460, 344, 76, 617, 77, 648, 77, 1404, 728,
	457, 1063, 931, 641, 533, 532, 542, 543, 535, 536,
	537, 538, 539, 540, 541, 534, 1062, 904, 544, 522,
	545, 1061, 456, 465, 220, 74, 78, 350, 88, 1177,
	557, 558, 905, 1289, 88, 1616, 88, 350, 1494, 88,
	1354, 1185, 88, 479, 904, 866, 88, 1028, 350, 350,
	350, 350, 350, 350, 350, 350, 1006, 756, 524, 905,
	475, 989, 350, 350, 885, 884, 1174, 88, 1172, 753,
	518, 517, 519, 70, 72, 510, 1371, 1372, 1374, 545,
	791, 1175, 350, 1025, 1290, 1510, 88, 519, 71, 73,
	1509, 1508, 350, 344, 789, 790, 788, 1507, 737, 656,
	1506, 1181, 1505, 1504, 783, 1502, 68, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 785, 669, 761, 1303, 665, 717, 1051, 735,
	1219, 518, 517, 724, 781, 725, 350, 517, 729, 654,
	990, 732, 545, 835, 1024, 1035, 1023, 782, 519, 786,
	835, 721, 822, 519, 755, 459, 1454, 1089, 727, 514,
	1607, 827, 830, 518, 517, 763, 751, 836, 545, 738,
	739, 740, 741, 742, 743, 744, 745, 1180, 780, 778,
	519, 518, 517, 746, 747, 770, 50, 88, 1221, 754,
	88, 88, 88, 88, 88, 1390, 787, 810, 519, 1115,
	1545, 1606, 88, 75, 848, 88, 518, 517, 1503, 88,
	812, 813, 716, 1587, 88, 88, 822, 545, 350, 1546,
	1557, 69, 344, 519, 1424, 468, 461, 832, 463, 1591,
	840, 350, 1590, 344, 344, 344, 344, 344, 344, 344,
	344, 330, 330, 330, 330, 330, 1589, 344, 344, 759,
	760, 1393, 774, 776, 777, 1588, 330, 342, 775, 1003,
	1004, 1005, 872, 1547, 324, 330, 849, 765, 499, 852,
	889, 850, 851, 1543, 853, 1465, 861, 522, 1398, 455,
	344, 1397, 870, 869, 518, 517, 845, 1274, 875, 874,
	808, 350, 809, 350, 88, 518, 517, 88, 892, 88,
	1389, 519, 88, 350, 1115, 823, 824, 471, 472, 473,
	1561, 831, 519, 1137, 873, 1135, 956, 1115, 1320, 1129,
	1095, 814, 1500, 1563, 952, 953, 21, 1523, 1628, 1582,
	1625, 828, 828, 1262, 921, 1367, 1612, 828, 1558, 1367,
	1584, 1523, 1583, 499, 904, 839, 1261, 841, 842, 899,
	1260, 898, 1088, 900, 901, 1074, 910, 963, 902, 905,
	1582, 1581, 1575, 499, 1367, 1572, 781, 1009, 1010, 1011,
	917, 811, 906, 734, 828, 1367, 1567, 1518, 907, 782,
	1367, 1566, 252, 785, 624, 627, 628, 629, 625, 995,
	626, 630, 733, 967, 1054, 1055, 984, 722, 985, 996,
	720, 986, 477, 344, 1432, 1526, 939, 940, 941, 942,
	786, 470, 964, 455, 966, 1471, 344, 1367, 1472, 1008,
	1432, 1463, 1432, 499, 987, 1045, 1432, 1433, 1367, 1366,
	1524, 913, 1523, 909, 918, 1244, 499, 1353, 499, 350,
	915, 914, 88, 1470, 289, 288, 291, 292, 293, 294,
	1066, 1282, 1068, 290, 295, 1298, 1297, 1050, 350, 1292,
	1293, 1034, 1559, 1560, 1562, 1564, 1565, 1292, 1291, 350,
	1018, 499, 619, 499, 820, 499, 344, 1049, 344, 23,
	350, 1058, 661, 660, 23, 820, 1349, 1076, 344, 88,
	1067, 645, 1223, 330, 1050, 1049, 619, 889, 619, 1383,
	1302, 54, 1002, 1069, 1188, 1427, 871, 1043, 644, 1030,
	1044, 1027, 344, 533, 532, 542, 543, 535, 536, 537,
	538, 539, 540, 541, 534, 50, 23, 544, 88, 350,
	50, 646, 350, 644, 1134, 1049, 1083, 1084, 1086, 1018,
	618, 1140, 911, 1300, 1299, 1107, 1018, 1296, 912, 1075,
	1017, 1029, 876, 1026, 1018, 647, 757, 350, 50, 1619,
	88, 88, 1013, 254, 619, 1136, 1032, 1615, 88, 1130,
	1577, 1143, 50, 1514, 1513, 1477, 1474, 350, 1473, 1464,
	1411, 1122, 928, 1124, 1125, 1126, 1127, 955, 1146, 1281,
	1147, 1194, 1195, 1279, 1271, 1238, 950, 1100, 919, 1078,
	920, 1054, 1055, 719, 1212, 1213, 944, 1215, 1216, 50,
	943, 916, 957, 958, 1456, 65, 1190, 350, 350, 1453,
	1301, 1192, 1223, 1079, 1065, 1191, 1339, 1138, 1229, 848,
	1224, 1057, 731, 723, 496, 848, 1211, 769, 1214, 1227,
	1060, 1210, 1199, 344, 1197, 1218, 350, 1246, 350, 350,
	860, 782, 628, 629, 1081, 1116, 1117, 1234, 1119, 1120,
	1121, 1233, 1232, 858, 856, 1090, 927, 1186, 859, 857,
	1059, 855, 854, 498, 1602, 1201, 1578, 1251, 1178, 1245,
	1250, 258, 259, 1184, 991, 889, 1600, 889, 1001, 1000,
	1123, 659, 478, 1273, 1347, 1269, 1412, 1267, 533, 532,
	542, 543, 535, 536, 537, 538, 539, 540, 541, 534,
	513, 501, 544, 965, 1139, 759, 760, 344, 730, 1272,
	350, 1145, 502, 511, 959, 632, 545, 1203, 513, 350,
	1305, 1208, 1406, 1202, 1407, 1408, 1409, 249, 1200, 255,
	256, 88, 344, 1595, 1206, 999, 1405, 350, 624, 627,
	628, 629, 625, 998, 626, 630, 350, 1204, 1205, 88,
	1283, 1284, 344, 1286, 1287, 1288, 1483, 1322, 1311, 250,
	54, 1325, 1482, 1415, 1207, 1209, 1050, 1313, 1319, 1101,
	1102, 1103, 1257, 1256, 344, 515, 1512, 1106, 1104, 296,
	297, 1316, 1511, 1491, 1091, 1190, 752, 56, 58, 828,
	1148, 1308, 1231, 1065, 643, 828, 1330, 1323, 51, 350,
	330, 350, 350, 350, 88, 350, 1, 1517, 1097, 1461,
	67, 350, 1348, 1568, 1522, 1275, 1304, 1144, 1157, 962,
	504, 344, 1141, 344, 1254, 972, 1360, 1361, 1362, 1527,
	1315, 1375, 350, 1438, 1285, 1363, 896, 886, 453, 1356,
	1076, 64, 1501, 1378, 897, 895, 893, 662, 922, 1113,
	889, 1365, 925, 668, 666, 86, 667, 1381, 240, 664,
	350, 350, 88, 350, 350, 670, 663, 228, 337, 350,
	631, 655, 516, 1171, 1170, 968, 1179, 748, 988, 350,
	264, 494, 86, 86, 230, 1402, 553, 997, 1399, 1070,
	300, 47, 343, 1403, 1230, 1312, 505, 86, 1481, 86,
	1414, 545, 1143, 889, 1314, 86, 1418, 1419, 1033, 1420,
	1421, 1422, 579, 833, 350, 350, 275, 773, 287, 1391,
	284, 286, 1317, 285, 1428, 764, 1042, 526, 350, 265,
	329, 344, 1440, 615, 1227, 623, 1426, 350, 47, 621,
	620, 1056, 1052, 328, 1187, 1108, 253, 1437, 1452, 1451,
	1344, 1488, 331, 768, 25, 55, 1459, 1457, 260, 19,
	18, 1401, 17, 1467, 20, 350, 16, 15, 14, 29,
	13, 12, 350, 11, 10, 9, 8, 1109, 7, 1111,
	1110, 6, 5, 4, 1358, 251, 1358, 1358, 1358, 22,
	1364, 2, 1441, 350, 0, 0, 344, 1478, 0, 263,
	0, 1493, 1492, 0, 1496, 1443, 0, 1392, 0, 1394,
	0, 0, 1227, 0, 0, 0, 1441, 1358, 0, 0,
	0, 0, 0, 0, 0, 0, 1468, 0, 1469, 1443,
	0, 0, 0, 0, 350, 350, 0, 0, 350, 0,
	0, 86, 1519, 0, 1416, 1254, 1400, 0, 344, 344,
	0, 0, 1532, 0, 1410, 350, 0, 0, 0, 0,
	350, 0, 1520, 1521, 1413, 0, 1525, 848, 1537, 0,
	0, 0, 0, 1442, 350, 350, 1555, 1548, 1549, 1550,
	1551, 1552, 0, 0, 350, 1553, 1554, 0, 0, 0,
	350, 1573, 0, 0, 0, 0, 0, 1442, 0, 1430,
	1431, 0, 0, 1556, 0, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 0, 1254, 0, 486, 486, 486, 486, 0,
	486, 0, 1458, 0, 0, 0, 0, 486, 0, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1596, 1599, 350, 0,
	1598, 0, 0, 0, 47, 86, 0, 0, 1603, 0,
	1476, 0, 86, 639, 86, 0, 88, 1358, 0, 554,
	0, 0, 556, 0, 0, 88, 1601, 0, 0, 0,
	0, 0, 0, 762, 0, 0, 0, 350, 1495, 1620,
	350, 0, 1624, 0, 0, 0, 0, 0, 0, 566,
	1626, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	0, 581, 583, 583, 583, 583, 583, 583, 583, 583,
	0, 611, 612, 613, 614, 0, 1621, 0, 0, 1254,
	1254, 0, 634, 1254, 0, 0, 0, 1497, 1153, 0,
	0, 819, 821, 0, 0, 0, 0, 828, 0, 0,
	1539, 0, 0, 0, 0, 1542, 0, 837, 0, 503,
	507, 1439, 0, 0, 0, 0, 0, 0, 0, 1476,
	1254, 0, 0, 0, 1614, 0, 525, 0, 1163, 1570,
	0, 0, 0, 0, 0, 1576, 0, 0, 86, 0,
	0, 0, 0, 0, 86, 0, 86, 0, 0, 86,
	0, 0, 86, 0, 0, 0, 736, 863, 1154, 1150,
	569, 0, 1155, 1152, 1151, 0, 0, 73, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 86, 1156, 0,
	0, 0, 0, 1254, 1149, 0, 0, 0, 929, 930,
	932, 933, 934, 1164, 935, 936, 86, 0, 1166, 1159,
	1160, 0, 1167, 1162, 1161, 736, 0, 1169, 1165, 0,
	0, 945, 946, 947, 0, 948, 0, 486, 1168, 0,
	0, 0, 344, 0, 1158, 1476, 0, 0, 486, 486,
	486, 486, 486, 486, 486, 486, 0, 0, 0, 0,
	0, 0, 486, 486, 1193, 0, 0, 264, 0, 0,
	0, 0, 264, 264, 0, 0, 829, 829, 264, 0,
	0, 0, 829, 0, 533, 532, 542, 543, 535, 536,
	537, 538, 539, 540, 541, 534, 0, 0, 544, 0,
	0, 0, 0, 0, 0, 0, 0, 226, 0, 0,
	0, 0, 264, 264, 264, 264, 0, 86, 0, 829,
	86, 86, 86, 86, 86, 0, 0, 47, 0, 0,
	0, 236, 862, 0, 0, 86, 0, 0, 0, 639,
	0, 570, 0, 0, 86, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 1016,
	0, 0, 0, 0, 978, 0, 1020, 1021, 1022, 0,
	0, 0, 0, 0, 0, 1031, 0, 977, 0, 0,
	1037, 0, 221, 1038, 1039, 1040, 1041, 0, 223, 0,
	331, 331, 331, 331, 331, 229, 225, 771, 772, 0,
	0, 0, 0, 0, 982, 634, 0, 868, 0, 0,
	0, 0, 0, 976, 331, 1014, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 227, 0, 86, 231, 86,
	0, 0, 86, 0, 0, 533, 532, 542, 543, 535,
	536, 537, 538, 539, 540, 541, 534, 0, 0, 544,
	569, 0, 0, 825, 826, 0, 0, 736, 0, 0,
	0, 0, 973, 970, 971, 592, 969, 0, 1118, 264,
	533, 532, 542, 543, 535, 536, 537, 538, 539, 540,
	541, 534, 222, 0, 544, 0, 0, 0, 0, 0,
	0, 486, 0, 486, 980, 983, 0, 545, 594, 0,
	0, 0, 0, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 264, 0, 224,
	0, 232, 233, 234, 235, 239, 0, 0, 0, 0,
	238, 237, 0, 264, 882, 599, 600, 601, 602, 603,
	604, 605, 606, 607, 608, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 975, 595, 0, 0, 0,
	0, 1196, 0, 0, 609, 593, 0, 0, 0, 0,
	0, 598, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1243, 0,
	0, 0, 0, 0, 1046, 1047, 0, 0, 0, 1096,
	0, 0, 0, 0, 979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 993, 0, 507, 0, 0,
	981, 0, 331, 610, 0, 0, 1278, 1280, 545, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 24, 48, 26, 27, 0,
	0, 0, 0, 545, 0, 0, 0, 1094, 0, 0,
	1182, 1183, 0, 42, 0, 0, 0, 28, 86, 0,
	1019, 0, 0, 0, 0, 0, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 1036, 37, 0, 0, 264,
	50, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	47, 0, 0, 0, 0, 1324, 1327, 1328, 0, 1329,
	0, 0, 1326, 1331, 829, 1333, 0, 0, 0, 0,
	829, 0, 0, 0, 1335, 1336, 1337, 486, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 1351, 1352, 0, 1355, 0, 0, 0,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 1368, 1369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 0, 1380, 1228, 0, 47, 0, 0,
	0, 1388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1240, 1241, 1242, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 1277,
	0, 0, 0, 0, 0, 0, 0, 0, 1423, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1434, 1435, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 1220, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1235, 1236, 0, 0, 1237, 0, 0, 1239, 0, 0,
	0, 0, 49, 0, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	0, 0, 1484, 1485, 1486, 1487, 0, 0, 0, 0,
	0, 0, 0, 0, 1270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1533, 0, 0, 0, 0, 1538, 0, 1379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 569, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1228, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 677, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 693, 0, 0, 0, 0, 0,
	1629, 1630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1479, 0, 0, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 0, 0, 1228, 0,
	47, 599, 600, 601, 602, 603, 604, 605, 606, 607,
	608, 0, 709, 710, 0, 711, 712, 713, 715, 714,
	694, 695, 696, 700, 698, 697, 699, 671, 673, 0,
	609, 672, 678, 674, 675, 676, 690, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 691, 701,
	702, 703, 704, 705, 706, 707, 708, 0, 0, 1460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1609, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 610,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1622, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1571, 0, 0, 0, 0, 441,
	431, 0, 401, 443, 376, 391, 451, 393, 394, 423,
	360, 409, 152, 388, 91, 379, 354, 385, 355, 377,
	403, 115, 375, 433, 412, 128, 449, 131, 417, 0,
	173, 140, 0, 0, 405, 435, 407, 429, 400, 424,
	367, 416, 444, 389, 420, 445, 0, 0, 0, 349,
	0, 890, 891, 0, 0, 0, 0, 0, 104, 0,
	419, 440, 387, 452, 422, 353, 418, 1610, 358, 361,
	450, 438, 382, 383, 1077, 0, 0, 0, 0, 0,
	0, 404, 408, 426, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 415, 0, 0, 0, 364,
	359, 0, 402, 0, 0, 0, 366, 0, 381, 427,
	0, 351, 430, 436, 399, 200, 439, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 425, 442, 406,
	434, 378, 386, 109, 384, 166, 153, 191, 414, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 437, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 421, 167, 106, 192, 172, 370,
	373, 368, 369, 410, 411, 446, 447, 448, 428, 365,
	0, 371, 372, 0, 432, 123, 413, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 0, 0, 0, 362, 363, 0, 103,
	441, 431, 0, 401, 443, 376, 391, 451, 393, 394,
	423, 360, 409, 152, 388, 91, 379, 354, 385, 355,
	377, 403, 115, 375, 433, 412, 128, 449, 131, 417,
	0, 173, 140, 0, 0, 405, 435, 407, 429, 400,
	424, 367, 416, 444, 389, 420, 445, 0, 0, 0,
	349, 0, 890, 891, 0, 0, 0, 0, 0, 104,
	0, 419, 440, 387, 452, 422, 353, 418, 0, 358,
	361, 450, 438, 382, 383, 0, 0, 0, 0, 0,
	0, 0, 404, 408, 426, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 380, 0, 415, 0, 0, 0,
	364, 359, 0, 402, 0, 0, 0, 366, 0, 381,
	427, 0, 351, 430, 436, 399, 200, 439, 397, 396,
	159, 0, 107, 0, 179, 119, 390, 129, 425, 442,
	406, 434, 378, 386, 109, 384, 166, 153, 191, 414,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 356, 0, 174, 193, 211, 212, 357, 374, 437,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 421, 167, 106, 192, 172,
	370, 373, 368, 369, 410, 411, 446, 447, 448, 428,
	365, 0, 371, 372, 0, 432, 123, 413, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 392, 352, 395,
	0, 0, 0, 0, 0, 0, 0, 362, 363, 0,
	103, 441, 431, 0, 401, 443, 376, 391, 451, 393,
	394, 423, 360, 409, 152, 388, 91, 379, 354, 385,
	355, 377, 403, 115, 375, 433, 412, 128, 449, 131,
	417, 0, 173, 140, 0, 0, 405, 435, 407, 429,
	400, 424, 367, 416, 444, 389, 420, 445, 0, 0,
	0, 349, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 419, 440, 387, 452, 422, 353, 418, 0,
	358, 361, 450, 438, 382, 383, 0, 0, 0, 0,
	0, 0, 0, 404, 408, 426, 398, 0, 0, 0,
	0, 0, 0, 1189, 0, 380, 0, 415, 0, 0,
	0, 364, 359, 0, 402, 0, 0, 0, 366, 0,
	381, 427, 0, 351, 430, 436, 399, 200, 439, 397,
	396, 159, 0, 107, 0, 179, 119, 390, 129, 425,
	442, 406, 434, 378, 386, 109, 384, 166, 153, 191,
	414, 154, 164, 132, 183, 160, 190, 201, 202, 181,
	199, 168, 99, 147, 89, 158, 165, 0, 108, 0,
	213, 214, 215, 216, 217, 218, 219, 92, 180, 189,
	105, 169, 95, 187, 176, 178, 138, 124, 125, 171,
	93, 94, 0, 163, 114, 157, 118, 113, 150, 177,
	141, 184, 185, 110, 210, 112, 111, 175, 100, 197,
	198, 97, 101, 196, 146, 151, 149, 195, 182, 188,
	139, 136, 0, 96, 186, 137, 135, 127, 0, 116,
	120, 155, 134, 156, 121, 143, 142, 144, 0, 148,
	0, 0, 356, 0, 174, 193, 211, 212, 357, 374,
	437, 203, 204, 205, 206, 0, 0, 0, 145, 102,
	122, 170, 126, 133, 162, 209, 421, 167, 106, 192,
	172, 370, 373, 368, 369, 410, 411, 446, 447, 448,
	428, 365, 0, 371, 372, 0, 432, 123, 413, 90,
	98, 130, 207, 208, 0, 161, 117, 194, 392, 352,
	395, 0, 0, 0, 0, 0, 0, 0, 362, 363,
	0, 103, 441, 431, 0, 401, 443, 376, 391, 451,
	393, 394, 423, 360, 409, 152, 388, 91, 379, 354,
	385, 355, 377, 403, 115, 375, 433, 412, 128, 449,
	131, 417, 0, 173, 140, 0, 0, 405, 435, 407,
	429, 400, 424, 367, 416, 444, 389, 420, 445, 50,
	0, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 419, 440, 387, 452, 422, 353, 418,
	0, 358, 361, 450, 438, 382, 383, 0, 0, 0,
	0, 0, 0, 0, 404, 408, 426, 398, 0, 0,
	0, 0, 0, 0, 0, 0, 380, 0, 415, 0,
	0, 0, 364, 359, 0, 402, 0, 0, 0, 366,
	0, 381, 427, 0, 351, 430, 436, 399, 200, 439,
	397, 396, 159, 0, 107, 0, 179, 119, 390, 129,
	425, 442, 406, 434, 378, 386, 109, 384, 166, 153,
	191, 414, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 356, 0, 174, 193, 211, 212, 357,
	374, 437, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 421, 167, 106,
	192, 172, 370, 373, 368, 369, 410, 411, 446, 447,
	448, 428, 365, 0, 371, 372, 0, 432, 123, 413,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 392,
	352, 395, 0, 0, 0, 0, 0, 0, 0, 362,
	363, 0, 103, 441, 431, 0, 401, 443, 376, 391,
	451, 393, 394, 423, 360, 409, 152, 388, 91, 379,
	354, 385, 355, 377, 403, 115, 375, 433, 412, 128,
	449, 131, 417, 0, 173, 140, 0, 0, 405, 435,
	407, 429, 400, 424, 367, 416, 444, 389, 420, 445,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 419, 440, 387, 452, 422, 353,
	418, 0, 358, 361, 450, 438, 382, 383, 0, 0,
	0, 0, 0, 0, 0, 404, 408, 426, 398, 0,
	0, 0, 0, 0, 0, 779, 0, 380, 0, 415,
	0, 0, 0, 364, 359, 0, 402, 0, 0, 0,
	366, 0, 381, 427, 0, 351, 430, 436, 399, 200,
	439, 397, 396, 159, 0, 107, 0, 179, 119, 390,
	129, 425, 442, 406, 434, 378, 386, 109, 384, 166,
	153, 191, 414, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 356, 0, 174, 193, 211, 212,
	357, 374, 437, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 421, 167,
	106, 192, 172, 370, 373, 368, 369, 410, 411, 446,
	447, 448, 428, 365, 0, 371, 372, 0, 432, 123,
	413, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	392, 352, 395, 0, 0, 0, 0, 0, 0, 0,
	362, 363, 0, 103, 441, 431, 0, 401, 443, 376,
	391, 451, 393, 394, 423, 360, 409, 152, 388, 91,
	379, 354, 385, 355, 377, 403, 115, 375, 433, 412,
	128, 449, 131, 417, 0, 173, 140, 0, 0, 405,
	435, 407, 429, 400, 424, 367, 416, 444, 389, 420,
	445, 0, 0, 0, 349, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 419, 440, 387, 452, 422,
	353, 418, 0, 358, 361, 450, 438, 382, 383, 0,
	0, 0, 0, 0, 0, 0, 404, 408, 426, 398,
	0, 0, 0, 0, 0, 0, 0, 0, 380, 0,
	415, 0, 0, 0, 364, 359, 0, 402, 0, 0,
	0, 366, 0, 381, 427, 0, 351, 430, 436, 399,
	200, 439, 397, 396, 159, 0, 107, 0, 179, 119,
	390, 129, 425, 442, 406, 434, 378, 386, 109, 384,
	166, 153, 191, 414, 154, 164, 132, 183, 160, 190,
	201, 202, 181, 199, 168, 99, 147, 89, 158, 165,
	0, 108, 0, 213, 214, 215, 216, 217, 218, 219,
	92, 180, 189, 105, 169, 95, 187, 176, 178, 138,
	124, 125, 171, 93, 94, 0, 163, 114, 157, 118,
	113, 150, 177, 141, 184, 185, 110, 210, 112, 111,
	175, 100, 197, 198, 97, 101, 196, 146, 151, 149,
	195, 182, 188, 139, 136, 0, 96, 186, 137, 135,
	127, 0, 116, 120, 155, 134, 156, 121, 143, 142,
	144, 0, 148, 0, 0, 356, 0, 174, 193, 211,
	212, 357, 374, 437, 203, 204, 205, 206, 0, 0,
	0, 145, 102, 122, 170, 126, 133, 162, 209, 421,
	167, 106, 192, 172, 370, 373, 368, 369, 410, 411,
	446, 447, 448, 428, 365, 0, 371, 372, 0, 432,
	123, 413, 90, 98, 130, 207, 208, 0, 161, 117,
	194, 392, 352, 395, 0, 0, 0, 0, 0, 0,
	0, 362, 363, 0, 103, 441, 431, 0, 401, 443,
	376, 391, 451, 393, 394, 423, 360, 409, 152, 388,
	91, 379, 354, 385, 355, 377, 403, 115, 375, 433,
	412, 128, 449, 131, 417, 0, 173, 140, 0, 0,
	405, 435, 407, 429, 400, 424, 367, 416, 444, 389,
	420, 445, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 419, 440, 387, 452,
	422, 353, 418, 0, 358, 361, 450, 438, 382, 383,
	0, 0, 0, 0, 0, 0, 0, 404, 408, 426,
	398, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	0, 415, 0, 0, 0, 364, 359, 0, 402, 0,
	0, 0, 366, 0, 381, 427, 0, 351, 430, 436,
	399, 200, 439, 397, 396, 159, 0, 107, 0, 179,
	119, 390, 129, 425, 442, 406, 434, 378, 386, 109,
	384, 166, 153, 191, 414, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 356, 0, 174, 193,
	211, 212, 357, 374, 437, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	421, 167, 106, 192, 172, 370, 373, 368, 369, 410,
	411, 446, 447, 448, 428, 365, 0, 371, 372, 0,
	432, 123, 413, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 392, 352, 395, 0, 0, 0, 0, 0,
	0, 0, 362, 363, 0, 103, 441, 431, 0, 401,
	443, 376, 391, 451, 393, 394, 423, 360, 409, 152,
	388, 91, 379, 354, 385, 355, 377, 403, 115, 375,
	433, 412, 128, 449, 131, 417, 0, 173, 140, 0,
	0, 405, 435, 407, 429, 400, 424, 367, 416, 444,
	389, 420, 445, 0, 0, 0, 349, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 419, 440, 387,
	452, 422, 353, 418, 0, 358, 361, 450, 438, 382,
	383, 0, 0, 0, 0, 0, 0, 0, 404, 408,
	426, 398, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 0, 415, 0, 0, 0, 364, 359, 0, 402,
	0, 0, 0, 366, 0, 381, 427, 0, 351, 430,
	436, 399, 200, 439, 397, 396, 159, 0, 107, 0,
	179, 119, 390, 129, 425, 442, 406, 434, 378, 386,
	109, 384, 166, 153, 191, 414, 154, 164, 132, 183,
	160, 190, 201, 202, 181, 199, 168, 99, 147, 89,
	158, 165, 0, 108, 0, 213, 214, 215, 216, 217,
	218, 219, 92, 180, 189, 105, 169, 95, 187, 176,
	178, 138, 124, 125, 171, 93, 94, 0, 163, 114,
	157, 118, 113, 150, 177, 141, 184, 185, 110, 210,
	112, 111, 175, 100, 197, 198, 97, 347, 196, 146,
	151, 149, 195, 182, 188, 139, 136, 0, 96, 186,
	137, 135, 127, 0, 116, 120, 155, 134, 156, 121,
	143, 142, 144, 0, 148, 0, 0, 356, 0, 174,
	193, 211, 212, 357, 374, 437, 203, 204, 205, 206,
	0, 0, 0, 348, 346, 122, 170, 126, 133, 162,
	209, 421, 167, 106, 192, 172, 370, 373, 368, 369,
	410, 411, 446, 447, 448, 428, 365, 0, 371, 372,
	0, 432, 123, 413, 90, 98, 130, 207, 208, 0,
	161, 117, 194, 392, 352, 395, 0, 0, 0, 0,
	0, 0, 0, 362, 363, 0, 103, 441, 431, 0,
	401, 443, 376, 391, 451, 393, 394, 423, 360, 409,
	152, 388, 91, 379, 354, 385, 355, 377, 403, 115,
	375, 433, 412, 128, 449, 131, 417, 0, 173, 140,
	0, 0, 405, 435, 407, 429, 400, 424, 367, 416,
	444, 389, 420, 445, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 419, 440,
	387, 452, 422, 353, 418, 0, 358, 361, 450, 438,
	382, 383, 0, 0, 0, 0, 0, 0, 0, 404,
	408, 426, 398, 0, 0, 0, 0, 0, 0, 0,
	0, 380, 0, 415, 0, 0, 0, 364, 359, 0,
	402, 0, 0, 0, 366, 0, 381, 427, 0, 351,
	430, 436, 399, 200, 439, 397, 396, 159, 0, 107,
	0, 179, 119, 390, 129, 425, 442, 406, 434, 378,
	386, 109, 384, 166, 153, 191, 414, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 356, 0,
	174, 193, 211, 212, 357, 374, 437, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 421, 167, 106, 192, 172, 370, 373, 368,
	369, 410, 411, 446, 447, 448, 428, 365, 0, 371,
	372, 0, 432, 123, 413, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 392, 352, 395, 0, 0, 0,
	0, 0, 0, 0, 362, 363, 0, 103, 441, 431,
	0, 401, 443, 376, 391, 451, 393, 394, 423, 360,
	409, 152, 388, 91, 379, 354, 385, 355, 377, 403,
	115, 375, 433, 412, 128, 449, 131, 417, 0, 173,
	140, 0, 0, 405, 435, 407, 429, 400, 424, 367,
	416, 444, 389, 420, 445, 0, 0, 0, 349, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 419,
	440, 387, 452, 422, 353, 418, 0, 358, 361, 450,
	438, 382, 383, 0, 0, 0, 0, 0, 0, 0,
	404, 408, 426, 398, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 415, 0, 0, 0, 364, 359,
	0, 402, 0, 0, 0, 366, 0, 381, 427, 0,
	351, 430, 436, 399, 200, 439, 397, 396, 159, 0,
	107, 0, 179, 119, 390, 129, 425, 442, 406, 434,
	378, 386, 109, 384, 166, 153, 191, 414, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 649, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 347,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 356,
	0, 174, 193, 211, 212, 357, 374, 437, 203, 204,
	205, 206, 0, 0, 0, 348, 346, 122, 170, 126,
	133, 162, 209, 421, 167, 106, 192, 172, 370, 373,
	368, 369, 410, 411, 446, 447, 448, 428, 365, 0,
	371, 372, 0, 432, 123, 413, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 392, 352, 395, 0, 0,
	0, 0, 0, 0, 0, 362, 363, 0, 103, 441,
	431, 0, 401, 443, 376, 391, 451, 393, 394, 423,
	360, 409, 152, 388, 91, 379, 354, 385, 355, 377,
	403, 115, 375, 433, 412, 128, 449, 131, 417, 0,
	173, 140, 0, 0, 405, 435, 407, 429, 400, 424,
	367, 416, 444, 389, 420, 445, 0, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	419, 440, 387, 452, 422, 353, 418, 0, 358, 361,
	450, 438, 382, 383, 0, 0, 0, 0, 0, 0,
	0, 404, 408, 426, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 380, 0, 415, 0, 0, 0, 364,
	359, 0, 402, 0, 0, 0, 366, 0, 381, 427,
	0, 351, 430, 436, 399, 200, 439, 397, 396, 159,
	0, 107, 0, 179, 119, 390, 129, 425, 442, 406,
	434, 378, 386, 109, 384, 166, 153, 191, 414, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 338, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	347, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	356, 0, 174, 193, 211, 212, 357, 374, 437, 203,
	204, 205, 206, 0, 0, 0, 348, 346, 341, 340,
	126, 133, 162, 209, 421, 167, 106, 192, 172, 370,
	373, 368, 369, 410, 411, 446, 447, 448, 428, 365,
	0, 371, 372, 0, 432, 123, 413, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 392, 352, 395, 0,
	0, 0, 0, 152, 0, 91, 362, 363, 271, 103,
	0, 0, 115, 268, 0, 0, 128, 310, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 880, 0, 50, 0, 0,
	269, 289, 288, 291, 292, 293, 294, 0, 0, 104,
	290, 295, 296, 297, 881, 0, 0, 266, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 322, 0, 281, 0,
	0, 277, 278, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 320,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	311, 321, 317, 318, 315, 316, 314, 313, 312, 323,
	303, 304, 305, 306, 308, 0, 123, 307, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 816, 0, 271, 0, 0, 0, 115, 268, 319,
	103, 128, 310, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 269, 289, 288, 291, 292,
	293, 294, 0, 0, 104, 290, 295, 296, 297, 0,
	0, 0, 266, 282, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 262, 0, 0,
	0, 322, 0, 281, 0, 0, 277, 278, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 320, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 311, 321, 317, 318, 315,
	316, 314, 313, 312, 323, 303, 304, 305, 306, 308,
	0, 123, 307, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 0, 271, 0,
	0, 0, 115, 268, 319, 103, 128, 310, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 301, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 499,
	269, 289, 288, 291, 292, 293, 294, 0, 0, 104,
	290, 295, 296, 297, 0, 0, 0, 266, 282, 0,
	309, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 322, 0, 281, 0,
	0, 277, 278, 283, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 320,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	311, 321, 317, 318, 315, 316, 314, 313, 312, 323,
	303, 304, 305, 306, 308, 0, 123, 307, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 0, 0, 271, 0, 0, 0, 115, 268, 319,
	103, 128, 310, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 269, 289, 288, 291, 292,
	293, 294, 0, 0, 104, 290, 295, 296, 297, 0,
	0, 0, 266, 282, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 262, 0, 0,
	0, 322, 0, 281, 0, 0, 277, 278, 283, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 320, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 311, 321, 317, 318, 315,
	316, 314, 313, 312, 323, 303, 304, 305, 306, 308,
	0, 123, 307, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 319, 103, 152, 0, 91, 0,
	0, 271, 0, 0, 0, 115, 268, 0, 0, 128,
	310, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	301, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 269, 289, 288, 291, 292, 293, 294,
	0, 0, 104, 290, 295, 296, 297, 0, 0, 0,
	266, 282, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 322,
	0, 281, 0, 0, 277, 278, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 320, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 311, 321, 317, 318, 315, 316, 314,
	313, 312, 323, 303, 304, 305, 306, 308, 0, 123,
	307, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	0, 152, 0, 91, 0, 0, 271, 0, 0, 0,
	115, 268, 319, 103, 128, 310, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 269, 289,
	288, 291, 292, 293, 294, 0, 0, 104, 290, 295,
	296, 297, 0, 0, 0, 266, 282, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 322, 0, 281, 0, 0, 277,
	278, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 320, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 311, 321,
	317, 318, 315, 316, 314, 313, 312, 323, 303, 304,
	305, 306, 308, 0, 123, 307, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 0, 152, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 0, 319, 103, 128,
	310, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	301, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 269, 289, 288, 291, 292, 293, 294,
	0, 0, 104, 290, 295, 296, 297, 0, 0, 0,
	0, 282, 0, 309, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 322,
	0, 281, 0, 0, 277, 278, 283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 320, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 1627, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 311, 321, 317, 318, 315, 316, 314,
	313, 312, 323, 303, 304, 305, 306, 308, 0, 123,
	307, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	0, 152, 0, 91, 0, 0, 0, 0, 0, 0,
	115, 0, 319, 103, 128, 310, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 269, 289,
	288, 291, 292, 293, 294, 0, 0, 104, 290, 295,
	296, 297, 0, 0, 0, 0, 282, 0, 309, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 322, 0, 281, 0, 0, 277,
	278, 283, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 320, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 311, 321,
	317, 318, 315, 316, 314, 313, 312, 323, 303, 304,
	305, 306, 308, 0, 123, 307, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 0, 152, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 0, 319, 103, 128,
	0, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	532, 542, 543, 535, 536, 537, 538, 539, 540, 541,
	534, 0, 0, 544, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	0, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	0, 152, 0, 91, 0, 521, 0, 0, 0, 0,
	115, 0, 545, 103, 128, 0, 131, 0, 0, 173,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 0,
	523, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 518, 517, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 200, 0, 0, 0, 159, 0,
	107, 0, 179, 119, 0, 129, 0, 0, 0, 0,
	0, 0, 109, 0, 166, 153, 191, 0, 154, 164,
	132, 183, 160, 190, 201, 202, 181, 199, 168, 99,
	147, 89, 158, 165, 0, 108, 0, 213, 214, 215,
	216, 217, 218, 219, 92, 180, 189, 105, 169, 95,
	187, 176, 178, 138, 124, 125, 171, 93, 94, 0,
	163, 114, 157, 118, 113, 150, 177, 141, 184, 185,
	110, 210, 112, 111, 175, 100, 197, 198, 97, 101,
	196, 146, 151, 149, 195, 182, 188, 139, 136, 0,
	96, 186, 137, 135, 127, 0, 116, 120, 155, 134,
	156, 121, 143, 142, 144, 0, 148, 0, 0, 0,
	0, 174, 193, 211, 212, 0, 0, 0, 203, 204,
	205, 206, 0, 0, 0, 145, 102, 122, 170, 126,
	133, 162, 209, 0, 167, 106, 192, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 123, 0, 90, 98, 130, 207,
	208, 0, 161, 117, 194, 0, 152, 0, 91, 0,
	638, 0, 0, 0, 0, 115, 0, 0, 103, 128,
	0, 131, 0, 0, 173, 140, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 640, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 0, 159, 0, 107, 0, 179, 119, 0,
	129, 0, 0, 0, 0, 0, 0, 109, 0, 166,
	153, 191, 0, 154, 164, 132, 183, 160, 190, 201,
	202, 181, 199, 168, 99, 147, 89, 158, 165, 0,
	108, 0, 213, 214, 215, 216, 217, 218, 219, 92,
	180, 189, 105, 169, 95, 187, 176, 178, 138, 124,
	125, 171, 93, 94, 0, 163, 114, 157, 118, 113,
	150, 177, 141, 184, 185, 110, 210, 112, 111, 175,
	100, 197, 198, 97, 101, 196, 146, 151, 149, 195,
	182, 188, 139, 136, 0, 96, 186, 137, 135, 127,
	0, 116, 120, 155, 134, 156, 121, 143, 142, 144,
	0, 148, 0, 0, 0, 0, 174, 193, 211, 212,
	0, 0, 0, 203, 204, 205, 206, 0, 0, 0,
	145, 102, 122, 170, 126, 133, 162, 209, 0, 167,
	106, 192, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 123,
	23, 90, 98, 130, 207, 208, 0, 161, 117, 194,
	0, 0, 152, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 103, 0, 128, 0, 131, 0, 0,
	173, 140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 349,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 200, 0, 0, 0, 159,
	0, 107, 0, 179, 119, 0, 129, 0, 0, 0,
	0, 0, 0, 109, 0, 166, 153, 191, 0, 154,
	164, 132, 183, 160, 190, 201, 202, 181, 199, 168,
	99, 147, 89, 158, 165, 0, 108, 0, 213, 214,
	215, 216, 217, 218, 219, 92, 180, 189, 105, 169,
	95, 187, 176, 178, 138, 124, 125, 171, 93, 94,
	0, 163, 114, 157, 118, 113, 150, 177, 141, 184,
	185, 110, 210, 112, 111, 175, 100, 197, 198, 97,
	101, 196, 146, 151, 149, 195, 182, 188, 139, 136,
	0, 96, 186, 137, 135, 127, 0, 116, 120, 155,
	134, 156, 121, 143, 142, 144, 0, 148, 0, 0,
	0, 0, 174, 193, 211, 212, 0, 0, 0, 203,
	204, 205, 206, 0, 0, 0, 145, 102, 122, 170,
	126, 133, 162, 209, 0, 167, 106, 192, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 123, 23, 90, 98, 130,
	207, 208, 0, 161, 117, 194, 0, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 103,
	0, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 103, 128, 0, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 0, 766, 0, 0, 767, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 658, 0,
	103, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 657, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 638, 0, 0,
	0, 0, 115, 0, 0, 103, 128, 0, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 640, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	636, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	103, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 0, 0, 0,
	0, 1608, 115, 0, 0, 103, 128, 0, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	1255, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	103, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 1359, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 103, 128, 0, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	103, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 640, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	0, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 0, 0, 0,
	0, 0, 115, 0, 0, 103, 128, 0, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	349, 0, 523, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 0, 161, 117, 194, 0, 152, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 0,
	103, 128, 0, 131, 0, 0, 173, 140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 200, 0, 0, 0, 159, 0, 107, 0, 179,
	119, 0, 129, 0, 0, 0, 0, 0, 0, 109,
	0, 166, 153, 191, 0, 154, 164, 132, 183, 160,
	190, 201, 202, 181, 199, 168, 99, 147, 89, 158,
	165, 0, 108, 0, 213, 214, 215, 216, 217, 218,
	219, 92, 180, 189, 105, 169, 95, 187, 176, 178,
	138, 124, 125, 171, 93, 94, 0, 163, 114, 157,
	118, 113, 150, 177, 141, 184, 185, 110, 210, 112,
	111, 175, 100, 197, 198, 97, 101, 196, 146, 151,
	149, 195, 182, 188, 139, 136, 0, 96, 186, 137,
	135, 127, 0, 116, 120, 155, 134, 156, 121, 143,
	142, 144, 0, 148, 0, 0, 0, 0, 174, 193,
	211, 212, 0, 0, 0, 203, 204, 205, 206, 0,
	0, 0, 145, 102, 122, 170, 126, 133, 162, 209,
	726, 167, 106, 192, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 123, 0, 90, 98, 130, 207, 208, 0, 161,
	117, 194, 0, 152, 0, 91, 0, 0, 0, 0,
	0, 616, 115, 0, 0, 103, 128, 0, 131, 0,
	0, 173, 140, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 200, 0, 0, 0,
	159, 0, 107, 0, 179, 119, 0, 129, 0, 0,
	0, 0, 0, 0, 109, 0, 166, 153, 191, 0,
	154, 164, 132, 183, 160, 190, 201, 202, 181, 199,
	168, 99, 147, 89, 158, 165, 0, 108, 0, 213,
	214, 215, 216, 217, 218, 219, 92, 180, 189, 105,
	169, 95, 187, 176, 178, 138, 124, 125, 171, 93,
	94, 0, 163, 114, 157, 118, 113, 150, 177, 141,
	184, 185, 110, 210, 112, 111, 175, 100, 197, 198,
	97, 101, 196, 146, 151, 149, 195, 182, 188, 139,
	136, 0, 96, 186, 137, 135, 127, 0, 116, 120,
	155, 134, 156, 121, 143, 142, 144, 0, 148, 0,
	0, 0, 0, 174, 193, 211, 212, 0, 0, 0,
	203, 204, 205, 206, 0, 0, 0, 145, 102, 122,
	170, 126, 133, 162, 209, 0, 167, 106, 192, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 90, 98,
	130, 207, 208, 333, 161, 117, 194, 0, 0, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	103, 0, 0, 128, 0, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 0, 152, 0, 91, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 103, 128, 0,
	131, 0, 0, 173, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 200, 0,
	0, 0, 159, 0, 107, 0, 179, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	191, 0, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 174, 193, 211, 212, 0,
	0, 0, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 0, 167, 106,
	192, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 103, 128, 0, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 0, 152, 0, 91, 0, 0,
	0, 0, 0, 0, 115, 0, 0, 103, 128, 0,
	131, 0, 0, 173, 140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 159, 0, 107, 0, 179, 119, 0, 129,
	0, 0, 0, 0, 0, 0, 109, 0, 166, 153,
	191, 0, 154, 164, 132, 183, 160, 190, 201, 202,
	181, 199, 168, 99, 147, 89, 158, 165, 0, 108,
	0, 213, 214, 215, 216, 217, 218, 219, 92, 180,
	189, 105, 169, 95, 187, 176, 178, 138, 124, 125,
	171, 93, 94, 0, 163, 114, 157, 118, 113, 150,
	177, 141, 184, 185, 110, 210, 112, 111, 175, 100,
	197, 198, 97, 101, 196, 146, 151, 149, 195, 182,
	188, 139, 136, 0, 96, 186, 137, 135, 127, 0,
	116, 120, 155, 134, 156, 121, 143, 142, 144, 0,
	148, 0, 0, 0, 0, 174, 193, 211, 212, 0,
	0, 0, 203, 204, 205, 206, 0, 0, 0, 145,
	102, 122, 170, 126, 133, 162, 209, 0, 167, 106,
	192, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	90, 98, 130, 207, 208, 0, 161, 117, 194, 0,
	152, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 103, 128, 0, 131, 0, 0, 173, 140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 0, 0, 0, 159, 0, 107,
	0, 179, 119, 0, 129, 0, 0, 0, 0, 0,
	0, 109, 0, 166, 153, 191, 0, 154, 164, 132,
	183, 160, 190, 201, 202, 181, 199, 168, 99, 147,
	89, 158, 165, 0, 108, 0, 213, 214, 215, 216,
	217, 218, 219, 92, 180, 189, 105, 169, 95, 187,
	176, 178, 138, 124, 125, 171, 93, 94, 0, 163,
	114, 157, 118, 113, 150, 177, 141, 184, 185, 110,
	210, 112, 111, 175, 100, 197, 198, 97, 101, 196,
	146, 151, 149, 195, 182, 188, 139, 136, 0, 96,
	186, 137, 135, 127, 0, 116, 120, 155, 134, 156,
	121, 143, 142, 144, 0, 148, 0, 0, 0, 0,
	174, 193, 211, 212, 0, 0, 0, 203, 204, 205,
	206, 0, 0, 0, 145, 102, 122, 170, 126, 133,
	162, 209, 0, 167, 106, 192, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 123, 0, 90, 98, 130, 207, 208,
	0, 161, 117, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 103,
}

var yyPact = [...]int{
	2228, -1000, -215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1185, 1222, -1000, -1000, -1000, -1000, -1000, -1000, 993,
	385, 302, 337, 113, 13147, 335, 1836, 13697, -1000, 110,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 950, -1000, -1000,
	-1000, -1000, -1000, 1150, 1183, 987, 1149, 1073, -1000, 7080,
	304, 11495, 12872, 5974, -1000, 788, 332, 309, 13422, 297,
	297, 13422, 297, -1000, -91, 334, 13697, -1000, 13697, 260,
	786, 260, 260, 260, 13697, -1000, 381, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13697, 777, 1093, 207, 3867, 3867, 3867, 3867, 155, 3867,
	-49, 1014, -1000, -1000, -1000, -1000, 3867, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 719, 1122, 7643,
	7643, 1185, -1000, 950, -1000, -1000, -1000, 1119, -1000, -1000,
	526, 1204, -1000, 8743, 379, -1000, 7643, 114, 936, -1000,
	-1000, 936, -1000, -1000, 350, -1000, -1000, 8193, 8193, 8193,
	8193, 8193, 8193, 8193, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 936, -1000,
	7368, 936, 936, 936, 936, 936, 936, 936, 936, 7643,
	936, 936, 936, 936, 936, 936, 936, 936, 936, 1919,
	936, 936, 936, 936, 12595, 941, 1138, -1000, -1000, -1000,
	1133, 9570, 10395, 13697, 910, -1000, 932, 5673, -34, -1000,
	-1000, -1000, 489, 10120, -1000, -1000, -1000, 1092, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 859, -1000, 2585, 13422, 13697, 982, 775,
	509, 772, 1013, 13697, -1000, 12320, 3867, 307, 13697, 1125,
	1012, 13697, 767, 748, -1000, 5372, -1000, 3867, 3867, 3867,
	3867, 3867, 3867, 3867, 3867, -1000, -1000, -1000, -1000, -1000,
	-1000, 3867, 3867, -1000, 16, -1000, 13697, -1000, -1000, -1000,
	-1000, 1217, 409, 566, 378, 933, -1000, 655, 1150, 719,
	1073, 9845, 1026, -1000, -1000, 13697, -1000, 7643, 7643, 616,
	-1000, 12045, -1000, -1000, 4168, 415, 8193, 564, 436, 8193,
	8193, 8193, 8193, 8193, 8193, 8193, 8193, 8193, 8193, 8193,
	8193, 8193, 8193, 8193, 665, 1919, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 746, -1000, 950, 818, 818, 12,
	12, 12, 12, 12, 12, 8468, 6530, 719, 851, 430,
	7368, 7080, 7080, 7643, 7643, 13972, 13972, 7080, 1137, 504,
	430, 13972, -1000, 719, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 59, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7080, 7080, 7080, 7080, 182, 13697, -1000, 13972, 11495,
	11495, 11495, 11495, 11495, -1000, 1062, 1061, -1000, 1054, 1053,
	1040, 13697, -1000, 849, 9570, 352, 936, -1000, 11770, -1000,
	-1000, 182, 885, 11495, 13697, -1000, -1000, 5071, 932, -34,
	929, -1000, -66, -7, 6255, 389, -1000, -1000, -1000, -1000,
	3265, 654, 736, -118, 17, -1000, -1000, -1000, -1000, 960,
	-1000, 960, 228, 960, 960, 960, -1000, 960, 960, 55,
	55, 55, 55, 55, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 988, 984, -1000, 960, 960, 960, -1000, 960, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 974,
	230, 974, 965, 965, -1000, -1000, 992, 1132, -126, 732,
	3867, 1120, 3867, 13697, -1000, 1909, 13697, -1000, 13697, -1000,
	-1000, 13697, 3867, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 480, -1000,
	-1000, -1000, -1000, 1078, 7643, 7643, 4770, 7643, -1000, -1000,
	-1000, 1122, -1000, 1137, 1164, -1000, 1087, 1086, 7080, -1000,
	-1000, 415, 496, -1000, -1000, 623, -1000, -1000, -1000, -1000,
	377, 936, -1000, 1939, -1000, -1000, -1000, -1000, 564, 8193,
	8193, 8193, 852, 1939, 1904, 146, 72, 12, 7, 7,
	14, 14, 14, 14, 14, 27, 27, -1000, -1000, -1000,
	-1000, 719, -1000, -1000, -1000, 719, 7080, 931, -1000, -1000,
	7643, -1000, 719, 847, 847, 523, 491, 930, -1000, 368,
	928, 847, 7080, 497, -1000, 7643, 719, -1000, -1000, 847,
	719, 847, 847, 908, 936, -1000, 912, -1000, 478, 1138,
	981, 1011, 774, -1000, -1000, -1000, -1000, 1060, -1000, 1030,
	-1000, -1000, -1000, -1000, -1000, 331, 326, 311, 13422, -1000,
	1194, 11495, 875, -1000, -1000, 929, -34, -41, -1000, -1000,
	-1000, -1000, 430, -1000, -1000, 730, 926, 2964, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 977, 1003, 13422, 215,
	220, 354, 327, 727, -1000, -1000, -1000, 521, -1000, 13422,
	1215, -1000, -1000, 210, -1000, 208, 936, 693, 13697, 121,
	975, 1152, -1000, -218, -1000, -2, -1000, -1000, 689, 55,
	55, 960, 55, 55, 55, -1000, -1000, 389, 1091, 389,
	389, 389, 389, 692, 692, -130, -130, -1000, -1000, -1000,
	687, 974, -1000, -1000, -1000, 685, -1000, 13697, 13422, 950,
	-1000, 4469, -1000, -1000, -1000, -1000, -1000, 1129, -1000, 1613,
	1653, 376, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 174, 342, -1000, 3867, -1000, 519, 13697,
	13697, 1076, 430, 430, 362, -1000, -1000, 13697, -1000, -1000,
	-1000, -1000, 923, -1000, -1000, -1000, 3566, 7080, -1000, 852,
	1939, 1753, -1000, 8193, 8193, -1000, -1000, 847, 7080, 430,
	-1000, -1000, -1000, 966, 665, 966, 8193, 8193, 4770, 8193,
	8193, -103, 916, 481, -1000, 7643, 541, -1000, -1000, -1000,
	-1000, -1000, 1002, 13972, 936, -1000, 9294, 13422, 1185, 13972,
	7643, 7643, -1000, -1000, 7643, 973, -1000, 7643, -1000, -1000,
	-1000, 936, 936, 936, 812, -1000, 1185, 875, -1000, -1000,
	-1000, -71, -27, -1000, -1000, 3265, -1000, 3265, 10945, 1203,
	240, 253, -1000, 725, 721, -1000, 708, -1000, -33, -1000,
	70, -75, -1000, -1000, 7643, -1000, 972, 1127, -1000, 1095,
	659, -202, -1000, -1000, -1000, -1000, -1000, -1000, 936, 971,
	967, -1000, -1000, -1000, -1000, 827, 389, 389, 55, 389,
	389, 389, -1000, 408, -1000, -1000, -1000, -1000, 844, -1000,
	836, -1000, 77, 73, -1000, 924, -1000, 832, 922, 1000,
	-1000, 877, -1000, 475, 1141, 133, -1000, 219, -1000, 13422,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13422, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13697, -1000, -1000, -1000, -1000, -1000, 13422, 245, -1000, -1000,
	691, 7643, -1000, -1000, -1000, 4469, -1000, 1194, 11495, -1000,
	-1000, 719, -1000, 8193, 1939, 1939, -1000, -1000, 719, 960,
	960, -1000, 960, 965, -1000, -1000, 960, 99, 960, 92,
	719, 719, 268, 1037, -1000, 205, 294, 936, -98, -1000,
	430, 7643, -1000, 1097, 872, 863, -1000, -1000, 6805, 719,
	814, 361, 812, 1150, -1000, 430, 430, 430, 11220, 430,
	11220, 11220, 11220, 9018, 13422, 1150, -1000, -1000, -1000, -1000,
	2964, -1000, 805, -1000, 960, 960, 351, 351, 206, 202,
	-1000, -1000, -1000, -1000, -172, -1000, -1000, -1000, 936, -1000,
	644, 11220, -183, -1000, 876, -1000, 118, 719, -1000, 676,
	-1000, 571, -1000, -1000, -1000, 389, -1000, -1000, -1000, -1000,
	-1000, 55, 624, 55, -12, -23, 653, -1000, 650, 10945,
	13422, 13697, 4469, 3265, 306, 1156, -1000, -1000, 13422, -1000,
	-1000, -1000, 958, -1000, -1000, -1000, -1000, 1100, 13422, -1000,
	-1000, 430, 1190, 873, -1000, 1939, -1000, -1000, 211, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8193, 8193,
	-1000, 8193, 8193, 8193, 719, 597, 430, 201, -1000, 936,
	-1000, -1000, 903, 13422, 13422, -1000, -1000, 803, -1000, -1000,
	799, 799, 799, 352, -1000, -1000, 1405, 10945, 1121, -1000,
	999, -1000, -1000, 520, 126, 994, 13422, -172, -1000, 7643,
	138, 797, 957, 647, 51, -130, -1000, -1000, -1000, -1000,
	-1000, -1000, 389, -1000, 389, -1000, -1000, 819, 791, 794,
	956, 954, -1000, -1000, 13422, -1000, -1000, -1000, -1000, -1000,
	953, 11220, 936, 221, 1188, 1180, -1000, -1000, 343, 343,
	343, 343, 49, -1000, -1000, 1214, -1000, 936, -1000, 950,
	359, -1000, 13422, -1000, -1000, -1000, -1000, -1000, 1381, 86,
	-1000, 697, 455, 581, 453, 452, 450, 447, 441, 440,
	435, -1000, -1000, 1213, -1000, -1000, 1206, 952, -1000, 951,
	644, -1000, -100, -1000, -1000, 753, -1000, -1000, -1000, -1000,
	-1000, -1000, 1194, 10945, 10945, 809, -1000, 10945, 781, 172,
	194, -1000, 7643, 7643, -1000, -1000, -1000, -1000, 719, 132,
	-153, 13972, 863, 719, 13422, -1000, -1000, -136, 1381, 13422,
	-1000, 645, -1000, -1000, 580, 635, 580, 580, 580, 580,
	580, 351, 351, 13422, 10945, -1000, -1000, 596, -1000, -1000,
	757, 752, -125, 13422, 7643, 741, 982, 739, -1000, 13422,
	948, 430, 862, -1000, 1069, -110, -157, 854, -1000, -1000,
	737, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 718, 716, -1000, 95, 627,
	618, 604, 601, -26, -1000, 1157, 1194, -1000, -1000, -213,
	-1000, 430, -1000, -126, -1000, 172, 1084, 10945, -1000, 1067,
	-1000, -1000, 1381, 214, -127, 573, -1000, 532, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10670, -1000, 7643, -1000, -1000,
	168, 712, -128, -1000, 13697, 945, -1000, -1000, -1000, 356,
	430, 164, -1000, -154, 937, 1381, 4469, 936, -170, 13422,
	706, -1000, 7918, -1000, 704, -1000, 343, 719, -1000, -1000,
	-1000,
}

var yyPgo = [...]int{
	0, 1431, 11, 756, 1429, 1425, 1423, 1422, 1421, 1418,
	1416, 1415, 1414, 1413, 1411, 1410, 1409, 1408, 1407, 1406,
	1404, 1402, 1400, 1399, 250, 1398, 1395, 1394, 78, 1393,
	84, 1391, 1390, 41, 163, 47, 55, 1439, 1384, 48,
	76, 80, 1383, 58, 1382, 1381, 86, 1380, 75, 1379,
	1375, 99, 1373, 1370, 23, 9, 1369, 53, 1367, 1366,
	82, 7, 1365, 1363, 1361, 1360, 1358, 1357, 60, 8,
	14, 24, 26, 1356, 51, 15, 1353, 57, 1352, 1348,
	1340, 1338, 42, 1336, 61, 19, 45, 67, 1334, 25,
	70, 44, 27, 16, 88, 68, 1332, 37, 71, 56,
	1329, 1327, 633, 1326, 1324, 1321, 1318, 1317, 1316, 655,
	585, 1315, 1314, 1313, 52, 0, 185, 39, 87, 1312,
	50, 1311, 1260, 83, 74, 31, 1310, 49, 121, 46,
	1308, 1307, 40, 81, 1306, 100, 97, 1305, 1299, 1296,
	1294, 1293, 1096, 33, 155, 73, 1292, 1289, 1288, 17,
	43, 32, 54, 66, 1287, 1286, 1285, 30, 1284, 13,
	20, 2, 65, 1282, 1281, 1278, 1277, 34, 29, 1276,
	21, 28, 5, 1273, 3, 1269, 1, 1265, 22, 1262,
	6, 1259, 4, 1258, 1257, 1256, 1255, 1254, 1253, 1250,
	1249, 1248, 1247, 18, 36, 10, 1246, 1238, 1330, 1103,
	1234, 1231, 1230, 1228, 89,
}

var yyR1 = [...]int{
	0, 196, 197, 197, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 200,
	200, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 184,
	184, 184, 185, 185, 185, 185, 185, 185, 187, 187,
	188, 188, 120, 120, 182, 182, 181, 180, 180, 179,
	179, 178, 189, 189, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 194, 194, 194,
	194, 194, 194, 194, 194, 191, 191, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 143, 143, 143, 143, 143, 190, 190, 186, 186,
	186, 186, 186, 138, 138, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	137, 137, 137, 139, 139, 139, 139, 139, 139, 139,
	139, 135, 135, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 141, 141, 141, 141,
	141, 141, 141, 141, 152, 152, 142, 142, 150, 150,
	151, 151, 151, 149, 149, 149, 146, 146, 147, 147,
	148, 148, 148, 144, 144, 144, 145, 145, 145, 155,
	155, 155, 173, 173, 174, 174, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 163, 163, 195,
	195, 169, 169, 169, 169, 169, 169, 169, 169, 162,
	162, 171, 171, 170, 170, 157, 157, 157, 157, 157,
	158, 159, 159, 159, 159, 156, 156, 193, 193, 193,
	160, 160, 161, 161, 166, 166, 166, 167, 167, 167,
	168, 168, 168, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 183, 183, 183, 183, 183,
	183, 183, 183, 183, 183, 183, 201, 201, 202, 202,
	202, 202, 202, 202, 202, 177, 175, 175, 176, 176,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 107, 107, 104, 104, 105, 105, 106, 106,
	106, 108, 108, 108, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 203, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 89, 91,
	91, 42, 42, 42, 42, 43, 43, 44, 44, 45,
	45, 126, 126, 125, 125, 125, 124, 124, 47, 47,
	47, 49, 48, 48, 48, 48, 50, 50, 52, 52,
	51, 51, 54, 54, 54, 54, 55, 55, 37, 37,
	37, 37, 37, 37, 37, 103, 103, 57, 57, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 67,
	67, 67, 67, 67, 67, 58, 58, 58, 58, 58,
	58, 58, 33, 33, 68, 68, 68, 74, 69, 69,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 204,
	204, 66, 66, 66, 66, 31, 31, 31, 31, 31,
	129, 129, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 133, 133, 133, 133,
	133, 133, 133, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 98, 96, 96, 96, 121, 121, 121, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 116, 116, 117, 117, 122, 122, 123, 123, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 198, 199, 127, 128, 128, 128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 6,
	7, 3, 3, 6, 5, 8, 7, 3, 2, 2,
	2, 2, 2, 2, 4, 1, 2, 0, 4, 3,
	4, 3, 3, 3, 3, 3, 3, 3, 2, 4,
	6, 2, 3, 2, 3, 1, 0, 2, 0, 3,
	3, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 1, 1, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 4, 4, 4, 4, 4, 1, 5,
	2, 2, 3, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 3, 3, 0, 1, 0, 1,
	0, 2, 1, 0, 3, 3, 0, 1, 2, 5,
	8, 4, 1, 2, 1, 3, 2, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 1,
	1, 2, 3, 3, 2, 3, 2, 3, 4, 1,
	1, 1, 3, 3, 2, 1, 4, 4, 7, 7,
	13, 1, 1, 2, 2, 8, 12, 0, 1, 1,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 1, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -196, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 171, 172,
	174, 175, 25, 137, 138, 141, 142, -198, 8, 274,
	52, -197, 306, -82, 15, -26, 5, -24, -203, -24,
	-24, -24, -24, -24, -164, 52, -120, -189, 151, 266,
	118, 133, 119, 134, 70, -102, 121, 123, 119, 119,
	120, 121, 266, 118, 119, -51, -122, 55, -115, 158,
	283, 20, 171, 184, 185, 176, 217, 205, 284, 156,
	202, 206, 253, 305, 64, 174, 262, 127, 162, 139,
	197, 200, 199, 191, 188, 27, 223, 290, 190, 130,
	224, 228, 254, 281, 181, 182, 256, 221, 31, 132,
	285, 33, 147, 257, 226, 220, 215, 219, 180, 214,
	37, 194, 230, 229, 231, 252, 208, 157, 233, 210,
	192, 209, 18, 142, 145, 225, 227, 189, 159, 125,
	149, 289, 258, 187, 146, 160, 141, 261, 155, 175,
	255, 183, 264, 36, 238, 201, 178, 193, 179, 129,
	172, 153, 212, 148, 195, 196, 218, 177, 213, 173,
	150, 143, 263, 239, 291, 211, 207, 203, 204, 154,
	121, 151, 152, 245, 246, 247, 248, 286, 287, 259,
	198, 240, 241, 164, 165, 166, 167, 168, 169, 170,
	119, 106, 206, 112, 243, 120, 31, 149, -131, 119,
	-104, 152, 245, 246, 247, 248, 55, 255, 254, 249,
	-122, 173, -127, -127, -127, -127, -127, -2, -86, 17,
	16, -5, -3, -198, 6, 20, 21, -30, 38, 39,
	-25, -36, 97, -37, -122, -56, 72, -61, 28, 55,
	-115, 23, -60, -57, -75, -73, -74, 106, 107, 95,
	96, 103, 73, 108, -65, -63, -64, -66, 57, 56,
	65, 58, 59, 60, 61, 66, 67, 68, -116, -71,
	-198, 42, 43, 275, 276, 277, 278, 282, 279, 75,
	32, 265, 273, 272, 271, 269, 270, 267, 268, 304,
	124, 266, 101, 274, -102, -39, -40, -41, -42, -53,
	-74, -198, -51, 11, -46, -51, -94, -130, 173, -98,
	255, 254, -117, -96, -116, -114, 253, 206, 252, 55,
	-115, 117, 293, 71, 22, 24, 236, 242, 74, 106,
	16, 75, 302, 303, 105, 275, 112, 46, 267, 268,
	265, 277, 278, 266, 243, 28, 10, 25, 137, 21,
	99, 114, 78, 79, 140, 23, 138, 68, 19, 49,
	131, 11, 292, 13, 14, 294, 124, 123, 90, 120,
	44, 8, 108, 26, 87, 40, 135, 42, 88, 17,
	269, 270, 30, 282, 144, 101, 47, 34, 72, 66,
	50, 260, 70, 15, 45, 133, 89, 115, 274, 43,
	118, 6, 280, 29, 136, 41, 119, 244, 77, 122,
	67, 5, 134, 9, 48, 51, 271, 272, 273, 32,
	76, 12, 69, -165, -153, 55, 120, 121, -116, -110,
	124, -110, -116, -110, 274, 119, -51, -51, -109, 124,
	55, -109, -109, -109, -51, 109, -51, 55, 29, 266,
	55, 149, 119, 150, 121, -128, -198, -117, -128, -128,
	-128, 153, 154, -128, -105, 250, 50, -128, -199, 54,
	-87, 19, 30, -37, -122, -83, -84, -37, -82, -2,
	-24, 34, -28, 21, 63, 11, -119, 71, 70, 87,
	-118, 22, -116, 57, 109, -37, -58, 90, 72, 88,
	89, 74, 92, 91, 102, 95, 96, 97, 98, 99,
	100, 101, 93, 94, 105, 304, 80, 81, 82, 83,
	84, 85, 86, -103, -198, -74, -198, 110, 111, -61,
	-61, -61, -61, -61, -61, -61, -198, -2, -69, -37,
	-198, -198, -198, -198, -198, -198, -198, -198, -198, -78,
	-37, -198, -204, -198, -204, -204, -204, -204, -204, -204,
	-204, -133, 106, 206, 139, 197, -136, -135, 212, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 205,
	284, -198, -198, -198, -198, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -198, -125, 145, -124, 22, -122,
	57, -51, -46, -200, 53, 11, 51, 53, -94, 173,
	-95, -99, 256, 258, 80, -121, -116, 57, 28, 29,
	54, 53, -154, -134, -138, -135, -140, -139, -141, -136,
	-137, 202, 206, 203, 208, 209, 210, 106, 207, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 221, 222,
	211, 223, 29, 139, 195, 196, 197, 200, 199, 201,
	198, 224, 225, 226, 227, 228, 229, 230, 231, 187,
	188, 190, 191, 192, 194, 193, -116, -51, -182, 51,
	55, 72, 55, 50, -51, -51, 260, -128, 122, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 244,
	251, -51, 9, 90, 53, 18, 109, 53, -85, 24,
	25, -86, -199, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 72, 67, 68, -118, 97,
	-123, -117, -114, -61, -68, -71, -74, 62, 90, 88,
	89, 74, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	-133, 55, -60, -60, -116, -35, 21, -34, -36, -199,
	53, -199, -2, -34, -34, -37, -37, -75, -116, -122,
	-75, -34, -28, -76, -77, 76, -75, -199, 204, -34,
	-35, -34, -34, -90, 145, -51, -93, -97, -75, -40,
	-41, -41, -40, -41, 40, 40, 40, 45, 40, 45,
	40, -48, -122, -199, -54, 48, 123, 49, -198, -124,
	-90, 51, -39, -51, -98, -95, 53, 257, 259, 260,
	50, 69, -37, -145, 106, 105, -166, -167, -168, -117,
	57, 58, -153, -155, -157, -156, -169, -158, 127, 125,
	129, 130, 134, -162, 120, 135, 66, 72, -194, 127,
	50, 236, 242, 125, 135, 134, 305, 64, 128, 292,
	294, 28, -148, 307, 232, -146, 239, -142, 52, -142,
	-142, 204, -142, -142, -142, -142, -142, -144, 206, -144,
	-144, -144, -144, 52, 52, -142, -142, -142, -142, -150,
	52, 189, -150, -150, -151, 52, -151, 50, 51, 22,
	-180, 286, -181, 55, -128, 23, -128, -51, -111, 117,
	114, 115, -177, 113, 236, 206, 64, 28, 15, 275,
	145, 291, 55, 146, -51, -51, -51, -128, -106, 11,
	90, 36, -37, -37, -123, -84, -87, -101, 19, 11,
	32, 32, -34, 66, 67, 68, 109, -198, -68, -61,
	-61, -61, -33, 140, 71, -199, -199, -34, 53, -37,
	-199, -199, -199, 53, 51, 22, 53, 11, 109, 53,
	11, -199, -34, -79, -77, 78, -37, -199, -199, -199,
	-199, -199, -59, 29, 32, -2, -198, -198, -55, 53,
	12, 80, -44, -43, 50, 51, -45, 50, -43, 40,
	40, 120, 120, 120, -91, -116, -55, -39, -55, -99,
	-100, 261, 258, 264, 55, 53, -168, 80, 52, 50,
	-160, -116, 135, -162, -162, 55, -162, 55, 55, 66,
	-116, 9, 135, 135, -198, 57, -122, -191, 293, 16,
	52, 57, 58, 59, 66, -143, 65, -57, 233, 265,
	268, 267, 308, -147, 240, 58, -144, -144, -142, -144,
	-144, -144, -145, 29, -145, -145, -145, -145, -152, 57,
	-152, -149, 286, 287, -149, 58, -150, 58, -51, -116,
	-2, -179, -178, -117, -184, 22, -127, -120, -202, 151,
	126, 131, 130, 55, 125, 129, 145, -183, 151, 126,
	127, 131, 130, 55, 120, 135, 125, 129, 145, 134,
	-112, -113, 122, 22, 120, 135, 145, 117, -128, -108,
	88, 12, -122, -122, 37, 109, -51, -38, 11, 97,
	-117, -35, -33, 71, -61, -61, -199, -36, -132, 106,
	202, 139, 197, 191, 221, 222, 208, 238, 195, 239,
	-129, -132, -61, -61, -117, -61, -61, 283, -82, 79,
	-37, 77, -92, 50, -93, -70, -72, -71, -198, -2,
	-88, -116, -91, -82, -97, -37, -37, -37, 52, -37,
	-198, -198, -198, -199, 53, -82, -55, 258, 262, 263,
	-167, -168, -171, -170, -116, 135, 10, 9, 131, 125,
	55, 55, 55, -193, 134, 302, 303, -194, 305, -143,
	-37, 52, 22, 28, 58, -186, 304, -198, -142, 52,
	-142, 52, 54, -145, -145, -144, -145, -145, -145, 55,
	106, 54, 53, 54, 195, 195, 53, 54, 53, 52,
	51, 50, 53, 80, -185, 19, 159, 160, -201, 120,
	135, -127, -116, -127, -116, -51, -127, -116, 127, -157,
	57, -37, -55, -39, -199, -61, -199, -142, -142, -142,
	-151, -142, 182, -142, 182, -199, -199, -199, 53, 19,
	-199, 53, 19, -198, -32, 280, -37, 27, -92, 53,
	-199, -199, -199, 53, 109, -199, -86, -89, -116, 135,
	-89, -89, -89, -125, -116, -86, 54, 53, -142, -142,
	-159, 155, 156, 29, 157, -159, 135, 135, -193, -198,
	-199, -89, 294, 53, 206, 196, 234, 212, -199, 54,
	54, -145, -144, 57, -144, 241, 241, 58, 58, -171,
	-116, -51, -178, -168, 122, 20, 6, 8, 9, 10,
	-116, 52, 26, -116, -80, 13, -144, 55, -61, -61,
	-61, -61, -61, -199, 57, 135, -72, 32, -2, -198,
	-116, -116, 53, 54, -199, -199, -199, -54, -173, 286,
	-172, 51, 132, 64, 164, 165, 166, 167, 168, 169,
	170, -170, -85, 50, 66, 158, 50, -160, -116, -193,
	-37, -190, 157, 54, 52, 58, 204, -149, -145, -145,
	54, 54, 54, 52, 52, -161, -116, 52, -89, -198,
	125, -81, 14, 16, -199, -199, -199, -199, -31, 90,
	286, 9, -70, -2, 109, -116, -172, 286, 52, 288,
	55, -163, 80, 57, 80, 80, 80, 80, 80, 80,
	80, 9, 10, 52, 52, -199, 281, -192, 54, -55,
	-171, -171, -187, 53, 51, -171, 54, -175, -176, 145,
	135, -37, -69, -199, 284, 47, 289, -93, -199, -116,
	-174, -172, -116, 58, -195, 50, 69, 58, -195, -195,
	-195, -195, -195, -159, -159, -161, -171, 54, 172, 296,
	297, 144, 298, 157, 299, 300, 54, 54, -188, 286,
	-116, -37, 54, -182, -199, 53, -116, 52, 37, 285,
	290, 54, 53, 54, 54, 286, 58, 16, 58, 58,
	58, 58, 297, 144, 299, 16, -55, 305, -180, -176,
	32, -171, 37, -172, 128, 286, 58, 58, 301, -122,
	-37, 147, 54, 286, -51, 52, 109, 148, 289, 52,
	-174, -117, -198, 290, -161, 54, -61, 144, 54, -199,
	-199,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 650, 0, 408, 408, 408, 408, 408, 408, 0,
	-2, 704, 0, 0, 0, 0, -2, 398, 399, 0,
	401, 402, 964, 964, 964, 964, 964, 0, 33, 34,
	962, 1, 3, 658, 0, 0, 412, 415, 410, 0,
	704, 0, 0, 0, 60, 0, 0, 0, 0, 702,
	702, 0, 702, 83, 0, 0, 0, 705, 0, 700,
	0, 700, 700, 700, 0, 357, 480, 725, 726, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	0, 0, 0, 0, 965, 965, 965, 965, 0, 965,
	386, 375, 377, 378, 379, 380, 965, 395, 396, 385,
	397, 400, 403, 404, 405, 406, 407, 27, 662, 0,
	0, 650, 29, 0, 408, 413, 414, 418, 416, 417,
	409, 0, 426, 430, 0, 488, 0, 493, 495, -2,
	-2, 0, 530, 531, 532, 533, 534, 0, 0, 0,
	0, 0, 0, 0, 558, 559, 560, 561, 635, 636,
	637, 638, 639, 640, 641, 642, 497, 498, 632, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 589, 589, 589, 589, 589, 589, 589, 589, 0,
	0, 0, 0, 0, 0, 0, 437, 439, 440, 441,
	461, 0, 463, 0, 0, 41, 45, 0, 931, 686,
	-2, -2, 0, 0, 723, 724, -2, 843, -2, 721,
	722, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 0, 96, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 93, 0, 965, 0, 0, 0,
	0, 0, 0, 0, 356, 0, 358, 965, 965, 965,
	965, 965, 965, 965, 965, 367, 966, 967, 368, 369,
	370, 965, 965, 372, 0, 387, 0, 381, 28, 963,
	22, 0, 0, 659, 0, 651, 652, 655, 658, 27,
	415, 0, 420, 419, 411, 0, 427, 0, 0, 0,
	431, 0, 433, 434, 0, 491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 515, 516, 517, 518,
	519, 520, 521, 494, 0, 508, 0, 0, 0, 550,
	551, 552, 553, 554, 555, 0, 422, 27, 0, 528,
	0, 0, 0, 0, 0, 0, 0, 0, 418, 0,
	624, 0, 580, 0, 581, 582, 583, 584, 585, 586,
	587, 588, 616, 0, 618, 619, 620, 621, 622, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 191,
	192, 0, 422, 0, 0, 43, 0, 479, 0, 0,
	0, 0, 0, 0, 468, 0, 0, 471, 0, 0,
	0, 0, 462, 0, 0, 482, 896, 464, 0, 466,
	467, -2, 0, 0, 0, 39, 40, 0, 46, 931,
	48, 49, 0, 0, 0, 246, 695, 696, 697, 693,
	304, 0, 101, 240, 236, 103, 104, 105, 106, 226,
	164, 226, 226, 226, 226, 226, 198, 226, 226, 243,
	243, 243, 243, 243, 207, 208, 209, 210, 211, 212,
	213, 0, 0, 183, 226, 226, 226, 187, 226, 189,
	190, 216, 217, 218, 219, 220, 221, 222, 223, 228,
	228, 228, 230, 230, 181, 182, 0, 0, 87, 0,
	965, 0, 965, 0, 94, 0, 0, 323, 0, 351,
	701, 0, 965, 354, 355, 481, 727, 728, 359, 360,
	361, 362, 363, 364, 365, 366, 371, 374, 388, 382,
	383, 376, 663, 0, 0, 0, 0, 0, 654, 656,
	657, 662, 30, 418, 0, 643, 0, 0, 0, 421,
	25, 489, 490, 492, 509, 0, 511, 513, 432, 428,
	0, 633, -2, 499, 500, 524, 525, 526, 0, 0,
	0, 0, 522, 504, 0, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 549, 600, 601,
	557, 0, 547, 548, 556, 0, 0, 423, 424, 527,
	0, 681, 27, 0, 0, 0, 0, 0, 632, 0,
	0, 0, 0, 630, 627, 0, 0, 590, 617, 0,
	0, 0, 0, 0, 0, 478, 486, 683, 0, 438,
	457, 459, 0, 454, 469, 470, 472, 0, 474, 0,
	476, 477, 442, 443, 444, 0, 0, 0, 0, 465,
	486, 0, 486, 42, 687, 47, 0, 0, 52, 53,
	688, 689, 690, 691, 247, 0, 95, 305, 307, 310,
	311, 312, 97, 98, 99, 100, 0, 285, 300, 0,
	0, 0, 0, 0, 279, 280, 108, 0, 110, 0,
	0, 113, 114, 0, 116, 118, 0, 0, 0, 0,
	0, 0, 107, 0, 242, 238, 237, 163, 0, 243,
	243, 226, 243, 243, 243, 200, 201, 246, 0, 246,
	246, 246, 246, 0, 0, 233, 233, 186, 188, 175,
	0, 228, 177, 178, 179, 0, 180, 0, 0, 0,
	65, 0, 85, 86, 66, 703, 67, 69, 964, 82,
	0, 716, 324, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 0, 0, 350, 965, 353, 391, 0,
	0, 0, 660, 661, 0, 653, 23, 0, 698, 699,
	644, 645, 435, 510, 512, 514, 0, 422, 501, 522,
	505, 0, 502, 0, 0, 496, 562, 0, 0, 529,
	-2, 565, 566, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 650, 0, 628, 0, 0, 579, 591, 592,
	593, 594, 675, 0, 0, -2, 0, 0, 650, 0,
	0, 0, 451, 458, 0, 0, 452, 0, 453, 473,
	475, 0, 0, 0, 0, 449, 650, 486, 38, 50,
	51, 0, 0, 57, 248, 0, 308, 0, 0, 0,
	0, 301, 271, 0, 0, 274, 0, 276, 297, 109,
	0, 0, 115, 117, 0, 121, 122, 0, 135, 0,
	0, 158, 128, 129, 130, 131, 132, 133, 0, 226,
	226, 155, 241, 102, 239, 0, 246, 246, 243, 246,
	246, 246, 202, 0, 203, 204, 205, 206, 0, 224,
	0, 184, 0, 0, 185, 0, 176, 0, 0, 0,
	-2, 88, 89, 0, 72, 0, 313, 0, 964, 0,
	338, 339, 340, 341, 342, 343, 344, 964, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
	0, 964, 717, 718, 719, 720, 0, 0, 352, 373,
	0, 0, 389, 390, 664, 0, 24, 486, 0, 429,
	634, 0, 503, 0, 523, 506, 563, 425, 0, 226,
	226, 605, 226, 230, 608, 609, 226, 611, 226, 614,
	0, 0, 0, 0, 633, 0, 0, 0, 625, 578,
	631, 0, 31, 0, 675, 665, 677, 679, 0, 27,
	0, 671, 0, 658, 684, 487, 685, 455, 0, 460,
	0, 0, 0, 463, 0, 658, 37, 54, 55, 56,
	306, 309, 0, 281, 226, 226, 0, 0, 0, 0,
	272, 273, 275, 277, 297, 298, 299, 111, 0, 112,
	0, 0, 0, 136, 0, 127, 0, 0, 151, 0,
	153, 0, 227, 193, 194, 246, 195, 196, 197, 244,
	245, 243, 0, 243, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 71, 0, 336,
	337, 317, 0, 318, 320, 321, 322, 0, 300, 316,
	392, 393, 646, 436, 564, 507, 567, 602, 243, 606,
	607, 610, 612, 613, 615, 569, 568, 570, 0, 0,
	573, 0, 0, 0, 0, 0, 629, 0, 32, 0,
	680, -2, 0, 0, 0, 44, 35, 0, 446, 447,
	0, 0, 0, 482, 450, 36, 251, 0, 655, 284,
	286, 291, 292, 0, 0, 287, 300, 297, 278, 0,
	156, 0, 124, 0, 0, 233, 161, 162, 134, 152,
	154, 199, 246, 225, 246, 234, 235, 0, 0, 0,
	0, 0, 90, 91, 0, 73, 74, 75, 76, 77,
	0, 0, 0, 301, 648, 0, 603, 604, 0, 0,
	0, 0, 595, 577, 626, 0, 678, 0, -2, 0,
	673, 672, 0, 456, 483, 484, 485, 445, 249, 0,
	252, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 293, 294, 0, 0, 301, 0,
	0, 119, 0, 123, 137, 0, 159, 160, 214, 215,
	229, 232, 486, 0, 0, 78, 302, 0, 0, 0,
	0, 26, 0, 0, 571, 572, 574, 575, 0, 0,
	0, 0, 668, 27, 0, 448, 253, 0, 0, 0,
	256, 0, 268, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 120, 157, 0, 126, 61,
	0, 0, 80, 0, 0, 0, 84, 0, 346, 0,
	0, 649, 647, 576, 0, 0, 0, 676, -2, 674,
	0, 254, 259, 257, 260, 269, 270, 261, 262, 263,
	264, 265, 266, 288, 289, 0, 0, 125, 0, 0,
	0, 0, 0, 0, 148, 0, 486, 62, 68, 0,
	303, 79, 314, 87, 345, 0, 0, 0, 596, 0,
	599, 250, 0, 0, 295, 0, 139, 0, 141, 142,
	143, 144, 145, 146, 147, 0, 63, 0, 319, 347,
	0, 0, 597, 255, 0, 0, 138, 140, 149, 0,
	81, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 598, 0, 296, 0, 0, 290, 348,
	349,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 306,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 307, 3, 308, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:336
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:341
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:342
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:346
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:369
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:377
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:381
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:387
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:400
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:404
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:410
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:414
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:421
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:433
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:445
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:449
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:455
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:465
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:474
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:475
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:488
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:492
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:526
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:544
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:558
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:562
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:568
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:573
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:589
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:619
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:627
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:635
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:639
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:643
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:655
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:668
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:680
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:684
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:688
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:697
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:702
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:706
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:711
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:715
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:720
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:724
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:730
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:735
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:740
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:746
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:751
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:757
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:762
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:766
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:772
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:779
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:786
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:791
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:795
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:803
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:809
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:814
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:825
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:837
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:842
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:847
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:852
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:857
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:862
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:867
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:872
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:877
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:882
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:887
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:892
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[4].expr)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:898
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[6].expr), ConstraintName: yyDollar[3].colIdent}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:903
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:908
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:913
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:919
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:925
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:931
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:958
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:962
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[2].boolVal))
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:966
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:972
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:976
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:981
		{
			yyVAL.sequence = &Sequence{}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:985
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:990
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:995
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1000
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1010
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1015
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1020
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1025
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1030
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1035
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1040
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1045
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1052
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1056
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1060
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1064
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1068
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1073
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1077
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1082
		{
			yyVAL.bytes = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1092
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1097
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1145
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1151
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1157
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1163
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1169
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1175
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1181
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1185
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1191
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1195
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1219
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1225
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1229
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1243
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1247
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1259
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1263
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1299
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1303
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1307
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 215:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1330
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1346
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1350
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1354
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1358
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1364
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1369
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1374
		{
			yyVAL.optVal = nil
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1378
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1387
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1399
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1405
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1413
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1417
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1421
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1426
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1430
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1435
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1439
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1444
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1448
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1452
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1457
		{
			yyVAL.str = ""
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1461
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1465
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1470
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1474
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1478
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1484
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 250:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1488
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[7].indexOptions}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1492
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1498
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1502
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1508
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1512
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1518
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1522
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1527
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1531
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1535
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1539
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1543
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1547
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1551
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1555
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1559
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1565
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1575
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1579
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1585
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1589
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1605
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1609
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1613
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1619
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1623
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1629
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1633
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1639
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1644
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1651
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 288:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1663
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 290:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1677
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1689
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1697
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1701
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 295:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1707
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns,
			}
		}
	case 296:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1714
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns, Options: yyDollar[11].indexOptions,
			}
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1723
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1727
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1731
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1736
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1743
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1752
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1760
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1768
		{
			yyVAL.str = yyDollar[1].str
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1772
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1776
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1782
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1786
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1790
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 313:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1796
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 314:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1800
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 315:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1814
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 316:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1828
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 317:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1837
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1841
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 319:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1845
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 320:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1858
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 321:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1868
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1873
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1878
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1882
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 345:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1914
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1920
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1924
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 348:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1930
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 349:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1934
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 350:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1940
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1946
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 352:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1954
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1959
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1967
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1971
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1977
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1981
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1986
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1992
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1996
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2000
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2005
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2009
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2013
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2017
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2021
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2025
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2029
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2033
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2037
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2041
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2045
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2049
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2059
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2063
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2067
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2071
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2075
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2079
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2083
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2093
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2099
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2103
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2109
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2113
		{
			yyVAL.str = "extended "
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2119
		{
			yyVAL.str = ""
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2123
		{
			yyVAL.str = "full "
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2129
		{
			yyVAL.str = ""
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2133
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2137
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 391:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2143
		{
			yyVAL.showFilter = nil
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2147
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2151
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2157
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2161
		{
			yyVAL.str = SessionStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2165
		{
			yyVAL.str = GlobalStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2171
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2175
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2181
		{
			yyVAL.statement = &Begin{}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2185
		{
			yyVAL.statement = &Begin{}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2191
		{
			yyVAL.statement = &Commit{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2197
		{
			yyVAL.statement = &Rollback{}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2203
		{
			yyVAL.statement = &OtherRead{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2207
		{
			yyVAL.statement = &OtherRead{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2211
		{
			yyVAL.statement = &OtherRead{}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2215
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2219
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2224
		{
			setAllowComments(yylex, true)
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2228
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2234
		{
			yyVAL.bytes2 = nil
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2238
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2244
		{
			yyVAL.str = UnionStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2248
		{
			yyVAL.str = UnionAllStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2252
		{
			yyVAL.str = UnionDistinctStr
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2257
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2261
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2265
		{
			yyVAL.str = SQLCacheStr
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2270
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2274
		{
			yyVAL.str = DistinctStr
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2279
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2283
		{
			yyVAL.str = StraightJoinHint
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2288
		{
			yyVAL.selectExprs = nil
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2292
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2298
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2302
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2308
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2312
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2316
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2320
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2325
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2329
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2333
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2340
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2345
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2349
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2355
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2369
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2373
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2377
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2383
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 445:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2387
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2393
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2398
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2402
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2408
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2412
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 451:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2425
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2429
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2443
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2445
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2449
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2451
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2455
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2457
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2460
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2465
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2469
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2473
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2480
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2486
		{
			yyVAL.str = JoinStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2490
		{
			yyVAL.str = JoinStr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2494
		{
			yyVAL.str = JoinStr
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2500
		{
			yyVAL.str = StraightJoinStr
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2506
		{
			yyVAL.str = LeftJoinStr
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.str = LeftJoinStr
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.str = RightJoinStr
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2518
		{
			yyVAL.str = RightJoinStr
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2524
		{
			yyVAL.str = NaturalJoinStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2528
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2538
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2542
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2548
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2552
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2557
		{
			yyVAL.indexHints = nil
		}
	case 483:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2561
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 485:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2569
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 486:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2574
		{
			yyVAL.expr = nil
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2578
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2584
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2588
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2592
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2600
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2604
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2608
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 495:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2614
		{
			yyVAL.str = ""
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2624
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2628
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2642
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2646
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2650
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2654
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2658
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2662
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 507:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2666
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2670
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2676
		{
			yyVAL.str = IsNullStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2680
		{
			yyVAL.str = IsNotNullStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2684
		{
			yyVAL.str = IsTrueStr
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2688
		{
			yyVAL.str = IsNotTrueStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2692
		{
			yyVAL.str = IsFalseStr
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2696
		{
			yyVAL.str = IsNotFalseStr
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2702
		{
			yyVAL.str = EqualStr
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2706
		{
			yyVAL.str = LessThanStr
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2710
		{
			yyVAL.str = GreaterThanStr
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2714
		{
			yyVAL.str = LessEqualStr
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2718
		{
			yyVAL.str = GreaterEqualStr
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2722
		{
			yyVAL.str = NotEqualStr
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2726
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 522:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2731
		{
			yyVAL.expr = nil
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2735
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2745
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2749
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2755
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2761
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2765
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2775
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2779
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2787
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2791
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2795
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2799
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2803
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2807
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2811
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2815
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2819
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2823
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2827
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2831
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2835
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2839
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2843
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2847
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2851
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2855
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2859
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2867
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2881
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2885
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2889
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2897
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2911
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2915
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 564:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2929
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2933
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2937
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 568:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2941
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 569:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2945
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 570:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2949
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 571:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2953
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 572:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2957
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 573:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2961
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 574:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2965
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 575:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2969
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 576:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:2973
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 577:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2977
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2981
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2985
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2995
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3003
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3012
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3017
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3022
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3027
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3031
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3045
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3049
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3053
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3057
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3063
		{
			yyVAL.str = ""
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3067
		{
			yyVAL.str = BooleanModeStr
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3071
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 598:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3075
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.str = QueryExpansionStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3085
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3089
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3095
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3099
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3103
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3107
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3111
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3115
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3121
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3125
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3129
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3133
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 612:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3137
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3141
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3145
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3149
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3179
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3184
		{
			yyVAL.expr = nil
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.str = string("")
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3197
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3203
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3207
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3213
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3218
		{
			yyVAL.expr = nil
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3222
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3228
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3232
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 634:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3236
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3242
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3246
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3250
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3254
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3258
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3262
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3270
		{
			yyVAL.expr = &NullVal{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3276
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3285
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3289
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3294
		{
			yyVAL.exprs = nil
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3298
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3303
		{
			yyVAL.expr = nil
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3307
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3312
		{
			yyVAL.orderBy = nil
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3316
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3322
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3326
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3332
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3337
		{
			yyVAL.str = AscScr
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3341
		{
			yyVAL.str = AscScr
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3345
		{
			yyVAL.str = DescScr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3350
		{
			yyVAL.limit = nil
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3354
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3358
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 661:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3362
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.str = ""
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3371
		{
			yyVAL.str = ForUpdateStr
		}
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3375
		{
			yyVAL.str = ShareModeStr
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3388
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3392
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3396
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 668:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3401
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3405
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 670:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3409
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3416
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3420
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 673:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3424
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3428
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3433
		{
			yyVAL.updateExprs = nil
		}
	case 676:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3437
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3443
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3447
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3453
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3457
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3463
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3469
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3483
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3489
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3495
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3499
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3505
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3509
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3513
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3524
		{
			yyVAL.bytes = []byte("charset")
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3531
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3535
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.expr = &Default{}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3548
		{
			yyVAL.byt = 0
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3550
		{
			yyVAL.byt = 1
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3553
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3555
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3558
		{
			yyVAL.str = ""
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3560
		{
			yyVAL.str = IgnoreStr
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3564
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3566
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3568
		{
			yyVAL.empty = struct{}{}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3570
		{
			yyVAL.empty = struct{}{}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3572
		{
			yyVAL.empty = struct{}{}
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3574
		{
			yyVAL.empty = struct{}{}
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3576
		{
			yyVAL.empty = struct{}{}
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3578
		{
			yyVAL.empty = struct{}{}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3580
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3582
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3585
		{
			yyVAL.empty = struct{}{}
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3587
		{
			yyVAL.empty = struct{}{}
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3589
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3593
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3595
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3599
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3603
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3610
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3616
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3620
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3627
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3886
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3895
		{
			decNesting(yylex)
		}
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3900
		{
			forceEOF(yylex)
		}
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3905
		{
			forceEOF(yylex)
		}
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3909
		{
			forceEOF(yylex)
		}
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3913
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
