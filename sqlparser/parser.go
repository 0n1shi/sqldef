// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const DEFERRABLE = 57512
const INITIALLY = 57513
const IMMEDIATE = 57514
const DEFERRED = 57515
const BEGIN = 57516
const START = 57517
const TRANSACTION = 57518
const COMMIT = 57519
const ROLLBACK = 57520
const BIT = 57521
const TINYINT = 57522
const SMALLINT = 57523
const SMALLSERIAL = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const SERIAL = 57528
const BIGINT = 57529
const BIGSERIAL = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const PRECISION = 57534
const FLOAT_TYPE = 57535
const DECIMAL = 57536
const NUMERIC = 57537
const SMALLMONEY = 57538
const MONEY = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const DATETIMEOFFSET = 57544
const DATETIME2 = 57545
const SMALLDATETIME = 57546
const CHAR = 57547
const VARCHAR = 57548
const VARYING = 57549
const BOOL = 57550
const CHARACTER = 57551
const VARBINARY = 57552
const NCHAR = 57553
const NVARCHAR = 57554
const NTEXT = 57555
const UUID = 57556
const TEXT = 57557
const TINYTEXT = 57558
const MEDIUMTEXT = 57559
const LONGTEXT = 57560
const CITEXT = 57561
const BLOB = 57562
const TINYBLOB = 57563
const MEDIUMBLOB = 57564
const LONGBLOB = 57565
const JSON = 57566
const JSONB = 57567
const ENUM = 57568
const GEOMETRY = 57569
const POINT = 57570
const LINESTRING = 57571
const POLYGON = 57572
const GEOMETRYCOLLECTION = 57573
const MULTIPOINT = 57574
const MULTILINESTRING = 57575
const MULTIPOLYGON = 57576
const VARIADIC = 57577
const ARRAY = 57578
const NOW = 57579
const GETDATE = 57580
const BPCHAR = 57581
const TEXT_PATTERN_OPS = 57582
const NULLX = 57583
const AUTO_INCREMENT = 57584
const APPROXNUM = 57585
const SIGNED = 57586
const UNSIGNED = 57587
const ZEROFILL = 57588
const ZONE = 57589
const AUTOINCREMENT = 57590
const DATABASES = 57591
const TABLES = 57592
const VITESS_KEYSPACES = 57593
const VITESS_SHARDS = 57594
const VITESS_TABLETS = 57595
const VSCHEMA_TABLES = 57596
const EXTENDED = 57597
const FULL = 57598
const PROCESSLIST = 57599
const NAMES = 57600
const CHARSET = 57601
const GLOBAL = 57602
const SESSION = 57603
const ISOLATION = 57604
const LEVEL = 57605
const READ = 57606
const WRITE = 57607
const ONLY = 57608
const REPEATABLE = 57609
const COMMITTED = 57610
const UNCOMMITTED = 57611
const SERIALIZABLE = 57612
const NEW = 57613
const CURRENT_TIMESTAMP = 57614
const DATABASE = 57615
const CURRENT_DATE = 57616
const CURRENT_TIME = 57617
const LOCALTIME = 57618
const LOCALTIMESTAMP = 57619
const UTC_DATE = 57620
const UTC_TIME = 57621
const UTC_TIMESTAMP = 57622
const REPLACE = 57623
const CONVERT = 57624
const CAST = 57625
const SUBSTR = 57626
const SUBSTRING = 57627
const GROUP_CONCAT = 57628
const SEPARATOR = 57629
const INHERIT = 57630
const MATCH = 57631
const AGAINST = 57632
const BOOLEAN = 57633
const LANGUAGE = 57634
const WITH = 57635
const WITHOUT = 57636
const PARSER = 57637
const QUERY = 57638
const EXPANSION = 57639
const UNUSED = 57640
const VIRTUAL = 57641
const STORED = 57642
const GENERATED = 57643
const ALWAYS = 57644
const IDENTITY = 57645
const SEQUENCE = 57646
const INCREMENT = 57647
const MINVALUE = 57648
const CACHE = 57649
const CYCLE = 57650
const OWNED = 57651
const NONE = 57652
const CLUSTERED = 57653
const NONCLUSTERED = 57654
const REPLICATION = 57655
const INCLUDE = 57656
const HOLDLOCK = 57657
const NOLOCK = 57658
const NOWAIT = 57659
const PAGLOCK = 57660
const ROWLOCK = 57661
const TABLELOCK = 57662
const TYPECAST = 57663
const CHECK = 57664

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 139,
	-2, 129,
	-1, 36,
	156, 466,
	157, 466,
	-2, 456,
	-1, 272,
	110, 813,
	-2, 809,
	-1, 273,
	110, 814,
	-2, 810,
	-1, 315,
	253, 823,
	-2, 709,
	-1, 347,
	81, 1036,
	-2, 81,
	-1, 348,
	81, 987,
	-2, 82,
	-1, 354,
	81, 966,
	-2, 780,
	-1, 356,
	81, 1010,
	-2, 782,
	-1, 602,
	253, 823,
	-2, 494,
	-1, 649,
	253, 823,
	-2, 494,
	-1, 678,
	52, 41,
	54, 41,
	-2, 43,
	-1, 839,
	110, 816,
	-2, 812,
	-1, 1074,
	253, 823,
	-2, 494,
	-1, 1090,
	5, 28,
	-2, 611,
	-1, 1115,
	5, 27,
	-2, 753,
	-1, 1219,
	5, 27,
	-2, 87,
	-1, 1453,
	5, 28,
	-2, 754,
	-1, 1552,
	5, 27,
	-2, 756,
	-1, 1720,
	5, 28,
	-2, 757,
	-1, 1867,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 17547

var yyAct = [...]int{
	273, 1823, 1608, 1567, 1651, 1020, 1694, 1710, 534, 1152,
	21, 1564, 604, 3, 1459, 1824, 905, 1118, 769, 288,
	1482, 1601, 268, 605, 1674, 251, 1131, 1463, 305, 1312,
	815, 486, 339, 1155, 53, 90, 277, 1342, 90, 923,
	943, 270, 1313, 948, 1309, 1221, 276, 672, 1015, 1177,
	670, 954, 1028, 1084, 1029, 245, 1183, 947, 1281, 906,
	250, 873, 90, 90, 358, 969, 255, 87, 1136, 358,
	1727, 1602, 358, 358, 90, 1285, 998, 353, 876, 90,
	280, 90, 864, 1079, 66, 775, 1207, 90, 1010, 964,
	688, 1539, 841, 875, 484, 342, 893, 1123, 687, 246,
	247, 248, 249, 540, 902, 1771, 496, 346, 659, 333,
	546, 500, 332, 501, 275, 674, 708, 703, 628, 508,
	1061, 334, 554, 260, 576, 577, 569, 570, 571, 572,
	573, 574, 575, 568, 1280, 562, 578, 565, 264, 1478,
	343, 1191, 337, 580, 581, 582, 583, 584, 585, 586,
	533, 563, 564, 561, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 1443, 533, 578, 1642,
	567, 566, 576, 577, 569, 570, 571, 572, 573, 574,
	575, 568, 985, 872, 578, 1847, 982, 567, 566, 576,
	577, 569, 570, 571, 572, 573, 574, 575, 568, 521,
	341, 578, 52, 1816, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 1349, 1444, 578, 578,
	1368, 1276, 1282, 1757, 90, 1355, 487, 488, 358, 358,
	358, 358, 1441, 358, 1488, 1356, 1440, 533, 1496, 1175,
	358, 567, 566, 576, 577, 569, 570, 571, 572, 573,
	574, 575, 568, 619, 1877, 578, 510, 571, 572, 573,
	574, 575, 568, 349, 1790, 578, 1872, 358, 1809, 543,
	984, 1745, 1746, 1718, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 1655, 1656, 578, 542,
	567, 566, 576, 577, 569, 570, 571, 572, 573, 574,
	575, 568, 1211, 1212, 578, 567, 566, 576, 577, 569,
	570, 571, 572, 573, 574, 575, 568, 568, 1802, 578,
	578, 1858, 1021, 593, 594, 595, 596, 597, 598, 599,
	1762, 1132, 90, 1464, 1465, 1466, 1467, 1468, 1469, 90,
	90, 90, 1789, 1717, 1304, 358, 1742, 1447, 498, 1336,
	1337, 1335, 358, 937, 938, 589, 569, 570, 571, 572,
	573, 574, 575, 568, 654, 689, 578, 690, 579, 85,
	81, 82, 83, 678, 936, 567, 566, 576, 577, 569,
	570, 571, 572, 573, 574, 575, 568, 1190, 1643, 578,
	806, 529, 1144, 532, 519, 1143, 1193, 807, 1145, 1515,
	579, 567, 566, 576, 577, 569, 570, 571, 572, 573,
	574, 575, 568, 987, 1514, 578, 579, 487, 488, 337,
	1747, 1187, 1279, 1189, 1188, 1080, 601, 1541, 514, 1350,
	999, 1682, 1538, 579, 1081, 989, 897, 1388, 1011, 1387,
	1436, 1434, 633, 634, 244, 1808, 1875, 1810, 1780, 1854,
	579, 579, 1870, 1869, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 989, 1828, 578, 1855,
	566, 576, 577, 569, 570, 571, 572, 573, 574, 575,
	568, 1821, 1689, 578, 1610, 685, 358, 579, 1583, 303,
	90, 1675, 516, 1871, 518, 1699, 1358, 579, 90, 1856,
	90, 358, 1711, 90, 1259, 1497, 90, 1398, 1399, 1532,
	90, 1751, 358, 358, 358, 358, 358, 358, 358, 358,
	579, 903, 768, 515, 517, 1753, 358, 358, 1836, 1712,
	781, 90, 782, 1549, 1490, 786, 579, 1489, 789, 1424,
	84, 679, 1174, 1404, 349, 1656, 358, 525, 526, 1423,
	90, 579, 579, 352, 777, 1426, 358, 1748, 490, 1405,
	1169, 494, 495, 808, 1427, 1168, 1157, 1348, 818, 1801,
	1414, 1633, 621, 622, 623, 624, 625, 626, 627, 1425,
	777, 1827, 827, 76, 503, 965, 776, 794, 924, 926,
	842, 701, 492, 79, 1012, 1485, 1523, 999, 579, 785,
	358, 966, 840, 1716, 358, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	881, 579, 489, 522, 523, 524, 78, 527, 79, 1135,
	792, 70, 74, 499, 531, 1480, 839, 992, 1134, 1480,
	1133, 767, 843, 1700, 1701, 1702, 71, 579, 75, 886,
	889, 1162, 223, 1256, 90, 895, 80, 90, 90, 90,
	90, 90, 513, 925, 72, 73, 68, 1260, 820, 90,
	591, 592, 90, 1862, 1683, 1056, 90, 1647, 835, 837,
	1456, 90, 90, 1268, 881, 358, 904, 1749, 1750, 1752,
	1754, 1755, 907, 358, 1098, 1073, 633, 634, 867, 358,
	579, 813, 882, 883, 692, 810, 869, 870, 890, 778,
	779, 899, 603, 558, 932, 579, 965, 352, 352, 352,
	352, 57, 352, 1483, 1484, 1486, 891, 509, 553, 352,
	1160, 931, 966, 945, 944, 778, 779, 337, 337, 337,
	337, 337, 898, 551, 900, 901, 59, 60, 61, 62,
	63, 1257, 337, 1255, 1382, 1057, 556, 1667, 838, 553,
	1666, 337, 1264, 485, 1665, 1664, 908, 1258, 358, 911,
	1663, 533, 358, 1662, 358, 90, 920, 90, 1661, 909,
	910, 358, 912, 929, 90, 934, 90, 552, 551, 90,
	358, 928, 933, 1659, 952, 965, 1395, 1866, 1000, 1001,
	1002, 1003, 69, 877, 553, 1383, 1146, 1027, 848, 1033,
	1094, 966, 1093, 1017, 552, 551, 1051, 1121, 1052, 816,
	817, 1053, 846, 847, 845, 982, 691, 1063, 965, 552,
	551, 553, 1306, 960, 352, 959, 1568, 961, 962, 1263,
	894, 694, 1105, 963, 966, 1868, 553, 971, 988, 1570,
	1013, 1014, 990, 991, 993, 994, 995, 894, 996, 997,
	1154, 978, 772, 967, 1677, 552, 551, 1582, 491, 968,
	548, 1803, 1585, 50, 842, 1006, 1007, 1008, 502, 1009,
	552, 551, 553, 844, 349, 1728, 1034, 1165, 1076, 1077,
	1078, 839, 942, 1095, 1154, 784, 1839, 553, 949, 831,
	833, 834, 1246, 1838, 1729, 832, 795, 796, 797, 798,
	799, 800, 801, 802, 1804, 1115, 1807, 1569, 1062, 1069,
	803, 804, 974, 1581, 970, 979, 843, 77, 358, 552,
	551, 90, 976, 975, 1806, 1164, 1308, 819, 1075, 493,
	1805, 552, 551, 497, 1153, 1154, 553, 1138, 358, 1140,
	1194, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 553, 1730,
	358, 1508, 505, 506, 507, 1194, 1154, 1247, 1087, 1726,
	1595, 358, 1249, 1242, 1243, 707, 1250, 1245, 1244, 544,
	90, 1139, 1252, 1248, 1517, 1102, 629, 1170, 331, 1104,
	352, 1149, 1516, 1251, 1070, 1071, 1072, 1364, 878, 880,
	1241, 352, 352, 352, 352, 352, 352, 352, 352, 1128,
	1216, 337, 1172, 838, 896, 352, 352, 1507, 1214, 1660,
	631, 1194, 358, 865, 1548, 866, 1141, 1512, 1085, 1185,
	1416, 1208, 1219, 1171, 1657, 822, 1687, 1882, 533, 1201,
	1353, 1203, 1204, 1205, 1206, 556, 1556, 1864, 352, 1477,
	1857, 1158, 1159, 1161, 358, 972, 1352, 90, 90, 1477,
	1815, 973, 1477, 1797, 922, 90, 1351, 1195, 1196, 1163,
	1198, 1199, 1200, 1147, 358, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 1687, 1796, 1793, 1792, 871,
	1023, 1228, 1209, 352, 1566, 868, 632, 1269, 1210, 1213,
	791, 1215, 887, 887, 646, 630, 1785, 533, 887, 790,
	812, 635, 1477, 1782, 980, 773, 981, 358, 358, 1227,
	771, 1229, 1277, 1278, 1477, 1781, 1556, 1708, 1814, 1316,
	1311, 511, 1197, 1556, 1592, 977, 1274, 1305, 1299, 1300,
	682, 1302, 1303, 1314, 504, 887, 811, 949, 1681, 358,
	907, 358, 358, 1320, 1556, 533, 907, 1334, 1559, 1558,
	1275, 1556, 1557, 552, 551, 485, 1024, 1284, 1026, 1477,
	1476, 1298, 1680, 1333, 352, 1679, 839, 1297, 1600, 1321,
	553, 683, 352, 681, 1054, 1599, 1319, 647, 352, 1179,
	1180, 1181, 1332, 533, 1340, 1354, 1596, 1184, 1182, 301,
	302, 1455, 533, 1391, 1390, 1119, 1339, 294, 293, 296,
	297, 298, 299, 1385, 1386, 1509, 295, 300, 90, 358,
	1688, 1222, 1687, 1341, 1359, 1185, 90, 1499, 1365, 1385,
	1384, 358, 1357, 358, 1088, 533, 1376, 1377, 1367, 1379,
	1380, 1381, 358, 656, 533, 661, 664, 665, 666, 662,
	1392, 663, 667, 1375, 90, 1124, 1125, 1018, 1400, 1120,
	358, 352, 1082, 352, 879, 533, 1530, 1086, 1310, 358,
	707, 1119, 90, 1273, 1378, 1090, 1091, 1092, 23, 352,
	1402, 1401, 699, 698, 1101, 54, 1411, 1407, 1418, 1107,
	23, 1568, 1108, 1109, 1110, 1111, 1409, 1226, 1301, 1271,
	879, 656, 1113, 352, 1570, 1114, 1225, 1120, 1100, 1226,
	1412, 1097, 1415, 930, 23, 681, 1769, 1551, 1421, 1451,
	1477, 656, 1419, 655, 1088, 50, 358, 1370, 1372, 358,
	358, 358, 90, 358, 1422, 1519, 1518, 50, 50, 1432,
	358, 1498, 1088, 1470, 1471, 1472, 1458, 656, 949, 1119,
	949, 1099, 337, 1394, 1096, 1389, 1450, 1148, 935, 1475,
	1088, 50, 358, 684, 814, 1873, 1813, 1487, 1493, 358,
	1787, 1236, 1569, 1685, 257, 1366, 1495, 1684, 1671, 1473,
	1179, 1180, 1181, 1149, 1670, 1186, 1190, 1492, 1184, 1182,
	301, 302, 1630, 1629, 1594, 358, 358, 1533, 989, 1016,
	1374, 1373, 1371, 1361, 358, 1327, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1185, 1325, 358, 1500, 1137, 1011, 1510,
	1187, 50, 1189, 1188, 1217, 1218, 1429, 1430, 1176, 1431,
	1151, 1124, 1125, 1433, 1005, 1435, 1004, 352, 65, 1522,
	1521, 1237, 1233, 1230, 770, 1238, 1235, 1234, 1261, 1156,
	1652, 75, 1676, 1520, 1310, 1127, 358, 358, 788, 774,
	1166, 1511, 1239, 1513, 1286, 530, 826, 1552, 1273, 1232,
	661, 664, 665, 666, 662, 1130, 663, 667, 358, 1129,
	1314, 1283, 1542, 1543, 1481, 1544, 1545, 1546, 917, 914,
	358, 915, 1580, 918, 1550, 913, 916, 1584, 1288, 919,
	1833, 665, 666, 261, 262, 1788, 1267, 1540, 1058, 1579,
	1831, 352, 547, 1563, 1068, 1578, 1067, 535, 1202, 697,
	358, 90, 1588, 1586, 358, 545, 512, 1822, 1363, 536,
	1331, 1449, 816, 817, 358, 1534, 1025, 787, 1603, 949,
	1362, 1621, 1224, 352, 1019, 780, 1612, 669, 1631, 1654,
	258, 259, 1597, 1607, 1598, 547, 1525, 358, 1526, 1527,
	1528, 1848, 1066, 352, 1529, 1397, 1646, 1347, 1290, 1653,
	1065, 1524, 1295, 252, 1289, 1811, 1186, 1190, 1636, 1287,
	1314, 1645, 253, 54, 1635, 1293, 1537, 1649, 352, 1120,
	1650, 1030, 1031, 1032, 1222, 949, 1777, 1776, 1291, 1292,
	1775, 1774, 549, 887, 1744, 1743, 1318, 1137, 1669, 887,
	1668, 1187, 1644, 1189, 1188, 1346, 1345, 1167, 1294, 1296,
	809, 56, 1621, 358, 358, 358, 358, 1690, 1617, 8,
	358, 358, 1614, 7, 1615, 6, 1613, 5, 352, 58,
	352, 1343, 1231, 1403, 680, 51, 1, 1083, 358, 600,
	1703, 1705, 292, 358, 1853, 1826, 1691, 358, 266, 1724,
	1714, 1719, 278, 1462, 1770, 1692, 1765, 1611, 1420, 1704,
	1704, 358, 358, 1738, 1698, 1678, 1173, 306, 47, 1428,
	67, 907, 1761, 1686, 358, 1396, 358, 1223, 358, 1736,
	1737, 1437, 1438, 1439, 358, 1240, 1442, 1740, 1022, 358,
	1621, 1706, 1707, 1220, 1603, 1766, 1759, 1039, 1393, 1452,
	1453, 1454, 358, 1457, 1621, 1709, 1723, 1768, 1565, 1778,
	1406, 1479, 1408, 957, 946, 47, 483, 1783, 64, 1658,
	958, 1410, 956, 256, 1731, 1732, 1733, 1734, 1735, 338,
	955, 953, 700, 1739, 983, 1192, 1794, 1795, 986, 1413,
	706, 704, 705, 702, 709, 231, 344, 1760, 352, 668,
	693, 550, 1254, 1506, 1799, 1800, 1798, 1253, 1035, 1262,
	358, 805, 1055, 528, 1812, 233, 1819, 1818, 1621, 587,
	1064, 1142, 1825, 1817, 351, 1756, 1317, 539, 358, 1829,
	1621, 1621, 358, 1830, 1634, 1536, 1103, 1835, 616, 892,
	279, 830, 291, 290, 289, 821, 1112, 560, 336, 1837,
	652, 660, 90, 658, 358, 1460, 657, 1126, 1460, 1460,
	1460, 358, 1474, 358, 1842, 1122, 335, 1845, 1843, 352,
	1270, 1446, 1844, 1641, 1621, 825, 1621, 90, 25, 1851,
	1547, 1851, 1861, 55, 263, 19, 18, 1863, 17, 20,
	16, 1460, 15, 14, 29, 13, 1865, 12, 1501, 1832,
	11, 1867, 10, 358, 1560, 1561, 1562, 9, 1620, 1860,
	1619, 1618, 1616, 4, 358, 254, 1878, 1879, 22, 2,
	0, 0, 0, 1758, 352, 352, 1621, 0, 1591, 0,
	1621, 0, 0, 1531, 0, 1851, 0, 0, 0, 0,
	0, 0, 0, 0, 1535, 520, 520, 520, 520, 0,
	520, 537, 541, 0, 0, 0, 0, 520, 1880, 0,
	0, 1045, 0, 0, 0, 0, 0, 0, 559, 0,
	0, 0, 0, 0, 47, 1044, 1637, 1638, 1639, 1640,
	0, 0, 0, 0, 0, 1554, 1555, 0, 0, 588,
	0, 0, 590, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1049, 0, 0, 606, 0, 1343, 0, 0,
	0, 1043, 0, 0, 617, 0, 538, 0, 0, 1587,
	0, 602, 0, 1672, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 0, 618, 620, 620, 620, 620, 620,
	620, 620, 620, 0, 648, 649, 650, 651, 1604, 1606,
	0, 88, 0, 1609, 243, 0, 671, 0, 0, 0,
	1040, 1037, 1038, 1460, 1036, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1715, 267, 0, 88, 88,
	1720, 0, 0, 0, 0, 0, 1648, 0, 0, 0,
	88, 0, 0, 1047, 1050, 88, 0, 88, 0, 0,
	0, 0, 1874, 88, 0, 0, 0, 1741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 0, 48, 26, 27, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1622, 0, 0, 0, 0, 0,
	0, 0, 0, 1784, 28, 23, 24, 48, 26, 27,
	0, 0, 1693, 1695, 1696, 1697, 0, 0, 0, 1343,
	1343, 0, 0, 0, 0, 42, 0, 0, 0, 28,
	0, 0, 1042, 0, 887, 0, 0, 1721, 0, 0,
	0, 0, 1722, 0, 0, 0, 1725, 0, 37, 0,
	0, 0, 50, 0, 1883, 0, 0, 0, 0, 0,
	1609, 1343, 0, 0, 0, 1041, 0, 0, 0, 0,
	0, 0, 0, 352, 1604, 1343, 0, 1763, 520, 0,
	0, 0, 0, 707, 0, 0, 0, 0, 1773, 520,
	520, 520, 520, 520, 520, 520, 520, 0, 0, 1628,
	88, 1786, 0, 520, 520, 1046, 0, 0, 0, 1627,
	828, 829, 30, 31, 33, 32, 35, 0, 0, 1178,
	0, 1048, 0, 0, 1179, 1180, 1181, 257, 1859, 48,
	26, 27, 1184, 1182, 301, 302, 0, 36, 43, 44,
	0, 1622, 45, 46, 34, 0, 0, 0, 0, 0,
	0, 28, 0, 0, 1623, 1624, 1626, 0, 0, 1820,
	1625, 0, 0, 0, 0, 0, 606, 0, 47, 884,
	885, 0, 0, 0, 1884, 1885, 0, 1343, 0, 0,
	0, 1834, 0, 0, 0, 607, 0, 0, 0, 0,
	38, 39, 0, 40, 41, 0, 0, 0, 0, 0,
	0, 1852, 0, 1460, 0, 0, 0, 0, 88, 0,
	707, 0, 1849, 0, 0, 88, 676, 88, 257, 0,
	48, 26, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1622, 0, 338, 338, 338, 338, 338, 0,
	0, 0, 28, 0, 0, 0, 1628, 0, 0, 671,
	941, 927, 352, 0, 0, 0, 1627, 0, 338, 0,
	0, 0, 0, 1609, 0, 0, 0, 0, 0, 0,
	0, 257, 49, 48, 26, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 1622, 48, 26, 27, 0,
	0, 0, 1850, 0, 0, 28, 0, 49, 1622, 0,
	0, 1623, 1624, 1626, 0, 0, 0, 1625, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1186, 1190, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1628, 257, 0,
	48, 26, 27, 0, 0, 0, 0, 1627, 0, 520,
	0, 520, 1622, 229, 0, 1187, 0, 1189, 1188, 0,
	0, 0, 28, 0, 0, 0, 88, 520, 0, 0,
	1059, 1060, 0, 541, 88, 0, 88, 239, 0, 88,
	0, 0, 88, 0, 0, 0, 793, 0, 0, 0,
	1628, 0, 1623, 1624, 1626, 0, 0, 0, 1625, 0,
	1627, 0, 0, 1628, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 1627, 0, 0, 1074, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 88, 0, 224, 0,
	0, 0, 0, 0, 226, 793, 0, 0, 1089, 0,
	0, 232, 228, 0, 0, 1623, 1624, 1626, 0, 0,
	0, 1625, 0, 1106, 0, 0, 1779, 1628, 1623, 1624,
	1626, 0, 0, 0, 1625, 0, 0, 1627, 0, 1767,
	0, 0, 230, 0, 0, 0, 234, 0, 0, 267,
	1116, 1117, 0, 0, 0, 267, 267, 0, 0, 888,
	888, 267, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 0,
	49, 0, 1623, 1624, 1626, 0, 0, 0, 1625, 0,
	0, 0, 0, 0, 0, 267, 267, 267, 267, 0,
	88, 0, 888, 88, 88, 88, 88, 88, 0, 0,
	0, 0, 0, 0, 0, 921, 0, 225, 88, 0,
	0, 0, 676, 0, 0, 0, 0, 88, 88, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 235,
	236, 237, 238, 242, 0, 0, 0, 47, 241, 240,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 88, 0, 0, 0, 0, 0, 0,
	88, 0, 88, 0, 1307, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1322,
	1323, 0, 0, 1324, 0, 0, 1326, 0, 0, 0,
	793, 0, 1315, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 1338, 0, 0, 0, 0,
	0, 1328, 1329, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1360, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1369, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 338,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1448, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 0, 0, 0,
	0, 0, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1494,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 1265, 1266, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 793, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 1553, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1589, 0, 0, 0, 0, 1593, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1632, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1315,
	88, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 1673,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 602, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1713, 606, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 676, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1764, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1791, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1846, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1605, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1876,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1605, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 469,
	459, 0, 420, 471, 390, 408, 479, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 477, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 472, 406, 442, 473, 0, 0, 0,
	357, 0, 950, 951, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 482, 445, 362, 439, 0, 368,
	371, 478, 466, 397, 398, 1150, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 435, 0, 1841, 0,
	375, 369, 0, 421, 0, 0, 0, 377, 0, 395,
	452, 0, 359, 457, 464, 418, 204, 467, 415, 414,
	162, 0, 109, 88, 183, 121, 407, 132, 449, 480,
	470, 425, 462, 392, 401, 111, 399, 169, 156, 195,
	434, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 367, 360,
	396, 455, 458, 382, 444, 372, 403, 450, 404, 426,
	387, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 365, 0, 178, 197, 214, 215, 366,
	386, 465, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 443, 170, 108,
	196, 176, 0, 381, 385, 379, 380, 430, 431, 474,
	475, 476, 453, 376, 0, 383, 384, 0, 460, 126,
	433, 92, 100, 133, 481, 211, 0, 164, 119, 198,
	0, 0, 409, 361, 413, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 171, 417, 412, 438, 440, 448,
	456, 469, 459, 105, 420, 471, 390, 408, 479, 410,
	411, 446, 370, 429, 155, 405, 388, 93, 393, 363,
	400, 364, 391, 422, 117, 389, 461, 432, 131, 477,
	134, 437, 0, 177, 143, 0, 0, 424, 463, 427,
	454, 419, 447, 378, 436, 472, 406, 442, 473, 0,
	0, 0, 357, 0, 950, 951, 0, 0, 0, 0,
	0, 106, 0, 441, 468, 402, 482, 445, 362, 439,
	0, 368, 371, 478, 466, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 423, 428, 451, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 435, 0,
	0, 0, 375, 369, 0, 421, 0, 0, 0, 377,
	0, 395, 452, 0, 359, 457, 464, 418, 204, 467,
	415, 414, 162, 0, 109, 0, 183, 121, 407, 132,
	449, 480, 470, 425, 462, 392, 401, 111, 399, 169,
	156, 195, 434, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	367, 360, 396, 455, 458, 382, 444, 372, 403, 450,
	404, 426, 387, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 365, 0, 178, 197, 214,
	215, 366, 386, 465, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 443,
	170, 108, 196, 176, 0, 381, 385, 379, 380, 430,
	431, 474, 475, 476, 453, 376, 0, 383, 384, 0,
	460, 126, 433, 92, 100, 133, 481, 211, 0, 164,
	119, 198, 0, 0, 409, 361, 413, 0, 0, 0,
	0, 0, 0, 0, 373, 374, 171, 417, 412, 438,
	440, 448, 456, 469, 459, 105, 420, 471, 390, 408,
	479, 410, 411, 446, 370, 429, 155, 405, 388, 93,
	393, 363, 400, 364, 391, 422, 117, 389, 461, 432,
	131, 477, 134, 437, 0, 177, 143, 0, 0, 424,
	463, 427, 454, 419, 447, 378, 436, 472, 406, 442,
	473, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 441, 468, 402, 482, 445,
	362, 439, 0, 368, 371, 478, 466, 397, 398, 0,
	0, 0, 0, 0, 0, 0, 423, 428, 451, 416,
	0, 0, 0, 0, 0, 0, 1272, 0, 394, 0,
	435, 0, 0, 0, 375, 369, 0, 421, 0, 0,
	0, 377, 0, 395, 452, 0, 359, 457, 464, 418,
	204, 467, 415, 414, 162, 0, 109, 0, 183, 121,
	407, 132, 449, 480, 470, 425, 462, 392, 401, 111,
	399, 169, 156, 195, 434, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 367, 360, 396, 455, 458, 382, 444, 372,
	403, 450, 404, 426, 387, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 365, 0, 178,
	197, 214, 215, 366, 386, 465, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 443, 170, 108, 196, 176, 0, 381, 385, 379,
	380, 430, 431, 474, 475, 476, 453, 376, 0, 383,
	384, 0, 460, 126, 433, 92, 100, 133, 481, 211,
	0, 164, 119, 198, 0, 0, 409, 361, 413, 0,
	0, 0, 0, 0, 0, 0, 373, 374, 171, 417,
	412, 438, 440, 448, 456, 469, 459, 105, 420, 471,
	390, 408, 479, 410, 411, 446, 370, 429, 155, 405,
	388, 93, 393, 363, 400, 364, 391, 422, 117, 389,
	461, 432, 131, 477, 134, 437, 0, 177, 143, 0,
	0, 424, 463, 427, 454, 419, 447, 378, 436, 472,
	406, 442, 473, 50, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 441, 468, 402,
	482, 445, 362, 439, 0, 368, 371, 478, 466, 397,
	398, 0, 0, 0, 0, 0, 0, 0, 423, 428,
	451, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 0, 435, 0, 0, 0, 375, 369, 0, 421,
	0, 0, 0, 377, 0, 395, 452, 0, 359, 457,
	464, 418, 204, 467, 415, 414, 162, 0, 109, 0,
	183, 121, 407, 132, 449, 480, 470, 425, 462, 392,
	401, 111, 399, 169, 156, 195, 434, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 367, 360, 396, 455, 458, 382,
	444, 372, 403, 450, 404, 426, 387, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 365,
	0, 178, 197, 214, 215, 366, 386, 465, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 443, 170, 108, 196, 176, 0, 381,
	385, 379, 380, 430, 431, 474, 475, 476, 453, 376,
	0, 383, 384, 0, 460, 126, 433, 92, 100, 133,
	481, 211, 0, 164, 119, 198, 0, 0, 409, 361,
	413, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	171, 417, 412, 438, 440, 448, 456, 469, 459, 105,
	420, 471, 390, 408, 479, 410, 411, 446, 370, 429,
	155, 405, 388, 93, 393, 363, 400, 364, 391, 422,
	117, 389, 461, 432, 131, 477, 134, 437, 0, 177,
	143, 0, 0, 424, 463, 427, 454, 419, 447, 378,
	436, 472, 406, 442, 473, 0, 0, 0, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 441,
	468, 402, 482, 445, 362, 439, 0, 368, 371, 478,
	466, 397, 398, 0, 0, 0, 0, 0, 0, 0,
	423, 428, 451, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 0, 435, 0, 0, 0, 375, 369,
	0, 421, 0, 0, 0, 377, 0, 395, 452, 0,
	359, 457, 464, 418, 204, 467, 415, 414, 162, 0,
	109, 0, 183, 121, 407, 132, 449, 480, 470, 425,
	462, 392, 401, 111, 399, 169, 156, 195, 434, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 367, 360, 396, 455,
	458, 382, 444, 372, 403, 450, 404, 426, 387, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 355, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 365, 0, 178, 197, 214, 215, 366, 386, 465,
	207, 208, 209, 210, 0, 0, 0, 356, 354, 125,
	174, 129, 136, 165, 212, 443, 170, 108, 196, 176,
	350, 381, 385, 379, 380, 430, 431, 474, 475, 476,
	453, 376, 0, 383, 384, 0, 460, 126, 433, 92,
	100, 133, 481, 211, 0, 164, 119, 198, 0, 0,
	409, 361, 413, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 171, 417, 412, 438, 440, 448, 456, 469,
	459, 105, 420, 471, 390, 408, 479, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 477, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 472, 406, 442, 473, 0, 0, 0,
	272, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 482, 445, 362, 439, 0, 368,
	371, 478, 466, 397, 398, 0, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 836, 0, 394, 0, 435, 0, 0, 0,
	375, 369, 0, 421, 0, 0, 0, 377, 0, 395,
	452, 0, 359, 457, 464, 418, 204, 467, 415, 414,
	162, 0, 109, 0, 183, 121, 407, 132, 449, 480,
	470, 425, 462, 392, 401, 111, 399, 169, 156, 195,
	434, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 367, 360,
	396, 455, 458, 382, 444, 372, 403, 450, 404, 426,
	387, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 365, 0, 178, 197, 214, 215, 366,
	386, 465, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 443, 170, 108,
	196, 176, 0, 381, 385, 379, 380, 430, 431, 474,
	475, 476, 453, 376, 0, 383, 384, 0, 460, 126,
	433, 92, 100, 133, 481, 211, 0, 164, 119, 198,
	0, 0, 409, 361, 413, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 171, 417, 412, 438, 440, 448,
	456, 469, 459, 105, 420, 471, 390, 408, 479, 410,
	411, 446, 370, 429, 155, 405, 388, 93, 393, 363,
	400, 364, 391, 422, 117, 389, 461, 432, 131, 477,
	134, 437, 0, 177, 143, 0, 0, 424, 463, 427,
	454, 419, 447, 378, 436, 472, 406, 442, 473, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 441, 468, 402, 482, 445, 362, 439,
	0, 368, 371, 478, 466, 397, 398, 0, 0, 0,
	0, 0, 0, 0, 423, 428, 451, 416, 0, 0,
	0, 0, 0, 0, 0, 0, 394, 0, 435, 0,
	0, 0, 375, 369, 0, 421, 0, 0, 0, 377,
	0, 395, 452, 0, 359, 457, 464, 418, 204, 467,
	415, 414, 162, 0, 109, 0, 183, 121, 407, 132,
	449, 480, 470, 425, 462, 392, 401, 111, 399, 169,
	156, 195, 434, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	367, 360, 396, 455, 458, 382, 444, 372, 403, 450,
	404, 426, 387, 0, 0, 0, 0, 94, 184, 686,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 355, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 365, 0, 178, 197, 214,
	215, 366, 386, 465, 207, 208, 209, 210, 0, 0,
	0, 356, 354, 125, 174, 129, 136, 165, 212, 443,
	170, 108, 196, 176, 350, 381, 385, 379, 380, 430,
	431, 474, 475, 476, 453, 376, 0, 383, 384, 0,
	460, 126, 433, 92, 100, 133, 481, 211, 0, 164,
	119, 198, 0, 0, 409, 361, 413, 0, 0, 0,
	0, 0, 0, 0, 373, 374, 171, 417, 412, 438,
	440, 448, 456, 469, 459, 105, 420, 471, 390, 408,
	479, 410, 411, 446, 370, 429, 155, 405, 388, 93,
	393, 363, 400, 364, 391, 422, 117, 389, 461, 432,
	131, 477, 134, 437, 0, 177, 143, 0, 0, 424,
	463, 427, 454, 419, 447, 378, 436, 472, 406, 442,
	473, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 441, 468, 402, 482, 445,
	362, 439, 0, 368, 371, 478, 466, 397, 398, 0,
	0, 0, 0, 0, 0, 0, 423, 428, 451, 416,
	0, 0, 0, 0, 0, 0, 0, 0, 394, 0,
	435, 0, 0, 0, 375, 369, 0, 421, 0, 0,
	0, 377, 0, 395, 452, 0, 359, 457, 464, 418,
	204, 467, 415, 414, 162, 0, 109, 0, 183, 121,
	407, 132, 449, 480, 470, 425, 462, 392, 401, 111,
	399, 169, 156, 195, 434, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 367, 360, 396, 455, 458, 382, 444, 372,
	403, 450, 404, 426, 387, 0, 0, 0, 0, 94,
	184, 345, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 355, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 365, 0, 178,
	197, 214, 215, 366, 386, 465, 207, 208, 209, 210,
	0, 0, 0, 356, 354, 348, 347, 129, 136, 165,
	212, 443, 170, 108, 196, 176, 350, 381, 385, 379,
	380, 430, 431, 474, 475, 476, 453, 376, 0, 383,
	384, 0, 460, 126, 433, 92, 100, 133, 481, 211,
	0, 164, 119, 198, 0, 0, 409, 361, 413, 0,
	0, 0, 0, 0, 0, 0, 373, 374, 171, 417,
	412, 438, 440, 448, 456, 469, 459, 105, 420, 471,
	390, 408, 479, 410, 411, 446, 370, 429, 155, 405,
	388, 93, 393, 363, 400, 364, 391, 422, 117, 389,
	461, 432, 131, 477, 134, 437, 0, 177, 143, 0,
	0, 424, 463, 427, 454, 419, 447, 378, 436, 472,
	406, 442, 473, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 441, 468, 402,
	482, 445, 362, 439, 0, 368, 371, 478, 466, 397,
	398, 0, 0, 0, 0, 0, 0, 0, 423, 428,
	451, 416, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 0, 435, 0, 0, 0, 375, 369, 0, 421,
	0, 0, 0, 377, 0, 395, 452, 0, 359, 457,
	464, 418, 204, 467, 415, 414, 162, 0, 109, 0,
	183, 121, 407, 132, 449, 480, 470, 425, 462, 392,
	401, 111, 399, 169, 156, 195, 434, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 367, 360, 396, 455, 458, 382,
	444, 372, 403, 450, 404, 426, 387, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 365,
	0, 178, 197, 214, 215, 366, 386, 465, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 443, 170, 108, 196, 176, 0, 381,
	385, 379, 380, 430, 431, 474, 475, 476, 453, 376,
	0, 383, 384, 0, 460, 126, 433, 92, 100, 133,
	481, 211, 0, 164, 119, 198, 0, 0, 409, 361,
	413, 0, 0, 0, 0, 0, 0, 0, 373, 374,
	171, 417, 412, 438, 440, 448, 456, 469, 459, 105,
	420, 471, 390, 408, 479, 410, 411, 446, 370, 429,
	155, 405, 388, 93, 393, 363, 400, 364, 391, 422,
	117, 389, 461, 432, 131, 477, 134, 437, 0, 177,
	143, 0, 0, 424, 463, 427, 454, 419, 447, 378,
	436, 472, 406, 442, 473, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 441,
	468, 402, 482, 445, 362, 439, 0, 368, 371, 478,
	466, 397, 398, 0, 0, 0, 0, 0, 0, 0,
	423, 428, 451, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 394, 0, 435, 0, 0, 0, 375, 369,
	0, 421, 0, 0, 0, 377, 0, 395, 452, 0,
	359, 457, 464, 418, 204, 467, 415, 414, 162, 0,
	109, 0, 183, 121, 407, 132, 449, 480, 470, 425,
	462, 392, 401, 111, 399, 169, 156, 195, 434, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 367, 360, 396, 455,
	458, 382, 444, 372, 403, 450, 404, 426, 387, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 365, 0, 178, 197, 214, 215, 366, 386, 465,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 443, 170, 108, 196, 176,
	0, 381, 385, 379, 380, 430, 431, 474, 475, 476,
	453, 376, 0, 383, 384, 0, 460, 126, 433, 92,
	100, 133, 481, 211, 0, 164, 119, 198, 0, 0,
	409, 361, 413, 0, 0, 0, 0, 0, 0, 0,
	373, 374, 171, 417, 412, 438, 440, 448, 456, 469,
	459, 105, 420, 471, 390, 408, 479, 410, 411, 446,
	370, 429, 155, 405, 388, 93, 393, 363, 400, 364,
	391, 422, 117, 389, 461, 432, 131, 477, 134, 437,
	0, 177, 143, 0, 0, 424, 463, 427, 454, 419,
	447, 378, 436, 472, 406, 442, 473, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 441, 468, 402, 482, 445, 362, 439, 0, 368,
	371, 478, 466, 397, 398, 0, 0, 0, 0, 0,
	0, 0, 423, 428, 451, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 435, 0, 0, 0,
	375, 369, 0, 421, 0, 0, 0, 377, 0, 395,
	452, 0, 359, 457, 464, 418, 204, 467, 415, 414,
	162, 0, 109, 0, 183, 121, 407, 132, 449, 480,
	470, 425, 462, 392, 401, 111, 399, 169, 156, 195,
	434, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 367, 360,
	396, 455, 458, 382, 444, 372, 403, 450, 404, 426,
	387, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 365, 0, 178, 197, 214, 215, 366,
	386, 465, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 443, 170, 108,
	196, 176, 0, 381, 385, 379, 380, 430, 431, 474,
	475, 476, 453, 376, 0, 383, 384, 0, 460, 126,
	433, 92, 100, 133, 481, 211, 0, 164, 119, 198,
	0, 0, 409, 361, 413, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 171, 417, 412, 438, 440, 448,
	456, 155, 0, 105, 93, 0, 0, 274, 0, 0,
	0, 117, 271, 0, 0, 131, 316, 134, 0, 0,
	177, 143, 0, 0, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 939, 0, 50, 0, 0, 272,
	294, 293, 296, 297, 298, 299, 0, 0, 106, 295,
	300, 301, 302, 940, 0, 0, 269, 286, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 328, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 326, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 330, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 304, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 309, 310, 311, 312, 314, 0, 126, 313,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 874, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 316, 134, 0, 0, 177,
	143, 325, 105, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 294,
	293, 296, 297, 298, 299, 0, 0, 106, 295, 300,
	301, 302, 0, 0, 0, 269, 286, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	265, 0, 0, 0, 328, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 326, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 330, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	304, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 309, 310, 311, 312, 314, 0, 126, 313, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 274, 0, 0, 0, 117,
	271, 0, 171, 131, 316, 134, 0, 0, 177, 143,
	325, 105, 0, 0, 307, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 533, 272, 294, 293,
	296, 297, 298, 299, 0, 0, 106, 295, 300, 301,
	302, 0, 0, 0, 269, 286, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 328, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 326, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 271,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 294, 293, 296,
	297, 298, 299, 0, 0, 106, 295, 300, 301, 302,
	0, 0, 0, 269, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 265, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 330, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 304, 317,
	327, 323, 324, 321, 322, 320, 319, 318, 329, 309,
	310, 311, 312, 314, 0, 126, 313, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 155, 0, 0, 93, 0, 0, 274, 325, 105,
	0, 117, 271, 0, 0, 131, 316, 134, 0, 0,
	177, 143, 0, 0, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 272,
	294, 293, 296, 297, 298, 299, 0, 0, 106, 295,
	300, 301, 302, 0, 0, 0, 269, 286, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 328, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 326, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 330, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 304, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 309, 310, 311, 312, 314, 0, 126, 313,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 316, 134, 0, 0, 177,
	143, 325, 105, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 294,
	293, 296, 297, 298, 299, 0, 0, 106, 295, 300,
	301, 302, 0, 0, 0, 269, 286, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 328, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 326, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 330, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	304, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 309, 310, 311, 312, 314, 0, 126, 313, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 316, 134, 0, 0, 177, 143,
	325, 105, 0, 0, 307, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 294, 293,
	296, 297, 298, 299, 0, 0, 106, 295, 300, 301,
	302, 0, 0, 0, 0, 286, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 328, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 326, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 1881, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 274, 0, 0, 0, 117, 0,
	0, 171, 131, 316, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 307, 308, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 294, 293, 296,
	297, 298, 299, 0, 0, 106, 295, 300, 301, 302,
	0, 0, 0, 0, 286, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 284, 0, 0,
	0, 0, 328, 0, 285, 0, 0, 281, 282, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 326, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 330, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 304, 317,
	327, 323, 324, 321, 322, 320, 319, 318, 329, 309,
	310, 311, 312, 314, 0, 126, 313, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 316, 134, 0, 0, 177, 143, 325, 105,
	0, 0, 307, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 294, 293, 296, 297,
	298, 299, 0, 0, 106, 295, 300, 301, 302, 0,
	0, 0, 0, 286, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 284, 0, 0, 0,
	0, 328, 0, 285, 0, 0, 281, 282, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 326, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 330, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 304, 317, 327,
	323, 324, 321, 322, 320, 319, 318, 329, 309, 310,
	311, 312, 314, 0, 126, 313, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 325, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	567, 566, 576, 577, 569, 570, 571, 572, 573, 574,
	575, 568, 0, 0, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 733, 171, 131,
	0, 134, 0, 0, 177, 143, 579, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 1772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 0, 760, 761, 160, 762, 763, 764,
	766, 765, 735, 736, 737, 741, 739, 738, 740, 712,
	714, 202, 710, 713, 719, 715, 716, 717, 731, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	732, 742, 743, 744, 745, 746, 747, 748, 749, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 711, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 555,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 557, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 552, 551, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 733, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 734, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 0, 760, 761, 160, 762, 763, 764, 766, 765,
	735, 736, 737, 741, 739, 738, 740, 712, 714, 202,
	710, 713, 719, 715, 716, 717, 731, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 732, 742,
	743, 744, 745, 746, 747, 748, 749, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 711, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 675, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 677, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	23, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 171, 0, 131, 0, 134, 0,
	0, 177, 143, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	23, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 171, 0, 131, 0, 134, 0,
	0, 177, 143, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 0, 823, 0, 0, 824, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 696, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 357, 0,
	695, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 675, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 677,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 673, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 1461, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 1840, 117, 0, 171,
	0, 131, 0, 134, 0, 0, 177, 143, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 1344, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 1344, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 1503, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 1502, 200, 149, 154, 152, 199, 1504,
	192, 142, 139, 0, 98, 190, 140, 138, 1505, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 1425, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 677, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 0, 557, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 783, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 653,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 340, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 171, 0, 0,
	0, 0, 0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2099, -1000, -138, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1568, 1616, -1000, -1000, -1000, -1000, -1000, -1000, 1385,
	512, 504, 536, 250, 16310, 532, 2421, 16908, -1000, 251,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1308, -1000, -1000,
	-1000, -1000, -1000, 1556, 1566, 1368, 1529, 1464, -1000, 8220,
	469, 14516, 16011, 6008, -1000, 1109, -102, 500, 16609, 467,
	467, 16609, 16609, 16908, 467, -1000, 50, 513, 16908, -1000,
	16908, 459, 1088, 459, 459, 459, 16908, -1000, 617, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16908, 1075, 1496, 372, 4680, 4680, 4680,
	4680, 391, 4680, 118, 1414, -1000, -1000, -1000, -1000, 4680,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	983, 1498, 8832, 8832, 1568, -1000, 1308, -1000, -1000, -1000,
	1490, -1000, -1000, 806, 1591, -1000, 10626, 603, -1000, 8832,
	62, 1285, -1000, -1000, 1285, -1000, -1000, 559, -1000, -1000,
	-1000, 9729, 9729, 9729, 9729, 9729, 9729, 9729, -1000, -1000,
	-1000, -1000, 173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1285, 602, -1000, 8533, 1285, 1285, 1285,
	1285, 1285, 1285, 1285, 1285, 8832, 1285, 1285, 1285, 1285,
	1285, 1285, 1285, 1285, 1285, 879, 1285, 1285, 1285, 1285,
	-1000, 15712, 1293, 1429, -1000, -1000, -1000, 1524, 11824, 12721,
	16908, 1129, -1000, 1309, 5676, 86, -1000, -1000, -1000, 745,
	594, 12422, -1000, -1000, -1000, 1489, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1228, -1000, 10925, 520, -1000, -1000, 16908,
	1392, 1064, 789, 1059, 1408, 535, 1522, 16908, -1000, 15413,
	4680, 476, 16908, 1513, 1407, 16908, 1053, 1044, -1000, 7004,
	-1000, 4680, 4680, 4680, 4680, 4680, 4680, 4680, 4680, -1000,
	-1000, -1000, -1000, -1000, -1000, 4680, 4680, -1000, 123, -1000,
	16908, -1000, -1000, -1000, -1000, 1611, 614, 1092, 591, 1310,
	-1000, 794, 1556, 983, 1464, 12123, 1424, -1000, -1000, 16908,
	-1000, 8832, 8832, 832, -1000, 15114, -1000, -1000, 5344, 640,
	9729, 820, 733, 9729, 9729, 9729, 9729, 9729, 9729, 9729,
	9729, 9729, 9729, 9729, 9729, 9729, 9729, 9729, 967, 879,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1039, -1000,
	1308, 1150, 1150, 113, 113, 113, 113, 113, 113, 10028,
	-1000, -158, 7622, 6340, 983, 1210, 743, 8533, 8220, 8220,
	8832, 8832, 17207, 17207, 8220, 1533, 780, 743, 17207, -1000,
	983, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	212, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8220, 8220,
	8220, 8220, 374, 16908, -1000, 17207, 14516, 14516, 14516, 14516,
	14516, -1000, 1454, 1448, -1000, 1450, 1447, 1458, 16908, -1000,
	1189, 11824, 539, 1285, -1000, 14815, -1000, -1000, 374, 1261,
	14516, 16908, -1000, -1000, 5012, 1309, 86, 1304, -1000, 94,
	71, 7323, 6340, 627, -1000, -1000, -1000, -1000, 4016, 707,
	796, -71, 151, -1000, -1000, -1000, -1000, -1000, 1345, -1000,
	-1000, -1000, 1345, 413, 1345, 1345, 1345, -1000, 1345, 1345,
	204, 204, 204, 204, 204, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1383, 1381, -1000, 1345, 1345, 1345, -1000, 1345,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1365, 385, 1365, 1346, 1346, -1000, -1000, 16609, 1521, 12,
	1034, 4680, 1512, 4680, 16908, 1583, 16908, -1000, -1000, -1000,
	10925, -1000, 1906, 16908, -1000, 16908, -1000, -1000, 16908, 4680,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 664, -1000, -1000, -1000, -1000,
	1471, 8832, 8832, 6672, 8832, -1000, -1000, -1000, 1498, -1000,
	1533, 1551, -1000, 1483, 1481, 8220, -1000, -1000, 640, 671,
	-1000, -1000, 927, -1000, -1000, -1000, -1000, 585, 1285, -1000,
	309, -1000, -1000, -1000, -1000, 820, 9729, 9729, 9729, 283,
	309, 362, 30, 377, 113, 159, 159, 214, 214, 214,
	214, 214, 260, 260, -1000, -1000, -1000, -1000, 983, -1000,
	-1000, -1000, 970, 983, 8220, 1306, -1000, -1000, -1000, 8832,
	-1000, 983, 1180, 1180, 758, 870, 1300, -1000, 584, 1297,
	1180, 8220, 763, -1000, 8832, 983, -1000, -1000, 1180, 983,
	1180, 1180, 1272, 1285, -1000, 1295, -1000, 736, 1429, 1380,
	1404, 1204, -1000, -1000, -1000, -1000, 1438, -1000, 1434, -1000,
	-1000, -1000, -1000, 21, 519, 517, 508, 16609, -1000, 1577,
	14516, 1247, -1000, -1000, 1304, 86, 111, -1000, -1000, -1000,
	-1000, 743, 725, -1000, -1000, 1017, 1303, 3684, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1377, 893, 16609,
	429, 464, 674, 595, 1013, -1000, -1000, -1000, 868, -1000,
	16609, 1608, -1000, -1000, 428, -1000, 423, 787, 975, 16908,
	223, 1375, 2166, -1000, -201, -1000, 133, -1000, -1000, 891,
	204, 204, 1345, 204, 204, 204, -1000, -1000, 627, 1488,
	627, 627, 627, 627, 973, 973, -8, -8, -1000, -1000,
	-1000, 959, 1365, -1000, -1000, -1000, 951, -1000, 1373, 1308,
	-1000, 6340, -1000, -1000, -1000, -1000, -1000, 1519, 1255, -1000,
	-1000, -1000, -1000, 561, -1000, -1000, 1315, 846, 630, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	357, 549, -1000, 4680, -1000, 750, 16908, 16908, 1468, 743,
	743, 573, -1000, -1000, 16908, -1000, -1000, -1000, -1000, 1288,
	-1000, -1000, -1000, 4348, 8220, -1000, 283, 309, 149, -1000,
	9729, 9729, -1000, 80, -1000, -116, -1000, 1180, 8220, 743,
	-1000, -1000, -1000, 1357, 967, 1357, 9729, 9729, 6672, 9729,
	9729, 37, 1270, 752, -1000, 8832, 858, -1000, -1000, -1000,
	-1000, -1000, 1403, 17207, 1285, -1000, 11524, 16609, 1568, 17207,
	8832, 8832, -1000, -1000, 8832, 1361, -1000, 8832, -1000, -1000,
	-1000, -1000, 1352, 1285, 1285, 1285, 1138, -1000, 1568, 1247,
	-1000, -1000, -1000, 70, 64, -1000, 8832, -1000, 4016, -1000,
	4016, 13619, -1000, 1606, 1548, 435, 90, -1000, 1010, 1000,
	-1000, 984, -1000, 89, -1000, -95, 157, 132, -1000, -1000,
	1285, -1000, 1350, 1517, -1000, 1499, 938, -1000, 1322, -118,
	-1000, -1000, -1000, -1000, -1000, -1000, 1285, 1349, 1348, -1000,
	1347, -1000, -1000, -1000, 1198, 627, 627, 204, 627, 627,
	627, -1000, 698, -1000, -1000, -1000, -1000, 1175, -1000, 1159,
	-1000, 224, 222, -1000, 1301, -1000, 1149, 16908, 16609, -1000,
	1299, -1000, 715, 1546, 345, 16908, 1583, 1583, -1000, 422,
	16609, -1000, 16609, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 16609, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 16908, -1000, -1000, -1000, -1000, -1000, 16609,
	442, -1000, -1000, 972, 8832, -1000, -1000, -1000, 6340, -1000,
	1577, 14516, -1000, -1000, 983, -1000, 9729, 309, 309, -1000,
	970, -1000, 323, -1000, -1000, 983, 1345, 1345, -1000, 1345,
	1346, -1000, -1000, 1345, 239, 1345, 238, 983, 983, 182,
	213, -1000, 112, 198, 1285, 43, -1000, 743, 8832, -1000,
	1503, 1217, 1265, -1000, -1000, 7921, 983, 1147, 570, 1138,
	1556, -1000, 743, 743, 743, 13020, 743, 1, 13020, 13020,
	13020, 11224, 16609, 1556, -1000, -1000, -1000, -1000, 743, 3684,
	-1000, 1115, -1000, 382, 1345, 565, 565, -96, 400, 397,
	1285, -1000, -1000, -1000, -1000, -102, -1000, -1000, 787, -1000,
	8832, 13020, 185, -1000, 1287, 1172, 1131, -1000, 14217, 983,
	-1000, 962, -1000, 906, 1160, -1000, -1000, -1000, 627, -1000,
	-1000, -1000, -1000, -1000, 204, 969, 204, 150, 135, 933,
	-1000, 925, 1283, 1402, 6340, 4016, 473, 1550, -1000, -1000,
	1545, -1000, 1243, 16609, -1000, -1000, 373, -1000, 1344, -1000,
	-1000, -1000, -1000, 1508, 16609, -1000, -1000, 743, 1573, 1267,
	-1000, 309, -1000, 208, -8, -1000, -1000, -1000, -1000, -1000,
	371, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	9729, 9729, -1000, 9729, 9729, 9729, 983, 966, 743, 396,
	-1000, 1285, -1000, -1000, 1284, 16609, 16609, -1000, -1000, 1107,
	-1000, -1000, 1104, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1100, 1100, 1100, 539, -1000, -1000, 784, 13619, 1507, -1000,
	-1000, -1000, 872, -1000, -1000, 800, 327, 821, -1000, 16609,
	-102, 8832, -1000, 1285, 716, 1079, 8832, 1341, 911, -1000,
	1141, -1000, 208, -8, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 627, -1000, 627, -1000, -1000, 1130, 1123, 13918, 16609,
	16908, -1000, -1000, 16609, -1000, -1000, -1000, -1000, -1000, 308,
	2432, 1340, 1339, 13020, 1285, 445, 1570, 1562, -1000, -1000,
	-1000, -1000, 95, 95, 95, 95, 78, -1000, -1000, 1603,
	-1000, 1285, -1000, 1308, 567, -1000, 16609, -1000, -1000, 1,
	-1000, -1000, -1000, 21, 1399, 1239, 233, -1000, 978, 712,
	961, 697, 692, 689, 684, 683, 679, 676, -1000, -1000,
	-1000, 1601, -1000, -1000, -1000, 1598, 1331, -1000, 1325, 716,
	8832, 331, 1401, 809, -1000, 1120, 1117, -1000, -1000, -1000,
	-1000, 1093, 1266, -1000, 378, 564, 1324, 1320, 1168, -1000,
	305, 2432, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1568, 16609, 16609, 16609, 16609, 460, 9430, 9430, 13619,
	13619, 1072, 355, 392, -1000, 8832, 8832, -1000, -1000, -1000,
	-1000, 983, 295, -40, 17207, 1265, 983, 16609, -1000, -1000,
	-1000, -1000, 16609, -1000, -25, 1239, 16609, -1000, 910, -1000,
	-1000, 834, 900, 834, 834, 834, 834, 834, 565, 565,
	16609, 13619, 331, 716, -1000, 41, 1595, -45, 365, -1000,
	-1000, -108, 891, 6340, 13918, 13619, 20, 16609, 8832, 2378,
	-1000, 1556, 1262, 10327, -1000, -1000, -1000, -1000, 16609, 1590,
	1589, 1586, 1585, 2365, 62, 257, 1070, 1058, 1392, 1052,
	-1000, 16609, 1317, 743, 1246, -1000, 1467, 33, -50, 1151,
	-1000, -1000, 1285, 1033, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 787, 787, 1031, 1008,
	-1000, 331, -1000, 565, 565, -1000, -1000, -1000, 259, 855,
	881, 875, 857, 122, -1000, 1559, 1577, 1313, 1285, 1073,
	1005, -1000, -136, -1000, 743, -1000, -1000, 2432, 1498, 16609,
	302, -1000, -1000, 1500, -1000, -1000, -1000, -1000, -1000, 2432,
	2432, -1000, 394, 12, -1000, 355, 1477, 13619, -1000, 1462,
	-1000, 16609, -1000, 1239, -1000, -1000, 399, 784, -1000, -1000,
	-1000, 844, -1000, 837, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13319, 784, 13020, 1577, 784, 8832, -155, -1000, -1000,
	10925, 1542, 16609, 2312, -1000, 2221, 261, -1000, 282, -1000,
	-1000, 350, 995, 11, 983, -1000, 16908, 1399, -1000, -1000,
	-1000, 563, 1399, 992, 784, -1000, 743, 717, 1308, -1000,
	-1000, -1000, 766, -1000, 263, -1000, 343, -1000, -47, -1000,
	1312, -1000, 6340, -1000, -1000, -1000, -1000, -1000, 255, -1000,
	-1000, 1285, -60, 16609, -1000, 2432, 9131, -1000, 982, 2074,
	95, 983, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1879, 12, 10, 1878, 1875, 1873, 1636, 1634, 1632,
	1628, 1872, 1871, 1870, 1868, 1867, 1862, 1860, 1857, 1855,
	1854, 1853, 1852, 1850, 1849, 1848, 1846, 1845, 721, 1844,
	1843, 1838, 110, 1835, 123, 1833, 1831, 83, 93, 61,
	78, 1658, 1830, 50, 109, 121, 1826, 97, 1825, 1817,
	200, 1816, 108, 1813, 1811, 32, 1810, 1808, 39, 17,
	22, 46, 1807, 1806, 114, 41, 1805, 1804, 1803, 19,
	1802, 1801, 92, 23, 29, 28, 42, 1800, 80, 36,
	1799, 96, 1798, 1796, 1795, 1794, 34, 1787, 103, 30,
	25, 8, 1786, 14, 1785, 104, 68, 44, 16, 140,
	98, 1784, 59, 107, 90, 1781, 1780, 927, 1779, 1775,
	1773, 1772, 1771, 1769, 878, 868, 1768, 1767, 1762, 77,
	0, 489, 199, 122, 1761, 84, 1760, 1976, 120, 115,
	47, 1759, 55, 394, 82, 1756, 1755, 75, 118, 105,
	117, 116, 1754, 1753, 1752, 1751, 1750, 139, 56, 76,
	40, 1748, 1745, 1744, 91, 88, 48, 86, 94, 1742,
	1741, 1740, 1732, 51, 1730, 20, 33, 2, 89, 1729,
	1728, 1726, 1724, 57, 43, 1723, 37, 1721, 21, 71,
	4, 11, 3, 1718, 1716, 1715, 7, 1707, 45, 1703,
	5, 1698, 18, 1695, 1687, 1685, 58, 1683, 1682, 1680,
	24, 1676, 1675, 31, 9, 65, 49, 70, 85, 54,
	1674, 52, 1667, 1, 15, 1666, 6, 1665, 1664, 1663,
	26, 27, 1662, 1655, 1654, 1652, 1649, 1647, 53, 1646,
	1645, 1677, 393, 1644, 1643, 1642, 1639, 253,
}

var yyR1 = [...]int{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 208, 208, 208, 209, 209,
	209, 211, 211, 212, 212, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 215, 215, 194, 194, 194, 195,
	195, 195, 195, 195, 195, 197, 197, 198, 198, 125,
	125, 192, 192, 191, 190, 190, 189, 189, 188, 199,
	199, 20, 170, 171, 171, 171, 171, 171, 171, 171,
	158, 139, 139, 139, 139, 139, 139, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 205, 205, 205, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 201, 201, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	148, 148, 148, 148, 148, 148, 200, 200, 196, 196,
	196, 196, 196, 196, 143, 143, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 142, 142, 142, 142,
	142, 142, 142, 142, 144, 144, 144, 144, 144, 144,
	144, 144, 140, 140, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 146, 146, 146,
	146, 146, 146, 146, 146, 157, 157, 147, 147, 155,
	155, 156, 156, 156, 154, 154, 154, 151, 151, 152,
	152, 153, 153, 153, 149, 149, 149, 150, 150, 150,
	160, 181, 181, 181, 183, 183, 184, 184, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 169,
	169, 207, 207, 180, 180, 180, 175, 175, 175, 175,
	175, 175, 175, 175, 168, 168, 178, 178, 179, 179,
	176, 176, 176, 177, 163, 163, 163, 163, 163, 164,
	165, 165, 165, 165, 161, 162, 203, 203, 203, 204,
	204, 166, 166, 167, 167, 172, 172, 172, 173, 173,
	173, 174, 174, 174, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 234, 234,
	235, 235, 235, 235, 235, 235, 235, 187, 185, 185,
	186, 186, 17, 18, 18, 18, 18, 18, 19, 19,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 112, 112, 109, 109, 110, 110,
	111, 111, 111, 113, 113, 113, 136, 136, 136, 23,
	23, 25, 25, 26, 27, 24, 24, 24, 24, 24,
	236, 28, 29, 29, 30, 30, 30, 34, 34, 34,
	32, 32, 33, 33, 39, 39, 38, 38, 40, 40,
	40, 40, 124, 124, 124, 123, 123, 42, 42, 43,
	43, 44, 44, 45, 45, 45, 220, 220, 219, 219,
	221, 221, 221, 221, 221, 221, 57, 57, 93, 93,
	93, 96, 96, 46, 46, 46, 46, 47, 47, 48,
	48, 49, 49, 131, 131, 130, 130, 130, 129, 129,
	51, 51, 51, 53, 52, 52, 52, 52, 54, 54,
	56, 56, 55, 55, 58, 58, 58, 58, 59, 59,
	94, 94, 41, 41, 41, 41, 41, 41, 41, 108,
	108, 61, 61, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 71, 71, 71, 71, 71, 71, 62,
	62, 62, 62, 62, 62, 62, 37, 37, 72, 72,
	72, 78, 73, 73, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 69, 69,
	69, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 237, 237, 70, 70, 70,
	70, 35, 35, 35, 35, 35, 134, 134, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 138, 138, 138, 138, 138, 138, 138, 82,
	82, 36, 36, 80, 80, 81, 83, 83, 79, 79,
	79, 222, 64, 64, 64, 64, 64, 64, 64, 64,
	66, 66, 66, 84, 84, 85, 85, 86, 86, 87,
	87, 88, 89, 89, 89, 90, 90, 90, 90, 91,
	91, 91, 63, 63, 63, 63, 63, 63, 92, 92,
	92, 92, 97, 97, 74, 74, 76, 76, 75, 77,
	98, 98, 102, 99, 99, 103, 103, 103, 103, 103,
	101, 101, 101, 126, 126, 126, 106, 106, 114, 114,
	115, 115, 107, 107, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 117, 117, 117, 118, 118, 121,
	121, 122, 122, 127, 127, 128, 128, 223, 223, 223,
	224, 224, 224, 225, 225, 226, 227, 227, 228, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 231, 232, 132, 133, 133,
	133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 5, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 0, 2, 2, 0,
	2, 2, 2, 2, 2, 0, 2, 0, 3, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 0,
	2, 4, 4, 0, 1, 3, 3, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	9, 3, 3, 6, 9, 9, 8, 8, 5, 8,
	7, 4, 2, 4, 6, 2, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 2, 0, 4, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 2, 4, 6,
	2, 3, 2, 3, 1, 3, 0, 2, 0, 3,
	3, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 1, 1, 3, 3, 2, 1, 2,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 1,
	5, 2, 2, 3, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	6, 0, 1, 4, 1, 2, 1, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 1, 1, 0, 2, 5, 2, 3, 3, 2,
	3, 2, 3, 4, 1, 1, 1, 1, 1, 3,
	3, 2, 2, 1, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 7, 0, 1, 1, 0,
	3, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 13, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 0, 4, 1, 3,
	1, 1, 1, 1, 1, 1, 4, 8, 1, 1,
	3, 1, 3, 4, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 1, 1,
	1, 2, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 1, 1, 3, 0, 5, 5, 5, 0, 2,
	0, 4, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 2, 4, 5,
	6, 4, 4, 6, 6, 6, 6, 8, 8, 6,
	8, 8, 9, 7, 5, 4, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 0, 2, 4, 4, 4,
	4, 0, 3, 4, 7, 3, 1, 1, 2, 3,
	3, 1, 2, 2, 1, 1, 2, 1, 2, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 0, 3, 0, 2, 0, 3, 1,
	3, 2, 0, 1, 1, 0, 2, 4, 4, 0,
	2, 4, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 5, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 2,
	0, 2, 2, 0, 1, 4, 1, 3, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 191, 192,
	194, 195, 26, 139, 140, 143, 144, -231, 8, 298,
	53, -230, 340, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 154, 290,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 290, 119, 120, -55, -127, 56,
	-120, 161, 307, 21, 191, 204, 205, 196, 237, 225,
	308, 159, 222, 226, 276, 339, 65, 194, 285, 128,
	165, 141, 217, 220, 219, 211, 208, 28, 243, 314,
	210, 131, 244, 248, 255, 277, 305, 201, 202, 279,
	241, 32, 133, 309, 34, 149, 280, 246, 240, 235,
	239, 200, 234, 38, 214, 250, 249, 251, 275, 228,
	160, 254, 230, 212, 229, 18, 144, 147, 245, 247,
	209, 162, 126, 151, 313, 281, 207, 148, 163, 143,
	284, 330, 158, 195, 278, 203, 287, 37, 261, 221,
	198, 213, 199, 130, 192, 156, 232, 150, 215, 216,
	238, 197, 233, 193, 152, 145, 286, 262, 315, 231,
	227, 223, 224, 157, 122, 154, 155, 268, 269, 270,
	271, 311, 282, 218, 263, 264, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 226, 113, 266, 121, 32,
	151, -136, 120, -109, 155, 268, 269, 270, 271, 56,
	278, 277, 272, -127, 193, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -231, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -222, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, -225, 58, 57, 66, 59, 60, 61, 62,
	67, 68, 69, -121, 288, -75, -231, 43, 44, 299,
	300, 301, 302, 306, 303, 76, 33, 289, 297, 296,
	295, 293, 294, 291, 292, 338, 125, 290, 102, 298,
	252, -107, -43, -44, -45, -46, -57, -78, -231, -55,
	11, -50, -55, -99, -135, 193, -103, 278, 277, -122,
	288, -101, -121, -119, 276, 226, 275, 56, -120, 118,
	175, 319, 72, 23, 25, 259, 265, 174, 75, 107,
	16, 76, 181, 328, 329, 106, 299, 113, 47, 291,
	292, 289, 179, 301, 302, 290, 266, 186, 20, 29,
	10, 26, 139, 22, 100, 115, 176, 79, 80, 142,
	24, 140, 69, 182, 184, 19, 50, 132, 11, 318,
	13, 14, 332, 320, 125, 124, 91, 331, 121, 45,
	8, 109, 27, 88, 41, 137, 185, 43, 89, 17,
	293, 294, 31, 306, 146, 102, 48, 35, 333, 73,
	334, 67, 51, 283, 180, 71, 15, 46, 335, 134,
	183, 90, 116, 298, 44, 177, 336, 119, 178, 6,
	304, 30, 138, 42, 120, 267, 78, 123, 68, 5,
	136, 9, 49, 52, 295, 296, 297, 33, 77, 12,
	135, 310, 70, -171, -158, 56, -203, 328, 329, 122,
	-121, -115, 125, -115, -121, -121, -55, -115, 298, 120,
	-55, -55, -114, 125, 56, -114, -114, -114, -55, 110,
	-55, 56, 30, 290, 56, 151, 120, 152, 122, -133,
	-231, -122, -133, -133, -133, 156, 157, -133, -110, 273,
	51, -133, -232, 55, -91, 19, 31, -41, -127, -87,
	-88, -41, -86, -2, -28, 35, -32, 22, 64, 11,
	-124, 72, 71, 88, -123, 23, -121, 58, 110, -41,
	-62, 91, 73, 89, 90, 75, 93, 92, 103, 96,
	97, 98, 99, 100, 101, 102, 94, 95, 106, 338,
	81, 82, 83, 84, 85, 86, 87, -108, -231, -78,
	-231, 111, 112, -65, -65, -65, -65, -65, -65, -65,
	-226, 253, -231, 110, -2, -73, -41, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -82, -41, -231, -237,
	-231, -237, -237, -237, -237, -237, -237, -237, -138, 107,
	226, 141, 217, -141, -140, 232, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 225, 308, -231, -231,
	-231, -231, -56, 27, -55, 30, 54, -51, -53, -52,
	-54, 41, 45, 47, 42, 43, 44, 48, -131, 23,
	-43, -231, -130, 147, -129, 23, -127, 58, -55, -50,
	-233, 54, 11, 52, 54, -99, 193, -100, -104, 279,
	281, 81, 110, -126, -121, 58, 29, 30, 55, 54,
	-159, -139, -143, -140, -145, -144, -146, -121, -141, -142,
	225, 308, 222, 226, 223, 228, 229, 230, 107, 227,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 231, 243, 30, 141, 215, 216, 217, 220, 219,
	221, 218, 244, 245, 246, 247, 248, 249, 250, 251,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 208, 210, 211, 212, 214, 213, 121, -55, -192,
	52, 56, 73, 56, 51, -208, 51, 19, 174, 175,
	23, -55, -55, 283, -133, 123, -55, 24, 51, -55,
	56, 56, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 267, 274, -55, 9,
	91, 54, 18, 110, 54, -89, 25, 26, -90, -232,
	-34, -66, -121, 59, 62, -33, 42, -55, -41, -41,
	-71, 67, 73, 68, 69, -123, 98, -128, -122, -119,
	-65, -72, -75, -78, 63, 91, 89, 90, 75, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -134, 56, 58, -138, 56, -64,
	-64, -121, 341, -39, 22, -38, -40, -122, -232, 54,
	-232, -2, -38, -38, -41, -41, -79, -121, -127, -79,
	-38, -32, -80, -81, 77, -79, -232, 224, -38, -39,
	-38, -38, -95, 147, -55, -98, -102, -79, -44, -45,
	-45, -44, -45, 41, 41, 41, 46, 41, 46, 41,
	-52, -127, -232, -58, 49, 124, 50, -231, -129, -95,
	52, -43, -55, -103, -100, 54, 280, 282, 283, 51,
	70, -41, -122, -150, 107, 106, -172, -173, -174, -122,
	58, 59, -158, -160, -163, -161, -162, -175, -164, 128,
	126, 130, 131, 136, -168, 121, 137, 67, 73, -205,
	128, 51, 259, 265, 126, 137, 136, 339, 65, 129,
	318, 320, 29, -153, 341, 253, -151, 262, -147, 53,
	-147, -147, 224, -147, -147, -147, -147, -147, -149, 226,
	-149, -149, -149, -149, 53, 53, -147, -147, -147, -147,
	-155, 53, 209, -155, -155, -156, 53, -156, -121, 23,
	-190, 310, -191, 56, -133, 24, -133, -55, -211, -209,
	8, 9, 10, -55, -139, -116, 118, 115, 116, -187,
	114, 259, 226, 65, 29, 15, 299, 147, 315, 56,
	148, -55, -55, -55, -133, -111, 11, 91, 37, -41,
	-41, -128, -88, -91, -106, 19, 11, 33, 33, -38,
	67, 68, 69, 110, -231, -72, -65, -65, -65, -37,
	142, 72, -232, -227, -228, 58, -232, -38, 54, -41,
	-232, -232, -232, 54, 52, 23, 54, 11, 110, 54,
	11, -232, -38, -83, -81, 79, -41, -232, -232, -232,
	-232, -232, -63, 30, 33, -2, -231, -231, -59, 54,
	12, 81, -48, -47, 51, 52, -49, 51, -47, 41,
	41, -220, 310, 121, 121, 121, -96, -121, -59, -43,
	-59, -104, -105, 284, 281, 287, 81, 56, 54, -174,
	81, 53, -204, 51, 73, -166, -121, 137, -168, -168,
	56, -168, 56, 56, 67, 19, -121, 9, 137, 137,
	-204, 58, -55, -201, 319, 16, 53, -206, 53, 58,
	59, 60, 67, -148, 66, -61, 254, 289, 292, 291,
	255, 342, -152, 263, 59, -149, -149, -147, -149, -149,
	-149, -150, 30, -150, -150, -150, -150, -157, 58, -157,
	-154, 310, 311, -154, 59, -155, 59, 51, 52, -2,
	-189, -188, -122, -194, 23, 51, 54, -208, -132, -125,
	128, -235, 154, 127, 132, 131, 56, 126, 130, 147,
	-193, 154, 127, 128, 132, 131, 56, 121, 137, 126,
	130, 147, 136, -117, -118, 123, 23, 121, 137, 147,
	118, -133, -113, 89, 12, -127, -127, 38, 110, -55,
	-42, 11, 98, -122, -39, -37, 72, -65, -65, 342,
	54, -196, 338, -232, -40, -137, 107, 222, 141, 217,
	211, 241, 242, 228, 261, 215, 262, -134, -137, -65,
	-65, -122, -65, -65, 307, -86, 80, -41, 78, -97,
	51, -98, -74, -76, -75, -231, -2, -92, -121, -96,
	-86, -102, -41, -41, -41, 53, -41, 53, -231, -231,
	-231, -232, 54, -86, -59, 281, 285, 286, -41, -173,
	-174, -179, -176, -121, 137, 10, 9, 19, 132, 126,
	339, 56, 56, 56, -203, 136, 330, -205, 339, -148,
	-231, 53, 23, 29, 59, -206, 53, -196, 338, -231,
	-147, 53, -147, 53, 53, 55, -150, -150, -149, -150,
	-150, -150, 56, 107, 55, 54, 55, 215, 215, 54,
	55, 54, -55, -121, 54, 81, -195, 19, 162, 163,
	-55, -209, -211, -234, 121, 137, -121, -132, -121, -132,
	-121, -55, -132, -121, 128, -163, 58, -41, -59, -43,
	-232, -65, -228, 226, 216, 256, 232, 241, -232, -147,
	-147, -147, -156, -147, 202, -147, 202, -232, -232, -232,
	54, 19, -232, 54, 19, -231, -36, 304, -41, 28,
	-97, 54, -232, -232, -232, 54, 110, -232, -90, -93,
	-121, 137, -219, -221, 332, 333, 334, 335, 336, 337,
	-93, -93, -93, -130, -121, -90, 55, 54, -147, -177,
	257, -147, -165, 158, 159, 30, 160, -165, 330, 137,
	137, -231, -203, -204, -41, -93, 53, 320, 54, 55,
	-206, -121, 226, 216, 232, 241, -232, 55, 55, 55,
	-150, -149, 58, -149, 264, 264, 59, 59, 53, 52,
	51, -188, -174, 123, 21, 6, 8, 9, 10, 19,
	23, -121, 136, 53, 27, -121, -84, 13, 224, -154,
	-149, 56, -65, -65, -65, -65, -65, -232, 58, 137,
	-76, 33, -2, -231, -121, -121, 54, 55, 55, 54,
	-232, -232, -232, -58, -181, -183, 310, -182, 52, 133,
	65, 167, 168, 169, 170, 171, 172, 173, -176, -89,
	-204, 51, 67, 161, -204, 51, -166, -121, -203, -41,
	-231, -232, 55, -41, 53, 59, 55, -150, -150, 55,
	55, -178, -179, -69, -121, -127, -121, -55, -167, -121,
	176, -212, -214, -7, -9, -8, -11, -10, -12, -13,
	-14, -3, 20, 180, 181, 186, 182, 135, 125, 53,
	53, -93, -231, 126, -85, 14, 16, -232, -232, -232,
	-232, -35, 91, 310, 9, -74, -2, 110, -121, -221,
	-220, -180, 51, -182, 310, 53, 312, 56, -169, 81,
	58, 81, 81, 81, 81, 81, 81, 81, 9, 10,
	53, 53, -232, -41, -200, 160, 51, 55, -202, 55,
	55, 55, 53, 110, 53, 53, -197, 54, 52, 177,
	-214, -86, -217, -121, -216, -121, -121, -121, -210, 35,
	183, 184, 185, -60, -65, -60, -179, -179, 55, -185,
	-186, 147, 137, -41, -73, -232, 308, 48, 313, -98,
	-232, -121, -121, -184, -182, -121, 59, -207, 51, 70,
	59, -207, -207, -207, -207, -207, -165, -165, -167, -179,
	-200, -232, 305, 10, 9, 316, 317, 55, 192, 322,
	323, 146, 324, 160, 325, 326, -94, 331, -122, -178,
	-179, -198, 310, -121, -41, -215, -214, 191, -90, 54,
	-218, -139, 178, -121, 11, 11, 11, 11, -214, 191,
	191, 55, 55, -192, -232, 54, -121, 53, 38, 309,
	314, -231, 55, 54, -204, -204, 55, 55, -200, -165,
	-165, 310, 59, 16, 59, 59, 59, 59, 323, 146,
	325, 16, -59, 53, 55, 55, 339, -214, -91, -216,
	-121, 179, 27, -213, -214, -213, -223, 187, 73, -190,
	-186, 33, -179, 38, -121, -182, 129, -181, 59, 59,
	327, -127, -181, -93, -59, -181, -41, 340, 19, -121,
	80, -214, 80, -224, 188, 187, 149, 55, 310, -232,
	-55, -180, 110, -180, 55, -181, 80, -2, 79, 190,
	189, 150, 313, 53, -122, 191, -231, 314, -167, -213,
	-65, 146, 55, 80, -232, -232,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 737, 0, 480, 480, 480, 480, 480, 480, 0,
	-2, 792, 0, 0, 0, 0, -2, 470, 471, 0,
	473, 474, 1087, 1087, 1087, 1087, 1087, 0, 33, 34,
	1085, 1, 3, 745, 0, 0, 484, 487, 482, 823,
	792, 0, 0, 0, 83, 143, 366, 0, 0, 790,
	790, 0, 0, 0, 790, 130, 0, 0, 0, 793,
	0, 788, 0, 788, 788, 788, 0, 429, 562, 813,
	814, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
	1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
	1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
	1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 1088, 1088, 1088,
	1088, 0, 1088, 458, 447, 449, 450, 451, 452, 1088,
	467, 468, 457, 469, 472, 475, 476, 477, 478, 479,
	27, 749, 823, 823, 737, 29, 0, 480, 485, 486,
	490, 488, 489, 481, 0, 498, 502, 0, 572, 823,
	577, 579, -2, -2, 0, 614, 615, 616, 617, 618,
	619, 823, 823, 823, 823, 823, 823, 823, 643, 644,
	645, 646, 0, 722, 723, 724, 725, 726, 727, 728,
	729, 581, 582, 718, 0, 769, 823, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 675, 675, 675,
	675, 675, 675, 675, 675, 0, 0, 0, 0, 0,
	824, 0, 0, 509, 511, 512, 513, 543, 0, 545,
	0, 0, 41, 45, 0, 1055, 773, -2, -2, 0,
	0, 0, 811, 812, -2, 965, -2, 809, 810, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 0, 144, 0, 0, 367, 368, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 140, 0,
	1088, 0, 0, 0, 0, 0, 0, 0, 428, 0,
	430, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 439,
	1089, 1090, 440, 441, 442, 1088, 1088, 444, 0, 459,
	0, 453, 28, 1086, 22, 0, 0, 746, 0, 738,
	739, 742, 745, 27, 487, 0, 492, 491, 483, 0,
	499, 823, 823, 0, 503, 0, 505, 506, 0, 575,
	823, 0, 0, 823, 823, 823, 823, 823, 823, 823,
	823, 823, 823, 823, 823, 823, 823, 823, 0, 0,
	599, 600, 601, 602, 603, 604, 605, 578, 0, 592,
	0, 0, 0, 635, 636, 637, 638, 639, 640, 0,
	647, 0, -2, 0, 27, 0, 612, 823, 823, 823,
	823, 823, 0, 0, 823, 490, 0, 710, 0, 666,
	0, 667, 668, 669, 670, 671, 672, 673, 674, 702,
	0, 704, 705, 706, 707, 708, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 252, 253, 823, -2,
	823, 823, 43, 0, 561, 0, 0, 0, 0, 0,
	0, 550, 0, 0, 553, 0, 0, 0, 0, 544,
	0, 0, 564, 1019, 546, 0, 548, 549, -2, 0,
	0, 0, 39, 40, 0, 46, 1055, 48, 72, 0,
	0, 823, 0, 307, 783, 784, 785, 781, 375, 0,
	150, 301, 297, 152, 153, 154, 155, 156, 287, 225,
	252, 253, 287, 287, 287, 287, 287, 259, 287, 287,
	304, 304, 304, 304, 304, 268, 269, 270, 271, 272,
	273, 274, 980, 0, 244, 287, 287, 287, 248, 287,
	250, 251, 277, 278, 279, 280, 281, 282, 283, 284,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	289, 289, 289, 291, 291, 242, 243, 0, 0, 134,
	0, 1088, 0, 1088, 0, 0, 0, 95, 96, 97,
	0, 141, 0, 0, 395, 0, 423, 789, 0, 1088,
	426, 427, 563, 815, 816, 431, 432, 433, 434, 435,
	436, 437, 438, 443, 446, 460, 454, 455, 448, 750,
	0, 823, 823, 0, 823, 741, 743, 744, 749, 30,
	490, 0, 730, 0, 0, 823, 493, 25, 573, 574,
	576, 593, 0, 595, 597, 504, 500, 0, 719, -2,
	583, 584, 608, 609, 610, 0, 823, 823, 823, 606,
	588, 0, 620, 621, 622, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 634, 686, 687, 642, 0, 632,
	633, 641, 0, 0, 823, 495, 496, 721, 611, 823,
	768, 27, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 823, 716, 713, 823, 0, 676, 703, 0, 0,
	0, 0, 0, 0, 560, 568, 770, 0, 510, 539,
	541, 0, 536, 551, 552, 554, 0, 556, 0, 558,
	559, 514, 515, 516, 0, 0, 0, 0, 547, 568,
	0, 568, 42, 774, 47, 0, 0, 75, 76, 775,
	776, 777, 0, 779, 308, 0, 142, 376, 378, 381,
	382, 383, 145, 146, 147, 148, 149, 0, 369, 371,
	0, 0, 0, 0, 0, 344, 345, 158, 0, 160,
	0, 0, 163, 164, 0, 166, 168, 369, 0, 0,
	0, 0, 0, 157, 0, 303, 299, 298, 224, 0,
	304, 304, 287, 304, 304, 304, 261, 262, 307, 0,
	307, 307, 307, 307, 0, 0, 294, 294, 247, 249,
	236, 0, 289, 238, 239, 240, 0, 241, 0, 0,
	88, 0, 132, 133, 89, 791, 90, 116, 0, 101,
	98, 99, 100, 0, 94, 1087, 129, 0, 804, 396,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	0, 0, 422, 1088, 425, 463, 0, 0, 0, 747,
	748, 0, 740, 23, 0, 786, 787, 731, 732, 507,
	594, 596, 598, 0, -2, 585, 606, 589, 0, 586,
	823, 823, 580, 0, 826, 218, 648, 0, 823, 613,
	-2, 651, 652, 0, 0, 0, 823, 823, 0, 823,
	823, 0, 737, 0, 714, 823, 0, 665, 677, 678,
	679, 680, 762, 0, 0, -2, 0, 0, 737, 0,
	823, 823, 533, 540, 823, 0, 534, 823, 535, 555,
	557, 526, 0, 0, 0, 0, 0, 531, 737, 568,
	38, 73, 74, 0, 0, 80, 823, 309, 0, 379,
	0, 0, 354, 0, 0, 0, 372, 336, 0, 0,
	339, 0, 341, 366, 159, 0, 0, 0, 165, 167,
	0, 171, 172, 0, 194, 0, 0, 182, 0, 218,
	186, 187, 188, 189, 190, 191, 0, 287, 287, 214,
	0, 302, 151, 300, 0, 307, 307, 304, 307, 307,
	307, 263, 0, 264, 265, 266, 267, 0, 285, 0,
	245, 0, 0, 246, 0, 237, 0, 0, 0, -2,
	135, 136, 0, 119, 0, 0, 0, 0, 384, 0,
	0, 1087, 0, 410, 411, 412, 413, 414, 415, 416,
	1087, 0, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 406, 407, 0, 1087, 805, 806, 807, 808, 0,
	0, 424, 445, 0, 823, 461, 462, 751, 0, 24,
	568, 0, 501, 720, 0, 587, 823, 607, 590, 825,
	0, 828, 0, 649, 497, 0, 287, 287, 691, 287,
	291, 694, 695, 287, 697, 287, 700, 0, 0, 0,
	0, 719, 0, 0, 0, 711, 664, 717, 823, 31,
	0, 762, 752, 764, 766, 823, 27, 0, 758, 0,
	745, 771, 569, 772, 537, 0, 542, 0, 0, 0,
	0, 545, 0, 745, 37, 77, 78, 79, 778, 377,
	380, 0, 348, 287, 287, 0, 0, 0, 0, 0,
	0, 337, 338, 340, 342, 366, 181, 161, 369, 162,
	823, 0, 0, 195, 0, 0, 0, 185, 0, 0,
	210, 0, 212, 0, 0, 288, 254, 255, 307, 256,
	257, 258, 305, 306, 304, 0, 304, 0, 0, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 117, 118,
	0, 102, 0, 0, 408, 409, 0, 389, 0, 390,
	392, 393, 394, 0, 371, 388, 464, 465, 733, 508,
	650, 591, 827, 0, 294, 221, 222, 223, 653, 688,
	304, 692, 693, 696, 698, 699, 701, 655, 654, 656,
	823, 823, 659, 823, 823, 823, 0, 0, 715, 0,
	32, 0, 767, -2, 0, 0, 0, 44, 35, 0,
	528, 529, 0, 518, 520, 521, 522, 523, 524, 525,
	0, 0, 0, 564, 532, 36, 311, 0, 742, 352,
	353, 351, 369, 360, 361, 0, 0, 369, 370, 371,
	366, 823, 343, 0, 0, 0, 823, 178, 0, 183,
	0, 193, 965, 294, 222, 223, 192, 211, 213, 215,
	260, 307, 286, 307, 295, 296, 0, 0, 0, 0,
	0, 137, 138, 0, 120, 121, 122, 123, 124, 0,
	0, 0, 0, 0, 0, 372, 735, 0, 219, 220,
	689, 690, 0, 0, 0, 0, 681, 663, 712, 0,
	765, 0, -2, 0, 760, 759, 0, 538, 517, 0,
	565, 566, 567, 516, 333, 312, 0, 314, 0, 329,
	0, 0, 0, 0, 0, 0, 0, 0, 349, 350,
	355, 0, 362, 363, 356, 0, 0, 372, 0, 0,
	823, 216, 173, 0, 196, 0, 0, 275, 276, 290,
	293, 0, 346, 347, 287, 0, 0, 0, 125, 373,
	0, 93, 103, 105, 106, 107, 108, 109, 110, 111,
	112, 737, 0, 0, 0, 0, 61, 823, 823, 0,
	0, 0, 0, 0, 26, 823, 823, 657, 658, 660,
	661, 0, 0, 0, 0, 755, 27, 0, 530, 519,
	527, 310, 0, 315, 0, 0, 0, 318, 0, 330,
	320, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 216, 0, 169, 0, 0, 0, 0, 180,
	184, 570, 1085, 0, 0, 0, 127, 0, 823, 0,
	104, 745, 49, 54, 51, 56, 57, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 0,
	418, 0, 0, 736, 734, 662, 0, 0, 0, 763,
	-2, 761, 334, 0, 316, 321, 319, 322, 331, 332,
	323, 324, 325, 326, 327, 328, 369, 369, 0, 0,
	365, 216, 217, 0, 0, 176, 177, 179, 0, 0,
	0, 0, 0, 0, 207, 0, 568, 0, 0, 0,
	0, 91, 0, 374, 126, 92, 114, 0, 749, 0,
	0, 53, 55, 59, 62, 63, 64, 65, 66, 0,
	0, 385, 817, 134, 417, 0, 0, 0, 682, 0,
	685, 0, 313, 0, 357, 358, 0, 311, 170, 174,
	175, 0, 198, 0, 200, 201, 202, 203, 204, 205,
	206, 0, 311, 0, 568, 311, 823, 0, 113, 52,
	0, 0, 0, 0, 68, 0, 820, 818, 0, 391,
	419, 0, 0, 683, 0, 317, 0, 333, 197, 199,
	208, 0, 333, 0, 311, 85, 128, 0, 0, 60,
	67, 69, 70, 387, 0, 819, 0, 386, 0, 335,
	0, 364, 0, 84, 571, 86, 115, -2, 0, 821,
	822, 0, 0, 0, 209, 0, 823, 684, 0, 0,
	0, 0, 359, 71, 420, 421,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 340,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 341, 3, 342, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:381
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:386
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:387
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:414
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:422
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:432
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:439
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:445
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:449
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:466
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:478
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:500
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:506
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:519
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:520
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:528
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:533
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:537
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:543
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:561
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:565
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:578
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:582
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:588
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:597
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:617
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:624
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:632
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:664
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:671
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:681
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:685
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:691
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:699
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:710
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:714
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:720
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:724
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:728
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:734
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:742
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:746
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:752
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:756
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:767
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:788
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:804
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:820
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:828
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:836
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:840
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:844
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:856
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:867
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:878
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:890
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:894
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:904
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:908
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:912
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:918
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:922
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:928
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:932
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:938
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:949
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:961
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:968
		{
			yyVAL.bytes = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:972
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:976
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:981
		{
			yyVAL.bytes = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:985
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:989
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:993
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:997
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1001
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1006
		{
			yyVAL.expr = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1010
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1015
		{
			yyVAL.expr = nil
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1019
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1024
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1028
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1033
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1037
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1043
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1048
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1053
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1059
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1064
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1070
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1075
		{
			yyVAL.bytes = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1079
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1085
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1092
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1098
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1102
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1107
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1111
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1115
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1123
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1129
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1135
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1146
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1152
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1164
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1174
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1179
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1184
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1194
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1214
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1219
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1228
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1238
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1243
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1248
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1255
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1262
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1270
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1275
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1281
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1287
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1293
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1299
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1306
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1310
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1314
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1320
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1324
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1328
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1332
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1336
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1340
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1344
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1348
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1352
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1358
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1362
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1367
		{
			yyVAL.sequence = &Sequence{}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1371
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1376
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1381
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1386
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1391
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1396
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1401
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1406
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1411
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1416
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1421
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1426
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1431
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1438
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1442
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1446
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1450
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1454
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1458
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1463
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1467
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1472
		{
			yyVAL.bytes = nil
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1483
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1488
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1494
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1498
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1502
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1506
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1510
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1514
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1518
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1522
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1526
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1530
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1560
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1572
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1576
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1582
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1626
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1638
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1642
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1646
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1650
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1654
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1658
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1662
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1666
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1670
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1702
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1706
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1715
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1721
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1725
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1733
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1737
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1741
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1745
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1760
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1765
		{
			yyVAL.optVal = nil
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1769
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1774
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1778
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1786
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1790
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1796
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1804
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1808
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1812
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1817
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1821
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1826
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1830
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1835
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1839
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1843
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1848
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1852
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1856
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1861
		{
			yyVAL.str = ""
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1865
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1869
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1875
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1880
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1884
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1888
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1894
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1898
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1904
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1908
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1914
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1918
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1923
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1927
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1931
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1935
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1939
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1943
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1947
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1951
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1955
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1961
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1965
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1971
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1975
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1981
		{
			yyVAL.indexPartition = nil
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1985
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1989
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1995
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1999
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2003
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2007
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2011
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2015
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2019
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2023
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2029
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2033
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2039
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2044
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2050
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2054
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2060
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2065
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2069
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2079
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2084
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 356:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2091
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 357:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2098
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2105
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 359:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2114
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2126
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2130
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2134
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2138
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 364:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2144
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 365:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2155
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2165
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2169
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2173
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2179
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2183
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2188
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2195
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2199
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2204
		{
			yyVAL.str = ""
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2208
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2212
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2220
		{
			yyVAL.str = yyDollar[1].str
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2224
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2228
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2234
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 384:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2248
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 385:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2252
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 386:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2266
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 387:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2280
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 388:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2299
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 389:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2308
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2312
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 391:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2316
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2329
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 393:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2339
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2344
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2349
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2353
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 417:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2385
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2391
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2395
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 420:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2401
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 421:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2405
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 422:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2411
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2417
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2425
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2430
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2438
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2442
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2448
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2452
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2457
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2467
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2471
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2476
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2480
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2484
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2488
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2492
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2496
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2500
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2504
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2508
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2512
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2516
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2520
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2530
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2570
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2574
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2580
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2584
		{
			yyVAL.str = "extended "
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2590
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2594
		{
			yyVAL.str = "full "
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2600
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2604
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2608
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2614
		{
			yyVAL.showFilter = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2618
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2622
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2628
		{
			yyVAL.str = ""
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2632
		{
			yyVAL.str = SessionStr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2636
		{
			yyVAL.str = GlobalStr
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2642
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2646
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2652
		{
			yyVAL.statement = &Begin{}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2656
		{
			yyVAL.statement = &Begin{}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2662
		{
			yyVAL.statement = &Commit{}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2668
		{
			yyVAL.statement = &Rollback{}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2674
		{
			yyVAL.statement = &OtherRead{}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2678
		{
			yyVAL.statement = &OtherRead{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2682
		{
			yyVAL.statement = &OtherRead{}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2686
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2690
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2695
		{
			setAllowComments(yylex, true)
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2699
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2705
		{
			yyVAL.bytes2 = nil
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2709
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2715
		{
			yyVAL.str = UnionStr
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2719
		{
			yyVAL.str = UnionAllStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2723
		{
			yyVAL.str = UnionDistinctStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2728
		{
			yyVAL.str = ""
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2732
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2736
		{
			yyVAL.str = SQLCacheStr
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2741
		{
			yyVAL.str = ""
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2745
		{
			yyVAL.str = DistinctStr
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2750
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2754
		{
			yyVAL.str = StraightJoinHint
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2759
		{
			yyVAL.selectExprs = nil
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2763
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2769
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2773
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2779
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2783
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2787
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 501:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2791
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2796
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2800
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2804
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2811
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2816
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2820
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2826
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2830
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2840
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2844
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2848
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2853
		{
			yyVAL.strs = []string{}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2857
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2863
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2867
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2873
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2877
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2881
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2885
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2889
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2893
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2899
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2903
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2909
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2914
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2918
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2924
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2928
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2941
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2945
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2949
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2953
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2959
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2961
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2965
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2967
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2971
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2973
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2981
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2985
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2989
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2996
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3002
		{
			yyVAL.str = JoinStr
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3006
		{
			yyVAL.str = JoinStr
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3010
		{
			yyVAL.str = JoinStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3016
		{
			yyVAL.str = StraightJoinStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3022
		{
			yyVAL.str = LeftJoinStr
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3026
		{
			yyVAL.str = LeftJoinStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3030
		{
			yyVAL.str = RightJoinStr
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3034
		{
			yyVAL.str = RightJoinStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3040
		{
			yyVAL.str = NaturalJoinStr
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3044
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3054
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3058
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3064
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3068
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3073
		{
			yyVAL.indexHints = nil
		}
	case 565:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3077
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 566:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3081
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3085
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3090
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3094
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3099
		{
			yyVAL.columns = nil
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3103
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3109
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3113
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3117
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3121
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3125
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3133
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3139
		{
			yyVAL.str = ""
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3143
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3149
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3153
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3159
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3163
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3167
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3171
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3175
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3179
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3183
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3187
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3191
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3195
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3201
		{
			yyVAL.str = IsNullStr
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3205
		{
			yyVAL.str = IsNotNullStr
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3209
		{
			yyVAL.str = IsTrueStr
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3213
		{
			yyVAL.str = IsNotTrueStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3217
		{
			yyVAL.str = IsFalseStr
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3221
		{
			yyVAL.str = IsNotFalseStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3227
		{
			yyVAL.str = EqualStr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3231
		{
			yyVAL.str = LessThanStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3235
		{
			yyVAL.str = GreaterThanStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3239
		{
			yyVAL.str = LessEqualStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3243
		{
			yyVAL.str = GreaterEqualStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3247
		{
			yyVAL.str = NotEqualStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3251
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3256
		{
			yyVAL.expr = nil
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3266
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3270
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3274
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3280
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3286
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3290
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3296
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3308
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3320
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3324
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3328
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3332
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3336
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3340
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3344
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3348
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3352
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3356
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3360
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3364
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3368
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3372
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3376
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3380
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3384
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3388
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3396
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3410
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3414
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3418
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3426
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3434
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3444
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3452
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3470
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 654:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3474
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3478
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3482
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 657:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3486
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 658:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3490
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 659:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3494
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 660:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3498
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 661:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3502
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 662:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3506
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 663:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3510
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 664:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3514
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 665:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3518
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3536
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3555
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3560
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3564
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3578
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3582
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3586
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3590
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3596
		{
			yyVAL.str = ""
		}
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3600
		{
			yyVAL.str = BooleanModeStr
		}
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3604
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 684:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3608
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3612
		{
			yyVAL.str = QueryExpansionStr
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3618
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3622
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3628
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3632
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3636
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3640
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3644
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3648
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3666
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3670
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3674
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3678
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3682
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3700
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3704
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3708
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3712
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3717
		{
			yyVAL.expr = nil
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3726
		{
			yyVAL.str = string("")
		}
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3730
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3736
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3740
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3746
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3751
		{
			yyVAL.expr = nil
		}
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3755
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3761
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 719:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3765
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3769
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3775
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3781
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3785
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3789
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3793
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3797
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3801
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3805
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3809
		{
			yyVAL.expr = &NullVal{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3815
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3824
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3828
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3833
		{
			yyVAL.exprs = nil
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3837
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3842
		{
			yyVAL.expr = nil
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3846
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3851
		{
			yyVAL.orderBy = nil
		}
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3855
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3861
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3865
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 741:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3871
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3876
		{
			yyVAL.str = AscScr
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3880
		{
			yyVAL.str = AscScr
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3884
		{
			yyVAL.str = DescScr
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3889
		{
			yyVAL.limit = nil
		}
	case 746:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3893
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3897
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3901
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3906
		{
			yyVAL.str = ""
		}
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3910
		{
			yyVAL.str = ForUpdateStr
		}
	case 751:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3914
		{
			yyVAL.str = ShareModeStr
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3927
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3931
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3935
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 755:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3940
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 756:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3944
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 757:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3948
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3955
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 759:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3959
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3963
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 761:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3967
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3972
		{
			yyVAL.updateExprs = nil
		}
	case 763:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3976
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3982
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 765:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3986
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3992
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3996
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 768:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4002
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4008
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4018
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4022
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 772:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4028
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4034
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4038
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 775:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4044
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4048
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4052
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4057
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4061
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 781:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4068
		{
			yyVAL.bytes = []byte("charset")
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4075
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 784:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4079
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4083
		{
			yyVAL.expr = &Default{}
		}
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4092
		{
			yyVAL.byt = 0
		}
	case 789:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4094
		{
			yyVAL.byt = 1
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4097
		{
			yyVAL.empty = struct{}{}
		}
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4099
		{
			yyVAL.empty = struct{}{}
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4102
		{
			yyVAL.str = ""
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4104
		{
			yyVAL.str = IgnoreStr
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4108
		{
			yyVAL.empty = struct{}{}
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4110
		{
			yyVAL.empty = struct{}{}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4112
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4114
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4116
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4118
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4120
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4122
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4124
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4126
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4129
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4131
		{
			yyVAL.empty = struct{}{}
		}
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4133
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4137
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4139
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4143
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4147
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4154
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4160
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4164
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4171
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4177
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4181
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4195
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 822:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4199
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 823:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4205
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4209
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4216
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4223
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4227
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4234
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4516
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4525
		{
			decNesting(yylex)
		}
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4530
		{
			forceEOF(yylex)
		}
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4535
		{
			forceEOF(yylex)
		}
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4539
		{
			forceEOF(yylex)
		}
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4543
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
