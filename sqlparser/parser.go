// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                      int
	empty                    struct{}
	statement                Statement
	selStmt                  SelectStatement
	ddl                      *DDL
	ins                      *Insert
	byt                      byte
	bytes                    []byte
	bytes2                   [][]byte
	str                      string
	strs                     []string
	selectExprs              SelectExprs
	selectExpr               SelectExpr
	columns                  Columns
	partitions               Partitions
	colName                  *ColName
	newQualifierColName      *NewQualifierColName
	tableExprs               TableExprs
	tableExpr                TableExpr
	joinCondition            JoinCondition
	tableName                TableName
	tableNames               TableNames
	indexHints               *IndexHints
	expr                     Expr
	exprs                    Exprs
	boolVal                  BoolVal
	colTuple                 ColTuple
	values                   Values
	valTuple                 ValTuple
	subquery                 *Subquery
	whens                    []*When
	when                     *When
	orderBy                  OrderBy
	order                    *Order
	limit                    *Limit
	updateExprs              UpdateExprs
	setExprs                 SetExprs
	updateExpr               *UpdateExpr
	setExpr                  *SetExpr
	colIdent                 ColIdent
	colIdents                []ColIdent
	tableIdent               TableIdent
	convertType              *ConvertType
	aliasedTableName         *AliasedTableExpr
	TableSpec                *TableSpec
	columnType               ColumnType
	colKeyOpt                ColumnKeyOption
	optVal                   *SQLVal
	LengthScaleOption        LengthScaleOption
	columnDefinition         *ColumnDefinition
	checkDefinition          *CheckDefinition
	indexDefinition          *IndexDefinition
	indexInfo                *IndexInfo
	indexOption              *IndexOption
	indexOptions             []*IndexOption
	indexPartition           *IndexPartition
	indexColumn              IndexColumn
	indexColumns             []IndexColumn
	indexColumnsOrExpression IndexColumnsOrExpression
	foreignKeyDefinition     *ForeignKeyDefinition
	partDefs                 []*PartitionDefinition
	partDef                  *PartitionDefinition
	partSpec                 *PartitionSpec
	vindexParam              VindexParam
	vindexParams             []VindexParam
	showFilter               *ShowFilter
	sequence                 *Sequence
	blockStatement           []Statement
	localVariable            *LocalVariable
	localVariables           []*LocalVariable
	arrayConstructor         *ArrayConstructor
	arrayElements            ArrayElements
	arrayElement             ArrayElement
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const TYPE = 57478
const VINDEX = 57479
const VINDEXES = 57480
const STATUS = 57481
const VARIABLES = 57482
const RESTRICT = 57483
const CASCADE = 57484
const NO = 57485
const ACTION = 57486
const PERMISSIVE = 57487
const RESTRICTIVE = 57488
const PUBLIC = 57489
const CURRENT_USER = 57490
const SESSION_USER = 57491
const PAD_INDEX = 57492
const FILLFACTOR = 57493
const IGNORE_DUP_KEY = 57494
const STATISTICS_NORECOMPUTE = 57495
const STATISTICS_INCREMENTAL = 57496
const ALLOW_ROW_LOCKS = 57497
const ALLOW_PAGE_LOCKS = 57498
const BEFORE = 57499
const AFTER = 57500
const EACH = 57501
const ROW = 57502
const SCROLL = 57503
const CURSOR = 57504
const OPEN = 57505
const CLOSE = 57506
const FETCH = 57507
const PRIOR = 57508
const FIRST = 57509
const LAST = 57510
const DEALLOCATE = 57511
const DEFERRABLE = 57512
const INITIALLY = 57513
const IMMEDIATE = 57514
const DEFERRED = 57515
const BEGIN = 57516
const START = 57517
const TRANSACTION = 57518
const COMMIT = 57519
const ROLLBACK = 57520
const BIT = 57521
const TINYINT = 57522
const SMALLINT = 57523
const SMALLSERIAL = 57524
const MEDIUMINT = 57525
const INT = 57526
const INTEGER = 57527
const SERIAL = 57528
const BIGINT = 57529
const BIGSERIAL = 57530
const INTNUM = 57531
const REAL = 57532
const DOUBLE = 57533
const PRECISION = 57534
const FLOAT_TYPE = 57535
const DECIMAL = 57536
const NUMERIC = 57537
const SMALLMONEY = 57538
const MONEY = 57539
const TIME = 57540
const TIMESTAMP = 57541
const DATETIME = 57542
const YEAR = 57543
const DATETIMEOFFSET = 57544
const DATETIME2 = 57545
const SMALLDATETIME = 57546
const CHAR = 57547
const VARCHAR = 57548
const VARYING = 57549
const BOOL = 57550
const CHARACTER = 57551
const VARBINARY = 57552
const NCHAR = 57553
const NVARCHAR = 57554
const NTEXT = 57555
const UUID = 57556
const TEXT = 57557
const TINYTEXT = 57558
const MEDIUMTEXT = 57559
const LONGTEXT = 57560
const CITEXT = 57561
const BLOB = 57562
const TINYBLOB = 57563
const MEDIUMBLOB = 57564
const LONGBLOB = 57565
const JSON = 57566
const JSONB = 57567
const ENUM = 57568
const GEOMETRY = 57569
const POINT = 57570
const LINESTRING = 57571
const POLYGON = 57572
const GEOMETRYCOLLECTION = 57573
const MULTIPOINT = 57574
const MULTILINESTRING = 57575
const MULTIPOLYGON = 57576
const VARIADIC = 57577
const ARRAY = 57578
const NOW = 57579
const GETDATE = 57580
const BPCHAR = 57581
const TEXT_PATTERN_OPS = 57582
const NULLX = 57583
const AUTO_INCREMENT = 57584
const APPROXNUM = 57585
const SIGNED = 57586
const UNSIGNED = 57587
const ZEROFILL = 57588
const ZONE = 57589
const AUTOINCREMENT = 57590
const DATABASES = 57591
const TABLES = 57592
const VITESS_KEYSPACES = 57593
const VITESS_SHARDS = 57594
const VITESS_TABLETS = 57595
const VSCHEMA_TABLES = 57596
const EXTENDED = 57597
const FULL = 57598
const PROCESSLIST = 57599
const NAMES = 57600
const CHARSET = 57601
const GLOBAL = 57602
const SESSION = 57603
const ISOLATION = 57604
const LEVEL = 57605
const READ = 57606
const WRITE = 57607
const ONLY = 57608
const REPEATABLE = 57609
const COMMITTED = 57610
const UNCOMMITTED = 57611
const SERIALIZABLE = 57612
const NEW = 57613
const CURRENT_TIMESTAMP = 57614
const DATABASE = 57615
const CURRENT_DATE = 57616
const CURRENT_TIME = 57617
const LOCALTIME = 57618
const LOCALTIMESTAMP = 57619
const UTC_DATE = 57620
const UTC_TIME = 57621
const UTC_TIMESTAMP = 57622
const REPLACE = 57623
const CONVERT = 57624
const CAST = 57625
const SUBSTR = 57626
const SUBSTRING = 57627
const GROUP_CONCAT = 57628
const SEPARATOR = 57629
const INHERIT = 57630
const MATCH = 57631
const AGAINST = 57632
const BOOLEAN = 57633
const LANGUAGE = 57634
const WITH = 57635
const WITHOUT = 57636
const PARSER = 57637
const QUERY = 57638
const EXPANSION = 57639
const UNUSED = 57640
const VIRTUAL = 57641
const STORED = 57642
const GENERATED = 57643
const ALWAYS = 57644
const IDENTITY = 57645
const SEQUENCE = 57646
const INCREMENT = 57647
const MINVALUE = 57648
const CACHE = 57649
const CYCLE = 57650
const OWNED = 57651
const NONE = 57652
const CLUSTERED = 57653
const NONCLUSTERED = 57654
const REPLICATION = 57655
const INCLUDE = 57656
const HOLDLOCK = 57657
const NOLOCK = 57658
const NOWAIT = 57659
const PAGLOCK = 57660
const ROWLOCK = 57661
const TABLELOCK = 57662
const TYPECAST = 57663
const CHECK = 57664

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"TYPE",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"DEFERRABLE",
	"INITIALLY",
	"IMMEDIATE",
	"DEFERRED",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"VARIADIC",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"TEXT_PATTERN_OPS",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"NEW",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"VIRTUAL",
	"STORED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"HOLDLOCK",
	"NOLOCK",
	"NOWAIT",
	"PAGLOCK",
	"ROWLOCK",
	"TABLELOCK",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 140,
	-2, 130,
	-1, 36,
	156, 468,
	157, 468,
	-2, 458,
	-1, 272,
	110, 815,
	-2, 811,
	-1, 273,
	110, 816,
	-2, 812,
	-1, 315,
	253, 825,
	-2, 711,
	-1, 347,
	81, 1038,
	-2, 82,
	-1, 348,
	81, 989,
	-2, 83,
	-1, 354,
	81, 968,
	-2, 782,
	-1, 356,
	81, 1012,
	-2, 784,
	-1, 602,
	253, 825,
	-2, 496,
	-1, 649,
	253, 825,
	-2, 496,
	-1, 678,
	52, 41,
	54, 41,
	-2, 43,
	-1, 839,
	110, 818,
	-2, 814,
	-1, 1074,
	253, 825,
	-2, 496,
	-1, 1090,
	5, 28,
	-2, 613,
	-1, 1115,
	5, 27,
	-2, 755,
	-1, 1222,
	5, 27,
	-2, 88,
	-1, 1458,
	5, 28,
	-2, 756,
	-1, 1558,
	5, 27,
	-2, 758,
	-1, 1725,
	5, 28,
	-2, 759,
	-1, 1874,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 18396

var yyAct = [...]int{
	273, 1656, 1570, 1613, 1118, 1608, 604, 3, 1573, 1715,
	1828, 769, 1020, 1607, 1616, 1152, 288, 277, 605, 1487,
	1698, 905, 534, 251, 53, 1464, 1131, 1468, 1315, 486,
	1679, 305, 815, 1155, 1345, 90, 923, 1316, 90, 521,
	1732, 948, 1084, 1224, 943, 1183, 276, 1177, 672, 1312,
	268, 245, 1015, 954, 250, 1829, 1028, 1284, 1029, 947,
	969, 906, 90, 90, 358, 670, 1136, 66, 353, 358,
	1288, 339, 358, 358, 90, 864, 876, 1079, 775, 90,
	873, 90, 1010, 1210, 688, 1545, 1123, 90, 998, 893,
	902, 841, 875, 519, 1775, 246, 247, 248, 249, 540,
	964, 484, 346, 349, 687, 659, 87, 674, 1061, 628,
	333, 546, 275, 1283, 708, 703, 343, 260, 554, 1194,
	985, 334, 872, 341, 1853, 1352, 568, 332, 982, 578,
	52, 21, 1821, 1372, 342, 578, 264, 1469, 1470, 1471,
	1472, 1473, 1474, 1762, 1285, 496, 487, 488, 1814, 1493,
	500, 562, 501, 565, 1358, 619, 1359, 1501, 508, 580,
	581, 582, 583, 584, 585, 586, 1886, 563, 564, 561,
	567, 566, 576, 577, 569, 570, 571, 572, 573, 574,
	575, 568, 1175, 1880, 578, 1750, 1751, 255, 1795, 257,
	1723, 48, 26, 27, 569, 570, 571, 572, 573, 574,
	575, 568, 303, 1627, 578, 1661, 1865, 1660, 984, 1449,
	1214, 1215, 1807, 28, 1021, 1766, 1132, 571, 572, 573,
	574, 575, 568, 1794, 90, 578, 1307, 1722, 358, 358,
	358, 358, 1747, 358, 1452, 498, 1144, 1339, 1340, 1143,
	358, 689, 1145, 690, 1363, 280, 1647, 567, 566, 576,
	577, 569, 570, 571, 572, 573, 574, 575, 568, 937,
	938, 578, 1338, 543, 936, 1752, 352, 358, 529, 1521,
	806, 490, 76, 1520, 494, 495, 1196, 807, 1188, 542,
	1190, 1189, 567, 566, 576, 577, 569, 570, 571, 572,
	573, 574, 575, 568, 987, 510, 578, 576, 577, 569,
	570, 571, 572, 573, 574, 575, 568, 337, 1633, 578,
	601, 85, 81, 82, 83, 999, 1544, 1687, 1632, 1547,
	70, 74, 522, 523, 524, 1813, 527, 1815, 989, 897,
	1393, 1392, 90, 531, 533, 71, 989, 75, 1353, 90,
	90, 90, 1441, 1439, 244, 358, 487, 488, 1448, 533,
	1884, 1785, 358, 72, 73, 68, 1756, 1878, 1877, 1861,
	1862, 579, 1693, 1628, 1629, 1631, 1011, 579, 1826, 1630,
	1758, 567, 566, 576, 577, 569, 570, 571, 572, 573,
	574, 575, 568, 1834, 349, 578, 567, 566, 576, 577,
	569, 570, 571, 572, 573, 574, 575, 568, 1615, 1589,
	578, 1282, 1753, 654, 1403, 1404, 1445, 533, 1680, 777,
	525, 526, 678, 1716, 1863, 1490, 579, 1879, 1262, 903,
	1538, 1409, 1717, 1162, 1502, 1555, 1495, 1494, 1169, 1168,
	352, 352, 352, 352, 1157, 352, 579, 1410, 1361, 1351,
	633, 634, 352, 514, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 1842, 579, 578, 1259,
	1419, 685, 1638, 1806, 679, 1648, 1661, 965, 1883, 556,
	777, 79, 1160, 503, 621, 622, 623, 624, 625, 626,
	627, 49, 84, 966, 492, 1174, 358, 1721, 965, 999,
	90, 69, 1703, 579, 1529, 924, 926, 1833, 90, 992,
	90, 358, 776, 90, 966, 785, 90, 516, 489, 518,
	90, 499, 358, 358, 358, 358, 358, 358, 358, 358,
	589, 1485, 1012, 1858, 1135, 1134, 358, 358, 579, 1289,
	1133, 90, 1754, 1755, 1757, 1759, 1760, 965, 515, 517,
	1485, 579, 1429, 1488, 1489, 1491, 358, 352, 223, 78,
	90, 79, 1428, 966, 694, 767, 358, 1260, 1431, 1258,
	57, 768, 80, 1291, 778, 779, 818, 1432, 1263, 781,
	925, 782, 1869, 1261, 786, 591, 592, 789, 794, 1652,
	701, 1461, 1430, 1379, 337, 59, 60, 61, 62, 63,
	1271, 1098, 1073, 842, 784, 813, 692, 603, 838, 558,
	358, 509, 808, 810, 358, 795, 796, 797, 798, 799,
	800, 801, 802, 553, 881, 945, 944, 579, 792, 803,
	804, 827, 551, 1267, 1672, 778, 779, 839, 1387, 1056,
	886, 889, 579, 1293, 1671, 1670, 895, 1298, 553, 1292,
	1704, 1705, 1706, 877, 1290, 816, 817, 1669, 552, 551,
	1296, 1094, 1668, 1093, 90, 1784, 1667, 90, 90, 90,
	90, 90, 820, 1294, 1295, 553, 1666, 837, 1664, 90,
	552, 551, 90, 907, 835, 485, 90, 513, 881, 1388,
	502, 90, 90, 1297, 1299, 358, 1400, 553, 707, 867,
	579, 552, 551, 358, 633, 634, 848, 1146, 1121, 358,
	1266, 882, 883, 352, 869, 870, 812, 890, 553, 1057,
	846, 847, 845, 691, 352, 352, 352, 352, 352, 352,
	352, 352, 552, 551, 349, 904, 1875, 891, 352, 352,
	899, 1876, 942, 1873, 1309, 894, 894, 1105, 949, 553,
	965, 898, 811, 900, 901, 960, 931, 959, 822, 961,
	962, 1446, 1154, 932, 772, 963, 966, 1588, 556, 552,
	551, 352, 548, 1591, 505, 506, 507, 908, 358, 929,
	911, 1665, 358, 920, 358, 90, 553, 90, 1587, 909,
	910, 358, 912, 928, 90, 1154, 90, 933, 1845, 90,
	358, 934, 552, 551, 1095, 1733, 1844, 1812, 1249, 1311,
	1154, 952, 871, 533, 1165, 491, 352, 843, 1811, 553,
	1000, 1001, 1002, 1003, 1734, 887, 887, 1017, 544, 552,
	551, 887, 1810, 1682, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 553, 50, 578, 552,
	551, 1063, 552, 551, 1013, 1014, 1027, 844, 1033, 1070,
	1071, 1072, 1164, 838, 77, 1051, 553, 1052, 887, 553,
	1053, 1197, 1735, 1250, 1808, 1024, 1153, 1026, 1252, 1245,
	1246, 532, 1253, 1248, 1247, 1034, 493, 842, 1255, 1251,
	497, 1731, 839, 1054, 831, 833, 834, 352, 1154, 1254,
	832, 1601, 1523, 1513, 1512, 352, 1244, 1197, 1197, 1522,
	1368, 352, 337, 337, 337, 337, 337, 1809, 865, 1115,
	866, 1662, 1219, 1217, 1062, 331, 1574, 337, 1069, 1554,
	1518, 1085, 1119, 1421, 1211, 1171, 337, 1356, 358, 1576,
	1355, 90, 1691, 1891, 1138, 1354, 1140, 1075, 1562, 1871,
	1482, 1864, 1482, 1820, 1482, 1802, 1691, 1801, 358, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	358, 1163, 578, 1798, 1797, 1790, 533, 1087, 1147, 982,
	1018, 358, 1482, 1787, 352, 1023, 352, 1482, 1786, 533,
	90, 868, 1104, 707, 1102, 1562, 1713, 949, 791, 1149,
	790, 971, 352, 1170, 773, 771, 1139, 1575, 1128, 1187,
	1562, 1598, 1562, 533, 1819, 978, 511, 967, 661, 664,
	665, 666, 662, 968, 663, 667, 352, 504, 1124, 1125,
	1141, 485, 358, 1565, 1564, 1686, 1222, 1562, 1563, 1185,
	1685, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1482, 1481,
	1335, 533, 1692, 1204, 1691, 1206, 1207, 1208, 1209, 1460,
	533, 1172, 1396, 1395, 358, 1390, 1391, 90, 90, 1390,
	1389, 1225, 1158, 1159, 1161, 90, 974, 1684, 970, 979,
	579, 1088, 533, 682, 358, 1606, 976, 975, 1605, 1198,
	1199, 1602, 1201, 1202, 1203, 656, 533, 1231, 1536, 1212,
	1514, 843, 1213, 1216, 879, 1218, 294, 293, 296, 297,
	298, 299, 879, 533, 1232, 295, 300, 699, 698, 1504,
	1380, 1120, 1230, 1276, 683, 1274, 681, 358, 358, 1229,
	54, 23, 1313, 1319, 1773, 1119, 1228, 1308, 1100, 1229,
	1137, 907, 1097, 23, 1456, 1314, 1272, 907, 1304, 930,
	1120, 681, 23, 1323, 1337, 1113, 1317, 1264, 1114, 358,
	352, 358, 358, 656, 1278, 1277, 1482, 1344, 1088, 1088,
	1557, 656, 1156, 1336, 1503, 1287, 1301, 839, 50, 257,
	1300, 1099, 655, 1166, 1572, 1096, 337, 1525, 1524, 1239,
	50, 1324, 1119, 1399, 1322, 1192, 1394, 1574, 949, 50,
	949, 1148, 1343, 1357, 579, 1187, 656, 935, 1088, 972,
	1576, 684, 814, 50, 1881, 973, 1818, 1792, 1342, 1689,
	1688, 1676, 1675, 1362, 270, 1635, 50, 1634, 1600, 1539,
	1378, 90, 358, 989, 352, 1185, 1369, 1360, 1016, 90,
	1377, 1375, 1365, 1330, 358, 1328, 358, 1371, 1220, 1221,
	826, 1011, 1176, 1381, 1382, 358, 1384, 1385, 1386, 1240,
	1236, 1233, 1151, 1241, 1238, 1237, 352, 90, 980, 75,
	981, 1124, 1125, 358, 1005, 1483, 1004, 65, 1575, 770,
	1242, 1657, 358, 1681, 1526, 90, 352, 1235, 1423, 977,
	1313, 1127, 788, 774, 530, 917, 1412, 1407, 1406, 1383,
	918, 915, 1397, 1130, 1129, 1414, 916, 914, 913, 1839,
	1405, 352, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1417,
	919, 1276, 665, 666, 261, 262, 887, 1420, 1793, 1321,
	1137, 1270, 887, 1058, 547, 1837, 1427, 1068, 1416, 358,
	1067, 1205, 358, 358, 358, 90, 358, 545, 535, 697,
	1424, 512, 1367, 358, 1454, 1827, 1437, 1463, 816, 817,
	536, 352, 1540, 352, 1346, 1025, 787, 1475, 1476, 1477,
	1480, 1366, 1227, 1019, 1455, 780, 358, 669, 547, 1492,
	258, 259, 1854, 358, 1535, 1402, 1350, 1498, 1066, 252,
	358, 1192, 949, 1478, 1149, 1816, 1065, 1187, 1497, 1641,
	253, 1500, 661, 664, 665, 666, 662, 54, 663, 667,
	358, 358, 1640, 1543, 1120, 1030, 1031, 1032, 1531, 358,
	1532, 1533, 1534, 1673, 1781, 819, 1780, 1185, 1505, 1515,
	358, 1779, 1778, 1530, 1398, 1749, 1748, 1674, 1516, 549,
	257, 1649, 48, 26, 27, 1167, 1411, 809, 1413, 1225,
	949, 56, 1528, 1527, 1627, 1659, 58, 1415, 1349, 1348,
	1622, 8, 1619, 7, 28, 1620, 6, 1618, 5, 1234,
	1408, 358, 358, 680, 51, 1418, 1558, 1, 1083, 600,
	292, 1860, 1832, 278, 352, 1467, 878, 880, 1517, 1774,
	1519, 1696, 1769, 358, 1702, 1683, 1173, 67, 1317, 1765,
	1690, 1401, 896, 1226, 1556, 358, 593, 594, 595, 596,
	597, 598, 599, 1586, 1892, 1243, 266, 1022, 1590, 1223,
	1039, 1714, 1728, 1571, 1484, 1569, 1585, 1584, 957, 946,
	337, 483, 64, 1663, 1546, 1594, 358, 90, 1592, 958,
	358, 1465, 956, 955, 1465, 1465, 1465, 953, 1479, 700,
	358, 1609, 922, 983, 1195, 352, 986, 706, 704, 1633,
	705, 702, 709, 231, 344, 668, 693, 550, 1257, 1632,
	1256, 1035, 1603, 358, 1604, 1636, 1651, 1265, 1465, 805,
	1055, 528, 233, 1192, 587, 1506, 1064, 1142, 351, 1761,
	1658, 1320, 352, 539, 1639, 1542, 1650, 1103, 616, 1317,
	892, 279, 1617, 1654, 830, 291, 1655, 290, 1612, 289,
	821, 1112, 352, 352, 1628, 1629, 1631, 560, 336, 652,
	1630, 1537, 660, 658, 657, 1126, 1122, 335, 306, 47,
	1273, 1451, 1541, 1646, 825, 25, 55, 263, 358, 358,
	358, 358, 19, 18, 17, 358, 358, 20, 16, 15,
	1711, 1712, 14, 29, 13, 12, 11, 10, 9, 1625,
	1624, 1695, 1623, 358, 1621, 4, 254, 22, 358, 2,
	1719, 0, 358, 1560, 1561, 0, 47, 907, 1626, 1729,
	0, 1724, 1694, 0, 256, 0, 358, 358, 0, 1743,
	338, 0, 1744, 1707, 1710, 1346, 0, 0, 0, 0,
	358, 0, 358, 1741, 1742, 1764, 0, 1593, 358, 0,
	0, 0, 1763, 358, 0, 1609, 0, 0, 1745, 1736,
	1737, 1738, 1739, 1740, 0, 0, 0, 358, 0, 1772,
	0, 0, 49, 0, 0, 1788, 0, 1610, 1611, 0,
	0, 0, 1614, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 1465, 0, 0, 1086, 0, 0, 1626, 1770,
	0, 0, 0, 1090, 1091, 1092, 0, 1799, 1800, 537,
	541, 0, 1101, 1782, 0, 1653, 1817, 1107, 1804, 1805,
	1108, 1109, 1110, 1111, 358, 840, 559, 1803, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 358, 1824, 1823, 1831, 358, 1838, 1830,
	1836, 1835, 0, 0, 0, 1843, 0, 1841, 0, 0,
	0, 0, 0, 606, 0, 0, 0, 90, 0, 358,
	1848, 0, 617, 1851, 1850, 1626, 358, 1822, 358, 0,
	1697, 1699, 1700, 1701, 0, 0, 0, 1346, 1346, 1626,
	1617, 0, 0, 90, 1849, 1868, 520, 520, 520, 520,
	1870, 520, 887, 1872, 0, 1726, 0, 0, 520, 0,
	1727, 1874, 0, 0, 1730, 0, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 47, 0, 0, 1614, 1346,
	0, 0, 358, 0, 1857, 1887, 1694, 1857, 0, 0,
	588, 1610, 1346, 590, 1767, 1888, 0, 0, 0, 0,
	707, 0, 0, 1626, 0, 1777, 0, 0, 0, 1882,
	0, 0, 0, 0, 1867, 1626, 1626, 1626, 0, 1791,
	0, 0, 602, 0, 0, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 0, 618, 620, 620, 620, 620,
	620, 620, 620, 620, 1857, 648, 649, 650, 651, 0,
	0, 0, 0, 0, 0, 0, 0, 671, 0, 1286,
	1626, 0, 1626, 1626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 0, 1825, 0, 990, 991,
	993, 994, 995, 0, 996, 997, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1346, 0, 0, 0, 1840,
	0, 1006, 1007, 1008, 0, 1009, 0, 0, 1334, 0,
	0, 0, 0, 0, 1279, 0, 1626, 0, 0, 0,
	1626, 1465, 0, 0, 0, 0, 0, 0, 707, 0,
	1855, 0, 0, 0, 567, 566, 576, 577, 569, 570,
	571, 572, 573, 574, 575, 568, 0, 0, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 829,
	0, 1076, 1077, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1614, 0, 0, 0, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	0, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 0, 0, 884, 885, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	520, 520, 520, 520, 520, 520, 520, 520, 1080, 0,
	0, 0, 0, 0, 520, 520, 0, 0, 0, 1425,
	0, 0, 0, 0, 0, 0, 1045, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1044, 0, 1442, 1443, 1444, 0, 0, 1447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1457, 1458, 1459, 1081, 1462, 0, 0, 1049, 941, 0,
	0, 0, 0, 0, 0, 0, 1043, 0, 0, 47,
	0, 0, 629, 567, 566, 576, 577, 569, 570, 571,
	572, 573, 574, 575, 568, 0, 607, 578, 567, 566,
	576, 577, 569, 570, 571, 572, 573, 574, 575, 568,
	0, 0, 578, 0, 0, 1511, 631, 0, 0, 0,
	0, 0, 0, 0, 0, 1040, 1037, 1038, 1200, 1036,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 338, 338, 338, 338, 338,
	579, 0, 538, 0, 0, 0, 0, 0, 1047, 1050,
	671, 0, 927, 0, 0, 1280, 1281, 0, 0, 338,
	0, 636, 637, 638, 639, 640, 641, 642, 643, 644,
	645, 1302, 1303, 0, 1305, 1306, 0, 88, 1059, 1060,
	243, 541, 632, 1553, 0, 0, 0, 0, 0, 0,
	646, 630, 0, 0, 579, 0, 0, 635, 0, 0,
	0, 0, 267, 0, 88, 88, 0, 1566, 1567, 1568,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 88, 0, 88, 0, 0, 0, 1042, 0, 88,
	0, 1597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	520, 0, 520, 0, 23, 24, 48, 26, 27, 0,
	1041, 1106, 0, 0, 0, 0, 0, 0, 520, 0,
	0, 0, 0, 647, 42, 0, 0, 0, 28, 0,
	1642, 1643, 1644, 1645, 257, 0, 48, 26, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 1627, 0,
	1046, 50, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 1374, 1376, 1048, 1074, 0, 579,
	0, 0, 0, 0, 0, 0, 257, 1677, 48, 26,
	27, 0, 0, 0, 579, 0, 0, 0, 0, 0,
	1627, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	28, 0, 0, 0, 1426, 0, 0, 0, 1859, 0,
	0, 30, 31, 33, 32, 35, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1720, 0,
	0, 1116, 1117, 1725, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	1856, 0, 0, 1633, 0, 0, 0, 0, 0, 338,
	1746, 0, 0, 1632, 0, 1434, 1435, 0, 1436, 0,
	0, 0, 1438, 257, 1440, 48, 26, 27, 0, 0,
	257, 0, 48, 26, 27, 0, 0, 1627, 0, 38,
	39, 0, 40, 41, 1627, 1633, 1789, 28, 0, 0,
	0, 0, 0, 0, 28, 1632, 0, 0, 1628, 1629,
	1631, 0, 0, 0, 1630, 0, 229, 0, 0, 0,
	0, 0, 1310, 1486, 88, 0, 0, 0, 0, 0,
	0, 88, 676, 88, 0, 0, 0, 1325, 1326, 0,
	239, 1327, 0, 0, 1329, 0, 0, 0, 47, 0,
	1628, 1629, 1631, 0, 0, 0, 1630, 0, 0, 0,
	0, 0, 0, 1341, 257, 0, 48, 26, 27, 0,
	1548, 1549, 0, 1550, 1551, 1552, 0, 0, 1627, 0,
	0, 0, 520, 0, 0, 0, 0, 0, 28, 0,
	0, 224, 1633, 0, 0, 0, 49, 226, 0, 1633,
	0, 0, 1632, 0, 232, 228, 0, 0, 0, 1632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1866, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 230, 0, 0, 0, 234,
	0, 0, 0, 1318, 0, 47, 0, 1628, 1629, 1631,
	0, 0, 0, 1630, 1628, 1629, 1631, 0, 1783, 0,
	1630, 0, 1331, 1332, 1333, 1771, 0, 0, 49, 0,
	0, 1893, 1894, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 1633, 1422, 0, 0, 0, 0, 0,
	88, 0, 88, 1632, 0, 88, 0, 0, 88, 1364,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 1373, 0, 0, 0, 0,
	0, 602, 0, 88, 0, 0, 0, 0, 1453, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 1628, 1629,
	1631, 0, 88, 0, 1630, 0, 0, 0, 0, 0,
	227, 793, 235, 236, 237, 238, 242, 1708, 0, 0,
	0, 241, 240, 0, 0, 49, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 0, 0, 0, 0,
	0, 267, 267, 338, 0, 888, 888, 267, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 267, 267, 267, 267, 0, 88, 0, 888, 88,
	88, 88, 88, 88, 0, 0, 49, 0, 0, 0,
	0, 921, 0, 0, 88, 0, 0, 0, 676, 0,
	0, 0, 0, 88, 88, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1595, 0, 0, 0, 0, 1599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 88,
	0, 0, 0, 0, 0, 0, 88, 0, 88, 0,
	0, 88, 0, 0, 0, 1318, 0, 0, 1559, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 793, 0, 0, 0,
	1889, 0, 0, 1678, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 1596, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	1709, 0, 0, 0, 0, 0, 0, 1718, 606, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 1637,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 1318, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1768,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 1193, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
	1269, 0, 0, 0, 0, 0, 1796, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 793, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1193, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1885, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 155, 0, 0, 93, 88, 0, 274,
	0, 0, 0, 117, 271, 0, 0, 131, 316, 134,
	0, 0, 177, 143, 0, 0, 0, 0, 307, 308,
	0, 0, 0, 0, 0, 0, 939, 0, 50, 0,
	0, 272, 294, 293, 296, 297, 298, 299, 0, 0,
	106, 295, 300, 301, 302, 940, 0, 0, 269, 286,
	0, 315, 0, 0, 0, 0, 0, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 328, 0, 285,
	0, 0, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 1193, 0, 0, 0, 204, 0, 0,
	326, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 1193, 0, 88,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 0, 0, 0, 0,
	0, 0, 0, 325, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	469, 459, 0, 420, 471, 390, 408, 479, 410, 411,
	446, 370, 429, 155, 405, 388, 93, 393, 363, 400,
	364, 391, 422, 117, 389, 461, 432, 131, 477, 134,
	437, 1193, 177, 143, 0, 0, 424, 463, 427, 454,
	419, 447, 378, 436, 472, 406, 442, 473, 0, 0,
	0, 357, 0, 950, 951, 0, 0, 0, 0, 0,
	106, 0, 441, 468, 402, 482, 445, 362, 439, 0,
	368, 371, 478, 466, 397, 398, 1150, 0, 0, 0,
	0, 0, 0, 423, 428, 451, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 0, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 0, 183, 121, 407, 132, 449,
	480, 470, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 1847,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 88, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 365, 0, 178, 197, 214, 215,
	366, 386, 465, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 443, 170,
	108, 196, 176, 0, 381, 385, 379, 380, 430, 431,
	474, 475, 476, 453, 376, 0, 383, 384, 0, 460,
	126, 433, 92, 100, 133, 481, 211, 0, 164, 119,
	198, 0, 0, 409, 361, 413, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 171, 417, 412, 438, 440,
	448, 456, 469, 459, 105, 420, 471, 390, 408, 479,
	410, 411, 446, 370, 429, 155, 405, 388, 93, 393,
	363, 400, 364, 391, 422, 117, 389, 461, 432, 131,
	477, 134, 437, 0, 177, 143, 0, 0, 424, 463,
	427, 454, 419, 447, 378, 436, 472, 406, 442, 473,
	0, 0, 0, 357, 0, 950, 951, 0, 0, 0,
	0, 0, 106, 0, 441, 468, 402, 482, 445, 362,
	439, 0, 368, 371, 478, 466, 397, 398, 0, 0,
	0, 0, 0, 0, 0, 423, 428, 451, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 0, 435,
	0, 0, 0, 375, 369, 0, 421, 0, 0, 0,
	377, 0, 395, 452, 0, 359, 457, 464, 418, 204,
	467, 415, 414, 162, 0, 109, 0, 183, 121, 407,
	132, 449, 480, 470, 425, 462, 392, 401, 111, 399,
	169, 156, 195, 434, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 367, 360, 396, 455, 458, 382, 444, 372, 403,
	450, 404, 426, 387, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 365, 0, 178, 197,
	214, 215, 366, 386, 465, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	443, 170, 108, 196, 176, 0, 381, 385, 379, 380,
	430, 431, 474, 475, 476, 453, 376, 0, 383, 384,
	0, 460, 126, 433, 92, 100, 133, 481, 211, 0,
	164, 119, 198, 0, 0, 409, 361, 413, 0, 0,
	0, 0, 0, 0, 0, 373, 374, 171, 417, 412,
	438, 440, 448, 456, 469, 459, 105, 420, 471, 390,
	408, 479, 410, 411, 446, 370, 429, 155, 405, 388,
	93, 393, 363, 400, 364, 391, 422, 117, 389, 461,
	432, 131, 477, 134, 437, 0, 177, 143, 0, 0,
	424, 463, 427, 454, 419, 447, 378, 436, 472, 406,
	442, 473, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 441, 468, 402, 482,
	445, 362, 439, 0, 368, 371, 478, 466, 397, 398,
	0, 0, 0, 0, 0, 0, 0, 423, 428, 451,
	416, 0, 0, 0, 0, 0, 0, 1275, 0, 394,
	0, 435, 0, 0, 0, 375, 369, 0, 421, 0,
	0, 0, 377, 0, 395, 452, 0, 359, 457, 464,
	418, 204, 467, 415, 414, 162, 0, 109, 0, 183,
	121, 407, 132, 449, 480, 470, 425, 462, 392, 401,
	111, 399, 169, 156, 195, 434, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 367, 360, 396, 455, 458, 382, 444,
	372, 403, 450, 404, 426, 387, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 365, 0,
	178, 197, 214, 215, 366, 386, 465, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 443, 170, 108, 196, 176, 0, 381, 385,
	379, 380, 430, 431, 474, 475, 476, 453, 376, 0,
	383, 384, 0, 460, 126, 433, 92, 100, 133, 481,
	211, 0, 164, 119, 198, 0, 0, 409, 361, 413,
	0, 0, 0, 0, 0, 0, 0, 373, 374, 171,
	417, 412, 438, 440, 448, 456, 469, 459, 105, 420,
	471, 390, 408, 479, 410, 411, 446, 370, 429, 155,
	405, 388, 93, 393, 363, 400, 364, 391, 422, 117,
	389, 461, 432, 131, 477, 134, 437, 0, 177, 143,
	0, 0, 424, 463, 427, 454, 419, 447, 378, 436,
	472, 406, 442, 473, 50, 0, 0, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 441, 468,
	402, 482, 445, 362, 439, 0, 368, 371, 478, 466,
	397, 398, 0, 0, 0, 0, 0, 0, 0, 423,
	428, 451, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 0, 435, 0, 0, 0, 375, 369, 0,
	421, 0, 0, 0, 377, 0, 395, 452, 0, 359,
	457, 464, 418, 204, 467, 415, 414, 162, 0, 109,
	0, 183, 121, 407, 132, 449, 480, 470, 425, 462,
	392, 401, 111, 399, 169, 156, 195, 434, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 367, 360, 396, 455, 458,
	382, 444, 372, 403, 450, 404, 426, 387, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	365, 0, 178, 197, 214, 215, 366, 386, 465, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 443, 170, 108, 196, 176, 0,
	381, 385, 379, 380, 430, 431, 474, 475, 476, 453,
	376, 0, 383, 384, 0, 460, 126, 433, 92, 100,
	133, 481, 211, 0, 164, 119, 198, 0, 0, 409,
	361, 413, 0, 0, 0, 0, 0, 0, 0, 373,
	374, 171, 417, 412, 438, 440, 448, 456, 469, 459,
	105, 420, 471, 390, 408, 479, 410, 411, 446, 370,
	429, 155, 405, 388, 93, 393, 363, 400, 364, 391,
	422, 117, 389, 461, 432, 131, 477, 134, 437, 0,
	177, 143, 0, 0, 424, 463, 427, 454, 419, 447,
	378, 436, 472, 406, 442, 473, 0, 0, 0, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	441, 468, 402, 482, 445, 362, 439, 0, 368, 371,
	478, 466, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 423, 428, 451, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 0, 435, 0, 0, 0, 375,
	369, 0, 421, 0, 0, 0, 377, 0, 395, 452,
	0, 359, 457, 464, 418, 204, 467, 415, 414, 162,
	0, 109, 0, 183, 121, 407, 132, 449, 480, 470,
	425, 462, 392, 401, 111, 399, 169, 156, 195, 434,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 367, 360, 396,
	455, 458, 382, 444, 372, 403, 450, 404, 426, 387,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 355,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 365, 0, 178, 197, 214, 215, 366, 386,
	465, 207, 208, 209, 210, 0, 0, 0, 356, 354,
	125, 174, 129, 136, 165, 212, 443, 170, 108, 196,
	176, 350, 381, 385, 379, 380, 430, 431, 474, 475,
	476, 453, 376, 0, 383, 384, 0, 460, 126, 433,
	92, 100, 133, 481, 211, 0, 164, 119, 198, 0,
	0, 409, 361, 413, 0, 0, 0, 0, 0, 0,
	0, 373, 374, 171, 417, 412, 438, 440, 448, 456,
	469, 459, 105, 420, 471, 390, 408, 479, 410, 411,
	446, 370, 429, 155, 405, 388, 93, 393, 363, 400,
	364, 391, 422, 117, 389, 461, 432, 131, 477, 134,
	437, 0, 177, 143, 0, 0, 424, 463, 427, 454,
	419, 447, 378, 436, 472, 406, 442, 473, 0, 0,
	0, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 441, 468, 402, 482, 445, 362, 439, 0,
	368, 371, 478, 466, 397, 398, 0, 0, 0, 0,
	0, 0, 0, 423, 428, 451, 416, 0, 0, 0,
	0, 0, 0, 836, 0, 394, 0, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 0, 183, 121, 407, 132, 449,
	480, 470, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 365, 0, 178, 197, 214, 215,
	366, 386, 465, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 443, 170,
	108, 196, 176, 0, 381, 385, 379, 380, 430, 431,
	474, 475, 476, 453, 376, 0, 383, 384, 0, 460,
	126, 433, 92, 100, 133, 481, 211, 0, 164, 119,
	198, 0, 0, 409, 361, 413, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 171, 417, 412, 438, 440,
	448, 456, 469, 459, 105, 420, 471, 390, 408, 479,
	410, 411, 446, 370, 429, 155, 405, 388, 93, 393,
	363, 400, 364, 391, 422, 117, 389, 461, 432, 131,
	477, 134, 437, 0, 177, 143, 0, 0, 424, 463,
	427, 454, 419, 447, 378, 436, 472, 406, 442, 473,
	0, 0, 0, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 441, 468, 402, 482, 445, 362,
	439, 0, 368, 371, 478, 466, 397, 398, 0, 0,
	0, 0, 0, 0, 0, 423, 428, 451, 416, 0,
	0, 0, 0, 0, 0, 0, 0, 394, 0, 435,
	0, 0, 0, 375, 369, 0, 421, 0, 0, 0,
	377, 0, 395, 452, 0, 359, 457, 464, 418, 204,
	467, 415, 414, 162, 0, 109, 0, 183, 121, 407,
	132, 449, 480, 470, 425, 462, 392, 401, 111, 399,
	169, 156, 195, 434, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 367, 360, 396, 455, 458, 382, 444, 372, 403,
	450, 404, 426, 387, 0, 0, 0, 0, 94, 184,
	686, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 355, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 365, 0, 178, 197,
	214, 215, 366, 386, 465, 207, 208, 209, 210, 0,
	0, 0, 356, 354, 125, 174, 129, 136, 165, 212,
	443, 170, 108, 196, 176, 350, 381, 385, 379, 380,
	430, 431, 474, 475, 476, 453, 376, 0, 383, 384,
	0, 460, 126, 433, 92, 100, 133, 481, 211, 0,
	164, 119, 198, 0, 0, 409, 361, 413, 0, 0,
	0, 0, 0, 0, 0, 373, 374, 171, 417, 412,
	438, 440, 448, 456, 469, 459, 105, 420, 471, 390,
	408, 479, 410, 411, 446, 370, 429, 155, 405, 388,
	93, 393, 363, 400, 364, 391, 422, 117, 389, 461,
	432, 131, 477, 134, 437, 0, 177, 143, 0, 0,
	424, 463, 427, 454, 419, 447, 378, 436, 472, 406,
	442, 473, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 441, 468, 402, 482,
	445, 362, 439, 0, 368, 371, 478, 466, 397, 398,
	0, 0, 0, 0, 0, 0, 0, 423, 428, 451,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 394,
	0, 435, 0, 0, 0, 375, 369, 0, 421, 0,
	0, 0, 377, 0, 395, 452, 0, 359, 457, 464,
	418, 204, 467, 415, 414, 162, 0, 109, 0, 183,
	121, 407, 132, 449, 480, 470, 425, 462, 392, 401,
	111, 399, 169, 156, 195, 434, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 367, 360, 396, 455, 458, 382, 444,
	372, 403, 450, 404, 426, 387, 0, 0, 0, 0,
	94, 184, 345, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 355, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 365, 0,
	178, 197, 214, 215, 366, 386, 465, 207, 208, 209,
	210, 0, 0, 0, 356, 354, 348, 347, 129, 136,
	165, 212, 443, 170, 108, 196, 176, 350, 381, 385,
	379, 380, 430, 431, 474, 475, 476, 453, 376, 0,
	383, 384, 0, 460, 126, 433, 92, 100, 133, 481,
	211, 0, 164, 119, 198, 0, 0, 409, 361, 413,
	0, 0, 0, 0, 0, 0, 0, 373, 374, 171,
	417, 412, 438, 440, 448, 456, 469, 459, 105, 420,
	471, 390, 408, 479, 410, 411, 446, 370, 429, 155,
	405, 388, 93, 393, 363, 400, 364, 391, 422, 117,
	389, 461, 432, 131, 477, 134, 437, 0, 177, 143,
	0, 0, 424, 463, 427, 454, 419, 447, 378, 436,
	472, 406, 442, 473, 0, 0, 0, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 441, 468,
	402, 482, 445, 362, 439, 0, 368, 371, 478, 466,
	397, 398, 0, 0, 0, 0, 0, 0, 0, 423,
	428, 451, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 394, 0, 435, 0, 0, 0, 375, 369, 0,
	421, 0, 0, 0, 377, 0, 395, 452, 0, 359,
	457, 464, 418, 204, 467, 415, 414, 162, 0, 109,
	0, 183, 121, 407, 132, 449, 480, 470, 425, 462,
	392, 401, 111, 399, 169, 156, 195, 434, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 367, 360, 396, 455, 458,
	382, 444, 372, 403, 450, 404, 426, 387, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	365, 0, 178, 197, 214, 215, 366, 386, 465, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 443, 170, 108, 196, 176, 0,
	381, 385, 379, 380, 430, 431, 474, 475, 476, 453,
	376, 0, 383, 384, 0, 460, 126, 433, 92, 100,
	133, 481, 211, 0, 164, 119, 198, 0, 0, 409,
	361, 413, 0, 0, 0, 0, 0, 0, 0, 373,
	374, 171, 417, 412, 438, 440, 448, 456, 469, 459,
	105, 420, 471, 390, 408, 479, 410, 411, 446, 370,
	429, 155, 405, 388, 93, 393, 363, 400, 364, 391,
	422, 117, 389, 461, 432, 131, 477, 134, 437, 0,
	177, 143, 0, 0, 424, 463, 427, 454, 419, 447,
	378, 436, 472, 406, 442, 473, 0, 0, 0, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	441, 468, 402, 482, 445, 362, 439, 0, 368, 371,
	478, 466, 397, 398, 0, 0, 0, 0, 0, 0,
	0, 423, 428, 451, 416, 0, 0, 0, 0, 0,
	0, 0, 0, 394, 0, 435, 0, 0, 0, 375,
	369, 0, 421, 0, 0, 0, 377, 0, 395, 452,
	0, 359, 457, 464, 418, 204, 467, 415, 414, 162,
	0, 109, 0, 183, 121, 407, 132, 449, 480, 470,
	425, 462, 392, 401, 111, 399, 169, 156, 195, 434,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 367, 360, 396,
	455, 458, 382, 444, 372, 403, 450, 404, 426, 387,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 365, 0, 178, 197, 214, 215, 366, 386,
	465, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 443, 170, 108, 196,
	176, 0, 381, 385, 379, 380, 430, 431, 474, 475,
	476, 453, 376, 0, 383, 384, 0, 460, 126, 433,
	92, 100, 133, 481, 211, 0, 164, 119, 198, 0,
	0, 409, 361, 413, 0, 0, 0, 0, 0, 0,
	0, 373, 374, 171, 417, 412, 438, 440, 448, 456,
	469, 459, 105, 420, 471, 390, 408, 479, 410, 411,
	446, 370, 429, 155, 405, 388, 93, 393, 363, 400,
	364, 391, 422, 117, 389, 461, 432, 131, 477, 134,
	437, 0, 177, 143, 0, 0, 424, 463, 427, 454,
	419, 447, 378, 436, 472, 406, 442, 473, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 441, 468, 402, 482, 445, 362, 439, 0,
	368, 371, 478, 466, 397, 398, 0, 0, 0, 0,
	0, 0, 0, 423, 428, 451, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 394, 0, 435, 0, 0,
	0, 375, 369, 0, 421, 0, 0, 0, 377, 0,
	395, 452, 0, 359, 457, 464, 418, 204, 467, 415,
	414, 162, 0, 109, 0, 183, 121, 407, 132, 449,
	480, 470, 425, 462, 392, 401, 111, 399, 169, 156,
	195, 434, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 367,
	360, 396, 455, 458, 382, 444, 372, 403, 450, 404,
	426, 387, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 365, 0, 178, 197, 214, 215,
	366, 386, 465, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 443, 170,
	108, 196, 176, 0, 381, 385, 379, 380, 430, 431,
	474, 475, 476, 453, 376, 0, 383, 384, 0, 460,
	126, 433, 92, 100, 133, 481, 211, 0, 164, 119,
	198, 0, 0, 409, 361, 413, 0, 0, 0, 0,
	0, 0, 0, 373, 374, 171, 417, 412, 438, 440,
	448, 456, 155, 0, 105, 93, 874, 0, 274, 0,
	0, 0, 117, 271, 0, 0, 131, 316, 134, 0,
	0, 177, 143, 0, 0, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 294, 293, 296, 297, 298, 299, 0, 0, 106,
	295, 300, 301, 302, 0, 0, 0, 269, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 265, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 330, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 304, 317, 327, 323, 324, 321, 322, 320,
	319, 318, 329, 309, 310, 311, 312, 314, 0, 126,
	313, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 274, 0, 0,
	0, 117, 271, 0, 171, 131, 316, 134, 0, 0,
	177, 143, 325, 105, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 533, 272,
	294, 293, 296, 297, 298, 299, 0, 0, 106, 295,
	300, 301, 302, 0, 0, 0, 269, 286, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 328, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 326, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 330, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 304, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 309, 310, 311, 312, 314, 0, 126, 313,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 271, 0, 171, 131, 316, 134, 0, 0, 177,
	143, 325, 105, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 294,
	293, 296, 297, 298, 299, 0, 0, 106, 295, 300,
	301, 302, 0, 0, 0, 269, 286, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	265, 0, 0, 0, 328, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 326, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 330, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	304, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 309, 310, 311, 312, 314, 0, 126, 313, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 155, 0, 0, 93, 0, 0, 274,
	325, 105, 0, 117, 271, 0, 0, 131, 316, 134,
	0, 0, 177, 143, 0, 0, 0, 0, 307, 308,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 294, 293, 296, 297, 298, 299, 0, 0,
	106, 295, 300, 301, 302, 0, 0, 0, 269, 286,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 283, 284, 0, 0, 0, 0, 328, 0, 285,
	0, 0, 281, 282, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	326, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 330, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 304, 317, 327, 323, 324, 321, 322,
	320, 319, 318, 329, 309, 310, 311, 312, 314, 0,
	126, 313, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 274, 0,
	0, 0, 117, 271, 0, 171, 131, 316, 134, 0,
	0, 177, 143, 325, 105, 0, 0, 307, 308, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 294, 293, 296, 297, 298, 299, 0, 0, 106,
	295, 300, 301, 302, 0, 0, 0, 269, 286, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	283, 284, 0, 0, 0, 0, 328, 0, 285, 0,
	0, 281, 282, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 326,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 330, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 304, 317, 327, 323, 324, 321, 322, 320,
	319, 318, 329, 309, 310, 311, 312, 314, 0, 126,
	313, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 316, 134, 0, 0,
	177, 143, 325, 105, 0, 0, 307, 308, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 272,
	294, 293, 296, 297, 298, 299, 0, 0, 106, 295,
	300, 301, 302, 0, 0, 0, 0, 286, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 283,
	284, 0, 0, 0, 0, 328, 0, 285, 0, 0,
	281, 282, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 326, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 1890,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 330, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 304, 317, 327, 323, 324, 321, 322, 320, 319,
	318, 329, 309, 310, 311, 312, 314, 0, 126, 313,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 274, 0, 0, 0,
	117, 0, 0, 171, 131, 316, 134, 0, 0, 177,
	143, 325, 105, 0, 0, 307, 308, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 294,
	293, 296, 297, 298, 299, 0, 0, 106, 295, 300,
	301, 302, 0, 0, 0, 0, 286, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 283, 284,
	0, 0, 0, 0, 328, 0, 285, 0, 0, 281,
	282, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 326, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 330, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	304, 317, 327, 323, 324, 321, 322, 320, 319, 318,
	329, 309, 310, 311, 312, 314, 0, 126, 313, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	0, 0, 171, 131, 316, 134, 0, 0, 177, 143,
	325, 105, 0, 0, 307, 308, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 294, 293,
	296, 297, 298, 299, 0, 0, 106, 295, 300, 301,
	302, 0, 0, 0, 0, 286, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 283, 284, 0,
	0, 0, 0, 328, 0, 285, 0, 0, 281, 282,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 326, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 330, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 304,
	317, 327, 323, 324, 321, 322, 320, 319, 318, 329,
	309, 310, 311, 312, 314, 0, 126, 313, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 325,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 567, 566, 576, 577, 569, 570, 571, 572,
	573, 574, 575, 568, 0, 0, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 579, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1370, 0, 0, 272, 0, 1179, 1180, 1181,
	0, 0, 0, 0, 106, 1184, 1182, 301, 302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 1186, 1191, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 1188, 0,
	1190, 1189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1178, 0, 0, 272, 0, 1179, 1180, 1181, 0,
	0, 0, 0, 106, 1184, 1182, 301, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 1186, 1191, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 1188, 0, 1190,
	1189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 1179, 1180, 1181, 0, 0,
	0, 0, 106, 1184, 1182, 301, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 1186, 1191, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 1188, 0, 1190, 1189,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 733, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 734, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 1776, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 0, 760, 761, 160, 762, 763, 764, 766,
	765, 735, 736, 737, 741, 739, 738, 740, 712, 714,
	202, 710, 713, 719, 715, 716, 717, 731, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 732,
	742, 743, 744, 745, 746, 747, 748, 749, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 711, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 555, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 0, 557, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 552, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 733, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	0, 760, 761, 160, 762, 763, 764, 766, 765, 735,
	736, 737, 741, 739, 738, 740, 712, 714, 202, 710,
	713, 719, 715, 716, 717, 731, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 732, 742, 743,
	744, 745, 746, 747, 748, 749, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 711, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 675, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 677, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 23,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 171, 0, 131, 0, 134, 0, 0,
	177, 143, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 23,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 171, 0, 131, 0, 134, 0, 0,
	177, 143, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 357, 0,
	0, 823, 0, 0, 824, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 0, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 0, 117,
	696, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 0, 695,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 0, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 675, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 677, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 673, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 1466, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 1846, 117, 0, 171, 0,
	131, 0, 134, 0, 0, 177, 143, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 1347, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 1347, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 1508, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 1507, 200, 149, 154, 152, 199, 1509, 192,
	142, 139, 0, 98, 190, 140, 138, 1510, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 1430, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 155, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 117, 0, 0, 171, 131, 0, 134,
	0, 0, 177, 143, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 162, 0, 109, 0, 183, 121, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 169, 156,
	195, 0, 157, 167, 135, 187, 163, 194, 0, 205,
	206, 185, 203, 172, 101, 150, 91, 161, 168, 0,
	110, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 184, 193, 107,
	173, 97, 191, 180, 182, 141, 127, 128, 175, 95,
	96, 0, 166, 116, 160, 120, 115, 153, 181, 144,
	188, 189, 112, 213, 114, 113, 179, 102, 201, 202,
	99, 103, 200, 149, 154, 152, 199, 186, 192, 142,
	139, 0, 98, 190, 140, 138, 130, 0, 118, 122,
	158, 137, 159, 123, 146, 145, 147, 0, 0, 151,
	124, 0, 0, 0, 0, 0, 178, 197, 214, 215,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 0,
	148, 104, 125, 174, 129, 136, 165, 212, 0, 170,
	108, 196, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 92, 100, 133, 0, 211, 0, 164, 119,
	198, 0, 155, 0, 0, 93, 0, 0, 0, 0,
	0, 0, 117, 0, 0, 171, 131, 0, 134, 0,
	0, 177, 143, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 677, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 0, 0, 0,
	162, 0, 109, 0, 183, 121, 0, 132, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 169, 156, 195,
	0, 157, 167, 135, 187, 163, 194, 0, 205, 206,
	185, 203, 172, 101, 150, 91, 161, 168, 0, 110,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 184, 193, 107, 173,
	97, 191, 180, 182, 141, 127, 128, 175, 95, 96,
	0, 166, 116, 160, 120, 115, 153, 181, 144, 188,
	189, 112, 213, 114, 113, 179, 102, 201, 202, 99,
	103, 200, 149, 154, 152, 199, 186, 192, 142, 139,
	0, 98, 190, 140, 138, 130, 0, 118, 122, 158,
	137, 159, 123, 146, 145, 147, 0, 0, 151, 124,
	0, 0, 0, 0, 0, 178, 197, 214, 215, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 148,
	104, 125, 174, 129, 136, 165, 212, 0, 170, 108,
	196, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 92, 100, 133, 0, 211, 0, 164, 119, 198,
	0, 155, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 117, 0, 0, 171, 131, 0, 134, 0, 0,
	177, 143, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 557, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 204, 0, 0, 0, 162,
	0, 109, 0, 183, 121, 0, 132, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 169, 156, 195, 0,
	157, 167, 135, 187, 163, 194, 0, 205, 206, 185,
	203, 172, 101, 150, 91, 161, 168, 0, 110, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 184, 193, 107, 173, 97,
	191, 180, 182, 141, 127, 128, 175, 95, 96, 0,
	166, 116, 160, 120, 115, 153, 181, 144, 188, 189,
	112, 213, 114, 113, 179, 102, 201, 202, 99, 103,
	200, 149, 154, 152, 199, 186, 192, 142, 139, 0,
	98, 190, 140, 138, 130, 0, 118, 122, 158, 137,
	159, 123, 146, 145, 147, 0, 0, 151, 124, 0,
	0, 0, 0, 0, 178, 197, 214, 215, 0, 0,
	0, 207, 208, 209, 210, 0, 0, 0, 148, 104,
	125, 174, 129, 136, 165, 212, 0, 170, 108, 196,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	92, 100, 133, 0, 211, 0, 164, 119, 198, 0,
	155, 0, 0, 93, 0, 0, 0, 0, 0, 0,
	117, 0, 0, 171, 131, 0, 134, 0, 0, 177,
	143, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 162, 0,
	109, 0, 183, 121, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 169, 156, 195, 0, 157,
	167, 135, 187, 163, 194, 0, 205, 206, 185, 203,
	172, 101, 150, 91, 161, 168, 0, 110, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 184, 193, 107, 173, 97, 191,
	180, 182, 141, 127, 128, 175, 95, 96, 0, 166,
	116, 160, 120, 115, 153, 181, 144, 188, 189, 112,
	213, 114, 113, 179, 102, 201, 202, 99, 103, 200,
	149, 154, 152, 199, 186, 192, 142, 139, 0, 98,
	190, 140, 138, 130, 0, 118, 122, 158, 137, 159,
	123, 146, 145, 147, 0, 0, 151, 124, 0, 0,
	0, 0, 0, 178, 197, 214, 215, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 148, 104, 125,
	174, 129, 136, 165, 212, 783, 170, 108, 196, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 92,
	100, 133, 0, 211, 0, 164, 119, 198, 0, 155,
	0, 0, 93, 0, 0, 0, 0, 0, 653, 117,
	0, 0, 171, 131, 0, 134, 0, 0, 177, 143,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 0, 0, 162, 0, 109,
	0, 183, 121, 0, 132, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 169, 156, 195, 0, 157, 167,
	135, 187, 163, 194, 0, 205, 206, 185, 203, 172,
	101, 150, 91, 161, 168, 0, 110, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 184, 193, 107, 173, 97, 191, 180,
	182, 141, 127, 128, 175, 95, 96, 0, 166, 116,
	160, 120, 115, 153, 181, 144, 188, 189, 112, 213,
	114, 113, 179, 102, 201, 202, 99, 103, 200, 149,
	154, 152, 199, 186, 192, 142, 139, 0, 98, 190,
	140, 138, 130, 0, 118, 122, 158, 137, 159, 123,
	146, 145, 147, 0, 0, 151, 124, 0, 0, 0,
	0, 0, 178, 197, 214, 215, 0, 0, 0, 207,
	208, 209, 210, 0, 0, 0, 148, 104, 125, 174,
	129, 136, 165, 212, 0, 170, 108, 196, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 92, 100,
	133, 340, 211, 0, 164, 119, 198, 0, 155, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 171, 131, 0, 134, 0, 0, 177, 143, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 162, 0, 109, 0,
	183, 121, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 169, 156, 195, 0, 157, 167, 135,
	187, 163, 194, 0, 205, 206, 185, 203, 172, 101,
	150, 91, 161, 168, 0, 110, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 184, 193, 107, 173, 97, 191, 180, 182,
	141, 127, 128, 175, 95, 96, 0, 166, 116, 160,
	120, 115, 153, 181, 144, 188, 189, 112, 213, 114,
	113, 179, 102, 201, 202, 99, 103, 200, 149, 154,
	152, 199, 186, 192, 142, 139, 0, 98, 190, 140,
	138, 130, 0, 118, 122, 158, 137, 159, 123, 146,
	145, 147, 0, 0, 151, 124, 0, 0, 0, 0,
	0, 178, 197, 214, 215, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 0, 148, 104, 125, 174, 129,
	136, 165, 212, 0, 170, 108, 196, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 92, 100, 133,
	0, 211, 0, 164, 119, 198, 0, 155, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 117, 0, 0,
	171, 131, 0, 134, 0, 0, 177, 143, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 204, 0, 0, 0, 162, 0, 109, 0, 183,
	121, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 169, 156, 195, 0, 157, 167, 135, 187,
	163, 194, 0, 205, 206, 185, 203, 172, 101, 150,
	91, 161, 168, 0, 110, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 184, 193, 107, 173, 97, 191, 180, 182, 141,
	127, 128, 175, 95, 96, 0, 166, 116, 160, 120,
	115, 153, 181, 144, 188, 189, 112, 213, 114, 113,
	179, 102, 201, 202, 99, 103, 200, 149, 154, 152,
	199, 186, 192, 142, 139, 0, 98, 190, 140, 138,
	130, 0, 118, 122, 158, 137, 159, 123, 146, 145,
	147, 0, 0, 151, 124, 0, 0, 0, 0, 0,
	178, 197, 214, 215, 0, 0, 0, 207, 208, 209,
	210, 0, 0, 0, 148, 104, 125, 174, 129, 136,
	165, 212, 0, 170, 108, 196, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 92, 100, 133, 0,
	211, 0, 164, 119, 198, 0, 155, 0, 0, 93,
	0, 0, 0, 0, 0, 0, 117, 0, 0, 171,
	131, 0, 134, 0, 0, 177, 143, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	204, 0, 0, 0, 162, 0, 109, 0, 183, 121,
	0, 132, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 169, 156, 195, 0, 157, 167, 135, 187, 163,
	194, 0, 205, 206, 185, 203, 172, 101, 150, 91,
	161, 168, 0, 110, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	184, 193, 107, 173, 97, 191, 180, 182, 141, 127,
	128, 175, 95, 96, 0, 166, 116, 160, 120, 115,
	153, 181, 144, 188, 189, 112, 213, 114, 113, 179,
	102, 201, 202, 99, 103, 200, 149, 154, 152, 199,
	186, 192, 142, 139, 0, 98, 190, 140, 138, 130,
	0, 118, 122, 158, 137, 159, 123, 146, 145, 147,
	0, 0, 151, 124, 0, 0, 0, 0, 0, 178,
	197, 214, 215, 0, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 148, 104, 125, 174, 129, 136, 165,
	212, 0, 170, 108, 196, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 92, 100, 133, 0, 211,
	0, 164, 119, 198, 0, 155, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 117, 0, 0, 171, 131,
	0, 134, 0, 0, 177, 143, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 162, 0, 109, 0, 183, 121, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	169, 156, 195, 0, 157, 167, 135, 187, 163, 194,
	0, 205, 206, 185, 203, 172, 101, 150, 91, 161,
	168, 0, 110, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 184,
	193, 107, 173, 97, 191, 180, 182, 141, 127, 128,
	175, 95, 96, 0, 166, 116, 160, 120, 115, 153,
	181, 144, 188, 189, 112, 213, 114, 113, 179, 102,
	201, 202, 99, 103, 200, 149, 154, 152, 199, 186,
	192, 142, 139, 0, 98, 190, 140, 138, 130, 0,
	118, 122, 158, 137, 159, 123, 146, 145, 147, 0,
	0, 151, 124, 0, 0, 0, 0, 0, 178, 197,
	214, 215, 0, 0, 0, 207, 208, 209, 210, 0,
	0, 0, 148, 104, 125, 174, 129, 136, 165, 212,
	0, 170, 108, 196, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 92, 100, 133, 0, 211, 0,
	164, 119, 198, 0, 155, 0, 0, 93, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 171, 131, 0,
	134, 0, 0, 177, 143, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 272, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 162, 0, 109, 0, 183, 121, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 169,
	156, 195, 0, 157, 167, 135, 187, 163, 194, 0,
	205, 206, 185, 203, 172, 101, 150, 91, 161, 168,
	0, 110, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 184, 193,
	107, 173, 97, 191, 180, 182, 141, 127, 128, 175,
	95, 96, 0, 166, 116, 160, 120, 115, 153, 181,
	144, 188, 189, 112, 213, 114, 113, 179, 102, 201,
	202, 99, 103, 200, 149, 154, 152, 199, 186, 192,
	142, 139, 0, 98, 190, 140, 138, 130, 0, 118,
	122, 158, 137, 159, 123, 146, 145, 147, 0, 0,
	151, 124, 0, 0, 0, 0, 0, 178, 197, 214,
	215, 0, 0, 0, 207, 208, 209, 210, 0, 0,
	0, 148, 104, 125, 174, 129, 136, 165, 212, 0,
	170, 108, 196, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 92, 100, 133, 0, 211, 0, 164,
	119, 198, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 105,
}

var yyPact = [...]int{
	2388, -1000, -210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1382, 1436, -1000, -1000, -1000, -1000, -1000, -1000, 1214,
	201, 427, 442, 192, 17159, 428, 2574, 17757, -1000, 151,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1136, -1000, -1000,
	-1000, -1000, -1000, 1362, 1374, 1163, 1349, 1275, -1000, 8172,
	347, 15365, 16860, 6259, -1000, 965, -182, 386, 17458, 359,
	359, 17458, 17458, 17757, 359, -1000, -63, 391, 17757, -1000,
	17757, 348, 961, 348, 348, 348, 17757, -1000, 491, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 17757, 950, 1311, 387, 4931, 4931, 4931,
	4931, 254, 4931, -5, 1233, -1000, -1000, -1000, -1000, 4931,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	924, 1319, 8784, 8784, 1382, -1000, 1136, -1000, -1000, -1000,
	1302, -1000, -1000, 698, 1418, -1000, 11475, 489, -1000, 8784,
	78, 1150, -1000, -1000, 1150, -1000, -1000, 464, -1000, -1000,
	-1000, 9681, 9681, 9681, 9681, 9681, 9681, 9681, -1000, -1000,
	-1000, -1000, 57, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1150, 487, -1000, 8485, 1150, 1150, 1150,
	1150, 1150, 1150, 1150, 1150, 8784, 1150, 1150, 1150, 1150,
	1150, 1150, 1150, 1150, 1150, 2105, 1150, 1150, 1150, 1150,
	-1000, 16561, 1142, 1351, -1000, -1000, -1000, 1344, 12673, 13570,
	17757, 1062, -1000, 1147, 5927, -38, -1000, -1000, -1000, 632,
	486, 13271, -1000, -1000, -1000, 1309, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1053, -1000, 11774, 434, -1000, -1000, 17757,
	1217, 939, 681, 938, 1232, 451, 1342, 17757, -1000, 16262,
	4931, 382, 17757, 1332, 1231, 17757, 934, 932, -1000, 7255,
	-1000, 4931, 4931, 4931, 4931, 4931, 4931, 4931, 4931, -1000,
	-1000, -1000, -1000, -1000, -1000, 4931, 4931, -1000, 3, -1000,
	17757, -1000, -1000, -1000, -1000, 1428, 512, 688, 485, 1148,
	-1000, 620, 1362, 924, 1275, 12972, 1198, -1000, -1000, 17757,
	-1000, 8784, 8784, 817, -1000, 15963, -1000, -1000, 5595, 525,
	9681, 784, 621, 9681, 9681, 9681, 9681, 9681, 9681, 9681,
	9681, 9681, 9681, 9681, 9681, 9681, 9681, 9681, 852, 2105,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 925, -1000,
	1136, 1039, 1039, 29, 29, 29, 29, 29, 29, 9980,
	-1000, -219, 7574, 6591, 924, 1048, 651, 8485, 8172, 8172,
	8784, 8784, 18056, 18056, 8172, 1346, 659, 651, 18056, -1000,
	924, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8172, 8172,
	8172, 8172, 272, 17757, -1000, 18056, 15365, 15365, 15365, 15365,
	15365, -1000, 1257, 1256, -1000, 1250, 1244, 1269, 17757, -1000,
	1031, 12673, 446, 1150, -1000, 15664, -1000, -1000, 272, 1087,
	15365, 17757, -1000, -1000, 5263, 1147, -38, 1143, -1000, -16,
	-23, 3535, 6591, 509, -1000, -1000, -1000, -1000, 4267, 619,
	940, -133, 32, -1000, -1000, -1000, -1000, -1000, 1170, -1000,
	-1000, -1000, 1170, 275, 1170, 1170, 1170, -1000, 1170, 1170,
	89, 89, 89, 89, 89, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1213, 1211, -1000, 1170, 1170, 1170, -1000, 1170,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1188, 313, 1188, 1175, 1175, -1000, -1000, 17458, 1340, -96,
	919, 4931, 1331, 4931, 17757, 1397, 17757, -1000, -1000, -1000,
	11774, -1000, 2141, 17757, -1000, 17757, -1000, -1000, 17757, 4931,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 618, -1000, -1000, -1000, -1000,
	1286, 8784, 8784, 6923, 8784, -1000, -1000, -1000, 1319, -1000,
	1346, 1367, -1000, 1297, 1294, 8172, -1000, -1000, 525, 550,
	-1000, -1000, 782, -1000, -1000, -1000, -1000, 482, 1150, -1000,
	2136, -1000, -1000, -1000, -1000, 784, 9681, 9681, 9681, 1996,
	2136, 2121, 203, 856, 29, 119, 119, 23, 23, 23,
	23, 23, 98, 98, -1000, -1000, -1000, -1000, 924, -1000,
	-1000, -1000, 863, 924, 8172, 1144, -1000, -1000, -1000, 8784,
	-1000, 924, 1017, 1017, 599, 771, 1121, -1000, 481, 1117,
	1017, 8172, 658, -1000, 8784, 924, -1000, -1000, 1017, 924,
	1017, 1017, 1115, 1150, -1000, 1128, -1000, 617, 1351, 1210,
	1230, 967, -1000, -1000, -1000, -1000, 1253, -1000, 1252, -1000,
	-1000, -1000, -1000, -94, 409, 404, 403, 17458, -1000, 1392,
	15365, 1099, -1000, -1000, 1143, -38, -45, -1000, -1000, -1000,
	-1000, 651, 616, -1000, -1000, 912, 1137, 3935, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1199, 815, 17458,
	297, 346, 416, 367, 905, -1000, -1000, -1000, 785, -1000,
	17458, 1426, -1000, -1000, 292, -1000, 291, 679, 867, 17757,
	166, 1189, 10578, -1000, -223, -1000, 13, -1000, -1000, 802,
	89, 89, 1170, 89, 89, 89, -1000, -1000, 509, 1301,
	509, 509, 509, 509, 866, 866, -100, -100, -1000, -1000,
	-1000, 854, 1188, -1000, -1000, -1000, 853, -1000, 1187, 1136,
	-1000, 6591, -1000, -1000, -1000, -1000, -1000, 1339, 1075, -1000,
	-1000, -1000, -1000, 390, -1000, -1000, 1123, 742, 436, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	271, 450, -1000, 4931, -1000, 611, 17757, 17757, 1283, 651,
	651, 480, -1000, -1000, 17757, -1000, -1000, -1000, -1000, 1104,
	-1000, -1000, -1000, 4599, 8172, -1000, 1996, 2136, 1942, -1000,
	9681, 9681, -1000, 59, -1000, -194, -1000, 1017, 8172, 651,
	-1000, -1000, -1000, 422, 852, 422, 9681, 9681, 6923, 9681,
	9681, -81, 1105, 654, -1000, 8784, 721, -1000, -1000, -1000,
	-1000, -1000, 1229, 18056, 1150, -1000, 12373, 17458, 1382, 18056,
	8784, 8784, -1000, -1000, 8784, 1182, -1000, 8784, -1000, -1000,
	-1000, -1000, 1180, 1150, 1150, 1150, 986, -1000, 1382, 1099,
	-1000, -1000, -1000, -19, -48, -1000, 8784, -1000, 4267, -1000,
	4267, 14468, -1000, 1439, 1357, 307, -1, -1000, 879, 874,
	-1000, 871, -1000, 18, -1000, -174, 99, -11, -1000, -1000,
	1150, -1000, 1179, 1338, -1000, 1313, 841, -1000, 10279, -205,
	-1000, -1000, -1000, -1000, -1000, -1000, 1150, -1000, 1178, 1177,
	-1000, 1167, 1150, 473, -1000, -1000, -1000, 1055, 509, 509,
	89, 509, 509, 509, -1000, 572, -1000, -1000, -1000, -1000,
	1005, -1000, 1001, -1000, 116, 115, -1000, 1132, -1000, 998,
	17757, 17458, -1000, 1129, -1000, 605, 1356, 242, 17757, 1397,
	1397, -1000, 300, 17458, -1000, 17458, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17458, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 17757, -1000, -1000, -1000,
	-1000, -1000, 17458, 332, -1000, -1000, 865, 8784, -1000, -1000,
	-1000, 6591, -1000, 1392, 15365, -1000, -1000, 924, -1000, 9681,
	2136, 2136, -1000, 863, -1000, 326, -1000, -1000, 924, 1170,
	1170, -1000, 1170, 1175, -1000, -1000, 1170, 141, 1170, 140,
	924, 924, 352, 732, -1000, 294, 190, 1150, -70, -1000,
	651, 8784, -1000, 1316, 1071, 1080, -1000, -1000, 7873, 924,
	995, 471, 986, 1362, -1000, 651, 651, 651, 13869, 651,
	-195, 13869, 13869, 13869, 12073, 17458, 1362, -1000, -1000, -1000,
	-1000, 651, 3935, -1000, 984, -1000, 283, 1170, 385, 385,
	-181, 290, 289, 1150, -1000, -1000, -1000, -1000, -182, -1000,
	-1000, 679, -1000, 1167, 8784, 13869, 104, -1000, 1110, 1054,
	10877, -1000, 15066, 924, -1000, 839, -1000, 838, 1035, 6591,
	-1000, -1000, -1000, 509, -1000, -1000, -1000, -1000, -1000, 89,
	862, 89, 9, 5, 840, -1000, 833, 1125, 1223, 6591,
	4267, 371, 1402, -1000, -1000, 1355, -1000, 1065, 17458, -1000,
	-1000, 284, -1000, 1166, -1000, -1000, -1000, -1000, 1325, 17458,
	-1000, -1000, 651, 1390, 1107, -1000, 2136, -1000, 92, -100,
	-1000, -1000, -1000, -1000, -1000, 263, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 9681, 9681, -1000, 9681, 9681,
	9681, 924, 861, 651, 288, -1000, 1150, -1000, -1000, 1127,
	17458, 17458, -1000, -1000, 973, -1000, -1000, 969, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 948, 948, 948, 446, -1000,
	-1000, 864, 14468, 1323, -1000, -1000, -1000, 727, -1000, -1000,
	690, 238, 712, -1000, 17458, -182, 8784, -1000, 1150, 748,
	946, 8784, 1165, 832, -1000, 1026, -1000, 92, -100, -1000,
	-1000, -1000, -1000, -1000, -1000, 1150, -1000, 509, -1000, 509,
	-1000, -1000, 1023, 1020, 14767, 17458, 17757, -1000, -1000, 17458,
	-1000, -1000, -1000, -1000, -1000, 222, 2648, 1164, 1162, 13869,
	1150, 336, 1388, 1373, -1000, -1000, -1000, -1000, 279, 279,
	279, 279, 155, -1000, -1000, 1422, -1000, 1150, -1000, 1136,
	469, -1000, 17458, -1000, -1000, -195, -1000, -1000, -1000, -94,
	1220, 1135, 154, -1000, 855, 587, 713, 585, 575, 571,
	566, 554, 553, 543, -1000, -1000, -1000, 1404, -1000, -1000,
	-1000, 1417, 1159, -1000, 1158, 748, 8784, 248, 1222, 768,
	-1000, 1012, 975, -1000, -1000, -1000, -1000, 970, 1102, -1000,
	264, 1157, 1156, 990, -1000, 185, 2648, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1382, 17458, 17458, 17458,
	17458, 457, 9382, 8784, 14468, 14468, 931, 266, 285, -1000,
	8784, 8784, -1000, -1000, -1000, -1000, 924, 179, -123, 18056,
	1080, 924, 17458, -1000, -1000, -1000, -1000, 17458, -1000, -107,
	1135, 17458, -1000, 822, -1000, -1000, 744, 803, 744, 744,
	744, 744, 744, 385, 385, 17458, 14468, 248, 748, -1000,
	-73, 1416, -131, 210, -1000, -1000, -188, 802, 14767, 14468,
	-95, 17458, 8784, 2564, -1000, 1362, 1070, 11176, -1000, -1000,
	-1000, -1000, 17458, 1411, 1410, 1405, 1403, 2557, 78, 577,
	160, 923, 918, 1217, 911, -1000, 17458, 1154, 651, 1040,
	-1000, 1280, -86, -126, 868, -1000, -1000, 1150, 909, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 679, 679, 892, 890, -1000, 248, -1000, 385, 385,
	-1000, -1000, -1000, 153, 848, 763, 749, 738, 2, -1000,
	1369, 1392, 1153, 949, 888, -1000, -207, -1000, 651, -1000,
	-1000, 2648, 1319, 17458, 189, -1000, -1000, 1318, -1000, -1000,
	-1000, -1000, -1000, 2648, 2648, 2648, -1000, 310, -96, -1000,
	266, 1292, 14468, -1000, 1261, -1000, 17458, -1000, 1135, -1000,
	-1000, 327, 864, -1000, -1000, -1000, 737, -1000, 729, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14168, 864, 13869, 1392,
	864, 8784, -216, -1000, -1000, 11774, 1353, 17458, 2460, -1000,
	183, 2418, 171, -1000, 173, -1000, -1000, 265, 886, -104,
	924, -1000, 17757, 1220, -1000, -1000, -1000, 462, 1220, 884,
	864, -1000, 651, 653, 1136, -1000, -1000, -1000, 646, 652,
	-1000, 168, -1000, 267, -1000, -130, -1000, 1151, -1000, 6591,
	-1000, -1000, -1000, -1000, -1000, 343, 159, -1000, -1000, 1150,
	-148, 17458, -1000, -1000, 2648, 9083, -1000, 878, 1424, 279,
	924, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1659, 6, 131, 1657, 1656, 1655, 1457, 1455, 1452,
	1450, 1654, 1652, 1650, 1649, 1648, 1647, 1646, 1645, 1644,
	1643, 1642, 1639, 1638, 1637, 1634, 1633, 1632, 560, 1627,
	1626, 1625, 111, 1624, 117, 1623, 1621, 77, 92, 80,
	76, 1506, 1620, 65, 110, 121, 1617, 86, 1616, 1615,
	123, 1614, 105, 1613, 1612, 71, 1609, 1608, 36, 4,
	50, 46, 1607, 1601, 112, 1214, 1600, 1599, 1597, 16,
	1595, 1594, 91, 18, 28, 31, 37, 1591, 245, 17,
	1590, 89, 1588, 1587, 1585, 1584, 24, 1583, 99, 32,
	23, 22, 1581, 25, 1579, 90, 66, 49, 21, 116,
	104, 1578, 61, 102, 84, 1577, 1576, 854, 1574, 1572,
	1571, 1570, 1569, 1567, 680, 805, 1561, 1560, 1558, 68,
	0, 202, 39, 118, 1557, 67, 1556, 2282, 108, 107,
	48, 1555, 51, 93, 75, 1554, 1553, 70, 109, 94,
	115, 114, 1552, 1551, 1550, 1548, 1547, 1265, 45, 88,
	44, 1546, 1544, 1543, 85, 82, 52, 83, 101, 1539,
	1537, 1533, 1532, 53, 1529, 19, 33, 3, 100, 1523,
	1522, 1521, 1519, 59, 41, 1518, 34, 1514, 13, 5,
	1, 2, 8, 1513, 1512, 1511, 9, 1510, 43, 1509,
	12, 1507, 11, 1505, 1493, 1491, 57, 1490, 1489, 1487,
	30, 1486, 1485, 29, 15, 60, 47, 40, 78, 58,
	1484, 56, 14, 10, 55, 1482, 20, 1481, 1479, 1475,
	26, 27, 1473, 1472, 1471, 1470, 1469, 1468, 42, 1467,
	1464, 1618, 871, 1463, 1460, 1459, 1446, 155,
}

var yyR1 = [...]int{
	0, 229, 230, 230, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 233,
	233, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 217, 217, 216, 218, 218, 12, 12, 12, 12,
	12, 210, 210, 210, 210, 210, 13, 13, 213, 213,
	14, 14, 14, 100, 100, 104, 104, 104, 105, 105,
	105, 105, 135, 135, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 208, 208, 208, 209,
	209, 209, 211, 211, 212, 212, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 215, 215, 194, 194, 194,
	195, 195, 195, 195, 195, 195, 197, 197, 198, 198,
	125, 125, 192, 192, 191, 190, 190, 189, 189, 188,
	199, 199, 20, 170, 171, 171, 171, 171, 171, 171,
	171, 158, 139, 139, 139, 139, 139, 139, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 205, 205, 205, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 201, 201, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 148, 148, 148, 148, 148, 148, 200, 200,
	196, 196, 196, 196, 196, 196, 143, 143, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 144, 144,
	144, 144, 144, 144, 140, 140, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 146,
	146, 146, 146, 146, 146, 146, 146, 157, 157, 147,
	147, 155, 155, 156, 156, 156, 154, 154, 154, 151,
	151, 152, 152, 153, 153, 153, 149, 149, 149, 150,
	150, 150, 160, 181, 181, 181, 183, 183, 184, 184,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 169, 169, 207, 207, 180, 180, 180, 175, 175,
	175, 175, 175, 175, 175, 175, 168, 168, 178, 178,
	179, 179, 176, 176, 176, 177, 163, 163, 163, 163,
	163, 164, 165, 165, 165, 165, 161, 162, 203, 203,
	203, 204, 204, 166, 166, 167, 167, 172, 172, 172,
	173, 173, 173, 174, 174, 174, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	234, 234, 235, 235, 235, 235, 235, 235, 235, 187,
	185, 185, 186, 186, 17, 18, 18, 18, 18, 18,
	19, 19, 21, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 112, 112, 109, 109,
	110, 110, 111, 111, 111, 113, 113, 113, 136, 136,
	136, 23, 23, 25, 25, 26, 27, 24, 24, 24,
	24, 24, 236, 28, 29, 29, 30, 30, 30, 34,
	34, 34, 32, 32, 33, 33, 39, 39, 38, 38,
	40, 40, 40, 40, 124, 124, 124, 123, 123, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 220, 220,
	219, 219, 221, 221, 221, 221, 221, 221, 57, 57,
	93, 93, 93, 96, 96, 46, 46, 46, 46, 47,
	47, 48, 48, 49, 49, 131, 131, 130, 130, 130,
	129, 129, 51, 51, 51, 53, 52, 52, 52, 52,
	54, 54, 56, 56, 55, 55, 58, 58, 58, 58,
	59, 59, 94, 94, 41, 41, 41, 41, 41, 41,
	41, 108, 108, 61, 61, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 71, 71, 71, 71, 71,
	71, 62, 62, 62, 62, 62, 62, 62, 37, 37,
	72, 72, 72, 78, 73, 73, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	69, 69, 69, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 237, 237, 70,
	70, 70, 70, 35, 35, 35, 35, 35, 134, 134,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 82, 82, 36, 36, 80, 80, 81, 83, 83,
	79, 79, 79, 222, 64, 64, 64, 64, 64, 64,
	64, 64, 66, 66, 66, 84, 84, 85, 85, 86,
	86, 87, 87, 88, 89, 89, 89, 90, 90, 90,
	90, 91, 91, 91, 63, 63, 63, 63, 63, 63,
	92, 92, 92, 92, 97, 97, 74, 74, 76, 76,
	75, 77, 98, 98, 102, 99, 99, 103, 103, 103,
	103, 103, 101, 101, 101, 126, 126, 126, 106, 106,
	114, 114, 115, 115, 107, 107, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 117, 117, 117, 118,
	118, 121, 121, 122, 122, 127, 127, 128, 128, 223,
	223, 223, 224, 224, 224, 225, 225, 226, 227, 227,
	228, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 231, 232, 132,
	133, 133, 133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	7, 5, 9, 1, 3, 3, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 14, 13, 14, 6, 5,
	5, 5, 11, 11, 9, 5, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 0, 2, 2,
	0, 2, 2, 2, 2, 2, 0, 2, 0, 3,
	0, 1, 0, 2, 1, 0, 2, 1, 3, 3,
	0, 2, 4, 4, 0, 1, 3, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 4, 2, 2, 3, 2, 3, 2,
	7, 9, 3, 3, 6, 9, 9, 8, 8, 5,
	8, 7, 4, 2, 4, 6, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 1, 2, 0, 4,
	3, 4, 3, 3, 3, 3, 3, 3, 3, 2,
	4, 6, 2, 3, 2, 3, 1, 3, 0, 2,
	0, 3, 3, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
	2, 2, 2, 2, 1, 1, 1, 3, 3, 2,
	1, 2, 1, 1, 1, 1, 4, 4, 4, 4,
	4, 1, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 6, 0, 1, 4, 1, 2, 1, 3,
	2, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 1, 1, 0, 2, 5, 2, 3,
	3, 2, 3, 2, 3, 4, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 1, 2, 5, 5, 8,
	8, 13, 1, 1, 2, 2, 10, 7, 0, 1,
	1, 0, 3, 0, 1, 1, 3, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 11, 13, 13,
	7, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 0, 4,
	1, 3, 1, 1, 1, 1, 1, 1, 4, 8,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 0, 4, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 3, 3, 1, 1, 1, 1, 2,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 0, 2, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 1, 2, 1,
	2, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	5, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 2, 0, 2, 2, 0, 1, 4, 1, 3,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -229, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 191, 192,
	194, 195, 26, 139, 140, 143, 144, -231, 8, 298,
	53, -230, 340, -86, 15, -30, 5, -28, -236, -28,
	-28, -28, -28, -28, -170, 53, -125, -199, 154, 290,
	119, 134, 152, 153, 120, 136, 71, -107, 122, 124,
	120, 120, 121, 122, 290, 119, 120, -55, -127, 56,
	-120, 161, 307, 21, 191, 204, 205, 196, 237, 225,
	308, 159, 222, 226, 276, 339, 65, 194, 285, 128,
	165, 141, 217, 220, 219, 211, 208, 28, 243, 314,
	210, 131, 244, 248, 255, 277, 305, 201, 202, 279,
	241, 32, 133, 309, 34, 149, 280, 246, 240, 235,
	239, 200, 234, 38, 214, 250, 249, 251, 275, 228,
	160, 254, 230, 212, 229, 18, 144, 147, 245, 247,
	209, 162, 126, 151, 313, 281, 207, 148, 163, 143,
	284, 330, 158, 195, 278, 203, 287, 37, 261, 221,
	198, 213, 199, 130, 192, 156, 232, 150, 215, 216,
	238, 197, 233, 193, 152, 145, 286, 262, 315, 231,
	227, 223, 224, 157, 122, 154, 155, 268, 269, 270,
	271, 311, 282, 218, 263, 264, 167, 168, 169, 170,
	171, 172, 173, 120, 107, 226, 113, 266, 121, 32,
	151, -136, 120, -109, 155, 268, 269, 270, 271, 56,
	278, 277, 272, -127, 193, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -231, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -222, -77,
	-78, 107, 108, 96, 97, 104, 74, 109, -69, -67,
	-68, -70, -225, 58, 57, 66, 59, 60, 61, 62,
	67, 68, 69, -121, 288, -75, -231, 43, 44, 299,
	300, 301, 302, 306, 303, 76, 33, 289, 297, 296,
	295, 293, 294, 291, 292, 338, 125, 290, 102, 298,
	252, -107, -43, -44, -45, -46, -57, -78, -231, -55,
	11, -50, -55, -99, -135, 193, -103, 278, 277, -122,
	288, -101, -121, -119, 276, 226, 275, 56, -120, 118,
	175, 319, 72, 23, 25, 259, 265, 174, 75, 107,
	16, 76, 181, 328, 329, 106, 299, 113, 47, 291,
	292, 289, 179, 301, 302, 290, 266, 186, 20, 29,
	10, 26, 139, 22, 100, 115, 176, 79, 80, 142,
	24, 140, 69, 182, 184, 19, 50, 132, 11, 318,
	13, 14, 332, 320, 125, 124, 91, 331, 121, 45,
	8, 109, 27, 88, 41, 137, 185, 43, 89, 17,
	293, 294, 31, 306, 146, 102, 48, 35, 333, 73,
	334, 67, 51, 283, 180, 71, 15, 46, 335, 134,
	183, 90, 116, 298, 44, 177, 336, 119, 178, 6,
	304, 30, 138, 42, 120, 267, 78, 123, 68, 5,
	136, 9, 49, 52, 295, 296, 297, 33, 77, 12,
	135, 310, 70, -171, -158, 56, -203, 328, 329, 122,
	-121, -115, 125, -115, -121, -121, -55, -115, 298, 120,
	-55, -55, -114, 125, 56, -114, -114, -114, -55, 110,
	-55, 56, 30, 290, 56, 151, 120, 152, 122, -133,
	-231, -122, -133, -133, -133, 156, 157, -133, -110, 273,
	51, -133, -232, 55, -91, 19, 31, -41, -127, -87,
	-88, -41, -86, -2, -28, 35, -32, 22, 64, 11,
	-124, 72, 71, 88, -123, 23, -121, 58, 110, -41,
	-62, 91, 73, 89, 90, 75, 93, 92, 103, 96,
	97, 98, 99, 100, 101, 102, 94, 95, 106, 338,
	81, 82, 83, 84, 85, 86, 87, -108, -231, -78,
	-231, 111, 112, -65, -65, -65, -65, -65, -65, -65,
	-226, 253, -231, 110, -2, -73, -41, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -82, -41, -231, -237,
	-231, -237, -237, -237, -237, -237, -237, -237, -138, 107,
	226, 141, 217, -141, -140, 232, 196, 197, 198, 199,
	200, 201, 202, 203, 204, 205, 225, 308, -231, -231,
	-231, -231, -56, 27, -55, 30, 54, -51, -53, -52,
	-54, 41, 45, 47, 42, 43, 44, 48, -131, 23,
	-43, -231, -130, 147, -129, 23, -127, 58, -55, -50,
	-233, 54, 11, 52, 54, -99, 193, -100, -104, 279,
	281, 81, 110, -126, -121, 58, 29, 30, 55, 54,
	-159, -139, -143, -140, -145, -144, -146, -121, -141, -142,
	225, 308, 222, 226, 223, 228, 229, 230, 107, 227,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 231, 243, 30, 141, 215, 216, 217, 220, 219,
	221, 218, 244, 245, 246, 247, 248, 249, 250, 251,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	207, 208, 210, 211, 212, 214, 213, 121, -55, -192,
	52, 56, 73, 56, 51, -208, 51, 19, 174, 175,
	23, -55, -55, 283, -133, 123, -55, 24, 51, -55,
	56, 56, -128, -127, -119, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -112, 267, 274, -55, 9,
	91, 54, 18, 110, 54, -89, 25, 26, -90, -232,
	-34, -66, -121, 59, 62, -33, 42, -55, -41, -41,
	-71, 67, 73, 68, 69, -123, 98, -128, -122, -119,
	-65, -72, -75, -78, 63, 91, 89, 90, 75, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -65, -134, 56, 58, -138, 56, -64,
	-64, -121, 341, -39, 22, -38, -40, -122, -232, 54,
	-232, -2, -38, -38, -41, -41, -79, -121, -127, -79,
	-38, -32, -80, -81, 77, -79, -232, 224, -38, -39,
	-38, -38, -95, 147, -55, -98, -102, -79, -44, -45,
	-45, -44, -45, 41, 41, 41, 46, 41, 46, 41,
	-52, -127, -232, -58, 49, 124, 50, -231, -129, -95,
	52, -43, -55, -103, -100, 54, 280, 282, 283, 51,
	70, -41, -122, -150, 107, 106, -172, -173, -174, -122,
	58, 59, -158, -160, -163, -161, -162, -175, -164, 128,
	126, 130, 131, 136, -168, 121, 137, 67, 73, -205,
	128, 51, 259, 265, 126, 137, 136, 339, 65, 129,
	318, 320, 29, -153, 341, 253, -151, 262, -147, 53,
	-147, -147, 224, -147, -147, -147, -147, -147, -149, 226,
	-149, -149, -149, -149, 53, 53, -147, -147, -147, -147,
	-155, 53, 209, -155, -155, -156, 53, -156, -121, 23,
	-190, 310, -191, 56, -133, 24, -133, -55, -211, -209,
	8, 9, 10, -55, -139, -116, 118, 115, 116, -187,
	114, 259, 226, 65, 29, 15, 299, 147, 315, 56,
	148, -55, -55, -55, -133, -111, 11, 91, 37, -41,
	-41, -128, -88, -91, -106, 19, 11, 33, 33, -38,
	67, 68, 69, 110, -231, -72, -65, -65, -65, -37,
	142, 72, -232, -227, -228, 58, -232, -38, 54, -41,
	-232, -232, -232, 54, 52, 23, 54, 11, 110, 54,
	11, -232, -38, -83, -81, 79, -41, -232, -232, -232,
	-232, -232, -63, 30, 33, -2, -231, -231, -59, 54,
	12, 81, -48, -47, 51, 52, -49, 51, -47, 41,
	41, -220, 310, 121, 121, 121, -96, -121, -59, -43,
	-59, -104, -105, 284, 281, 287, 81, 56, 54, -174,
	81, 53, -204, 51, 73, -166, -121, 137, -168, -168,
	56, -168, 56, 56, 67, 19, -121, 9, 137, 137,
	-204, 58, -55, -201, 319, 16, 53, -206, 53, 58,
	59, 60, 67, -148, 66, -61, 254, -69, 289, 292,
	291, 255, -121, -127, 342, -152, 263, 59, -149, -149,
	-147, -149, -149, -149, -150, 30, -150, -150, -150, -150,
	-157, 58, -157, -154, 310, 311, -154, 59, -155, 59,
	51, 52, -2, -189, -188, -122, -194, 23, 51, 54,
	-208, -132, -125, 128, -235, 154, 127, 132, 131, 56,
	126, 130, 147, -193, 154, 127, 128, 132, 131, 56,
	121, 137, 126, 130, 147, 136, -117, -118, 123, 23,
	121, 137, 147, 118, -133, -113, 89, 12, -127, -127,
	38, 110, -55, -42, 11, 98, -122, -39, -37, 72,
	-65, -65, 342, 54, -196, 338, -232, -40, -137, 107,
	222, 141, 217, 211, 241, 242, 228, 261, 215, 262,
	-134, -137, -65, -65, -122, -65, -65, 307, -86, 80,
	-41, 78, -97, 51, -98, -74, -76, -75, -231, -2,
	-92, -121, -96, -86, -102, -41, -41, -41, 53, -41,
	53, -231, -231, -231, -232, 54, -86, -59, 281, 285,
	286, -41, -173, -174, -179, -176, -121, 137, 10, 9,
	19, 132, 126, 339, 56, 56, 56, -203, 136, 330,
	-205, 339, -148, 255, -231, 53, 23, 29, 59, -206,
	53, -196, 338, -231, -147, 53, -147, 53, 53, 110,
	55, -150, -150, -149, -150, -150, -150, 56, 107, 55,
	54, 55, 215, 215, 54, 55, 54, -55, -121, 54,
	81, -195, 19, 162, 163, -55, -209, -211, -234, 121,
	137, -121, -132, -121, -132, -121, -55, -132, -121, 128,
	-163, 58, -41, -59, -43, -232, -65, -228, 226, 216,
	256, 232, 241, -232, -147, -147, -147, -156, -147, 202,
	-147, 202, -232, -232, -232, 54, 19, -232, 54, 19,
	-231, -36, 304, -41, 28, -97, 54, -232, -232, -232,
	54, 110, -232, -90, -93, -121, 137, -219, -221, 332,
	333, 334, 335, 336, 337, -93, -93, -93, -130, -121,
	-90, 55, 54, -147, -177, 257, -147, -165, 158, 159,
	30, 160, -165, 330, 137, 137, -231, -203, -204, -41,
	-93, 53, 320, 54, 55, -206, -121, 226, 216, 232,
	241, -232, 55, 55, 55, -122, -150, -149, 58, -149,
	264, 264, 59, 59, 53, 52, 51, -188, -174, 123,
	21, 6, 8, 9, 10, 19, 23, -121, 136, 53,
	27, -121, -84, 13, 224, -154, -149, 56, -65, -65,
	-65, -65, -65, -232, 58, 137, -76, 33, -2, -231,
	-121, -121, 54, 55, 55, 54, -232, -232, -232, -58,
	-181, -183, 310, -182, 52, 133, 65, 167, 168, 169,
	170, 171, 172, 173, -176, -89, -204, 51, 67, 161,
	-204, 51, -166, -121, -203, -41, -231, -232, 55, -41,
	53, 59, 55, -150, -150, 55, 55, -178, -179, -69,
	-121, -121, -55, -167, -121, 176, -212, -214, -7, -9,
	-8, -11, -10, -12, -13, -14, -3, 20, 180, 181,
	186, 182, 135, 125, 53, 53, -93, -231, 126, -85,
	14, 16, -232, -232, -232, -232, -35, 91, 310, 9,
	-74, -2, 110, -121, -221, -220, -180, 51, -182, 310,
	53, 312, 56, -169, 81, 58, 81, 81, 81, 81,
	81, 81, 81, 9, 10, 53, 53, -232, -41, -200,
	160, 51, 55, -202, 55, 55, 55, 53, 53, 53,
	-197, 54, 52, 177, -214, -86, -217, -121, -216, -121,
	-121, -121, -210, 35, 183, 184, 185, -60, -65, -41,
	-60, -179, -179, 55, -185, -186, 147, 137, -41, -73,
	-232, 308, 48, 313, -98, -232, -121, -121, -184, -182,
	-121, 59, -207, 51, 70, 59, -207, -207, -207, -207,
	-207, -165, -165, -167, -179, -200, -232, 305, 10, 9,
	316, 317, 55, 192, 322, 323, 146, 324, 160, 325,
	326, -94, 331, -178, -179, -198, 310, -121, -41, -215,
	-214, 191, -90, 54, -218, -139, 178, -121, 11, 11,
	11, 11, -214, 191, 78, 191, 55, 55, -192, -232,
	54, -121, 53, 38, 309, 314, -231, 55, 54, -204,
	-204, 55, 55, -200, -165, -165, 310, 59, 16, 59,
	59, 59, 59, 323, 146, 325, 16, -59, 53, 55,
	55, 339, -214, -91, -216, -121, 179, 27, -213, -214,
	-212, -213, -223, 187, 73, -190, -186, 33, -179, 38,
	-121, -182, 129, -181, 59, 59, 327, -127, -181, -93,
	-59, -181, -41, 340, 19, -121, 80, -214, 340, 80,
	-224, 188, 187, 149, 55, 310, -232, -55, -180, 110,
	-180, 55, -181, 80, -2, 80, 79, 190, 189, 150,
	313, 53, -122, 125, 191, -231, 314, -167, -213, -65,
	146, 55, 80, -232, -232,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 739, 0, 482, 482, 482, 482, 482, 482, 0,
	-2, 794, 0, 0, 0, 0, -2, 472, 473, 0,
	475, 476, 1089, 1089, 1089, 1089, 1089, 0, 33, 34,
	1087, 1, 3, 747, 0, 0, 486, 489, 484, 825,
	794, 0, 0, 0, 84, 144, 368, 0, 0, 792,
	792, 0, 0, 0, 792, 131, 0, 0, 0, 795,
	0, 790, 0, 790, 790, 790, 0, 431, 564, 815,
	816, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 0, 0, 0, 0, 1090, 1090, 1090,
	1090, 0, 1090, 460, 449, 451, 452, 453, 454, 1090,
	469, 470, 459, 471, 474, 477, 478, 479, 480, 481,
	27, 751, 825, 825, 739, 29, 0, 482, 487, 488,
	492, 490, 491, 483, 0, 500, 504, 0, 574, 825,
	579, 581, -2, -2, 0, 616, 617, 618, 619, 620,
	621, 825, 825, 825, 825, 825, 825, 825, 645, 646,
	647, 648, 0, 724, 725, 726, 727, 728, 729, 730,
	731, 583, 584, 720, 0, 771, 825, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 0, 677, 677, 677,
	677, 677, 677, 677, 677, 0, 0, 0, 0, 0,
	826, 0, 0, 511, 513, 514, 515, 545, 0, 547,
	0, 0, 41, 45, 0, 1057, 775, -2, -2, 0,
	0, 0, 813, 814, -2, 967, -2, 811, 812, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 0, 145, 0, 0, 369, 370, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 141, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 430, 0,
	432, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 441,
	1091, 1092, 442, 443, 444, 1090, 1090, 446, 0, 461,
	0, 455, 28, 1088, 22, 0, 0, 748, 0, 740,
	741, 744, 747, 27, 489, 0, 494, 493, 485, 0,
	501, 825, 825, 0, 505, 0, 507, 508, 0, 577,
	825, 0, 0, 825, 825, 825, 825, 825, 825, 825,
	825, 825, 825, 825, 825, 825, 825, 825, 0, 0,
	601, 602, 603, 604, 605, 606, 607, 580, 0, 594,
	0, 0, 0, 637, 638, 639, 640, 641, 642, 0,
	649, 0, -2, 0, 27, 0, 614, 825, 825, 825,
	825, 825, 0, 0, 825, 492, 0, 712, 0, 668,
	0, 669, 670, 671, 672, 673, 674, 675, 676, 704,
	0, 706, 707, 708, 709, 710, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 254, 255, 825, -2,
	825, 825, 43, 0, 563, 0, 0, 0, 0, 0,
	0, 552, 0, 0, 555, 0, 0, 0, 0, 546,
	0, 0, 566, 1021, 548, 0, 550, 551, -2, 0,
	0, 0, 39, 40, 0, 46, 1057, 48, 73, 0,
	0, 825, 0, 309, 785, 786, 787, 783, 377, 0,
	151, 303, 299, 153, 154, 155, 156, 157, 289, 227,
	254, 255, 289, 289, 289, 289, 289, 261, 289, 289,
	306, 306, 306, 306, 306, 270, 271, 272, 273, 274,
	275, 276, 982, 0, 246, 289, 289, 289, 250, 289,
	252, 253, 279, 280, 281, 282, 283, 284, 285, 286,
	228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
	291, 291, 291, 293, 293, 244, 245, 0, 0, 135,
	0, 1090, 0, 1090, 0, 0, 0, 96, 97, 98,
	0, 142, 0, 0, 397, 0, 425, 791, 0, 1090,
	428, 429, 565, 817, 818, 433, 434, 435, 436, 437,
	438, 439, 440, 445, 448, 462, 456, 457, 450, 752,
	0, 825, 825, 0, 825, 743, 745, 746, 751, 30,
	492, 0, 732, 0, 0, 825, 495, 25, 575, 576,
	578, 595, 0, 597, 599, 506, 502, 0, 721, -2,
	585, 586, 610, 611, 612, 0, 825, 825, 825, 608,
	590, 0, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 636, 688, 689, 644, 0, 634,
	635, 643, 0, 0, 825, 497, 498, 723, 613, 825,
	770, 27, 0, 0, 0, 0, 0, 720, 0, 0,
	0, 825, 718, 715, 825, 0, 678, 705, 0, 0,
	0, 0, 0, 0, 562, 570, 772, 0, 512, 541,
	543, 0, 538, 553, 554, 556, 0, 558, 0, 560,
	561, 516, 517, 518, 0, 0, 0, 0, 549, 570,
	0, 570, 42, 776, 47, 0, 0, 76, 77, 777,
	778, 779, 0, 781, 310, 0, 143, 378, 380, 383,
	384, 385, 146, 147, 148, 149, 150, 0, 371, 373,
	0, 0, 0, 0, 0, 346, 347, 159, 0, 161,
	0, 0, 164, 165, 0, 167, 169, 371, 0, 0,
	0, 0, 0, 158, 0, 305, 301, 300, 226, 0,
	306, 306, 289, 306, 306, 306, 263, 264, 309, 0,
	309, 309, 309, 309, 0, 0, 296, 296, 249, 251,
	238, 0, 291, 240, 241, 242, 0, 243, 0, 0,
	89, 0, 133, 134, 90, 793, 91, 117, 0, 102,
	99, 100, 101, 0, 95, 1089, 130, 0, 806, 398,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	0, 0, 424, 1090, 427, 465, 0, 0, 0, 749,
	750, 0, 742, 23, 0, 788, 789, 733, 734, 509,
	596, 598, 600, 0, -2, 587, 608, 591, 0, 588,
	825, 825, 582, 0, 828, 220, 650, 0, 825, 615,
	-2, 653, 654, 0, 0, 0, 825, 825, 0, 825,
	825, 0, 739, 0, 716, 825, 0, 667, 679, 680,
	681, 682, 764, 0, 0, -2, 0, 0, 739, 0,
	825, 825, 535, 542, 825, 0, 536, 825, 537, 557,
	559, 528, 0, 0, 0, 0, 0, 533, 739, 570,
	38, 74, 75, 0, 0, 81, 825, 311, 0, 381,
	0, 0, 356, 0, 0, 0, 374, 338, 0, 0,
	341, 0, 343, 368, 160, 0, 0, 0, 166, 168,
	0, 172, 173, 0, 196, 0, 0, 183, 0, 220,
	187, 188, 189, 190, 191, 192, 1015, 195, 289, 289,
	216, 988, 0, 0, 304, 152, 302, 0, 309, 309,
	306, 309, 309, 309, 265, 0, 266, 267, 268, 269,
	0, 287, 0, 247, 0, 0, 248, 0, 239, 0,
	0, 0, -2, 136, 137, 0, 120, 0, 0, 0,
	0, 386, 0, 0, 1089, 0, 412, 413, 414, 415,
	416, 417, 418, 1089, 0, 399, 400, 401, 402, 403,
	404, 405, 406, 407, 408, 409, 0, 1089, 807, 808,
	809, 810, 0, 0, 426, 447, 0, 825, 463, 464,
	753, 0, 24, 570, 0, 503, 722, 0, 589, 825,
	609, 592, 827, 0, 830, 0, 651, 499, 0, 289,
	289, 693, 289, 293, 696, 697, 289, 699, 289, 702,
	0, 0, 0, 0, 721, 0, 0, 0, 713, 666,
	719, 825, 31, 0, 764, 754, 766, 768, 825, 27,
	0, 760, 0, 747, 773, 571, 774, 539, 0, 544,
	0, 0, 0, 0, 547, 0, 747, 37, 78, 79,
	80, 780, 379, 382, 0, 350, 289, 289, 0, 0,
	0, 0, 0, 0, 339, 340, 342, 344, 368, 182,
	162, 371, 163, 0, 825, 0, 0, 197, 0, 0,
	0, 186, 0, 0, 212, 0, 214, 0, 0, 0,
	290, 256, 257, 309, 258, 259, 260, 307, 308, 306,
	0, 306, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 118, 119, 0, 103, 0, 0, 410,
	411, 0, 391, 0, 392, 394, 395, 396, 0, 373,
	390, 466, 467, 735, 510, 652, 593, 829, 0, 296,
	223, 224, 225, 655, 690, 306, 694, 695, 698, 700,
	701, 703, 657, 656, 658, 825, 825, 661, 825, 825,
	825, 0, 0, 717, 0, 32, 0, 769, -2, 0,
	0, 0, 44, 35, 0, 530, 531, 0, 520, 522,
	523, 524, 525, 526, 527, 0, 0, 0, 566, 534,
	36, 313, 0, 744, 354, 355, 353, 371, 362, 363,
	0, 0, 371, 372, 373, 368, 825, 345, 0, 0,
	0, 825, 179, 0, 184, 0, 194, 967, 296, 224,
	225, 193, 213, 215, 217, 0, 262, 309, 288, 309,
	297, 298, 0, 0, 0, 0, 0, 138, 139, 0,
	121, 122, 123, 124, 125, 0, 0, 0, 0, 0,
	0, 374, 737, 0, 221, 222, 691, 692, 0, 0,
	0, 0, 683, 665, 714, 0, 767, 0, -2, 0,
	762, 761, 0, 540, 519, 0, 567, 568, 569, 518,
	335, 314, 0, 316, 0, 331, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 352, 357, 0, 364, 365,
	358, 0, 0, 374, 0, 0, 825, 218, 174, 0,
	198, 0, 0, 277, 278, 292, 295, 0, 348, 349,
	289, 0, 0, 126, 375, 0, 94, 104, 106, 107,
	108, 109, 110, 111, 112, 113, 739, 0, 0, 0,
	0, 61, 825, 825, 0, 0, 0, 0, 0, 26,
	825, 825, 659, 660, 662, 663, 0, 0, 0, 0,
	757, 27, 0, 532, 521, 529, 312, 0, 317, 0,
	0, 0, 320, 0, 332, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 0, 170,
	0, 0, 0, 0, 181, 185, 572, 1087, 0, 0,
	128, 0, 825, 0, 105, 747, 49, 54, 51, 56,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 0,
	574, 0, 0, 132, 0, 420, 0, 0, 738, 736,
	664, 0, 0, 0, 765, -2, 763, 336, 0, 318,
	323, 321, 324, 333, 334, 325, 326, 327, 328, 329,
	330, 371, 371, 0, 0, 367, 218, 219, 0, 0,
	177, 178, 180, 0, 0, 0, 0, 0, 0, 209,
	0, 570, 0, 0, 0, 92, 0, 376, 127, 93,
	115, 0, 751, 0, 0, 53, 55, 59, 62, 63,
	64, 65, 66, 0, 0, 0, 387, 819, 135, 419,
	0, 0, 0, 684, 0, 687, 0, 315, 0, 359,
	360, 0, 313, 171, 175, 176, 0, 200, 0, 202,
	203, 204, 205, 206, 207, 208, 0, 313, 0, 570,
	313, 825, 0, 114, 52, 0, 0, 0, 0, 68,
	0, 0, 822, 820, 0, 393, 421, 0, 0, 685,
	0, 319, 0, 335, 199, 201, 210, 0, 335, 0,
	313, 86, 129, 0, 0, 60, 67, 69, 0, 71,
	389, 0, 821, 0, 388, 0, 337, 0, 366, 0,
	85, 573, 87, 116, -2, 0, 0, 823, 824, 0,
	0, 0, 211, 70, 0, 825, 686, 0, 0, 0,
	0, 361, 72, 422, 423,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 340,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 341, 3, 342, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:381
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:386
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:387
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:414
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:422
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:426
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:432
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:439
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:445
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:449
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:459
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:466
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:478
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:490
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:494
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:500
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:506
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:510
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:514
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:519
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:520
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:524
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:528
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:533
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:537
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:543
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:547
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:551
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:555
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:561
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:565
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:578
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:582
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:588
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:593
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:597
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:617
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:624
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:632
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:654
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:658
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:664
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:671
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:681
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:685
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:692
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:701
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:709
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:720
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:724
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:730
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:734
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:738
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:744
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:748
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:752
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:756
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:762
		{
			yyVAL.str = SessionStr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:766
		{
			yyVAL.str = GlobalStr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:772
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 85:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:777
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[9].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 86:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:798
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:814
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumnsOrExpression.IndexCols,
				IndexExpr: yyDollar[11].indexColumnsOrExpression.IndexExpr,
			}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:830
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:838
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:846
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:850
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:854
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 93:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:866
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 94:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:877
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:888
		{
			yyVAL.statement = &DDL{
				Action: CreateTypeStr,
				Type: &Type{
					Name: yyDollar[3].tableName,
					Type: yyDollar[5].columnType,
				},
			}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:900
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:904
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:908
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:914
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:918
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:922
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:928
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:932
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:938
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:942
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:948
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:959
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:971
		{
			yyVAL.statement = &BeginEnd{
				Statements: []Statement{yyDollar[2].statement},
			}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:978
		{
			yyVAL.bytes = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:982
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:986
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:991
		{
			yyVAL.bytes = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:995
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:999
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1003
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1007
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1011
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1016
		{
			yyVAL.expr = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1020
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1025
		{
			yyVAL.expr = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1029
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1034
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1038
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1043
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1053
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1058
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1063
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1069
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1074
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1080
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1085
		{
			yyVAL.bytes = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1089
		{
			yyVAL.bytes = nil
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1095
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1102
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1108
		{
			yyVAL.TableSpec = &TableSpec{}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1112
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1121
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1125
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1129
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1133
		{
			yyVAL.TableSpec.AddCheck(yyDollar[3].checkDefinition)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1139
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1145
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1156
		{
			yyVAL.columnType = ColumnType{Type: yyDollar[1].colIdent.val}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1174
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1179
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1184
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1189
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1194
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1199
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1204
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1214
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1219
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1224
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1229
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				Where:             *NewWhere(WhereStr, yyDollar[5].expr),
				NotForReplication: bool(yyDollar[3].boolVal),
				NoInherit:         yyDollar[7].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1238
		{
			yyDollar[1].columnType.Check = &CheckDefinition{
				ConstraintName:    yyDollar[3].colIdent,
				Where:             *NewWhere(WhereStr, yyDollar[7].expr),
				NotForReplication: bool(yyDollar[5].boolVal),
				NoInherit:         yyDollar[9].boolVal,
			}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1248
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1253
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1258
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 175:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1265
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnDelete = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 176:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:1272
		{
			yyDollar[1].columnType.References = String(yyDollar[3].tableName)
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyDollar[1].columnType.ReferenceOnUpdate = yyDollar[9].colIdent
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 177:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1280
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1285
		{
			yyDollar[1].columnType.Generated = &GeneratedColumn{Expr: yyDollar[6].expr}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1291
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1297
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 181:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1303
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1309
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1316
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1320
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1324
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1330
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1334
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1338
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1342
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1346
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1350
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1354
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1358
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1362
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1366
		{
			yyVAL.optVal = NewStrVal([]byte(yyDollar[1].expr.(*FuncExpr).Name.val))
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1372
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1376
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1381
		{
			yyVAL.sequence = &Sequence{}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1385
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1390
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1395
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1400
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1405
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1410
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1415
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1420
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1425
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1430
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1435
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1440
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1445
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1452
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1456
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1460
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1464
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1468
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1472
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1477
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1481
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1486
		{
			yyVAL.bytes = nil
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1497
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1502
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1508
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1512
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1516
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1590
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1596
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1600
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1604
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1608
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1630
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1634
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1672
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1676
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1680
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1684
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1688
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1692
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1696
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1729
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1735
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1739
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1743
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1747
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1751
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1755
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1759
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1769
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1774
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 289:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1779
		{
			yyVAL.optVal = nil
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1783
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1788
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1792
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1800
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1804
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1810
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1818
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1822
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1826
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1831
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1835
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1840
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1844
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1849
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1853
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1857
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1862
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1866
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1870
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1875
		{
			yyVAL.str = ""
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1879
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1883
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1889
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1894
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1898
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1902
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1908
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1912
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1918
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1922
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1928
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1932
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1937
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1941
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1945
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1949
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1953
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1957
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1961
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1965
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1969
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1975
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1979
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1985
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1989
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1995
		{
			yyVAL.indexPartition = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1999
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2003
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2009
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2013
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2017
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2021
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2025
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2029
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2033
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2037
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2043
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2047
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2053
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexCols: yyDollar[1].indexColumns}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2058
		{
			yyVAL.indexColumnsOrExpression = IndexColumnsOrExpression{IndexExpr: yyDollar[1].expr}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2064
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2068
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2074
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2079
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2083
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, OperatorClass: string(yyDollar[2].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2093
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 357:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2098
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 358:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2105
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 359:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2112
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 360:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2119
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 361:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2128
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(String(yyDollar[10].tableName)),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2140
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2144
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2148
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2152
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 366:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:2158
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 367:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2169
		{
			yyVAL.checkDefinition = &CheckDefinition{
				ConstraintName: yyDollar[2].colIdent,
				Where:          *NewWhere(WhereStr, yyDollar[5].expr),
				NoInherit:      yyDollar[7].boolVal,
			}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2179
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2183
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2187
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2193
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2197
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2202
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2209
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2213
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2218
		{
			yyVAL.str = ""
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2222
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2226
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2234
		{
			yyVAL.str = yyDollar[1].str
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2238
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2242
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2248
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2252
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2256
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2262
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 387:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:2266
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 388:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2280
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 389:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:2294
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:       yyDollar[7].colIdent,
					Unique:     true,
					Primary:    false,
					Constraint: true,
					ConstraintOptions: &ConstraintOptions{
						Deferrable:        bool(yyDollar[12].boolVal),
						InitiallyDeferred: bool(yyDollar[13].boolVal),
					},
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2313
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2322
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2326
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 393:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:2330
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 394:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2343
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 395:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2353
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2358
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2363
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2367
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2399
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2405
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2409
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 422:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2415
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 423:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2419
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2425
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2431
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2439
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2444
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2452
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2456
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2462
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2466
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2471
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2481
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2502
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2510
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2514
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2526
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2534
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2544
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2548
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2552
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2556
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2560
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2564
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2568
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2584
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2588
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2594
		{
			yyVAL.str = ""
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2598
		{
			yyVAL.str = "extended "
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2604
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2608
		{
			yyVAL.str = "full "
		}
	case 462:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2614
		{
			yyVAL.str = ""
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2618
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2622
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2628
		{
			yyVAL.showFilter = nil
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2632
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2636
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2642
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2646
		{
			yyVAL.str = SessionStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2650
		{
			yyVAL.str = GlobalStr
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2656
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2660
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2666
		{
			yyVAL.statement = &Begin{}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2670
		{
			yyVAL.statement = &Begin{}
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2676
		{
			yyVAL.statement = &Commit{}
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2682
		{
			yyVAL.statement = &Rollback{}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2688
		{
			yyVAL.statement = &OtherRead{}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2692
		{
			yyVAL.statement = &OtherRead{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2696
		{
			yyVAL.statement = &OtherRead{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2700
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2704
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2709
		{
			setAllowComments(yylex, true)
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2713
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 484:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2719
		{
			yyVAL.bytes2 = nil
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2723
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2729
		{
			yyVAL.str = UnionStr
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2733
		{
			yyVAL.str = UnionAllStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2737
		{
			yyVAL.str = UnionDistinctStr
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2742
		{
			yyVAL.str = ""
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2746
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2750
		{
			yyVAL.str = SQLCacheStr
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2755
		{
			yyVAL.str = ""
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2759
		{
			yyVAL.str = DistinctStr
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2764
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2768
		{
			yyVAL.str = StraightJoinHint
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2773
		{
			yyVAL.selectExprs = nil
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2777
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2783
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2787
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2793
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2797
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2801
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2805
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2810
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2814
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2818
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2825
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2830
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2834
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2840
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2844
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2858
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2862
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 518:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2867
		{
			yyVAL.strs = []string{}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2871
		{
			yyVAL.strs = yyDollar[3].strs
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2877
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2881
		{
			yyVAL.strs = append(yyDollar[1].strs, yyDollar[3].str)
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2887
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2891
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2895
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2899
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2903
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2907
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2913
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, IndexHints: yyDollar[3].indexHints, TableHints: yyDollar[4].strs}
		}
	case 529:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2917
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, IndexHints: yyDollar[7].indexHints, TableHints: yyDollar[8].strs}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2923
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2928
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2932
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2942
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2955
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2959
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2963
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2967
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2973
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2975
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2979
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2981
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2985
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2987
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2990
		{
			yyVAL.empty = struct{}{}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2992
		{
			yyVAL.empty = struct{}{}
		}
	case 547:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2995
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3003
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3010
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3016
		{
			yyVAL.str = JoinStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3020
		{
			yyVAL.str = JoinStr
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3024
		{
			yyVAL.str = JoinStr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3030
		{
			yyVAL.str = StraightJoinStr
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3036
		{
			yyVAL.str = LeftJoinStr
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3040
		{
			yyVAL.str = LeftJoinStr
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3044
		{
			yyVAL.str = RightJoinStr
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3048
		{
			yyVAL.str = RightJoinStr
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3054
		{
			yyVAL.str = NaturalJoinStr
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3058
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3068
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3072
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3078
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3082
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3087
		{
			yyVAL.indexHints = nil
		}
	case 567:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3091
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 568:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3095
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3099
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3104
		{
			yyVAL.expr = nil
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3108
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3113
		{
			yyVAL.columns = nil
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3117
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3127
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3131
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3135
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3139
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3143
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3147
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3153
		{
			yyVAL.str = ""
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3157
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3163
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3167
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3173
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3177
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3181
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3185
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 589:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3189
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3193
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3197
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 592:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3201
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 593:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3205
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3209
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3215
		{
			yyVAL.str = IsNullStr
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3219
		{
			yyVAL.str = IsNotNullStr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3223
		{
			yyVAL.str = IsTrueStr
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3227
		{
			yyVAL.str = IsNotTrueStr
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3231
		{
			yyVAL.str = IsFalseStr
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3235
		{
			yyVAL.str = IsNotFalseStr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3241
		{
			yyVAL.str = EqualStr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3245
		{
			yyVAL.str = LessThanStr
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3249
		{
			yyVAL.str = GreaterThanStr
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.str = LessEqualStr
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3257
		{
			yyVAL.str = GreaterEqualStr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3261
		{
			yyVAL.str = NotEqualStr
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3265
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 608:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3270
		{
			yyVAL.expr = nil
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3274
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3280
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3284
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3288
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3294
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3304
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3310
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3314
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3318
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3322
		{
			yyVAL.expr = yyDollar[1].newQualifierColName
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3326
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3330
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3334
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3338
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3342
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3346
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3350
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3354
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3358
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3362
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3366
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3370
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3374
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3378
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3382
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3386
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3390
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3394
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3398
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3402
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3410
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3424
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3428
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3432
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3440
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3448
		{
			yyVAL.expr = yyDollar[2].arrayConstructor
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3458
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 651:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3462
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 652:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3466
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3476
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 654:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3480
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 655:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3484
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 656:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3488
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 657:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3492
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 658:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3496
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 659:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3500
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 660:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3504
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 661:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3508
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 662:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3512
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 663:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:3516
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 664:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:3520
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 665:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3524
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 666:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3528
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3532
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3542
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3546
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3550
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3554
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3559
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 673:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3564
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3569
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3578
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3596
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3600
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3604
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3610
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3614
		{
			yyVAL.str = BooleanModeStr
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3618
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 686:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:3622
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3626
		{
			yyVAL.str = QueryExpansionStr
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3636
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3642
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 691:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3646
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 692:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3650
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3654
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3658
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 695:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3662
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3668
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3672
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3676
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3680
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3684
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3688
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3692
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3696
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3702
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3706
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3710
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3714
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3718
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3722
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3726
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3731
		{
			yyVAL.expr = nil
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3735
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3740
		{
			yyVAL.str = string("")
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3744
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3750
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 716:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3754
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3760
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3765
		{
			yyVAL.expr = nil
		}
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3769
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3775
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3779
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 722:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3783
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3789
		{
			yyVAL.newQualifierColName = &NewQualifierColName{Name: yyDollar[3].colIdent}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3795
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3799
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3803
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3807
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3811
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3815
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3819
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3823
		{
			yyVAL.expr = &NullVal{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3829
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 733:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3838
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3842
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3847
		{
			yyVAL.exprs = nil
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3851
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3856
		{
			yyVAL.expr = nil
		}
	case 738:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3860
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 739:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3865
		{
			yyVAL.orderBy = nil
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3869
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3875
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3879
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 743:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3885
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3890
		{
			yyVAL.str = AscScr
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3894
		{
			yyVAL.str = AscScr
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3898
		{
			yyVAL.str = DescScr
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3903
		{
			yyVAL.limit = nil
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3907
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3911
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3915
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3920
		{
			yyVAL.str = ""
		}
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3924
		{
			yyVAL.str = ForUpdateStr
		}
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3928
		{
			yyVAL.str = ShareModeStr
		}
	case 754:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3941
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3945
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3949
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3954
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3958
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 759:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3962
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3969
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 761:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3973
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 762:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3977
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 763:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3981
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3986
		{
			yyVAL.updateExprs = nil
		}
	case 765:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3990
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3996
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4000
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4006
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4010
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 770:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4016
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4022
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4032
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4036
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 774:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4042
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4048
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4052
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 777:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4058
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4062
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 779:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4066
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 780:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:4071
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("NEW." + yyDollar[3].colIdent.val), Expr: yyDollar[5].expr}
		}
	case 781:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4075
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4082
		{
			yyVAL.bytes = []byte("charset")
		}
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4089
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4093
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4097
		{
			yyVAL.expr = &Default{}
		}
	case 790:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4106
		{
			yyVAL.byt = 0
		}
	case 791:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4108
		{
			yyVAL.byt = 1
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4111
		{
			yyVAL.empty = struct{}{}
		}
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4113
		{
			yyVAL.empty = struct{}{}
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4116
		{
			yyVAL.str = ""
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4118
		{
			yyVAL.str = IgnoreStr
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4122
		{
			yyVAL.empty = struct{}{}
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4124
		{
			yyVAL.empty = struct{}{}
		}
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4126
		{
			yyVAL.empty = struct{}{}
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4128
		{
			yyVAL.empty = struct{}{}
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4130
		{
			yyVAL.empty = struct{}{}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4132
		{
			yyVAL.empty = struct{}{}
		}
	case 802:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4134
		{
			yyVAL.empty = struct{}{}
		}
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4136
		{
			yyVAL.empty = struct{}{}
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4138
		{
			yyVAL.empty = struct{}{}
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4140
		{
			yyVAL.empty = struct{}{}
		}
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4143
		{
			yyVAL.empty = struct{}{}
		}
	case 807:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4145
		{
			yyVAL.empty = struct{}{}
		}
	case 808:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4147
		{
			yyVAL.empty = struct{}{}
		}
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4151
		{
			yyVAL.empty = struct{}{}
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4153
		{
			yyVAL.empty = struct{}{}
		}
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4157
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4161
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4168
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4174
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4178
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 818:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4185
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4191
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 820:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4195
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4199
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 822:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4205
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4209
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 824:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4213
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 825:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4219
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4223
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 827:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:4230
		{
			yyVAL.arrayConstructor = &ArrayConstructor{Elements: yyDollar[3].arrayElements}
		}
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4237
		{
			yyVAL.arrayElements = ArrayElements{yyDollar[1].arrayElement}
		}
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:4241
		{
			yyVAL.arrayElements = append(yyVAL.arrayElements, yyDollar[3].arrayElement)
		}
	case 830:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:4248
		{
			yyVAL.arrayElement = NewStrVal(yyDollar[1].bytes)
		}
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4530
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4539
		{
			decNesting(yylex)
		}
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4544
		{
			forceEOF(yylex)
		}
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:4549
		{
			forceEOF(yylex)
		}
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4553
		{
			forceEOF(yylex)
		}
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:4557
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
