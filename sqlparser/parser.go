// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const BEGIN = 57478
const START = 57479
const TRANSACTION = 57480
const COMMIT = 57481
const ROLLBACK = 57482
const BIT = 57483
const TINYINT = 57484
const SMALLINT = 57485
const MEDIUMINT = 57486
const INT = 57487
const INTEGER = 57488
const BIGINT = 57489
const INTNUM = 57490
const REAL = 57491
const DOUBLE = 57492
const FLOAT_TYPE = 57493
const DECIMAL = 57494
const NUMERIC = 57495
const TIME = 57496
const TIMESTAMP = 57497
const DATETIME = 57498
const YEAR = 57499
const CHAR = 57500
const VARCHAR = 57501
const VARYING = 57502
const BOOL = 57503
const CHARACTER = 57504
const VARBINARY = 57505
const NCHAR = 57506
const TEXT = 57507
const TINYTEXT = 57508
const MEDIUMTEXT = 57509
const LONGTEXT = 57510
const BLOB = 57511
const TINYBLOB = 57512
const MEDIUMBLOB = 57513
const LONGBLOB = 57514
const JSON = 57515
const ENUM = 57516
const GEOMETRY = 57517
const POINT = 57518
const LINESTRING = 57519
const POLYGON = 57520
const GEOMETRYCOLLECTION = 57521
const MULTIPOINT = 57522
const MULTILINESTRING = 57523
const MULTIPOLYGON = 57524
const NULLX = 57525
const AUTO_INCREMENT = 57526
const APPROXNUM = 57527
const SIGNED = 57528
const UNSIGNED = 57529
const ZEROFILL = 57530
const DATABASES = 57531
const TABLES = 57532
const VITESS_KEYSPACES = 57533
const VITESS_SHARDS = 57534
const VITESS_TABLETS = 57535
const VSCHEMA_TABLES = 57536
const EXTENDED = 57537
const FULL = 57538
const PROCESSLIST = 57539
const NAMES = 57540
const CHARSET = 57541
const GLOBAL = 57542
const SESSION = 57543
const ISOLATION = 57544
const LEVEL = 57545
const READ = 57546
const WRITE = 57547
const ONLY = 57548
const REPEATABLE = 57549
const COMMITTED = 57550
const UNCOMMITTED = 57551
const SERIALIZABLE = 57552
const CURRENT_TIMESTAMP = 57553
const DATABASE = 57554
const CURRENT_DATE = 57555
const CURRENT_TIME = 57556
const LOCALTIME = 57557
const LOCALTIMESTAMP = 57558
const UTC_DATE = 57559
const UTC_TIME = 57560
const UTC_TIMESTAMP = 57561
const REPLACE = 57562
const CONVERT = 57563
const CAST = 57564
const SUBSTR = 57565
const SUBSTRING = 57566
const GROUP_CONCAT = 57567
const SEPARATOR = 57568
const MATCH = 57569
const AGAINST = 57570
const BOOLEAN = 57571
const LANGUAGE = 57572
const WITH = 57573
const QUERY = 57574
const EXPANSION = 57575
const UNUSED = 57576

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 284,
	152, 284,
	-2, 274,
	-1, 236,
	108, 603,
	-2, 599,
	-1, 237,
	108, 604,
	-2, 600,
	-1, 306,
	79, 764,
	-2, 58,
	-1, 307,
	79, 726,
	-2, 59,
	-1, 312,
	79, 710,
	-2, 570,
	-1, 314,
	79, 747,
	-2, 572,
	-1, 577,
	51, 41,
	53, 41,
	-2, 43,
	-1, 716,
	108, 606,
	-2, 602,
	-1, 931,
	5, 28,
	-2, 416,
	-1, 956,
	5, 27,
	-2, 545,
	-1, 1203,
	5, 28,
	-2, 546,
	-1, 1250,
	5, 27,
	-2, 548,
	-1, 1314,
	5, 28,
	-2, 549,
}

const yyPrivate = 57344

const yyLast = 10957

var yyAct = [...]int{

	237, 234, 872, 1317, 1304, 653, 241, 778, 1261, 524,
	990, 1137, 796, 1110, 1109, 1029, 818, 779, 266, 866,
	215, 571, 1106, 959, 814, 569, 817, 209, 852, 1209,
	311, 1083, 975, 741, 748, 87, 53, 830, 87, 923,
	66, 751, 587, 718, 1020, 964, 523, 3, 767, 457,
	412, 463, 862, 305, 298, 573, 775, 586, 293, 558,
	224, 477, 87, 87, 316, 292, 469, 302, 87, 300,
	316, 210, 211, 212, 213, 52, 87, 1347, 87, 538,
	905, 1329, 1344, 1312, 87, 239, 1341, 291, 873, 84,
	1328, 750, 1101, 1311, 214, 1197, 416, 998, 999, 1000,
	1142, 228, 1132, 1133, 983, 1003, 1001, 982, 889, 1131,
	984, 82, 78, 79, 80, 57, 452, 301, 810, 811,
	809, 888, 415, 588, 683, 589, 1009, 843, 853, 1239,
	423, 684, 424, 845, 1186, 1184, 68, 208, 431, 1343,
	59, 60, 61, 62, 63, 1339, 1305, 437, 893, 448,
	449, 1061, 776, 1306, 265, 995, 1247, 887, 444, 1286,
	490, 489, 499, 500, 492, 493, 494, 495, 496, 497,
	498, 491, 1162, 1171, 501, 831, 1220, 1262, 1006, 23,
	24, 48, 26, 27, 71, 72, 1163, 67, 87, 832,
	1264, 1005, 316, 316, 316, 316, 992, 316, 42, 73,
	413, 1139, 28, 1337, 316, 884, 881, 882, 1277, 880,
	439, 426, 441, 243, 419, 75, 69, 76, 310, 831,
	76, 37, 308, 81, 417, 50, 662, 797, 799, 652,
	974, 316, 973, 832, 972, 414, 891, 894, 422, 438,
	440, 187, 433, 77, 1058, 1062, 515, 516, 517, 518,
	519, 520, 521, 853, 1291, 465, 1206, 1263, 848, 513,
	514, 1070, 939, 917, 831, 690, 481, 466, 1002, 827,
	432, 826, 886, 828, 1148, 296, 491, 829, 832, 501,
	815, 501, 687, 844, 30, 31, 33, 32, 35, 475,
	474, 87, 1310, 476, 885, 474, 70, 900, 87, 87,
	87, 798, 1084, 1296, 316, 1066, 476, 36, 43, 44,
	316, 476, 45, 46, 34, 475, 474, 1160, 1287, 962,
	590, 436, 1105, 1103, 1149, 768, 38, 39, 656, 40,
	41, 890, 476, 768, 1086, 946, 425, 467, 935, 997,
	934, 1059, 471, 1057, 892, 553, 310, 310, 310, 310,
	936, 310, 835, 1316, 577, 1060, 475, 474, 310, 540,
	541, 542, 543, 544, 545, 546, 1088, 725, 1092, 578,
	1087, 584, 1085, 476, 836, 901, 689, 1226, 1090, 50,
	1065, 723, 724, 722, 74, 479, 1297, 1089, 841, 721,
	833, 708, 710, 711, 1225, 834, 709, 475, 474, 418,
	1091, 1093, 492, 493, 494, 495, 496, 497, 498, 491,
	49, 688, 501, 1024, 476, 316, 316, 428, 429, 430,
	693, 694, 87, 87, 316, 1023, 87, 475, 474, 87,
	914, 915, 916, 87, 1010, 316, 316, 316, 316, 316,
	316, 316, 316, 1246, 476, 290, 1223, 1172, 838, 316,
	316, 1021, 511, 742, 87, 743, 840, 839, 310, 1007,
	1038, 1294, 308, 671, 592, 475, 474, 1141, 21, 316,
	1140, 420, 421, 87, 1331, 1351, 658, 659, 996, 316,
	663, 985, 476, 666, 875, 717, 695, 455, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 719, 1254, 1340, 1331, 1330, 685, 1324,
	456, 296, 716, 669, 744, 494, 495, 496, 497, 498,
	491, 668, 316, 501, 219, 837, 667, 704, 697, 1039,
	1035, 1254, 1321, 1040, 1037, 1036, 657, 73, 760, 763,
	712, 1254, 1320, 456, 769, 1254, 1319, 1270, 1041, 1254,
	1302, 1254, 1271, 87, 1034, 655, 87, 87, 87, 87,
	87, 780, 714, 1254, 456, 1254, 1255, 1269, 87, 650,
	310, 87, 434, 755, 427, 87, 1218, 1217, 310, 413,
	87, 87, 1143, 772, 316, 1128, 456, 1205, 456, 310,
	310, 310, 310, 310, 310, 310, 310, 316, 960, 745,
	746, 765, 753, 310, 310, 804, 23, 777, 1155, 1154,
	1151, 1152, 1151, 1150, 554, 782, 783, 755, 785, 756,
	757, 781, 54, 699, 784, 764, 793, 929, 456, 954,
	801, 23, 955, 479, 802, 805, 310, 806, 555, 771,
	715, 773, 774, 807, 854, 855, 856, 961, 822, 555,
	456, 581, 50, 87, 753, 456, 316, 1249, 316, 1048,
	929, 87, 1073, 87, 597, 596, 87, 316, 941, 868,
	256, 255, 258, 259, 260, 261, 747, 50, 1107, 257,
	262, 960, 803, 961, 580, 1201, 761, 761, 555, 938,
	555, 582, 761, 580, 23, 1159, 1157, 1156, 720, 864,
	865, 1153, 986, 808, 929, 929, 583, 871, 691, 761,
	940, 50, 1345, 1326, 1298, 895, 654, 896, 1274, 1273,
	897, 716, 1272, 1049, 960, 920, 921, 922, 1051, 1044,
	1045, 937, 1052, 1047, 1046, 1233, 1054, 1050, 310, 845,
	50, 719, 308, 906, 221, 907, 867, 1053, 1122, 989,
	863, 310, 858, 1043, 857, 819, 499, 500, 492, 493,
	494, 495, 496, 497, 498, 491, 919, 65, 501, 296,
	296, 296, 296, 296, 1158, 560, 563, 564, 565, 561,
	1107, 562, 566, 968, 296, 965, 966, 965, 966, 665,
	50, 869, 870, 296, 913, 453, 560, 563, 564, 565,
	561, 316, 562, 566, 87, 703, 790, 971, 788, 970,
	310, 791, 310, 789, 792, 945, 564, 565, 316, 787,
	786, 310, 956, 225, 226, 1336, 977, 316, 979, 978,
	969, 1327, 1069, 902, 987, 470, 1334, 912, 911, 458,
	1016, 928, 595, 1199, 435, 310, 877, 1234, 468, 715,
	459, 980, 664, 568, 222, 223, 470, 943, 216, 1280,
	910, 217, 54, 961, 1279, 1237, 993, 994, 909, 472,
	87, 316, 316, 1288, 316, 1011, 1012, 1015, 1014, 1017,
	1018, 1019, 1004, 686, 56, 58, 1033, 1161, 579, 51,
	1, 1042, 874, 846, 847, 849, 850, 851, 316, 1028,
	883, 87, 87, 1022, 1303, 1260, 1136, 1031, 825, 87,
	859, 860, 861, 816, 411, 64, 1295, 824, 316, 823,
	598, 1032, 1008, 842, 1025, 604, 1079, 1080, 602, 603,
	600, 606, 605, 601, 599, 195, 720, 303, 567, 1096,
	1097, 591, 1099, 1100, 473, 1056, 1055, 879, 1064, 682,
	899, 451, 197, 1076, 696, 976, 509, 908, 316, 316,
	1077, 780, 1108, 1071, 981, 309, 1114, 780, 1095, 1094,
	716, 1082, 310, 692, 1111, 462, 819, 1278, 1118, 1236,
	1102, 991, 944, 535, 766, 242, 707, 316, 254, 316,
	316, 1116, 251, 253, 252, 698, 1117, 953, 483, 240,
	232, 295, 1130, 551, 1113, 1135, 559, 557, 556, 967,
	963, 752, 754, 1134, 1129, 294, 1072, 296, 1196, 1285,
	702, 25, 55, 227, 19, 1026, 310, 770, 310, 18,
	17, 20, 1030, 16, 15, 316, 1144, 1145, 14, 1147,
	29, 13, 1146, 12, 316, 11, 10, 9, 8, 7,
	6, 5, 310, 4, 218, 22, 87, 795, 2, 0,
	0, 1164, 316, 0, 0, 0, 0, 0, 0, 0,
	1166, 316, 310, 0, 87, 0, 1075, 0, 0, 0,
	1177, 0, 0, 0, 1169, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 310, 0, 1174, 0, 1098, 1175,
	0, 0, 0, 0, 0, 0, 0, 0, 1182, 761,
	1168, 0, 1115, 976, 0, 761, 0, 0, 0, 0,
	0, 0, 0, 316, 0, 316, 316, 316, 87, 316,
	0, 1200, 1013, 0, 0, 316, 0, 0, 1208, 0,
	0, 310, 0, 310, 1138, 819, 0, 819, 0, 1214,
	1216, 987, 0, 0, 1211, 1212, 1213, 316, 316, 87,
	316, 316, 316, 0, 0, 0, 0, 0, 0, 0,
	0, 1221, 316, 0, 0, 1230, 0, 1231, 0, 1222,
	0, 1224, 0, 0, 0, 0, 1227, 0, 0, 1165,
	0, 0, 1240, 1241, 0, 1242, 1243, 1244, 1167, 0,
	0, 0, 0, 0, 0, 0, 316, 316, 0, 1238,
	0, 0, 0, 1229, 0, 1248, 1170, 0, 0, 316,
	1111, 316, 230, 0, 0, 310, 0, 1259, 0, 1075,
	1265, 1266, 926, 0, 316, 0, 927, 0, 267, 47,
	0, 0, 0, 931, 932, 933, 0, 1267, 0, 1268,
	0, 1250, 942, 0, 0, 316, 0, 948, 0, 949,
	950, 951, 952, 1275, 1289, 0, 0, 0, 1111, 1293,
	0, 0, 0, 316, 316, 316, 0, 1210, 0, 1210,
	1210, 1210, 0, 1215, 0, 0, 47, 296, 0, 310,
	1308, 0, 316, 819, 220, 780, 1313, 0, 1290, 316,
	297, 0, 1299, 1300, 1301, 0, 316, 0, 1322, 0,
	0, 1210, 1228, 0, 310, 310, 1232, 461, 1030, 819,
	0, 0, 0, 0, 0, 1332, 1235, 316, 0, 1333,
	0, 0, 316, 0, 0, 0, 0, 0, 316, 0,
	0, 0, 0, 0, 0, 0, 316, 0, 1349, 1348,
	0, 0, 85, 0, 0, 207, 1335, 0, 0, 0,
	1252, 1253, 0, 0, 0, 442, 0, 0, 1179, 1180,
	0, 1181, 0, 1138, 1183, 991, 1185, 231, 0, 85,
	85, 0, 0, 0, 0, 85, 0, 0, 1210, 0,
	0, 0, 0, 85, 0, 85, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 1292,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 1219, 0, 0, 0, 0, 1210, 1210, 1210,
	443, 443, 443, 443, 0, 443, 0, 0, 0, 460,
	464, 0, 443, 761, 0, 0, 1315, 0, 0, 0,
	0, 0, 0, 1318, 0, 0, 482, 0, 193, 47,
	1325, 0, 0, 1127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 0, 0, 512, 0, 0,
	0, 1210, 203, 0, 0, 0, 1338, 0, 0, 0,
	525, 0, 1342, 0, 0, 0, 0, 0, 0, 536,
	1318, 0, 0, 0, 522, 85, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 0, 537, 539, 539, 539,
	539, 539, 539, 539, 539, 547, 548, 549, 550, 0,
	0, 0, 188, 0, 0, 0, 570, 0, 190, 0,
	0, 0, 0, 0, 0, 196, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 445, 446,
	447, 0, 450, 0, 1176, 0, 0, 0, 0, 454,
	0, 1178, 0, 0, 194, 0, 0, 198, 0, 0,
	0, 0, 1187, 1188, 1189, 0, 0, 1192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1202, 1203, 1204, 0, 1207, 0, 189, 0, 85, 0,
	0, 0, 0, 0, 0, 85, 575, 85, 490, 489,
	499, 500, 492, 493, 494, 495, 496, 497, 498, 491,
	0, 0, 501, 191, 0, 199, 200, 201, 202, 206,
	0, 0, 0, 0, 205, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 443, 0, 0, 0, 0, 0,
	0, 0, 443, 0, 0, 0, 924, 0, 0, 0,
	0, 0, 0, 443, 443, 443, 443, 443, 443, 443,
	443, 0, 0, 0, 1245, 0, 0, 443, 443, 0,
	0, 0, 0, 0, 485, 0, 488, 705, 706, 1256,
	1257, 1258, 502, 503, 504, 505, 506, 507, 508, 0,
	486, 487, 484, 490, 489, 499, 500, 492, 493, 494,
	495, 496, 497, 498, 491, 0, 0, 501, 1281, 1282,
	1283, 1284, 0, 0, 0, 0, 0, 0, 0, 85,
	85, 0, 0, 85, 0, 0, 85, 0, 0, 525,
	670, 47, 758, 759, 489, 499, 500, 492, 493, 494,
	495, 496, 497, 498, 491, 526, 0, 501, 0, 0,
	0, 85, 0, 1309, 0, 0, 0, 0, 1314, 0,
	0, 651, 1193, 456, 0, 0, 0, 0, 0, 661,
	85, 1323, 0, 0, 297, 297, 297, 297, 297, 670,
	672, 673, 674, 675, 676, 677, 678, 679, 0, 570,
	0, 800, 0, 813, 680, 681, 0, 0, 297, 490,
	489, 499, 500, 492, 493, 494, 495, 496, 497, 498,
	491, 0, 0, 501, 0, 0, 0, 1352, 1353, 0,
	231, 0, 0, 0, 0, 231, 231, 0, 0, 762,
	762, 231, 0, 0, 0, 762, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 231, 231, 231, 231, 0,
	85, 0, 762, 85, 85, 85, 85, 85, 1190, 456,
	0, 0, 0, 0, 1194, 794, 0, 0, 85, 0,
	0, 0, 575, 0, 443, 0, 443, 85, 85, 456,
	0, 0, 0, 0, 0, 443, 0, 0, 0, 0,
	0, 903, 904, 0, 464, 490, 489, 499, 500, 492,
	493, 494, 495, 496, 497, 498, 491, 0, 0, 501,
	0, 624, 0, 0, 0, 490, 489, 499, 500, 492,
	493, 494, 495, 496, 497, 498, 491, 0, 0, 501,
	0, 0, 0, 0, 918, 490, 489, 499, 500, 492,
	493, 494, 495, 496, 497, 498, 491, 0, 0, 501,
	85, 0, 1191, 0, 0, 1078, 930, 0, 85, 0,
	85, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 947, 0, 0, 0, 490, 489, 499, 500, 492,
	493, 494, 495, 496, 497, 498, 491, 612, 670, 501,
	0, 0, 0, 0, 957, 958, 0, 0, 0, 0,
	231, 876, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 297, 490, 489, 499, 500, 492, 493, 494,
	495, 496, 497, 498, 491, 0, 0, 501, 0, 0,
	638, 639, 640, 641, 642, 643, 644, 231, 645, 646,
	647, 648, 649, 626, 627, 628, 629, 609, 611, 0,
	607, 610, 613, 231, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 630, 631, 632, 633, 634, 635,
	636, 637, 0, 925, 0, 0, 0, 0, 0, 0,
	443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 490, 489, 499, 500, 492, 493, 494,
	495, 496, 497, 498, 491, 0, 443, 501, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 608, 490,
	489, 499, 500, 492, 493, 494, 495, 496, 497, 498,
	491, 0, 0, 501, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1119, 1120, 0, 85, 1121, 0,
	0, 1123, 0, 0, 1112, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1124, 1125, 1126, 0, 0, 0, 0, 1067, 1068,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 231, 1027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1173,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1198, 0,
	0, 0, 0, 0, 0, 525, 0, 0, 0, 0,
	1195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 0, 0, 1251, 0, 575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1276, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1307, 525, 0, 400, 390, 0, 361, 402,
	338, 353, 410, 354, 355, 383, 324, 369, 137, 350,
	0, 341, 319, 347, 320, 339, 363, 106, 337, 392,
	372, 118, 408, 121, 377, 0, 153, 130, 0, 0,
	365, 394, 367, 388, 360, 384, 329, 376, 403, 351,
	380, 404, 0, 0, 0, 315, 0, 820, 821, 0,
	0, 0, 0, 0, 98, 0, 379, 399, 349, 382,
	318, 378, 0, 322, 325, 409, 397, 344, 345, 988,
	0, 0, 1346, 0, 0, 0, 364, 368, 385, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	375, 0, 0, 0, 326, 323, 762, 362, 0, 0,
	0, 328, 0, 343, 386, 0, 317, 389, 395, 359,
	176, 398, 357, 356, 142, 0, 101, 0, 156, 110,
	352, 119, 401, 366, 393, 340, 348, 102, 346, 148,
	138, 168, 374, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 321, 0, 154, 170, 186, 336, 396, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 381, 149, 100, 169, 152, 332, 335,
	330, 331, 370, 371, 405, 406, 407, 387, 327, 0,
	333, 334, 0, 391, 373, 88, 94, 120, 183, 144,
	108, 171, 400, 390, 0, 361, 402, 338, 353, 410,
	354, 355, 383, 324, 369, 137, 350, 0, 341, 319,
	347, 320, 339, 363, 106, 337, 392, 372, 118, 408,
	121, 377, 0, 153, 130, 0, 0, 365, 394, 367,
	388, 360, 384, 329, 376, 403, 351, 380, 404, 0,
	0, 0, 315, 0, 820, 821, 0, 0, 0, 0,
	0, 98, 0, 379, 399, 349, 382, 318, 378, 0,
	322, 325, 409, 397, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 364, 368, 385, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 375, 0, 0,
	0, 326, 323, 0, 362, 0, 0, 0, 328, 0,
	343, 386, 0, 317, 389, 395, 359, 176, 398, 357,
	356, 142, 0, 101, 0, 156, 110, 352, 119, 401,
	366, 393, 340, 348, 102, 346, 148, 138, 168, 374,
	139, 147, 122, 160, 143, 167, 177, 178, 158, 175,
	89, 157, 166, 99, 150, 91, 164, 155, 128, 114,
	115, 90, 0, 146, 105, 109, 104, 136, 161, 162,
	103, 185, 95, 173, 174, 93, 96, 172, 135, 159,
	165, 129, 126, 92, 163, 127, 125, 117, 107, 111,
	140, 124, 141, 112, 132, 131, 133, 0, 321, 0,
	154, 170, 186, 336, 396, 179, 180, 181, 182, 0,
	0, 0, 134, 97, 113, 151, 116, 123, 145, 184,
	381, 149, 100, 169, 152, 332, 335, 330, 331, 370,
	371, 405, 406, 407, 387, 327, 0, 333, 334, 0,
	391, 373, 88, 94, 120, 183, 144, 108, 171, 400,
	390, 0, 361, 402, 338, 353, 410, 354, 355, 383,
	324, 369, 137, 350, 0, 341, 319, 347, 320, 339,
	363, 106, 337, 392, 372, 118, 408, 121, 377, 0,
	153, 130, 0, 0, 365, 394, 367, 388, 360, 384,
	329, 376, 403, 351, 380, 404, 0, 0, 0, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	379, 399, 349, 382, 318, 378, 0, 322, 325, 409,
	397, 344, 345, 0, 0, 0, 0, 0, 0, 0,
	364, 368, 385, 358, 0, 0, 0, 0, 0, 0,
	1074, 0, 342, 0, 375, 0, 0, 0, 326, 323,
	0, 362, 0, 0, 0, 328, 0, 343, 386, 0,
	317, 389, 395, 359, 176, 398, 357, 356, 142, 0,
	101, 0, 156, 110, 352, 119, 401, 366, 393, 340,
	348, 102, 346, 148, 138, 168, 374, 139, 147, 122,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	99, 150, 91, 164, 155, 128, 114, 115, 90, 0,
	146, 105, 109, 104, 136, 161, 162, 103, 185, 95,
	173, 174, 93, 96, 172, 135, 159, 165, 129, 126,
	92, 163, 127, 125, 117, 107, 111, 140, 124, 141,
	112, 132, 131, 133, 0, 321, 0, 154, 170, 186,
	336, 396, 179, 180, 181, 182, 0, 0, 0, 134,
	97, 113, 151, 116, 123, 145, 184, 381, 149, 100,
	169, 152, 332, 335, 330, 331, 370, 371, 405, 406,
	407, 387, 327, 0, 333, 334, 0, 391, 373, 88,
	94, 120, 183, 144, 108, 171, 400, 390, 0, 361,
	402, 338, 353, 410, 354, 355, 383, 324, 369, 137,
	350, 0, 341, 319, 347, 320, 339, 363, 106, 337,
	392, 372, 118, 408, 121, 377, 0, 153, 130, 0,
	0, 365, 394, 367, 388, 360, 384, 329, 376, 403,
	351, 380, 404, 50, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 379, 399, 349,
	382, 318, 378, 0, 322, 325, 409, 397, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 385,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 375, 0, 0, 0, 326, 323, 0, 362, 0,
	0, 0, 328, 0, 343, 386, 0, 317, 389, 395,
	359, 176, 398, 357, 356, 142, 0, 101, 0, 156,
	110, 352, 119, 401, 366, 393, 340, 348, 102, 346,
	148, 138, 168, 374, 139, 147, 122, 160, 143, 167,
	177, 178, 158, 175, 89, 157, 166, 99, 150, 91,
	164, 155, 128, 114, 115, 90, 0, 146, 105, 109,
	104, 136, 161, 162, 103, 185, 95, 173, 174, 93,
	96, 172, 135, 159, 165, 129, 126, 92, 163, 127,
	125, 117, 107, 111, 140, 124, 141, 112, 132, 131,
	133, 0, 321, 0, 154, 170, 186, 336, 396, 179,
	180, 181, 182, 0, 0, 0, 134, 97, 113, 151,
	116, 123, 145, 184, 381, 149, 100, 169, 152, 332,
	335, 330, 331, 370, 371, 405, 406, 407, 387, 327,
	0, 333, 334, 0, 391, 373, 88, 94, 120, 183,
	144, 108, 171, 400, 390, 0, 361, 402, 338, 353,
	410, 354, 355, 383, 324, 369, 137, 350, 0, 341,
	319, 347, 320, 339, 363, 106, 337, 392, 372, 118,
	408, 121, 377, 0, 153, 130, 0, 0, 365, 394,
	367, 388, 360, 384, 329, 376, 403, 351, 380, 404,
	0, 0, 0, 236, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 379, 399, 349, 382, 318, 378,
	0, 322, 325, 409, 397, 344, 345, 0, 0, 0,
	0, 0, 0, 0, 364, 368, 385, 358, 0, 0,
	0, 0, 0, 0, 713, 0, 342, 0, 375, 0,
	0, 0, 326, 323, 0, 362, 0, 0, 0, 328,
	0, 343, 386, 0, 317, 389, 395, 359, 176, 398,
	357, 356, 142, 0, 101, 0, 156, 110, 352, 119,
	401, 366, 393, 340, 348, 102, 346, 148, 138, 168,
	374, 139, 147, 122, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 99, 150, 91, 164, 155, 128,
	114, 115, 90, 0, 146, 105, 109, 104, 136, 161,
	162, 103, 185, 95, 173, 174, 93, 96, 172, 135,
	159, 165, 129, 126, 92, 163, 127, 125, 117, 107,
	111, 140, 124, 141, 112, 132, 131, 133, 0, 321,
	0, 154, 170, 186, 336, 396, 179, 180, 181, 182,
	0, 0, 0, 134, 97, 113, 151, 116, 123, 145,
	184, 381, 149, 100, 169, 152, 332, 335, 330, 331,
	370, 371, 405, 406, 407, 387, 327, 0, 333, 334,
	0, 391, 373, 88, 94, 120, 183, 144, 108, 171,
	400, 390, 0, 361, 402, 338, 353, 410, 354, 355,
	383, 324, 369, 137, 350, 0, 341, 319, 347, 320,
	339, 363, 106, 337, 392, 372, 118, 408, 121, 377,
	0, 153, 130, 0, 0, 365, 394, 367, 388, 360,
	384, 329, 376, 403, 351, 380, 404, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 379, 399, 349, 382, 318, 378, 0, 322, 325,
	409, 397, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 385, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 375, 0, 0, 0, 326,
	323, 0, 362, 0, 0, 0, 328, 0, 343, 386,
	0, 317, 389, 395, 359, 176, 398, 357, 356, 142,
	0, 101, 0, 156, 110, 352, 119, 401, 366, 393,
	340, 348, 102, 346, 148, 138, 168, 374, 139, 147,
	122, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 99, 150, 91, 164, 155, 128, 114, 115, 90,
	0, 146, 105, 109, 104, 136, 161, 162, 103, 185,
	95, 173, 174, 93, 96, 172, 135, 159, 165, 129,
	126, 92, 163, 127, 125, 117, 107, 111, 140, 124,
	141, 112, 132, 131, 133, 0, 321, 0, 154, 170,
	186, 336, 396, 179, 180, 181, 182, 0, 0, 0,
	134, 97, 113, 151, 116, 123, 145, 184, 381, 149,
	100, 169, 152, 332, 335, 330, 331, 370, 371, 405,
	406, 407, 387, 327, 0, 333, 334, 0, 391, 373,
	88, 94, 120, 183, 144, 108, 171, 400, 390, 0,
	361, 402, 338, 353, 410, 354, 355, 383, 324, 369,
	137, 350, 0, 341, 319, 347, 320, 339, 363, 106,
	337, 392, 372, 118, 408, 121, 377, 0, 153, 130,
	0, 0, 365, 394, 367, 388, 360, 384, 329, 376,
	403, 351, 380, 404, 0, 0, 0, 236, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 379, 399,
	349, 382, 318, 378, 0, 322, 325, 409, 397, 344,
	345, 0, 0, 0, 0, 0, 0, 0, 364, 368,
	385, 358, 0, 0, 0, 0, 0, 0, 0, 0,
	342, 0, 375, 0, 0, 0, 326, 323, 0, 362,
	0, 0, 0, 328, 0, 343, 386, 0, 317, 389,
	395, 359, 176, 398, 357, 356, 142, 0, 101, 0,
	156, 110, 352, 119, 401, 366, 393, 340, 348, 102,
	346, 148, 138, 168, 374, 139, 147, 122, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 99, 150,
	91, 164, 155, 128, 114, 115, 90, 0, 146, 105,
	109, 104, 136, 161, 162, 103, 185, 95, 173, 174,
	93, 96, 172, 135, 159, 165, 129, 126, 92, 163,
	127, 125, 117, 107, 111, 140, 124, 141, 112, 132,
	131, 133, 0, 321, 0, 154, 170, 186, 336, 396,
	179, 180, 181, 182, 0, 0, 0, 134, 97, 113,
	151, 116, 123, 145, 184, 381, 149, 100, 169, 152,
	332, 335, 330, 331, 370, 371, 405, 406, 407, 387,
	327, 0, 333, 334, 0, 391, 373, 88, 94, 120,
	183, 144, 108, 171, 400, 390, 0, 361, 402, 338,
	353, 410, 354, 355, 383, 324, 369, 137, 350, 0,
	341, 319, 347, 320, 339, 363, 106, 337, 392, 372,
	118, 408, 121, 377, 0, 153, 130, 0, 0, 365,
	394, 367, 388, 360, 384, 329, 376, 403, 351, 380,
	404, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 379, 399, 349, 382, 318,
	378, 0, 322, 325, 409, 397, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 385, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 375,
	0, 0, 0, 326, 323, 0, 362, 0, 0, 0,
	328, 0, 343, 386, 0, 317, 389, 395, 359, 176,
	398, 357, 356, 142, 0, 101, 0, 156, 110, 352,
	119, 401, 366, 393, 340, 348, 102, 346, 148, 138,
	168, 374, 139, 147, 122, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 99, 150, 91, 164, 155,
	128, 114, 115, 90, 0, 146, 105, 109, 104, 136,
	161, 162, 103, 185, 95, 173, 174, 93, 313, 172,
	135, 159, 165, 129, 126, 92, 163, 127, 125, 117,
	107, 111, 140, 124, 141, 112, 132, 131, 133, 0,
	321, 0, 154, 170, 186, 336, 396, 179, 180, 181,
	182, 0, 0, 0, 314, 312, 113, 151, 116, 123,
	145, 184, 381, 149, 100, 169, 152, 332, 335, 330,
	331, 370, 371, 405, 406, 407, 387, 327, 0, 333,
	334, 0, 391, 373, 88, 94, 120, 183, 144, 108,
	171, 400, 390, 0, 361, 402, 338, 353, 410, 354,
	355, 383, 324, 369, 137, 350, 0, 341, 319, 347,
	320, 339, 363, 106, 337, 392, 372, 118, 408, 121,
	377, 0, 153, 130, 0, 0, 365, 394, 367, 388,
	360, 384, 329, 376, 403, 351, 380, 404, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 379, 399, 349, 382, 318, 378, 0, 322,
	325, 409, 397, 344, 345, 0, 0, 0, 0, 0,
	0, 0, 364, 368, 385, 358, 0, 0, 0, 0,
	0, 0, 0, 0, 342, 0, 375, 0, 0, 0,
	326, 323, 0, 362, 0, 0, 0, 328, 0, 343,
	386, 0, 317, 389, 395, 359, 176, 398, 357, 356,
	142, 0, 101, 0, 156, 110, 352, 119, 401, 366,
	393, 340, 348, 102, 346, 148, 138, 168, 374, 139,
	147, 122, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 99, 150, 91, 164, 155, 128, 114, 115,
	90, 0, 146, 105, 109, 104, 136, 161, 162, 103,
	185, 95, 173, 174, 93, 96, 172, 135, 159, 165,
	129, 126, 92, 163, 127, 125, 117, 107, 111, 140,
	124, 141, 112, 132, 131, 133, 0, 321, 0, 154,
	170, 186, 336, 396, 179, 180, 181, 182, 0, 0,
	0, 134, 97, 113, 151, 116, 123, 145, 184, 381,
	149, 100, 169, 152, 332, 335, 330, 331, 370, 371,
	405, 406, 407, 387, 327, 0, 333, 334, 0, 391,
	373, 88, 94, 120, 183, 144, 108, 171, 400, 390,
	0, 361, 402, 338, 353, 410, 354, 355, 383, 324,
	369, 137, 350, 0, 341, 319, 347, 320, 339, 363,
	106, 337, 392, 372, 118, 408, 121, 377, 0, 153,
	130, 0, 0, 365, 394, 367, 388, 360, 384, 329,
	376, 403, 351, 380, 404, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 379,
	399, 349, 382, 318, 378, 0, 322, 325, 409, 397,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 364,
	368, 385, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 375, 0, 0, 0, 326, 323, 0,
	362, 0, 0, 0, 328, 0, 343, 386, 0, 317,
	389, 395, 359, 176, 398, 357, 356, 142, 0, 101,
	0, 156, 110, 352, 119, 401, 366, 393, 340, 348,
	102, 346, 148, 138, 168, 374, 139, 147, 122, 160,
	143, 167, 177, 178, 158, 175, 89, 157, 585, 99,
	150, 91, 164, 155, 128, 114, 115, 90, 0, 146,
	105, 109, 104, 136, 161, 162, 103, 185, 95, 173,
	174, 93, 313, 172, 135, 159, 165, 129, 126, 92,
	163, 127, 125, 117, 107, 111, 140, 124, 141, 112,
	132, 131, 133, 0, 321, 0, 154, 170, 186, 336,
	396, 179, 180, 181, 182, 0, 0, 0, 314, 312,
	113, 151, 116, 123, 145, 184, 381, 149, 100, 169,
	152, 332, 335, 330, 331, 370, 371, 405, 406, 407,
	387, 327, 0, 333, 334, 0, 391, 373, 88, 94,
	120, 183, 144, 108, 171, 400, 390, 0, 361, 402,
	338, 353, 410, 354, 355, 383, 324, 369, 137, 350,
	0, 341, 319, 347, 320, 339, 363, 106, 337, 392,
	372, 118, 408, 121, 377, 0, 153, 130, 0, 0,
	365, 394, 367, 388, 360, 384, 329, 376, 403, 351,
	380, 404, 0, 0, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 379, 399, 349, 382,
	318, 378, 0, 322, 325, 409, 397, 344, 345, 0,
	0, 0, 0, 0, 0, 0, 364, 368, 385, 358,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	375, 0, 0, 0, 326, 323, 0, 362, 0, 0,
	0, 328, 0, 343, 386, 0, 317, 389, 395, 359,
	176, 398, 357, 356, 142, 0, 101, 0, 156, 110,
	352, 119, 401, 366, 393, 340, 348, 102, 346, 148,
	138, 168, 374, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 304, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 313,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 321, 0, 154, 170, 186, 336, 396, 179, 180,
	181, 182, 0, 0, 0, 314, 312, 307, 306, 116,
	123, 145, 184, 381, 149, 100, 169, 152, 332, 335,
	330, 331, 370, 371, 405, 406, 407, 387, 327, 0,
	333, 334, 0, 391, 373, 88, 94, 120, 183, 144,
	108, 171, 137, 0, 0, 749, 0, 238, 0, 0,
	0, 106, 235, 0, 0, 118, 277, 121, 0, 0,
	153, 130, 0, 0, 0, 0, 268, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 236,
	256, 255, 258, 259, 260, 261, 0, 0, 98, 257,
	262, 263, 264, 0, 0, 233, 249, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	229, 0, 0, 0, 288, 0, 248, 0, 0, 244,
	245, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 286, 142, 0,
	101, 0, 156, 110, 0, 119, 0, 0, 0, 0,
	0, 102, 0, 148, 138, 168, 0, 139, 147, 122,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	99, 150, 91, 164, 155, 128, 114, 115, 90, 0,
	146, 105, 109, 104, 136, 161, 162, 103, 185, 95,
	173, 174, 93, 96, 172, 135, 159, 165, 129, 126,
	92, 163, 127, 125, 117, 107, 111, 140, 124, 141,
	112, 132, 131, 133, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 134,
	97, 113, 151, 116, 123, 145, 184, 0, 149, 100,
	169, 152, 278, 287, 284, 285, 282, 283, 281, 280,
	279, 289, 270, 271, 272, 273, 275, 0, 274, 88,
	94, 120, 183, 144, 108, 171, 137, 0, 0, 0,
	0, 238, 0, 0, 0, 106, 235, 0, 0, 118,
	277, 121, 0, 0, 153, 130, 0, 0, 0, 0,
	268, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 456, 236, 256, 255, 258, 259, 260, 261,
	0, 0, 98, 257, 262, 263, 264, 0, 0, 233,
	249, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 0, 0, 0, 0, 288, 0,
	248, 0, 0, 244, 245, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 286, 142, 0, 101, 0, 156, 110, 0, 119,
	0, 0, 0, 0, 0, 102, 0, 148, 138, 168,
	0, 139, 147, 122, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 99, 150, 91, 164, 155, 128,
	114, 115, 90, 0, 146, 105, 109, 104, 136, 161,
	162, 103, 185, 95, 173, 174, 93, 96, 172, 135,
	159, 165, 129, 126, 92, 163, 127, 125, 117, 107,
	111, 140, 124, 141, 112, 132, 131, 133, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 134, 97, 113, 151, 116, 123, 145,
	184, 0, 149, 100, 169, 152, 278, 287, 284, 285,
	282, 283, 281, 280, 279, 289, 270, 271, 272, 273,
	275, 0, 274, 88, 94, 120, 183, 144, 108, 171,
	137, 0, 0, 0, 0, 238, 0, 0, 0, 106,
	235, 0, 0, 118, 277, 121, 0, 0, 153, 130,
	0, 0, 0, 0, 268, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 236, 256, 255,
	258, 259, 260, 261, 0, 0, 98, 257, 262, 263,
	264, 0, 0, 233, 249, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 229, 0,
	0, 0, 288, 0, 248, 0, 0, 244, 245, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 286, 142, 0, 101, 0,
	156, 110, 0, 119, 0, 0, 0, 0, 0, 102,
	0, 148, 138, 168, 0, 139, 147, 122, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 99, 150,
	91, 164, 155, 128, 114, 115, 90, 0, 146, 105,
	109, 104, 136, 161, 162, 103, 185, 95, 173, 174,
	93, 96, 172, 135, 159, 165, 129, 126, 92, 163,
	127, 125, 117, 107, 111, 140, 124, 141, 112, 132,
	131, 133, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 134, 97, 113,
	151, 116, 123, 145, 184, 0, 149, 100, 169, 152,
	278, 287, 284, 285, 282, 283, 281, 280, 279, 289,
	270, 271, 272, 273, 275, 0, 274, 88, 94, 120,
	183, 144, 108, 171, 137, 0, 0, 0, 0, 238,
	0, 0, 0, 106, 235, 0, 0, 118, 277, 121,
	0, 0, 153, 130, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 0, 0, 812, 0, 50, 0,
	0, 236, 256, 255, 258, 259, 260, 261, 0, 0,
	98, 257, 262, 263, 264, 0, 0, 233, 249, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 0, 0, 0, 0, 288, 0, 248, 0,
	0, 244, 245, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 286,
	142, 0, 101, 0, 156, 110, 0, 119, 0, 0,
	0, 0, 0, 102, 0, 148, 138, 168, 0, 139,
	147, 122, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 99, 150, 91, 164, 155, 128, 114, 115,
	90, 0, 146, 105, 109, 104, 136, 161, 162, 103,
	185, 95, 173, 174, 93, 96, 172, 135, 159, 165,
	129, 126, 92, 163, 127, 125, 117, 107, 111, 140,
	124, 141, 112, 132, 131, 133, 0, 0, 0, 154,
	170, 186, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 134, 97, 113, 151, 116, 123, 145, 184, 0,
	149, 100, 169, 152, 278, 287, 284, 285, 282, 283,
	281, 280, 279, 289, 270, 271, 272, 273, 275, 23,
	274, 88, 94, 120, 183, 144, 108, 171, 0, 0,
	0, 137, 0, 0, 0, 0, 238, 0, 0, 0,
	106, 235, 0, 0, 118, 277, 121, 0, 0, 153,
	130, 0, 0, 0, 0, 268, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 236, 256,
	255, 258, 259, 260, 261, 0, 0, 98, 257, 262,
	263, 264, 0, 0, 233, 249, 0, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 246, 247, 0,
	0, 0, 0, 288, 0, 248, 0, 0, 244, 245,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 286, 142, 0, 101,
	0, 156, 110, 0, 119, 0, 0, 0, 0, 0,
	102, 0, 148, 138, 168, 0, 139, 147, 122, 160,
	143, 167, 177, 178, 158, 175, 89, 157, 166, 99,
	150, 91, 164, 155, 128, 114, 115, 90, 0, 146,
	105, 109, 104, 136, 161, 162, 103, 185, 95, 173,
	174, 93, 96, 172, 135, 159, 165, 129, 126, 92,
	163, 127, 125, 117, 107, 111, 140, 124, 141, 112,
	132, 131, 133, 0, 0, 0, 154, 170, 186, 0,
	0, 179, 180, 181, 182, 0, 0, 0, 134, 97,
	113, 151, 116, 123, 145, 184, 0, 149, 100, 169,
	152, 278, 287, 284, 285, 282, 283, 281, 280, 279,
	289, 270, 271, 272, 273, 275, 0, 274, 88, 94,
	120, 183, 144, 108, 171, 137, 0, 0, 0, 0,
	238, 0, 0, 0, 106, 235, 0, 0, 118, 277,
	121, 0, 0, 153, 130, 0, 0, 0, 0, 268,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 236, 256, 255, 258, 259, 260, 261, 0,
	0, 98, 257, 262, 263, 264, 0, 0, 233, 249,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 247, 0, 0, 0, 0, 288, 0, 248,
	0, 0, 244, 245, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	286, 142, 0, 101, 0, 156, 110, 0, 119, 0,
	0, 0, 0, 0, 102, 0, 148, 138, 168, 0,
	139, 147, 122, 160, 143, 167, 177, 178, 158, 175,
	89, 157, 166, 99, 150, 91, 164, 155, 128, 114,
	115, 90, 0, 146, 105, 109, 104, 136, 161, 162,
	103, 185, 95, 173, 174, 93, 96, 172, 135, 159,
	165, 129, 126, 92, 163, 127, 125, 117, 107, 111,
	140, 124, 141, 112, 132, 131, 133, 0, 0, 0,
	154, 170, 186, 0, 0, 179, 180, 181, 182, 0,
	0, 0, 134, 97, 113, 151, 116, 123, 145, 184,
	0, 149, 100, 169, 152, 278, 287, 284, 285, 282,
	283, 281, 280, 279, 289, 270, 271, 272, 273, 275,
	137, 274, 88, 94, 120, 183, 144, 108, 171, 106,
	0, 0, 0, 118, 277, 121, 0, 0, 153, 130,
	0, 0, 0, 0, 268, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 236, 256, 255,
	258, 259, 260, 261, 0, 0, 98, 257, 262, 263,
	264, 0, 0, 0, 249, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 0, 0,
	0, 0, 288, 0, 248, 0, 0, 244, 245, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 286, 142, 0, 101, 0,
	156, 110, 0, 119, 0, 0, 0, 0, 0, 102,
	0, 148, 138, 168, 1350, 139, 147, 122, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 99, 150,
	91, 164, 155, 128, 114, 115, 90, 0, 146, 105,
	109, 104, 136, 161, 162, 103, 185, 95, 173, 174,
	93, 96, 172, 135, 159, 165, 129, 126, 92, 163,
	127, 125, 117, 107, 111, 140, 124, 141, 112, 132,
	131, 133, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 134, 97, 113,
	151, 116, 123, 145, 184, 0, 149, 100, 169, 152,
	278, 287, 284, 285, 282, 283, 281, 280, 279, 289,
	270, 271, 272, 273, 275, 137, 274, 88, 94, 120,
	183, 144, 108, 171, 106, 0, 0, 0, 118, 277,
	121, 0, 0, 153, 130, 0, 0, 0, 0, 268,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 236, 256, 255, 258, 259, 260, 261, 0,
	0, 98, 257, 262, 263, 264, 0, 0, 0, 249,
	0, 276, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 246, 247, 0, 0, 0, 0, 288, 0, 248,
	0, 0, 244, 245, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	286, 142, 0, 101, 0, 156, 110, 0, 119, 0,
	0, 0, 0, 0, 102, 0, 148, 138, 168, 0,
	139, 147, 122, 160, 143, 167, 177, 178, 158, 175,
	89, 157, 166, 99, 150, 91, 164, 155, 128, 114,
	115, 90, 0, 146, 105, 109, 104, 136, 161, 162,
	103, 185, 95, 173, 174, 93, 96, 172, 135, 159,
	165, 129, 126, 92, 163, 127, 125, 117, 107, 111,
	140, 124, 141, 112, 132, 131, 133, 0, 0, 0,
	154, 170, 186, 0, 0, 179, 180, 181, 182, 0,
	0, 0, 134, 97, 113, 151, 116, 123, 145, 184,
	0, 149, 100, 169, 152, 278, 287, 284, 285, 282,
	283, 281, 280, 279, 289, 270, 271, 272, 273, 275,
	137, 274, 88, 94, 120, 183, 144, 108, 171, 106,
	0, 0, 0, 118, 0, 121, 0, 0, 153, 130,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 490, 489, 499, 500, 492, 493, 494, 495,
	496, 497, 498, 491, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 142, 0, 101, 0,
	156, 110, 0, 119, 0, 0, 0, 0, 0, 102,
	0, 148, 138, 168, 0, 139, 147, 122, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 99, 150,
	91, 164, 155, 128, 114, 115, 90, 0, 146, 105,
	109, 104, 136, 161, 162, 103, 185, 95, 173, 174,
	93, 96, 172, 135, 159, 165, 129, 126, 92, 163,
	127, 125, 117, 107, 111, 140, 124, 141, 112, 132,
	131, 133, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 134, 97, 113,
	151, 116, 123, 145, 184, 0, 149, 100, 169, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 94, 120,
	183, 144, 108, 171, 137, 0, 0, 0, 478, 0,
	0, 0, 0, 106, 0, 0, 0, 118, 0, 121,
	0, 0, 153, 130, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 480, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 475, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	142, 0, 101, 0, 156, 110, 0, 119, 0, 0,
	0, 0, 0, 102, 0, 148, 138, 168, 0, 139,
	147, 122, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 99, 150, 91, 164, 155, 128, 114, 115,
	90, 0, 146, 105, 109, 104, 136, 161, 162, 103,
	185, 95, 173, 174, 93, 96, 172, 135, 159, 165,
	129, 126, 92, 163, 127, 125, 117, 107, 111, 140,
	124, 141, 112, 132, 131, 133, 0, 0, 0, 154,
	170, 186, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 134, 97, 113, 151, 116, 123, 145, 184, 0,
	149, 100, 169, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 94, 120, 183, 144, 108, 171, 137, 0,
	0, 0, 574, 0, 0, 0, 0, 106, 0, 0,
	0, 118, 0, 121, 0, 0, 153, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 576, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 101, 0, 156, 110,
	0, 119, 0, 0, 0, 0, 0, 102, 0, 148,
	138, 168, 0, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 0, 149, 100, 169, 152, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 88, 94, 120, 183, 144,
	108, 171, 106, 0, 0, 0, 118, 0, 121, 0,
	0, 153, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 101, 0, 156, 110, 0, 119, 0, 0, 0,
	0, 0, 102, 0, 148, 138, 168, 0, 139, 147,
	122, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 99, 150, 91, 164, 155, 128, 114, 115, 90,
	0, 146, 105, 109, 104, 136, 161, 162, 103, 185,
	95, 173, 174, 93, 96, 172, 135, 159, 165, 129,
	126, 92, 163, 127, 125, 117, 107, 111, 140, 124,
	141, 112, 132, 131, 133, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	134, 97, 113, 151, 116, 123, 145, 184, 0, 149,
	100, 169, 152, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	88, 94, 120, 183, 144, 108, 171, 106, 0, 0,
	0, 118, 0, 121, 0, 0, 153, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 101, 0, 156, 110,
	0, 119, 0, 0, 0, 0, 0, 102, 0, 148,
	138, 168, 0, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 137, 149, 100, 169, 152, 0, 0,
	0, 0, 106, 0, 0, 0, 118, 0, 121, 0,
	0, 153, 130, 0, 0, 88, 94, 120, 183, 144,
	108, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 700, 0, 0, 701, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 101, 0, 156, 110, 0, 119, 0, 0, 0,
	0, 0, 102, 0, 148, 138, 168, 0, 139, 147,
	122, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 99, 150, 91, 164, 155, 128, 114, 115, 90,
	0, 146, 105, 109, 104, 136, 161, 162, 103, 185,
	95, 173, 174, 93, 96, 172, 135, 159, 165, 129,
	126, 92, 163, 127, 125, 117, 107, 111, 140, 124,
	141, 112, 132, 131, 133, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	134, 97, 113, 151, 116, 123, 145, 184, 137, 149,
	100, 169, 152, 0, 0, 0, 0, 106, 594, 0,
	0, 118, 0, 121, 0, 0, 153, 130, 0, 0,
	88, 94, 120, 183, 144, 108, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 593, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 101, 0, 156, 110,
	0, 119, 0, 0, 0, 0, 0, 102, 0, 148,
	138, 168, 0, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 0, 149, 100, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 94, 120, 183, 144,
	108, 171, 137, 0, 0, 0, 574, 0, 0, 0,
	0, 106, 0, 0, 0, 118, 0, 121, 0, 0,
	153, 130, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 576, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 142, 0,
	101, 0, 156, 110, 0, 119, 0, 0, 0, 0,
	0, 102, 0, 148, 138, 168, 0, 572, 147, 122,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	99, 150, 91, 164, 155, 128, 114, 115, 90, 0,
	146, 105, 109, 104, 136, 161, 162, 103, 185, 95,
	173, 174, 93, 96, 172, 135, 159, 165, 129, 126,
	92, 163, 127, 125, 117, 107, 111, 140, 124, 141,
	112, 132, 131, 133, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 134,
	97, 113, 151, 116, 123, 145, 184, 137, 149, 100,
	169, 152, 0, 0, 0, 0, 106, 0, 0, 0,
	118, 0, 121, 0, 0, 153, 130, 0, 0, 88,
	94, 120, 183, 144, 108, 171, 0, 0, 0, 0,
	0, 50, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 101, 0, 156, 110, 0,
	119, 0, 0, 0, 0, 0, 102, 0, 148, 138,
	168, 0, 139, 147, 122, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 99, 150, 91, 164, 155,
	128, 114, 115, 90, 0, 146, 105, 109, 104, 136,
	161, 162, 103, 185, 95, 173, 174, 93, 96, 172,
	135, 159, 165, 129, 126, 92, 163, 127, 125, 117,
	107, 111, 140, 124, 141, 112, 132, 131, 133, 0,
	0, 0, 154, 170, 186, 0, 0, 179, 180, 181,
	182, 0, 0, 0, 134, 97, 113, 151, 116, 123,
	145, 184, 137, 149, 100, 169, 152, 0, 0, 0,
	0, 106, 0, 0, 0, 118, 0, 121, 0, 0,
	153, 130, 0, 0, 88, 94, 120, 183, 144, 108,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 576, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 142, 0,
	101, 0, 156, 110, 0, 119, 0, 0, 0, 0,
	0, 102, 0, 148, 138, 168, 0, 139, 147, 122,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	99, 150, 91, 164, 155, 128, 114, 115, 90, 0,
	146, 105, 109, 104, 136, 161, 162, 103, 185, 95,
	173, 174, 93, 96, 172, 135, 159, 165, 129, 126,
	92, 163, 127, 125, 117, 107, 111, 140, 124, 141,
	112, 132, 131, 133, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 134,
	97, 113, 151, 116, 123, 145, 184, 137, 149, 100,
	169, 152, 0, 0, 0, 0, 106, 0, 0, 0,
	118, 0, 121, 0, 0, 153, 130, 0, 0, 88,
	94, 120, 183, 144, 108, 171, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 480, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 101, 0, 156, 110, 0,
	119, 0, 0, 0, 0, 0, 102, 0, 148, 138,
	168, 0, 139, 147, 122, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 99, 150, 91, 164, 155,
	128, 114, 115, 90, 0, 146, 105, 109, 104, 136,
	161, 162, 103, 185, 95, 173, 174, 93, 96, 172,
	135, 159, 165, 129, 126, 92, 163, 127, 125, 117,
	107, 111, 140, 124, 141, 112, 132, 131, 133, 0,
	0, 0, 154, 170, 186, 0, 0, 179, 180, 181,
	182, 0, 0, 0, 134, 97, 113, 151, 116, 123,
	145, 184, 137, 149, 100, 169, 152, 0, 0, 0,
	0, 106, 0, 0, 0, 118, 0, 121, 0, 0,
	153, 130, 0, 0, 88, 94, 120, 183, 144, 108,
	171, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 0, 142, 0,
	101, 0, 156, 110, 0, 119, 0, 0, 0, 0,
	0, 102, 0, 148, 138, 168, 0, 139, 147, 122,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	99, 150, 91, 164, 155, 128, 114, 115, 90, 0,
	146, 105, 109, 104, 136, 161, 162, 103, 185, 95,
	173, 174, 93, 96, 172, 135, 159, 165, 129, 126,
	92, 163, 127, 125, 117, 107, 111, 140, 124, 141,
	112, 132, 131, 133, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 134,
	97, 113, 151, 116, 123, 145, 184, 660, 149, 100,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 88,
	94, 120, 183, 144, 108, 171, 552, 106, 0, 0,
	0, 118, 0, 121, 0, 0, 153, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 101, 0, 156, 110,
	0, 119, 0, 0, 0, 0, 0, 102, 0, 148,
	138, 168, 0, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 0, 149, 100, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 0, 0,
	0, 0, 0, 137, 0, 88, 94, 120, 183, 144,
	108, 171, 106, 0, 0, 0, 118, 0, 121, 0,
	0, 153, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 101, 0, 156, 110, 0, 119, 0, 0, 0,
	0, 0, 102, 0, 148, 138, 168, 0, 139, 147,
	122, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 99, 150, 91, 164, 155, 128, 114, 115, 90,
	0, 146, 105, 109, 104, 136, 161, 162, 103, 185,
	95, 173, 174, 93, 96, 172, 135, 159, 165, 129,
	126, 92, 163, 127, 125, 117, 107, 111, 140, 124,
	141, 112, 132, 131, 133, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	134, 97, 113, 151, 116, 123, 145, 184, 137, 149,
	100, 169, 152, 0, 0, 0, 0, 106, 0, 0,
	0, 118, 0, 121, 0, 0, 153, 130, 0, 0,
	88, 94, 120, 183, 144, 108, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	176, 0, 0, 0, 142, 0, 101, 0, 156, 110,
	0, 119, 0, 0, 0, 0, 0, 102, 0, 148,
	138, 168, 0, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 137, 149, 100, 169, 152, 0, 0,
	0, 0, 106, 0, 0, 0, 118, 0, 121, 0,
	0, 153, 130, 0, 0, 88, 94, 120, 183, 144,
	108, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 101, 0, 156, 110, 0, 119, 0, 0, 0,
	0, 0, 102, 0, 148, 138, 168, 0, 139, 147,
	122, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 99, 150, 91, 164, 155, 128, 114, 115, 90,
	0, 146, 105, 109, 104, 136, 161, 162, 103, 185,
	95, 173, 174, 93, 96, 172, 135, 159, 165, 129,
	126, 92, 163, 127, 125, 117, 107, 111, 140, 124,
	141, 112, 132, 131, 133, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	134, 97, 113, 151, 116, 123, 145, 184, 137, 149,
	100, 169, 152, 0, 0, 0, 0, 106, 0, 0,
	0, 118, 0, 121, 0, 0, 153, 130, 0, 0,
	88, 94, 120, 183, 144, 108, 171, 0, 0, 0,
	0, 0, 0, 0, 0, 236, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 101, 0, 156, 110,
	0, 119, 0, 0, 0, 0, 0, 102, 0, 148,
	138, 168, 0, 139, 147, 122, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 99, 150, 91, 164,
	155, 128, 114, 115, 90, 0, 146, 105, 109, 104,
	136, 161, 162, 103, 185, 95, 173, 174, 93, 96,
	172, 135, 159, 165, 129, 126, 92, 163, 127, 125,
	117, 107, 111, 140, 124, 141, 112, 132, 131, 133,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 134, 97, 113, 151, 116,
	123, 145, 184, 137, 149, 100, 169, 152, 0, 0,
	0, 0, 106, 0, 0, 0, 118, 0, 121, 0,
	0, 153, 130, 0, 0, 88, 94, 120, 183, 144,
	108, 171, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 101, 0, 156, 110, 0, 119, 0, 0, 0,
	0, 0, 102, 0, 148, 138, 168, 0, 139, 147,
	122, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 99, 150, 91, 164, 155, 128, 114, 115, 90,
	0, 146, 105, 109, 104, 136, 161, 162, 103, 185,
	95, 173, 174, 93, 96, 172, 135, 159, 165, 129,
	126, 92, 163, 127, 125, 117, 107, 111, 140, 124,
	141, 112, 132, 131, 133, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	134, 97, 113, 151, 116, 123, 145, 184, 0, 149,
	100, 169, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 94, 120, 183, 144, 108, 171,
}
var yyPact = [...]int{

	173, -1000, -177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 847, 879, -1000, -1000, -1000, -1000, -1000, -1000, 715,
	67, 95, 125, -6, 10090, 123, 1427, 10705, -1000, -18,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 688, -1000, -1000,
	-1000, -1000, -1000, 841, 845, 738, 834, 785, -1000, 5672,
	98, 8819, 9885, 4970, -1000, 524, 116, 10705, -141, 10295,
	91, 91, 91, -1000, 120, 10705, -1000, 10705, 88, 519,
	88, 88, 88, 10705, -1000, 162, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10705, 517, 815,
	92, 3241, 3241, 3241, 3241, -2, 3241, -97, 745, -1000,
	-1000, -1000, -1000, 3241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 489, 820, 6377, 6377, 847, -1000,
	688, -1000, -1000, -1000, 814, -1000, -1000, 279, 858, -1000,
	7286, 158, -1000, 6377, 1623, 659, -1000, -1000, 659, -1000,
	-1000, 150, -1000, -1000, 6827, 6827, 6827, 6827, 6827, 6827,
	6827, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 659, -1000, 6143, 659, 659,
	659, 659, 659, 659, 659, 659, 6377, 659, 659, 659,
	659, 659, 659, 659, 659, 659, 659, 659, 659, 659,
	9660, 585, 756, -1000, -1000, -1000, 831, 7970, 8614, 10705,
	640, -1000, 653, 4723, -96, -1000, -1000, -1000, 241, 8380,
	-1000, -1000, -1000, 813, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 611, -1000, 1902, 10295, 3241, 109, 665, 500, 257,
	481, 10705, 9434, 3241, 105, 10705, 829, 739, 10705, 471,
	466, -1000, 4476, -1000, 3241, 3241, 3241, 3241, 3241, 3241,
	3241, 3241, -1000, -1000, -1000, -1000, -1000, -1000, 3241, 3241,
	-1000, -83, -1000, 10705, -1000, -1000, -1000, -1000, 874, 193,
	358, 157, 655, -1000, 396, 841, 489, 785, 8175, 764,
	-1000, -1000, 10705, -1000, 6377, 6377, 325, -1000, 9229, -1000,
	-1000, 3488, 207, 6827, 327, 294, 6827, 6827, 6827, 6827,
	6827, 6827, 6827, 6827, 6827, 6827, 6827, 6827, 6827, 6827,
	6827, 398, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	459, -1000, 688, 614, 614, 177, 177, 177, 177, 177,
	177, 7052, 5204, 489, 601, 220, 6143, 5672, 5672, 6377,
	6377, 10500, 10500, 5672, 835, 250, 220, 10500, -1000, 489,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 5672, 5672, 5672,
	5672, 9, 10705, -1000, 10500, 8819, 8819, 8819, 8819, 8819,
	-1000, 780, 779, -1000, 768, 766, 774, 10705, -1000, 596,
	7970, 179, 659, -1000, 9024, -1000, -1000, 9, 631, 8819,
	10705, -1000, -1000, 4229, 653, -96, 650, -1000, -100, -104,
	5906, 176, -1000, -1000, -1000, -1000, 2747, 145, 324, -1000,
	-77, -1000, -1000, -1000, -1000, 687, -1000, -1000, -1000, 687,
	81, 687, 687, 687, -51, -51, -51, -51, -1000, -1000,
	-1000, -1000, -1000, 702, 700, -1000, 687, 687, 687, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 698, 698, 698, 694, 694,
	741, -1000, 10705, -160, 429, 3241, 823, 3241, -1000, 93,
	10705, -1000, 10705, -1000, -1000, 10705, 3241, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 286, -1000, -1000, -1000, -1000, 797, 6377, 6377,
	3982, 6377, -1000, -1000, -1000, 820, -1000, 835, 849, -1000,
	806, 805, 5672, -1000, -1000, 207, 225, -1000, -1000, 364,
	-1000, -1000, -1000, -1000, 155, 659, -1000, 2059, -1000, -1000,
	-1000, -1000, 327, 6827, 6827, 6827, 1528, 2059, 2033, 664,
	1663, 177, 419, 419, 175, 175, 175, 175, 175, 308,
	308, -1000, -1000, -1000, 489, -1000, -1000, -1000, 489, 5672,
	652, -1000, -1000, 6377, -1000, 489, 574, 574, 287, 328,
	678, -1000, 154, 657, 574, 5672, 258, -1000, 6377, 489,
	-1000, 574, 489, 574, 574, 600, 659, -1000, 671, -1000,
	240, 756, 737, 733, 735, -1000, -1000, -1000, -1000, 769,
	-1000, 767, -1000, -1000, -1000, -1000, -1000, 115, 113, 111,
	10295, -1000, 851, 8819, 635, -1000, -1000, 650, -96, -117,
	-1000, -1000, -1000, 220, -1000, 426, 649, 2500, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 697, 10295, 63, 56, 100,
	423, -1000, -1000, -1000, 273, 40, 873, -1000, 58, -1000,
	45, 402, -79, -1000, -1000, 376, -51, -51, 687, -51,
	-1000, -1000, 176, 811, 176, 176, 176, 394, 394, -1000,
	-1000, -1000, -1000, 367, -1000, -1000, -1000, 355, -1000, 10705,
	10295, 3241, -1000, 3735, -1000, -1000, -1000, -1000, -1000, -1000,
	405, 604, 222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 8, 129, -1000, 3241, -1000, 293,
	10705, 10705, 795, 220, 220, 153, -1000, -1000, 10705, -1000,
	-1000, -1000, -1000, 651, -1000, -1000, -1000, 2994, 5672, -1000,
	1528, 2059, 1905, -1000, 6827, 6827, -1000, -1000, 574, 5672,
	220, -1000, -1000, -1000, 197, 398, 197, 6827, 6827, 3982,
	6827, 6827, -153, 607, 245, -1000, 6377, 246, -1000, -1000,
	-1000, -1000, -1000, 730, 10500, 659, -1000, 7745, 10295, 847,
	10500, 6377, 6377, -1000, -1000, 6377, 696, -1000, 6377, -1000,
	-1000, -1000, 659, 659, 659, 532, -1000, 847, 635, -1000,
	-1000, -1000, -112, -123, -1000, -1000, 2747, -1000, 2747, 10295,
	71, -1000, -1000, 415, 412, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -128, -1000, -1000, -1000, -1000, -1000,
	528, 176, 176, -51, 176, -1000, 219, -1000, -1000, -1000,
	559, -1000, 557, 648, 555, 645, 724, -1000, 642, -1000,
	238, -1000, 53, -1000, 10295, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 10295, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10705, -1000, -1000, -1000, -1000,
	-1000, 10295, 47, -1000, -1000, 390, 6377, -1000, -1000, -1000,
	3735, -1000, 851, 8819, -1000, -1000, 489, -1000, 6827, 2059,
	2059, -1000, -1000, 489, 687, 687, -1000, 687, 694, -1000,
	687, -28, 687, -29, 489, 489, 1825, 1953, -1000, 1729,
	1865, 659, -148, -1000, 220, 6377, -1000, 816, 628, 632,
	-1000, -1000, 5438, 489, 534, 148, 532, 841, -1000, 220,
	220, 220, 10295, 220, 10295, 10295, 10295, 7520, 10295, 841,
	-1000, -1000, -1000, -1000, 2500, -1000, 523, -1000, 687, 43,
	-1000, -1000, -1000, -1000, -1000, -1000, 176, -1000, -1000, -1000,
	-51, 389, -51, 336, -1000, 319, 10295, 10295, 10705, 3735,
	2747, 10295, -1000, -1000, -1000, 683, -1000, -1000, -1000, -1000,
	821, 10295, -1000, 220, 852, 637, -1000, 2059, -1000, -1000,
	74, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6827, 6827, -1000, 6827, 6827, 6827, 489, 386, 220, 23,
	-1000, 659, -1000, -1000, 625, 10295, 10295, -1000, -1000, 512,
	-1000, 510, 510, 510, 179, -1000, -1000, 126, 10295, -1000,
	10295, -1000, 176, -1000, 176, 513, 493, 498, 670, 667,
	-1000, -1000, 666, 10295, 659, 84, 850, 843, -1000, -1000,
	1845, 1845, 1845, 1845, 70, -1000, -1000, 864, -1000, 659,
	-1000, 688, 146, -1000, 10295, -1000, -1000, -1000, -1000, -1000,
	126, -1000, 406, 224, 329, -1000, 662, -1000, -1000, -1000,
	-1000, -1000, 10295, 10295, 10295, 496, 3, 20, -1000, 6377,
	6377, -1000, -1000, -1000, -1000, 489, 46, -166, 10500, 632,
	489, 10295, -1000, -1000, -1000, 295, -1000, -1000, 10295, 492,
	488, 478, 665, 456, -1000, 10295, 661, 220, 549, -1000,
	794, -157, -169, 545, -1000, -1000, -1000, 453, -1000, -1000,
	-1000, -1000, -160, -1000, 3, 804, 10295, -1000, 788, -1000,
	76, 10295, -1000, -1000, 0, 451, -162, 10295, -1000, -7,
	-1000, -167, 660, 659, -173, 10295, 6602, -1000, 421, 1845,
	489, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1058, 46, 468, 1055, 1054, 1053, 1051, 1050, 1049,
	1048, 1047, 1046, 1045, 1043, 1041, 1040, 1038, 1034, 1033,
	1031, 1030, 1029, 1024, 115, 1023, 1022, 1021, 66, 1020,
	60, 1019, 1018, 39, 91, 34, 41, 1222, 1016, 25,
	65, 58, 1015, 45, 1010, 1009, 69, 1008, 59, 1007,
	1006, 54, 1003, 1001, 12, 23, 1000, 999, 998, 997,
	85, 1, 995, 994, 993, 992, 988, 986, 43, 9,
	14, 18, 13, 985, 213, 6, 984, 48, 983, 982,
	979, 977, 36, 975, 51, 973, 20, 49, 966, 29,
	56, 32, 22, 7, 67, 57, 965, 17, 53, 42,
	964, 957, 384, 956, 952, 951, 950, 949, 948, 336,
	399, 947, 946, 945, 30, 0, 154, 158, 61, 944,
	40, 941, 1317, 80, 55, 21, 938, 27, 1365, 33,
	937, 935, 31, 934, 933, 932, 931, 930, 929, 928,
	925, 283, 28, 24, 923, 922, 52, 19, 44, 50,
	920, 919, 917, 10, 3, 37, 916, 915, 914, 913,
	26, 16, 908, 11, 906, 8, 905, 904, 4, 900,
	15, 899, 2, 892, 5, 891, 890, 889, 1238, 487,
	888, 887, 886, 885, 79,
}
var yyR1 = [...]int{

	0, 176, 177, 177, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 180,
	180, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 174, 174, 173, 172, 172, 171, 171, 170, 16,
	157, 158, 158, 158, 158, 149, 133, 133, 133, 133,
	133, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 136, 136, 136, 136,
	136, 138, 138, 138, 138, 138, 134, 134, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 148, 148, 141, 141, 146, 146, 147,
	147, 147, 144, 144, 145, 145, 142, 142, 142, 143,
	143, 151, 151, 166, 166, 165, 165, 165, 156, 156,
	162, 162, 162, 162, 162, 155, 155, 164, 164, 163,
	152, 153, 153, 154, 154, 159, 159, 159, 160, 160,
	160, 161, 161, 161, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 181, 181, 182, 182,
	182, 182, 182, 182, 182, 169, 167, 167, 168, 168,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 107, 107, 104, 104, 105, 105, 106, 106,
	106, 108, 108, 108, 131, 131, 131, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 183, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	119, 119, 119, 118, 118, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 91, 91,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	126, 126, 125, 125, 125, 124, 124, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 37, 37, 37,
	37, 37, 37, 37, 103, 103, 57, 57, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 67, 67,
	67, 67, 67, 67, 58, 58, 58, 58, 58, 58,
	58, 33, 33, 68, 68, 68, 74, 69, 69, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	65, 65, 65, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 64, 64,
	64, 64, 64, 64, 64, 64, 184, 184, 66, 66,
	66, 66, 31, 31, 31, 31, 31, 129, 129, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 78, 78, 32, 32, 76, 76, 77, 79,
	79, 75, 75, 75, 60, 60, 60, 60, 60, 60,
	60, 60, 62, 62, 62, 80, 80, 81, 81, 82,
	82, 83, 83, 84, 85, 85, 85, 86, 86, 86,
	86, 87, 87, 87, 59, 59, 59, 59, 59, 59,
	88, 88, 88, 88, 92, 92, 70, 70, 72, 72,
	71, 73, 93, 93, 97, 94, 94, 98, 98, 98,
	96, 96, 96, 121, 121, 121, 101, 101, 109, 109,
	110, 110, 102, 102, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 112, 112, 112, 113, 113, 116,
	116, 117, 117, 122, 122, 123, 123, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	178, 179, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 1, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 1, 1, 1, 4, 4,
	4, 5, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 1, 0, 1, 0, 3, 3, 0,
	2, 5, 4, 1, 2, 2, 3, 2, 0, 1,
	2, 3, 3, 2, 2, 1, 1, 1, 3, 2,
	13, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 1, 3, 3,
	2, 3, 1, 2, 0, 3, 1, 1, 3, 3,
	4, 4, 5, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 6, 4, 4, 6, 6, 6, 6, 8,
	8, 6, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -176, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 153, 154,
	156, 157, 25, 135, 136, 139, 140, -178, 8, 237,
	52, -177, 252, -82, 15, -26, 5, -24, -183, -24,
	-24, -24, -24, -24, -157, 52, -120, 120, 69, 149,
	229, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 229, 117, 118, -51, -122, 55, -115, 245, 153,
	164, 158, 186, 178, 246, 175, 179, 216, 64, 156,
	225, 126, 137, 173, 169, 167, 27, 191, 250, 168,
	129, 192, 196, 217, 162, 163, 219, 190, 31, 131,
	247, 33, 145, 220, 194, 189, 185, 188, 161, 184,
	37, 198, 197, 199, 215, 181, 170, 18, 140, 143,
	193, 195, 124, 147, 249, 221, 166, 144, 139, 224,
	157, 218, 227, 36, 203, 160, 128, 154, 151, 182,
	146, 171, 172, 187, 159, 183, 155, 148, 141, 226,
	204, 251, 180, 176, 177, 152, 120, 149, 150, 208,
	209, 210, 211, 248, 222, 174, 205, 118, 105, 179,
	111, 206, 119, 31, 147, -131, 118, -104, 150, 208,
	209, 210, 211, 55, 218, 217, 212, -122, 155, -127,
	-127, -127, -127, -127, -2, -86, 17, 16, -5, -3,
	-178, 6, 20, 21, -30, 38, 39, -25, -36, 96,
	-37, -122, -56, 71, -61, 28, 55, -115, 23, -60,
	-57, -75, -73, -74, 105, 106, 94, 95, 102, 72,
	107, -65, -63, -64, -66, 57, 56, 65, 58, 59,
	60, 61, 66, 67, 68, -116, -71, -178, 42, 43,
	238, 239, 240, 241, 244, 242, 74, 32, 228, 236,
	235, 234, 232, 233, 230, 231, 123, 229, 100, 237,
	-102, -39, -40, -41, -42, -53, -74, -178, -51, 11,
	-46, -51, -94, -130, 155, -98, 218, 217, -117, -96,
	-116, -114, 216, 179, 215, 55, -115, 116, 70, 22,
	24, 201, 73, 105, 16, 74, 104, 238, 111, 46,
	230, 231, 228, 240, 241, 229, 206, 28, 10, 25,
	135, 21, 98, 113, 77, 78, 138, 23, 136, 68,
	19, 49, 130, 11, 13, 14, 123, 122, 89, 119,
	44, 8, 107, 26, 86, 40, 133, 42, 87, 17,
	232, 233, 30, 244, 142, 100, 47, 34, 71, 66,
	50, 223, 69, 15, 45, 88, 114, 237, 43, 117,
	6, 243, 29, 134, 41, 118, 207, 76, 121, 67,
	5, 132, 9, 48, 51, 234, 235, 236, 32, 75,
	12, -158, -149, 55, 119, -51, 237, -116, -110, 123,
	-110, -110, 118, -51, -51, -109, 123, 55, -109, -109,
	-109, -51, 108, -51, 55, 29, 229, 55, 147, 118,
	148, 120, -128, -178, -117, -128, -128, -128, 151, 152,
	-128, -105, 213, 50, -128, -179, 54, -87, 19, 30,
	-37, -122, -83, -84, -37, -82, -2, -24, 34, -28,
	21, 63, 11, -119, 70, 69, 86, -118, 22, -116,
	57, 108, -37, -58, 89, 71, 87, 88, 73, 91,
	90, 101, 94, 95, 96, 97, 98, 99, 100, 92,
	93, 104, 79, 80, 81, 82, 83, 84, 85, -103,
	-178, -74, -178, 109, 110, -61, -61, -61, -61, -61,
	-61, -61, -178, -2, -69, -37, -178, -178, -178, -178,
	-178, -178, -178, -178, -178, -78, -37, -178, -184, -178,
	-184, -184, -184, -184, -184, -184, -184, -178, -178, -178,
	-178, -52, 26, -51, 29, 53, -47, -49, -48, -50,
	40, 44, 46, 41, 42, 43, 47, -126, 22, -39,
	-178, -125, 143, -124, 22, -122, 57, -51, -46, -180,
	53, 11, 51, 53, -94, 155, -95, -99, 219, 221,
	79, -121, -116, 57, 28, 29, 54, 53, -150, -133,
	-137, -134, -139, -138, -140, -135, -136, 178, 246, 175,
	179, 176, 105, 180, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 29, 137, 171, 172, 173, 174,
	192, 193, 194, 195, 196, 197, 198, 199, 158, 159,
	160, 161, 162, 163, 164, 166, 167, 168, 169, 170,
	-116, -128, 120, -174, 51, 55, 71, 55, -51, -51,
	223, -128, 121, -51, 23, 50, -51, 55, 55, -123,
	-122, -114, -128, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -107, 207, 214, -51, 9, 89, 53, 18,
	108, 53, -85, 24, 25, -86, -179, -30, -62, -116,
	58, 61, -29, 41, -51, -37, -37, -67, 66, 71,
	67, 68, -118, 96, -123, -117, -114, -61, -68, -71,
	-74, 62, 89, 87, 88, 73, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -129, 55, 57, 55, -60, -60, -116, -35, 21,
	-34, -36, -179, 53, -179, -2, -34, -34, -37, -37,
	-75, -116, -122, -75, -34, -28, -76, -77, 75, -75,
	-179, -34, -35, -34, -34, -90, 143, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 40, 40, 40, 45,
	40, 45, 40, -48, -122, -179, -54, 48, 122, 49,
	-178, -124, -90, 51, -39, -51, -98, -95, 53, 220,
	222, 223, 50, -37, -143, 104, -159, -160, -161, -117,
	57, 58, -149, -151, -152, -162, 126, 124, 128, 132,
	-155, 119, 133, 66, 71, 28, 50, 201, 124, 133,
	132, 64, -144, 204, -141, 52, -141, -141, 177, -141,
	-141, -141, -142, 179, -142, -142, -142, 52, 52, -141,
	-141, -141, -146, 52, -146, -146, -147, 52, -147, 50,
	51, -51, -172, 248, -173, 55, -128, 23, -128, -111,
	116, 113, 114, -169, 112, 201, 179, 64, 28, 15,
	238, 143, 251, 55, 144, -51, -51, -51, -128, -106,
	11, 89, 36, -37, -37, -123, -84, -87, -101, 19,
	11, 32, 32, -34, 66, 67, 68, 108, -178, -68,
	-61, -61, -61, -33, 138, 70, -179, -179, -34, 53,
	-37, -179, -179, -179, 53, 51, 22, 53, 11, 108,
	53, 11, -179, -34, -79, -77, 77, -37, -179, -179,
	-179, -179, -179, -59, 29, 32, -2, -178, -178, -55,
	53, 12, 79, -44, -43, 50, 51, -45, 50, -43,
	40, 40, 119, 119, 119, -91, -116, -55, -39, -55,
	-99, -100, 224, 221, 227, 55, 53, -161, 79, 52,
	-153, -116, 133, -155, -155, 55, 55, 66, 57, 58,
	59, 66, 228, 65, 9, 133, 133, 57, -145, 205,
	58, -142, -142, -141, -142, -143, 29, -143, -143, -143,
	-148, 57, -148, 58, 58, -51, -116, -128, -171, -170,
	-117, -127, -120, -182, 149, 125, 130, 129, 55, 124,
	128, 143, -175, 149, 125, 126, 130, 129, 55, 119,
	133, 124, 128, 143, 132, -112, -113, 121, 22, 119,
	133, 143, 116, -128, -108, 87, 12, -122, -122, 37,
	108, -51, -38, 11, 96, -117, -35, -33, 70, -61,
	-61, -179, -36, -132, 105, 175, 137, 173, 169, 190,
	181, 203, 171, 204, -129, -132, -61, -61, -117, -61,
	-61, 245, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -178, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -178, -178, -178, -179, 53, -82,
	-55, 221, 225, 226, -160, -161, -164, -163, -116, 130,
	55, 55, 228, 54, -143, -143, -142, -143, 55, 105,
	54, 53, 54, 53, 54, 53, 52, 51, 50, 53,
	79, -181, 119, 133, -127, -116, -127, -116, -51, -127,
	-116, 126, 57, -37, -55, -39, -179, -61, -179, -141,
	-141, -141, -147, -141, 163, -141, 163, -179, -179, -179,
	53, 19, -179, 53, 19, -178, -32, 243, -37, 27,
	-92, 53, -179, -179, -179, 53, 108, -179, -86, -89,
	-116, -89, -89, -89, -125, -116, -86, 54, 53, -141,
	133, -143, -142, 57, -142, 58, 58, -89, -116, -51,
	-170, -161, -116, 52, 26, -116, -80, 13, -142, 55,
	-61, -61, -61, -61, -61, -179, 57, 133, -72, 32,
	-2, -178, -116, -116, 53, 54, -179, -179, -179, -54,
	-166, -165, 51, 131, 64, -163, -153, -143, -143, 54,
	54, 54, 52, 52, 52, -89, -178, 124, -81, 14,
	16, -179, -179, -179, -179, -31, 89, 248, 9, -70,
	-2, 108, -116, -165, 55, -156, 79, 57, 52, -89,
	-89, -89, 54, -167, -168, 143, 133, -37, -69, -179,
	246, 47, 249, -93, -179, -116, 58, -154, -116, 54,
	54, 54, -174, -179, 53, -116, 52, 37, 247, 250,
	54, 53, -172, -168, 32, -89, 37, 127, -116, 145,
	54, 248, -116, 146, 249, 52, -178, 250, -154, -61,
	142, 54, -179, -179,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 529, 0, 298, 298, 298, 298, 298, 298, 0,
	69, 582, 0, 0, 0, 0, -2, 288, 289, 0,
	291, 292, 802, 802, 802, 802, 802, 0, 33, 34,
	800, 1, 3, 537, 0, 0, 302, 305, 300, 0,
	582, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	580, 580, 580, 70, 0, 0, 583, 0, 578, 0,
	578, 578, 578, 0, 247, 369, 603, 604, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 0, 0, 0,
	0, 803, 803, 803, 803, 0, 803, 276, 265, 267,
	268, 269, 270, 803, 285, 286, 275, 287, 290, 293,
	294, 295, 296, 297, 27, 541, 0, 0, 529, 29,
	0, 298, 303, 304, 308, 306, 307, 299, 0, 316,
	320, 0, 377, 0, 382, 384, -2, -2, 0, 419,
	420, 421, 422, 423, 0, 0, 0, 0, 0, 0,
	0, 446, 447, 448, 449, 514, 515, 516, 517, 518,
	519, 520, 521, 386, 387, 511, 561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 502, 0, 476, 476,
	476, 476, 476, 476, 476, 476, 0, 0, 0, 0,
	0, 0, 327, 329, 330, 331, 350, 0, 352, 0,
	0, 41, 45, 0, 779, 565, -2, -2, 0, 0,
	601, 602, -2, 709, -2, 599, 600, 607, 608, 609,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	620, 621, 622, 623, 624, 625, 626, 627, 628, 629,
	630, 631, 632, 633, 634, 635, 636, 637, 638, 639,
	640, 641, 642, 643, 644, 645, 646, 647, 648, 649,
	650, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 0, 81, 0, 0, 803, 0, 71, 0, 0,
	0, 0, 0, 803, 0, 0, 0, 0, 0, 0,
	0, 246, 0, 248, 803, 803, 803, 803, 803, 803,
	803, 803, 257, 804, 805, 258, 259, 260, 803, 803,
	262, 0, 277, 0, 271, 28, 801, 22, 0, 0,
	538, 0, 530, 531, 534, 537, 27, 305, 0, 310,
	309, 301, 0, 317, 0, 0, 0, 321, 0, 323,
	324, 0, 380, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 404, 405, 406, 407, 408, 409, 410, 383,
	0, 397, 0, 0, 0, 439, 440, 441, 442, 443,
	444, 0, 312, 27, 0, 417, 0, 0, 0, 0,
	0, 0, 0, 0, 308, 0, 503, 0, 468, 0,
	469, 470, 471, 472, 473, 474, 475, 0, 312, 0,
	0, 43, 0, 368, 0, 0, 0, 0, 0, 0,
	357, 0, 0, 360, 0, 0, 0, 0, 351, 0,
	0, 371, 752, 353, 0, 355, 356, -2, 0, 0,
	0, 39, 40, 0, 46, 779, 48, 49, 0, 0,
	0, 169, 573, 574, 575, 571, 195, 0, 85, 91,
	162, 87, 88, 89, 90, 155, 108, 126, 127, 155,
	155, 155, 155, 155, 166, 166, 166, 166, 138, 139,
	140, 141, 142, 0, 0, 121, 155, 155, 155, 125,
	145, 146, 147, 148, 149, 150, 151, 152, 109, 110,
	111, 112, 113, 114, 115, 157, 157, 157, 159, 159,
	0, 64, 0, 74, 0, 803, 0, 803, 79, 0,
	0, 213, 0, 241, 579, 0, 803, 244, 245, 370,
	605, 606, 249, 250, 251, 252, 253, 254, 255, 256,
	261, 264, 278, 272, 273, 266, 542, 0, 0, 0,
	0, 0, 533, 535, 536, 541, 30, 308, 0, 522,
	0, 0, 0, 311, 25, 378, 379, 381, 398, 0,
	400, 402, 322, 318, 0, 512, -2, 388, 389, 413,
	414, 415, 0, 0, 0, 0, 411, 393, 0, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 438, 487, 488, 0, 436, 437, 445, 0, 0,
	313, 314, 416, 0, 560, 27, 0, 0, 0, 0,
	0, 511, 0, 0, 0, 0, 509, 506, 0, 0,
	477, 0, 0, 0, 0, 0, 0, 367, 375, 562,
	0, 328, 346, 348, 0, 343, 358, 359, 361, 0,
	363, 0, 365, 366, 332, 333, 334, 0, 0, 0,
	0, 354, 375, 0, 375, 42, 566, 47, 0, 0,
	52, 53, 567, 568, 569, 0, 80, 196, 198, 201,
	202, 203, 82, 83, 84, 0, 191, 0, 0, 0,
	0, 185, 186, 92, 0, 0, 0, 101, 0, 103,
	105, 0, 164, 163, 107, 0, 166, 166, 155, 166,
	132, 133, 169, 0, 169, 169, 169, 0, 0, 122,
	123, 124, 116, 0, 117, 118, 119, 0, 120, 0,
	0, 803, 66, 0, 72, 73, 67, 581, 68, 802,
	69, 0, 594, 214, 584, 585, 586, 587, 588, 589,
	590, 591, 592, 593, 0, 0, 240, 803, 243, 281,
	0, 0, 0, 539, 540, 0, 532, 23, 0, 576,
	577, 523, 524, 325, 399, 401, 403, 0, 312, 390,
	411, 394, 0, 391, 0, 0, 385, 450, 0, 0,
	418, -2, 453, 454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 529, 0, 507, 0, 0, 467, 478,
	479, 480, 481, 554, 0, 0, -2, 0, 0, 529,
	0, 0, 0, 340, 347, 0, 0, 341, 0, 342,
	362, 364, 0, 0, 0, 0, 338, 529, 375, 38,
	50, 51, 0, 0, 57, 170, 0, 199, 0, 0,
	0, 192, 180, 0, 0, 183, 184, 93, 94, 95,
	96, 97, 98, 99, 0, 102, 104, 106, 86, 165,
	0, 169, 169, 166, 169, 134, 0, 135, 136, 137,
	0, 153, 0, 0, 0, 0, 0, 65, 75, 76,
	0, 204, 0, 802, 0, 228, 229, 230, 231, 232,
	233, 234, 802, 0, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 0, 802, 595, 596, 597,
	598, 0, 0, 242, 263, 0, 0, 279, 280, 543,
	0, 24, 375, 0, 319, 513, 0, 392, 0, 412,
	395, 451, 315, 0, 155, 155, 492, 155, 159, 495,
	155, 497, 155, 500, 0, 0, 0, 0, 512, 0,
	0, 0, 504, 466, 510, 0, 31, 0, 554, 544,
	556, 558, 0, 27, 0, 550, 0, 537, 563, 376,
	564, 344, 0, 349, 0, 0, 0, 352, 0, 537,
	37, 54, 55, 56, 197, 200, 0, 187, 155, 0,
	181, 182, 100, 156, 128, 129, 169, 130, 167, 168,
	166, 0, 166, 0, 160, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 207, 0, 208, 210, 211, 212,
	0, 0, 282, 283, 525, 326, 452, 396, 455, 489,
	166, 493, 494, 496, 498, 499, 501, 457, 456, 458,
	0, 0, 461, 0, 0, 0, 0, 0, 508, 0,
	32, 0, 559, -2, 0, 0, 0, 44, 35, 0,
	336, 0, 0, 0, 371, 339, 36, 172, 0, 189,
	191, 131, 169, 154, 169, 0, 0, 0, 0, 0,
	77, 78, 0, 0, 0, 0, 527, 0, 490, 491,
	0, 0, 0, 0, 482, 465, 505, 0, 557, 0,
	-2, 0, 552, 551, 0, 345, 372, 373, 374, 335,
	171, 173, 0, 178, 0, 188, 0, 143, 144, 158,
	161, 61, 0, 0, 0, 0, 0, 0, 26, 0,
	0, 459, 460, 462, 463, 0, 0, 0, 0, 547,
	27, 0, 337, 174, 175, 0, 179, 177, 0, 0,
	0, 0, 71, 0, 236, 0, 0, 528, 526, 464,
	0, 0, 0, 555, -2, 553, 176, 0, 193, 63,
	62, 205, 74, 235, 0, 0, 0, 483, 0, 486,
	0, 0, 209, 237, 0, 0, 484, 0, 194, 0,
	206, 0, 0, 0, 0, 0, 0, 485, 0, 0,
	0, 190, 238, 239,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 252,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:308
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:313
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:341
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:349
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:353
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:366
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:372
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:376
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:382
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:386
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:393
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:405
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:417
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:421
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:427
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:433
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:437
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:446
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:447
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:451
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:455
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:460
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:464
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:470
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:474
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:488
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:492
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:498
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:502
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:512
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:516
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:530
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:534
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:540
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:545
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:560
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:575
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:589
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:597
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:605
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:609
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:614
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:618
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:623
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:627
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:633
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:638
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:643
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:649
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:654
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:660
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:666
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:673
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:680
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:685
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:689
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:693
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:699
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:704
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:715
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:725
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:730
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:735
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:740
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:745
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:750
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:755
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:760
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:765
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:770
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:775
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:780
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:785
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:790
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:795
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:802
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:807
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:875
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:887
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:897
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:901
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:927
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:978
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:990
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:994
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:998
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1012
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.optVal = nil
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1035
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1047
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1061
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.str = ""
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1096
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1102
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1106
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1112
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1116
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1126
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1137
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1141
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1151
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1159
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1163
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1179
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1189
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:1195
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    yyDollar[10].colIdent,
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1213
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1217
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 195:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.str = ""
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.str = yyDollar[1].str
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1252
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1256
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1260
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 206:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:1284
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 209:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1319
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 211:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1329
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 212:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1334
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1339
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1343
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1375
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 238:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1391
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1395
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1407
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1415
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1420
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1428
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1432
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1438
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1442
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1447
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1466
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1474
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1478
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1482
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1494
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1498
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1510
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1524
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1528
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1544
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1560
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.str = ""
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1574
		{
			yyVAL.str = "extended "
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.str = ""
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.str = "full "
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1598
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.showFilter = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1608
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1612
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1618
		{
			yyVAL.str = ""
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1622
		{
			yyVAL.str = SessionStr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.str = GlobalStr
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1632
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1642
		{
			yyVAL.statement = &Begin{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.statement = &Begin{}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1652
		{
			yyVAL.statement = &Commit{}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1658
		{
			yyVAL.statement = &Rollback{}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1664
		{
			yyVAL.statement = &OtherRead{}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1668
		{
			yyVAL.statement = &OtherRead{}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.statement = &OtherRead{}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1685
		{
			setAllowComments(yylex, true)
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1695
		{
			yyVAL.bytes2 = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1705
		{
			yyVAL.str = UnionStr
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1709
		{
			yyVAL.str = UnionAllStr
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1713
		{
			yyVAL.str = UnionDistinctStr
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1718
		{
			yyVAL.str = ""
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1722
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1726
		{
			yyVAL.str = SQLCacheStr
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1731
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1735
		{
			yyVAL.str = DistinctStr
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1740
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1744
		{
			yyVAL.str = StraightJoinHint
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1749
		{
			yyVAL.selectExprs = nil
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1753
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1763
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1769
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1773
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1777
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 319:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1781
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1786
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1790
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1794
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1801
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1806
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1810
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1816
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1820
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1830
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1834
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1838
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1844
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1848
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1854
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1858
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1864
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1868
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1881
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1885
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1889
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1893
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1899
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1901
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1905
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1907
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1911
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1913
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1916
		{
			yyVAL.empty = struct{}{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1918
		{
			yyVAL.empty = struct{}{}
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1921
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1925
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1929
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1936
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1942
		{
			yyVAL.str = JoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1946
		{
			yyVAL.str = JoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1950
		{
			yyVAL.str = JoinStr
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1956
		{
			yyVAL.str = StraightJoinStr
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1962
		{
			yyVAL.str = LeftJoinStr
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1966
		{
			yyVAL.str = LeftJoinStr
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1970
		{
			yyVAL.str = RightJoinStr
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1974
		{
			yyVAL.str = RightJoinStr
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1980
		{
			yyVAL.str = NaturalJoinStr
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1984
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1994
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1998
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2004
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2008
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2013
		{
			yyVAL.indexHints = nil
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2017
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2021
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2025
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2030
		{
			yyVAL.expr = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2034
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2040
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2044
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2048
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2052
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2056
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2060
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2064
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2070
		{
			yyVAL.str = ""
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2074
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2080
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2084
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2090
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2094
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2098
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2102
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2106
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2110
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2114
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 395:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2118
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 396:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2122
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2126
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2132
		{
			yyVAL.str = IsNullStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2136
		{
			yyVAL.str = IsNotNullStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2140
		{
			yyVAL.str = IsTrueStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2144
		{
			yyVAL.str = IsNotTrueStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2148
		{
			yyVAL.str = IsFalseStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2152
		{
			yyVAL.str = IsNotFalseStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2158
		{
			yyVAL.str = EqualStr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2162
		{
			yyVAL.str = LessThanStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2166
		{
			yyVAL.str = GreaterThanStr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2170
		{
			yyVAL.str = LessEqualStr
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2174
		{
			yyVAL.str = GreaterEqualStr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2178
		{
			yyVAL.str = NotEqualStr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2182
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2187
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2191
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2197
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2201
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2205
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2211
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2217
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2221
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2227
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2231
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2235
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2239
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2243
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2247
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2251
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2255
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2259
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2263
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2267
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2271
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2275
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2279
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2283
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2287
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2291
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2295
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2299
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2303
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2307
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2311
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2315
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2323
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2337
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2341
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2345
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2363
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2367
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2371
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 453:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2381
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2389
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 456:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2393
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 457:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2397
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 458:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2401
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 459:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2405
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2409
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 461:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2413
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 462:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2417
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 463:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2421
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 464:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:2425
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 465:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:2429
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2433
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2437
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2451
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2455
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2459
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2464
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2469
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2474
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2479
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2493
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2497
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2511
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2515
		{
			yyVAL.str = BooleanModeStr
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2519
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 485:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:2523
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2527
		{
			yyVAL.str = QueryExpansionStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2533
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2537
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2543
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2547
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2551
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2555
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2559
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2563
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2569
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2573
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2577
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2581
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2585
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2589
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2593
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2598
		{
			yyVAL.expr = nil
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2602
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2607
		{
			yyVAL.str = string("")
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2611
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2617
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2621
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2627
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2632
		{
			yyVAL.expr = nil
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2636
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2642
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2646
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2650
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2656
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2660
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2664
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2668
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2672
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2676
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2680
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2684
		{
			yyVAL.expr = &NullVal{}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2690
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2699
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2703
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2708
		{
			yyVAL.exprs = nil
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2712
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2717
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2721
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2726
		{
			yyVAL.orderBy = nil
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2730
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2736
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2740
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2746
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2751
		{
			yyVAL.str = AscScr
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2755
		{
			yyVAL.str = AscScr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2759
		{
			yyVAL.str = DescScr
		}
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2764
		{
			yyVAL.limit = nil
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2768
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2772
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2776
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2781
		{
			yyVAL.str = ""
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2785
		{
			yyVAL.str = ForUpdateStr
		}
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2789
		{
			yyVAL.str = ShareModeStr
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2802
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2806
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2810
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2815
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2819
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 549:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2823
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2830
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2834
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2838
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 553:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2842
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2847
		{
			yyVAL.updateExprs = nil
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2851
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2857
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2861
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2867
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2871
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2877
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2883
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2893
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2897
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2903
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2909
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2913
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2919
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2923
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2927
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2934
		{
			yyVAL.bytes = []byte("charset")
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2941
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2945
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2949
		{
			yyVAL.expr = &Default{}
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2958
		{
			yyVAL.byt = 0
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2960
		{
			yyVAL.byt = 1
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2963
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2965
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2968
		{
			yyVAL.str = ""
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2970
		{
			yyVAL.str = IgnoreStr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2974
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2976
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2978
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2980
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2982
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2984
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2986
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2988
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2990
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2992
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2995
		{
			yyVAL.empty = struct{}{}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2997
		{
			yyVAL.empty = struct{}{}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2999
		{
			yyVAL.empty = struct{}{}
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3003
		{
			yyVAL.empty = struct{}{}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3005
		{
			yyVAL.empty = struct{}{}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3009
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3013
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3020
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3026
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3030
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3037
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3256
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3265
		{
			decNesting(yylex)
		}
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3270
		{
			forceEOF(yylex)
		}
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3275
		{
			forceEOF(yylex)
		}
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3279
		{
			forceEOF(yylex)
		}
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3283
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
