// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	triggerBody          []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const UNIQUE = 57460
const KEY = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const MAXVALUE = 57470
const PARTITION = 57471
const REORGANIZE = 57472
const LESS = 57473
const THAN = 57474
const PROCEDURE = 57475
const TRIGGER = 57476
const VINDEX = 57477
const VINDEXES = 57478
const STATUS = 57479
const VARIABLES = 57480
const RESTRICT = 57481
const CASCADE = 57482
const NO = 57483
const ACTION = 57484
const PERMISSIVE = 57485
const RESTRICTIVE = 57486
const PUBLIC = 57487
const CURRENT_USER = 57488
const SESSION_USER = 57489
const PAD_INDEX = 57490
const FILLFACTOR = 57491
const IGNORE_DUP_KEY = 57492
const STATISTICS_NORECOMPUTE = 57493
const STATISTICS_INCREMENTAL = 57494
const ALLOW_ROW_LOCKS = 57495
const ALLOW_PAGE_LOCKS = 57496
const BEFORE = 57497
const AFTER = 57498
const EACH = 57499
const ROW = 57500
const SCROLL = 57501
const CURSOR = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const BIT = 57508
const TINYINT = 57509
const SMALLINT = 57510
const SMALLSERIAL = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const SERIAL = 57515
const BIGINT = 57516
const BIGSERIAL = 57517
const INTNUM = 57518
const REAL = 57519
const DOUBLE = 57520
const PRECISION = 57521
const FLOAT_TYPE = 57522
const DECIMAL = 57523
const NUMERIC = 57524
const SMALLMONEY = 57525
const MONEY = 57526
const TIME = 57527
const TIMESTAMP = 57528
const DATETIME = 57529
const YEAR = 57530
const DATETIMEOFFSET = 57531
const DATETIME2 = 57532
const SMALLDATETIME = 57533
const CHAR = 57534
const VARCHAR = 57535
const VARYING = 57536
const BOOL = 57537
const CHARACTER = 57538
const VARBINARY = 57539
const NCHAR = 57540
const NVARCHAR = 57541
const NTEXT = 57542
const UUID = 57543
const TEXT = 57544
const TINYTEXT = 57545
const MEDIUMTEXT = 57546
const LONGTEXT = 57547
const CITEXT = 57548
const BLOB = 57549
const TINYBLOB = 57550
const MEDIUMBLOB = 57551
const LONGBLOB = 57552
const JSON = 57553
const JSONB = 57554
const ENUM = 57555
const GEOMETRY = 57556
const POINT = 57557
const LINESTRING = 57558
const POLYGON = 57559
const GEOMETRYCOLLECTION = 57560
const MULTIPOINT = 57561
const MULTILINESTRING = 57562
const MULTIPOLYGON = 57563
const ARRAY = 57564
const NOW = 57565
const GETDATE = 57566
const BPCHAR = 57567
const NULLX = 57568
const AUTO_INCREMENT = 57569
const APPROXNUM = 57570
const SIGNED = 57571
const UNSIGNED = 57572
const ZEROFILL = 57573
const ZONE = 57574
const AUTOINCREMENT = 57575
const DATABASES = 57576
const TABLES = 57577
const VITESS_KEYSPACES = 57578
const VITESS_SHARDS = 57579
const VITESS_TABLETS = 57580
const VSCHEMA_TABLES = 57581
const EXTENDED = 57582
const FULL = 57583
const PROCESSLIST = 57584
const NAMES = 57585
const CHARSET = 57586
const GLOBAL = 57587
const SESSION = 57588
const ISOLATION = 57589
const LEVEL = 57590
const READ = 57591
const WRITE = 57592
const ONLY = 57593
const REPEATABLE = 57594
const COMMITTED = 57595
const UNCOMMITTED = 57596
const SERIALIZABLE = 57597
const CURRENT_TIMESTAMP = 57598
const DATABASE = 57599
const CURRENT_DATE = 57600
const CURRENT_TIME = 57601
const LOCALTIME = 57602
const LOCALTIMESTAMP = 57603
const UTC_DATE = 57604
const UTC_TIME = 57605
const UTC_TIMESTAMP = 57606
const REPLACE = 57607
const CONVERT = 57608
const CAST = 57609
const SUBSTR = 57610
const SUBSTRING = 57611
const GROUP_CONCAT = 57612
const SEPARATOR = 57613
const INHERIT = 57614
const MATCH = 57615
const AGAINST = 57616
const BOOLEAN = 57617
const LANGUAGE = 57618
const WITH = 57619
const WITHOUT = 57620
const PARSER = 57621
const QUERY = 57622
const EXPANSION = 57623
const UNUSED = 57624
const GENERATED = 57625
const ALWAYS = 57626
const IDENTITY = 57627
const SEQUENCE = 57628
const INCREMENT = 57629
const MINVALUE = 57630
const CACHE = 57631
const CYCLE = 57632
const OWNED = 57633
const NONE = 57634
const CLUSTERED = 57635
const NONCLUSTERED = 57636
const REPLICATION = 57637
const INCLUDE = 57638
const TYPECAST = 57639
const CHECK = 57640

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 113,
	-2, 103,
	-1, 36,
	154, 425,
	155, 425,
	-2, 415,
	-1, 272,
	110, 758,
	-2, 754,
	-1, 273,
	110, 759,
	-2, 755,
	-1, 343,
	81, 955,
	-2, 65,
	-1, 344,
	81, 906,
	-2, 66,
	-1, 349,
	81, 885,
	-2, 725,
	-1, 351,
	81, 929,
	-2, 727,
	-1, 655,
	52, 41,
	54, 41,
	-2, 43,
	-1, 800,
	110, 761,
	-2, 757,
	-1, 1042,
	5, 28,
	-2, 560,
	-1, 1067,
	5, 27,
	-2, 699,
	-1, 1168,
	5, 27,
	-2, 71,
	-1, 1385,
	5, 28,
	-2, 700,
	-1, 1468,
	5, 27,
	-2, 702,
	-1, 1599,
	5, 28,
	-2, 703,
	-1, 1707,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15048

var yyAct = [...]int{
	273, 1589, 977, 1585, 1518, 1548, 1391, 1070, 1478, 732,
	1101, 1522, 1282, 582, 277, 501, 1255, 864, 1404, 1159,
	1104, 1283, 776, 581, 3, 1256, 1481, 302, 467, 882,
	906, 276, 1170, 649, 1126, 89, 251, 901, 89, 1606,
	1252, 647, 335, 912, 985, 245, 972, 1132, 905, 926,
	836, 53, 865, 1034, 1228, 1086, 825, 833, 66, 738,
	348, 1156, 89, 89, 353, 802, 955, 921, 967, 353,
	665, 250, 353, 353, 852, 1075, 465, 86, 89, 345,
	89, 651, 664, 861, 279, 636, 89, 342, 526, 246,
	247, 248, 249, 514, 520, 329, 275, 683, 260, 835,
	679, 605, 339, 328, 534, 338, 1641, 337, 1140, 52,
	264, 1016, 942, 551, 552, 553, 554, 555, 548, 330,
	480, 558, 481, 548, 1674, 1308, 558, 1631, 488, 939,
	558, 542, 1295, 545, 468, 469, 1667, 1410, 1296, 560,
	561, 562, 563, 564, 565, 566, 333, 543, 544, 541,
	547, 546, 556, 557, 549, 550, 551, 552, 553, 554,
	555, 548, 1375, 513, 558, 1541, 547, 546, 556, 557,
	549, 550, 551, 552, 553, 554, 555, 548, 1417, 1713,
	558, 549, 550, 551, 552, 553, 554, 555, 548, 1124,
	941, 558, 1651, 1709, 1597, 1552, 1553, 1160, 1161, 1699,
	547, 546, 556, 557, 549, 550, 551, 552, 553, 554,
	555, 548, 1372, 513, 558, 978, 1660, 301, 1635, 1650,
	1247, 1620, 1379, 1596, 89, 478, 1278, 1279, 353, 353,
	353, 353, 1094, 353, 666, 1093, 667, 1139, 1095, 1277,
	353, 84, 80, 81, 82, 896, 897, 895, 509, 1434,
	547, 546, 556, 557, 549, 550, 551, 552, 553, 554,
	555, 548, 1433, 767, 558, 1142, 490, 353, 596, 1136,
	768, 1138, 1137, 944, 956, 48, 26, 27, 1509, 856,
	523, 347, 494, 1328, 1457, 1327, 471, 1528, 1368, 475,
	476, 946, 1366, 1422, 57, 939, 1666, 28, 1668, 968,
	244, 75, 1677, 1421, 1581, 1520, 522, 468, 469, 1424,
	1497, 270, 740, 741, 1338, 1339, 1708, 928, 1571, 59,
	60, 61, 62, 63, 505, 506, 1697, 1590, 89, 559,
	1206, 935, 1423, 924, 559, 89, 89, 89, 559, 925,
	739, 353, 1407, 862, 1591, 1465, 496, 353, 498, 70,
	73, 1412, 1343, 1376, 922, 1411, 345, 1118, 1117, 569,
	1203, 1106, 1352, 1621, 71, 74, 513, 1344, 1542, 923,
	631, 1289, 559, 1685, 1111, 1532, 495, 497, 1290, 655,
	483, 72, 68, 473, 883, 885, 78, 77, 559, 78,
	1085, 1442, 931, 746, 927, 936, 83, 470, 1084, 559,
	1083, 933, 932, 547, 546, 556, 557, 549, 550, 551,
	552, 553, 554, 555, 548, 1298, 730, 558, 479, 333,
	610, 223, 559, 611, 79, 1207, 547, 546, 556, 557,
	549, 550, 551, 552, 553, 554, 555, 548, 1553, 922,
	558, 956, 969, 662, 656, 347, 347, 347, 347, 949,
	347, 1659, 1109, 1625, 923, 571, 572, 347, 1204, 884,
	1202, 740, 741, 499, 1373, 1703, 1627, 1595, 1405, 1406,
	1408, 89, 559, 1205, 1123, 1546, 1388, 1215, 89, 1050,
	89, 353, 1028, 89, 536, 774, 89, 1622, 538, 489,
	89, 1011, 353, 353, 353, 353, 353, 353, 353, 353,
	493, 903, 902, 771, 69, 1322, 353, 353, 531, 533,
	929, 89, 1564, 731, 777, 778, 930, 922, 1563, 809,
	742, 1562, 743, 1211, 533, 747, 353, 1561, 750, 1560,
	89, 1559, 923, 807, 808, 806, 353, 547, 546, 556,
	557, 549, 550, 551, 552, 553, 554, 555, 548, 49,
	755, 558, 524, 769, 799, 1046, 1323, 1045, 347, 779,
	532, 531, 532, 531, 670, 1558, 937, 1556, 938, 803,
	1249, 1012, 788, 677, 532, 531, 1335, 533, 1073, 533,
	353, 934, 482, 668, 598, 599, 600, 601, 602, 603,
	604, 533, 573, 574, 575, 576, 577, 578, 579, 800,
	1210, 753, 532, 531, 845, 848, 1047, 853, 840, 1251,
	854, 513, 1623, 1624, 1626, 1628, 1629, 1499, 853, 533,
	1057, 1495, 1103, 781, 735, 559, 804, 532, 531, 1102,
	1496, 89, 50, 472, 89, 89, 89, 89, 89, 1103,
	796, 1114, 805, 1103, 533, 1607, 89, 866, 559, 89,
	798, 1103, 528, 89, 532, 531, 76, 610, 89, 89,
	611, 828, 353, 1661, 1608, 485, 486, 487, 830, 831,
	1427, 533, 840, 863, 1143, 353, 1688, 345, 1025, 1026,
	1027, 850, 1687, 1665, 858, 841, 842, 1482, 1664, 1113,
	907, 849, 502, 503, 504, 1663, 507, 1609, 347, 890,
	1484, 891, 1605, 511, 474, 1507, 1662, 477, 1436, 347,
	347, 347, 347, 347, 347, 347, 347, 327, 333, 333,
	333, 333, 333, 347, 347, 857, 1435, 859, 860, 867,
	879, 353, 870, 333, 887, 353, 1304, 353, 89, 888,
	89, 1165, 333, 783, 1426, 89, 893, 89, 1143, 892,
	89, 353, 910, 536, 868, 869, 347, 871, 826, 559,
	827, 957, 958, 959, 960, 792, 794, 795, 1483, 1163,
	1143, 793, 1557, 1464, 974, 1431, 1354, 1157, 1120, 1554,
	984, 1293, 989, 1579, 1717, 1472, 1705, 1006, 1292, 1007,
	799, 1291, 1008, 970, 971, 1401, 1698, 832, 1223, 1112,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 846, 846, 1401,
	1673, 1401, 1672, 846, 1401, 1658, 512, 1036, 547, 546,
	556, 557, 549, 550, 551, 552, 553, 554, 555, 548,
	1579, 1657, 558, 1096, 803, 800, 980, 547, 546, 556,
	557, 549, 550, 551, 552, 553, 554, 555, 548, 829,
	846, 558, 801, 1654, 1653, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	1017, 752, 1030, 1018, 1646, 513, 1401, 1643, 513, 347,
	1472, 1587, 1401, 1575, 1574, 1067, 1024, 353, 1472, 1505,
	89, 804, 347, 1472, 513, 1573, 1088, 751, 1090, 1472,
	1473, 1401, 1400, 1274, 513, 1514, 353, 556, 557, 549,
	550, 551, 552, 553, 554, 555, 548, 353, 736, 558,
	734, 907, 1387, 513, 1331, 1330, 1056, 491, 353, 1480,
	484, 1089, 1183, 466, 1039, 659, 1098, 89, 1325, 1326,
	1325, 1324, 1040, 513, 745, 1119, 1080, 1513, 975, 21,
	1054, 466, 347, 1508, 347, 756, 757, 758, 759, 760,
	761, 762, 763, 633, 513, 1091, 838, 513, 347, 764,
	765, 1134, 675, 674, 333, 1580, 660, 1579, 658, 353,
	1428, 1419, 1253, 1315, 1162, 1071, 1107, 1108, 1110, 1071,
	1072, 1218, 347, 1150, 1171, 1152, 1153, 1154, 1155, 889,
	1168, 658, 1184, 1180, 54, 255, 1185, 1182, 1181, 353,
	1052, 74, 89, 89, 1144, 1145, 922, 1147, 1148, 1149,
	89, 917, 1186, 916, 1158, 918, 919, 632, 1179, 353,
	920, 923, 633, 838, 1040, 773, 1176, 1639, 1164, 1383,
	559, 1306, 1072, 1040, 1220, 633, 1128, 1129, 1130, 1175,
	1177, 633, 23, 1051, 1133, 1131, 299, 300, 1418, 559,
	1438, 1437, 1216, 23, 945, 1049, 1244, 1334, 1329, 353,
	353, 772, 292, 291, 294, 295, 296, 297, 1097, 1467,
	866, 293, 298, 1254, 1071, 1222, 866, 1221, 532, 531,
	23, 1227, 1259, 894, 1257, 1040, 661, 1276, 353, 50,
	353, 353, 1241, 1240, 1087, 533, 1248, 775, 1048, 50,
	50, 800, 1710, 907, 1065, 907, 257, 1066, 1671, 1031,
	1032, 1033, 1263, 347, 1264, 1262, 1648, 559, 1577, 1576,
	1281, 1568, 1567, 1529, 1105, 1506, 1451, 50, 946, 973,
	1275, 1294, 1314, 1313, 1311, 1115, 1280, 547, 546, 556,
	557, 549, 550, 551, 552, 553, 554, 555, 548, 1134,
	1301, 558, 1305, 50, 1299, 1297, 1268, 89, 353, 968,
	638, 641, 642, 643, 639, 89, 640, 644, 1166, 1167,
	353, 1125, 1316, 1317, 1100, 1319, 1320, 1321, 962, 353,
	1076, 1077, 787, 961, 65, 733, 347, 1549, 981, 1439,
	983, 89, 1253, 1174, 1079, 749, 737, 353, 510, 1332,
	876, 1082, 1081, 1318, 1009, 877, 353, 1340, 874, 89,
	1341, 873, 872, 875, 1345, 1356, 347, 1682, 1135, 1139,
	1649, 1220, 1214, 1347, 638, 641, 642, 643, 639, 1013,
	640, 644, 1680, 1349, 1076, 1077, 347, 1350, 1128, 1129,
	1130, 1353, 878, 1023, 642, 643, 1133, 1131, 299, 300,
	1357, 1136, 1022, 1138, 1137, 261, 262, 1151, 347, 353,
	515, 353, 353, 353, 89, 353, 673, 1394, 1395, 1396,
	1364, 353, 516, 846, 527, 492, 1261, 1087, 1303, 846,
	982, 1381, 777, 778, 748, 1382, 907, 525, 1452, 527,
	1390, 252, 353, 333, 1449, 1302, 1409, 1397, 1416, 1414,
	1173, 1098, 1399, 976, 646, 347, 1696, 347, 1284, 1444,
	1021, 1445, 1446, 1447, 1413, 258, 259, 1448, 1020, 266,
	1337, 1288, 1669, 1535, 1443, 353, 353, 253, 1134, 54,
	780, 1420, 1534, 353, 1455, 1072, 529, 1224, 1225, 1566,
	1171, 907, 1565, 353, 1287, 1286, 1429, 986, 987, 988,
	1242, 1243, 1543, 1245, 1246, 1116, 1441, 1440, 770, 559,
	547, 546, 556, 557, 549, 550, 551, 552, 553, 554,
	555, 548, 56, 1229, 558, 1333, 1527, 8, 353, 353,
	58, 1430, 1178, 1432, 1524, 7, 1342, 1346, 837, 839,
	1525, 6, 353, 1523, 5, 657, 1348, 51, 1, 1466,
	1468, 1257, 353, 1640, 855, 1494, 1231, 1583, 1521, 1035,
	1498, 1572, 1122, 1492, 1351, 1493, 1570, 1477, 67, 1456,
	1135, 1139, 1500, 347, 1634, 1578, 1307, 1336, 353, 353,
	89, 1502, 1510, 353, 1172, 1187, 979, 1169, 994, 1588,
	1515, 1602, 353, 1479, 914, 904, 464, 64, 1530, 1555,
	915, 913, 911, 1136, 881, 1138, 1137, 676, 1511, 940,
	1512, 1141, 1208, 353, 1233, 943, 682, 680, 1238, 681,
	1232, 678, 1517, 684, 1544, 1230, 1392, 231, 1392, 1392,
	1392, 1236, 1398, 1545, 1482, 1257, 340, 645, 347, 669,
	530, 1201, 1200, 990, 1234, 1235, 1550, 1484, 1209, 303,
	47, 1127, 766, 1010, 508, 233, 1128, 1129, 1130, 1392,
	567, 1019, 1237, 1239, 1133, 1131, 299, 300, 1092, 353,
	353, 346, 1630, 1582, 1260, 1359, 519, 1533, 1454, 1055,
	593, 851, 1586, 278, 791, 290, 287, 353, 289, 1593,
	353, 288, 347, 347, 353, 782, 1064, 47, 866, 540,
	1450, 1598, 268, 332, 629, 256, 637, 635, 353, 353,
	1453, 334, 1617, 634, 1078, 1483, 1074, 353, 353, 1603,
	353, 1618, 517, 521, 1615, 1616, 331, 1217, 1378, 1632,
	1633, 353, 559, 1638, 1540, 786, 25, 1644, 55, 539,
	1610, 1611, 1612, 1613, 1614, 1470, 1471, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 263, 19, 18, 17, 20, 1284,
	16, 15, 14, 29, 13, 12, 1655, 1656, 11, 1501,
	10, 9, 1526, 583, 4, 254, 22, 2, 1670, 0,
	353, 0, 594, 1675, 0, 0, 1037, 1678, 1679, 353,
	1038, 0, 0, 353, 0, 1284, 1516, 1042, 1043, 1044,
	1519, 1681, 0, 0, 0, 0, 1053, 1686, 0, 1392,
	89, 1059, 353, 0, 1060, 1061, 1062, 1063, 1692, 1691,
	1693, 1684, 1694, 0, 1458, 1459, 89, 1460, 1461, 1462,
	1547, 0, 1702, 0, 0, 0, 0, 1704, 1135, 1139,
	0, 0, 1706, 0, 353, 0, 0, 0, 0, 0,
	0, 353, 0, 0, 0, 1714, 0, 0, 0, 1711,
	1707, 229, 0, 0, 0, 0, 0, 0, 1701, 0,
	0, 1136, 0, 1138, 1137, 0, 1551, 500, 500, 500,
	500, 0, 500, 0, 0, 239, 1584, 1284, 0, 500,
	947, 948, 950, 951, 952, 0, 953, 954, 0, 0,
	0, 846, 0, 0, 1600, 0, 47, 1601, 0, 0,
	0, 1604, 0, 963, 964, 965, 0, 966, 0, 0,
	0, 568, 0, 0, 570, 1519, 1284, 0, 0, 0,
	0, 0, 0, 0, 1284, 1284, 224, 1636, 0, 606,
	0, 0, 226, 0, 0, 0, 0, 0, 1647, 232,
	228, 580, 0, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 0, 595, 597, 597, 597, 597, 597, 597,
	597, 597, 608, 625, 626, 627, 628, 0, 0, 230,
	0, 0, 234, 0, 648, 546, 556, 557, 549, 550,
	551, 552, 553, 554, 555, 548, 1226, 1676, 558, 0,
	0, 789, 790, 0, 0, 0, 1284, 0, 0, 0,
	1683, 0, 0, 0, 0, 613, 614, 615, 616, 617,
	618, 619, 620, 621, 622, 1193, 1000, 0, 0, 1392,
	0, 0, 0, 0, 0, 0, 609, 0, 0, 0,
	999, 0, 225, 1273, 623, 607, 0, 0, 0, 0,
	0, 612, 0, 0, 583, 0, 0, 843, 844, 0,
	0, 347, 0, 0, 0, 0, 0, 1004, 1519, 0,
	0, 0, 0, 518, 0, 0, 998, 0, 0, 0,
	227, 0, 235, 236, 237, 238, 242, 0, 0, 0,
	1194, 241, 240, 0, 0, 1196, 1189, 1190, 0, 1197,
	1192, 1191, 0, 0, 1199, 1195, 0, 0, 87, 0,
	0, 243, 0, 0, 0, 1198, 0, 0, 0, 0,
	0, 1188, 0, 0, 624, 995, 992, 993, 0, 991,
	500, 0, 0, 267, 0, 87, 87, 0, 900, 0,
	0, 500, 500, 500, 500, 500, 500, 500, 500, 0,
	0, 87, 0, 87, 1146, 500, 500, 1002, 1005, 87,
	0, 0, 0, 0, 1715, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1358, 0,
	0, 0, 0, 0, 0, 1360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1369, 1370, 1371,
	0, 0, 1374, 0, 0, 0, 559, 23, 24, 48,
	26, 27, 0, 0, 0, 1384, 1385, 1386, 0, 1389,
	47, 0, 0, 0, 997, 0, 0, 42, 0, 0,
	0, 28, 0, 0, 584, 0, 0, 0, 0, 0,
	0, 0, 1014, 1015, 0, 521, 0, 0, 0, 0,
	37, 0, 0, 0, 50, 996, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 334, 334, 334, 334, 0, 0,
	0, 0, 0, 0, 1001, 0, 0, 87, 648, 0,
	886, 0, 0, 0, 0, 0, 0, 334, 1041, 0,
	1003, 0, 0, 0, 30, 31, 33, 32, 35, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 36, 43,
	44, 1310, 1312, 45, 46, 34, 0, 0, 0, 0,
	0, 1474, 1475, 1476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 0, 0, 0, 0, 38,
	39, 0, 40, 41, 500, 0, 500, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	500, 87, 0, 0, 0, 0, 0, 0, 87, 653,
	87, 0, 0, 0, 0, 1536, 1537, 1538, 1539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1361, 1362, 0, 1363, 0, 0,
	0, 1365, 0, 1367, 0, 0, 0, 0, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 1402,
	1403, 0, 0, 0, 0, 0, 0, 1594, 0, 0,
	0, 0, 1599, 0, 0, 0, 0, 0, 0, 0,
	0, 1068, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1619, 1250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 334,
	0, 0, 1265, 1266, 87, 1645, 1267, 0, 0, 1269,
	0, 87, 0, 87, 0, 0, 87, 0, 0, 87,
	0, 0, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 500, 267,
	267, 0, 0, 847, 847, 267, 0, 0, 0, 847,
	0, 0, 1718, 1719, 0, 0, 0, 0, 0, 0,
	0, 1355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	267, 267, 267, 0, 87, 0, 847, 87, 87, 87,
	87, 87, 0, 0, 0, 0, 1258, 0, 47, 880,
	0, 1380, 87, 0, 0, 0, 653, 0, 583, 0,
	0, 87, 87, 1270, 1271, 1272, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1300,
	1415, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 87, 0, 0, 0, 0, 87, 0,
	87, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1377, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1592, 583, 0, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1258, 0, 0, 1469, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1637, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 0, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1212, 1213, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 1531, 267, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 267, 0, 0, 1258, 0, 47,
	0, 0, 0, 0, 754, 0, 706, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	1642, 0, 0, 0, 1695, 847, 0, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 0, 723, 724,
	0, 725, 726, 727, 729, 728, 708, 709, 710, 714,
	712, 711, 713, 685, 687, 0, 623, 686, 692, 688,
	689, 690, 704, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 705, 715, 716, 717, 718, 719,
	720, 721, 722, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 1652, 0, 0, 0, 0, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 0,
	723, 724, 87, 725, 726, 727, 729, 728, 708, 709,
	710, 714, 712, 711, 713, 685, 687, 0, 623, 686,
	692, 688, 689, 690, 704, 693, 694, 695, 696, 697,
	698, 699, 700, 701, 702, 703, 705, 715, 716, 717,
	718, 719, 720, 721, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 47, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1712, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 452,
	442, 0, 410, 454, 383, 399, 462, 401, 402, 432,
	365, 418, 154, 396, 381, 92, 386, 358, 393, 359,
	384, 412, 116, 382, 444, 421, 130, 460, 133, 426,
	0, 176, 142, 0, 0, 414, 446, 416, 438, 409,
	433, 372, 425, 455, 397, 429, 456, 0, 0, 0,
	352, 0, 908, 909, 0, 0, 0, 0, 0, 105,
	0, 428, 451, 395, 463, 431, 357, 427, 0, 363,
	366, 461, 449, 390, 391, 1099, 0, 0, 0, 0,
	0, 0, 413, 417, 435, 406, 0, 0, 0, 0,
	0, 0, 0, 0, 387, 0, 424, 847, 0, 0,
	369, 364, 0, 411, 0, 0, 0, 371, 0, 388,
	436, 0, 354, 440, 447, 408, 203, 450, 405, 404,
	161, 0, 108, 0, 182, 120, 398, 131, 434, 453,
	415, 445, 385, 394, 110, 392, 168, 155, 194, 423,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 389, 439,
	441, 376, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 1690, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 87,
	177, 196, 214, 215, 361, 380, 448, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 430, 169, 107, 195, 175, 375, 379, 373,
	374, 419, 420, 457, 458, 459, 437, 370, 0, 377,
	378, 0, 443, 125, 422, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 400, 356, 403, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 170, 407, 0, 104,
	452, 442, 0, 410, 454, 383, 399, 462, 401, 402,
	432, 365, 418, 154, 396, 381, 92, 386, 358, 393,
	359, 384, 412, 116, 382, 444, 421, 130, 460, 133,
	426, 0, 176, 142, 0, 0, 414, 446, 416, 438,
	409, 433, 372, 425, 455, 397, 429, 456, 0, 0,
	0, 352, 0, 908, 909, 0, 0, 0, 0, 0,
	105, 0, 428, 451, 395, 463, 431, 357, 427, 0,
	363, 366, 461, 449, 390, 391, 0, 0, 0, 0,
	0, 0, 0, 413, 417, 435, 406, 0, 0, 0,
	0, 0, 0, 0, 0, 387, 0, 424, 0, 0,
	0, 369, 364, 0, 411, 0, 0, 0, 371, 0,
	388, 436, 0, 354, 440, 447, 408, 203, 450, 405,
	404, 161, 0, 108, 0, 182, 120, 398, 131, 434,
	453, 415, 445, 385, 394, 110, 392, 168, 155, 194,
	423, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 389,
	439, 441, 376, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 380, 448, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 430, 169, 107, 195, 175, 375, 379,
	373, 374, 419, 420, 457, 458, 459, 437, 370, 0,
	377, 378, 0, 443, 125, 422, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 400, 356, 403, 0, 0,
	0, 0, 0, 0, 0, 367, 368, 170, 407, 0,
	104, 452, 442, 0, 410, 454, 383, 399, 462, 401,
	402, 432, 365, 418, 154, 396, 381, 92, 386, 358,
	393, 359, 384, 412, 116, 382, 444, 421, 130, 460,
	133, 426, 0, 176, 142, 0, 0, 414, 446, 416,
	438, 409, 433, 372, 425, 455, 397, 429, 456, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 428, 451, 395, 463, 431, 357, 427,
	0, 363, 366, 461, 449, 390, 391, 0, 0, 0,
	0, 0, 0, 0, 413, 417, 435, 406, 0, 0,
	0, 0, 0, 0, 1219, 0, 387, 0, 424, 0,
	0, 0, 369, 364, 0, 411, 0, 0, 0, 371,
	0, 388, 436, 0, 354, 440, 447, 408, 203, 450,
	405, 404, 161, 0, 108, 0, 182, 120, 398, 131,
	434, 453, 415, 445, 385, 394, 110, 392, 168, 155,
	194, 423, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	389, 439, 441, 376, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 380, 448, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 430, 169, 107, 195, 175, 375,
	379, 373, 374, 419, 420, 457, 458, 459, 437, 370,
	0, 377, 378, 0, 443, 125, 422, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 400, 356, 403, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 170, 407,
	0, 104, 452, 442, 0, 410, 454, 383, 399, 462,
	401, 402, 432, 365, 418, 154, 396, 381, 92, 386,
	358, 393, 359, 384, 412, 116, 382, 444, 421, 130,
	460, 133, 426, 0, 176, 142, 0, 0, 414, 446,
	416, 438, 409, 433, 372, 425, 455, 397, 429, 456,
	50, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 428, 451, 395, 463, 431, 357,
	427, 0, 363, 366, 461, 449, 390, 391, 0, 0,
	0, 0, 0, 0, 0, 413, 417, 435, 406, 0,
	0, 0, 0, 0, 0, 0, 0, 387, 0, 424,
	0, 0, 0, 369, 364, 0, 411, 0, 0, 0,
	371, 0, 388, 436, 0, 354, 440, 447, 408, 203,
	450, 405, 404, 161, 0, 108, 0, 182, 120, 398,
	131, 434, 453, 415, 445, 385, 394, 110, 392, 168,
	155, 194, 423, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 389, 439, 441, 376, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 380, 448,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 430, 169, 107, 195, 175,
	375, 379, 373, 374, 419, 420, 457, 458, 459, 437,
	370, 0, 377, 378, 0, 443, 125, 422, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 400, 356, 403,
	0, 0, 0, 0, 0, 0, 0, 367, 368, 170,
	407, 0, 104, 452, 442, 0, 410, 454, 383, 399,
	462, 401, 402, 432, 365, 418, 154, 396, 381, 92,
	386, 358, 393, 359, 384, 412, 116, 382, 444, 421,
	130, 460, 133, 426, 0, 176, 142, 0, 0, 414,
	446, 416, 438, 409, 433, 372, 425, 455, 397, 429,
	456, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 428, 451, 395, 463, 431,
	357, 427, 0, 363, 366, 461, 449, 390, 391, 0,
	0, 0, 0, 0, 0, 0, 413, 417, 435, 406,
	0, 0, 0, 0, 0, 0, 797, 0, 387, 0,
	424, 0, 0, 0, 369, 364, 0, 411, 0, 0,
	0, 371, 0, 388, 436, 0, 354, 440, 447, 408,
	203, 450, 405, 404, 161, 0, 108, 0, 182, 120,
	398, 131, 434, 453, 415, 445, 385, 394, 110, 392,
	168, 155, 194, 423, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 389, 439, 441, 376, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 380,
	448, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 430, 169, 107, 195,
	175, 375, 379, 373, 374, 419, 420, 457, 458, 459,
	437, 370, 0, 377, 378, 0, 443, 125, 422, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 400, 356,
	403, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	170, 407, 0, 104, 452, 442, 0, 410, 454, 383,
	399, 462, 401, 402, 432, 365, 418, 154, 396, 381,
	92, 386, 358, 393, 359, 384, 412, 116, 382, 444,
	421, 130, 460, 133, 426, 0, 176, 142, 0, 0,
	414, 446, 416, 438, 409, 433, 372, 425, 455, 397,
	429, 456, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 428, 451, 395, 463,
	431, 357, 427, 0, 363, 366, 461, 449, 390, 391,
	0, 0, 0, 0, 0, 0, 0, 413, 417, 435,
	406, 0, 0, 0, 0, 0, 0, 0, 0, 387,
	0, 424, 0, 0, 0, 369, 364, 0, 411, 0,
	0, 0, 371, 0, 388, 436, 0, 354, 440, 447,
	408, 203, 450, 405, 404, 161, 0, 108, 0, 182,
	120, 398, 131, 434, 453, 415, 445, 385, 394, 110,
	392, 168, 155, 194, 423, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 389, 439, 441, 376, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	380, 448, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 430, 169, 107,
	195, 175, 375, 379, 373, 374, 419, 420, 457, 458,
	459, 437, 370, 0, 377, 378, 0, 443, 125, 422,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 400,
	356, 403, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 170, 407, 0, 104, 452, 442, 0, 410, 454,
	383, 399, 462, 401, 402, 432, 365, 418, 154, 396,
	381, 92, 386, 358, 393, 359, 384, 412, 116, 382,
	444, 421, 130, 460, 133, 426, 0, 176, 142, 0,
	0, 414, 446, 416, 438, 409, 433, 372, 425, 455,
	397, 429, 456, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 428, 451, 395,
	463, 431, 357, 427, 0, 363, 366, 461, 449, 390,
	391, 0, 0, 0, 0, 0, 0, 0, 413, 417,
	435, 406, 0, 0, 0, 0, 0, 0, 0, 0,
	387, 0, 424, 0, 0, 0, 369, 364, 0, 411,
	0, 0, 0, 371, 0, 388, 436, 0, 354, 440,
	447, 408, 203, 450, 405, 404, 161, 0, 108, 0,
	182, 120, 398, 131, 434, 453, 415, 445, 385, 394,
	110, 392, 168, 155, 194, 423, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 389, 439, 441, 376, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 380, 448, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 430, 169,
	107, 195, 175, 375, 379, 373, 374, 419, 420, 457,
	458, 459, 437, 370, 0, 377, 378, 0, 443, 125,
	422, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	400, 356, 403, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 170, 407, 0, 104, 452, 442, 0, 410,
	454, 383, 399, 462, 401, 402, 432, 365, 418, 154,
	396, 381, 92, 386, 358, 393, 359, 384, 412, 116,
	382, 444, 421, 130, 460, 133, 426, 0, 176, 142,
	0, 0, 414, 446, 416, 438, 409, 433, 372, 425,
	455, 397, 429, 456, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 428, 451,
	395, 463, 431, 357, 427, 0, 363, 366, 461, 449,
	390, 391, 0, 0, 0, 0, 0, 0, 0, 413,
	417, 435, 406, 0, 0, 0, 0, 0, 0, 0,
	0, 387, 0, 424, 0, 0, 0, 369, 364, 0,
	411, 0, 0, 0, 371, 0, 388, 436, 0, 354,
	440, 447, 408, 203, 450, 405, 404, 161, 0, 108,
	0, 182, 120, 398, 131, 434, 453, 415, 445, 385,
	394, 110, 392, 168, 155, 194, 423, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 389, 439, 441, 376, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 350, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 380, 448, 206, 207, 208, 209, 0, 0,
	0, 351, 349, 124, 173, 128, 135, 164, 212, 430,
	169, 107, 195, 175, 375, 379, 373, 374, 419, 420,
	457, 458, 459, 437, 370, 0, 377, 378, 0, 443,
	125, 422, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 400, 356, 403, 0, 0, 0, 0, 0, 0,
	0, 367, 368, 170, 407, 0, 104, 452, 442, 0,
	410, 454, 383, 399, 462, 401, 402, 432, 365, 418,
	154, 396, 381, 92, 386, 358, 393, 359, 384, 412,
	116, 382, 444, 421, 130, 460, 133, 426, 0, 176,
	142, 0, 0, 414, 446, 416, 438, 409, 433, 372,
	425, 455, 397, 429, 456, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 428,
	451, 395, 463, 431, 357, 427, 0, 363, 366, 461,
	449, 390, 391, 0, 0, 0, 0, 0, 0, 0,
	413, 417, 435, 406, 0, 0, 0, 0, 0, 0,
	0, 0, 387, 0, 424, 0, 0, 0, 369, 364,
	0, 411, 0, 0, 0, 371, 0, 388, 436, 0,
	354, 440, 447, 408, 203, 450, 405, 404, 161, 0,
	108, 0, 182, 120, 398, 131, 434, 453, 415, 445,
	385, 394, 110, 392, 168, 155, 194, 423, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 389, 439, 441, 376,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 380, 448, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	430, 169, 107, 195, 175, 375, 379, 373, 374, 419,
	420, 457, 458, 459, 437, 370, 0, 377, 378, 0,
	443, 125, 422, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 400, 356, 403, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 170, 407, 0, 104, 452, 442,
	0, 410, 454, 383, 399, 462, 401, 402, 432, 365,
	418, 154, 396, 381, 92, 386, 358, 393, 359, 384,
	412, 116, 382, 444, 421, 130, 460, 133, 426, 0,
	176, 142, 0, 0, 414, 446, 416, 438, 409, 433,
	372, 425, 455, 397, 429, 456, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	428, 451, 395, 463, 431, 357, 427, 0, 363, 366,
	461, 449, 390, 391, 0, 0, 0, 0, 0, 0,
	0, 413, 417, 435, 406, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 0, 424, 0, 0, 0, 369,
	364, 0, 411, 0, 0, 0, 371, 0, 388, 436,
	0, 354, 440, 447, 408, 203, 450, 405, 404, 161,
	0, 108, 0, 182, 120, 398, 131, 434, 453, 415,
	445, 385, 394, 110, 392, 168, 155, 194, 423, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 389, 439, 441,
	376, 93, 183, 663, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 380, 448, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 124, 173, 128, 135, 164,
	212, 430, 169, 107, 195, 175, 375, 379, 373, 374,
	419, 420, 457, 458, 459, 437, 370, 0, 377, 378,
	0, 443, 125, 422, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 400, 356, 403, 0, 0, 0, 0,
	0, 0, 0, 367, 368, 170, 407, 0, 104, 452,
	442, 0, 410, 454, 383, 399, 462, 401, 402, 432,
	365, 418, 154, 396, 381, 92, 386, 358, 393, 359,
	384, 412, 116, 382, 444, 421, 130, 460, 133, 426,
	0, 176, 142, 0, 0, 414, 446, 416, 438, 409,
	433, 372, 425, 455, 397, 429, 456, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 428, 451, 395, 463, 431, 357, 427, 0, 363,
	366, 461, 449, 390, 391, 0, 0, 0, 0, 0,
	0, 0, 413, 417, 435, 406, 0, 0, 0, 0,
	0, 0, 0, 0, 387, 0, 424, 0, 0, 0,
	369, 364, 0, 411, 0, 0, 0, 371, 0, 388,
	436, 0, 354, 440, 447, 408, 203, 450, 405, 404,
	161, 0, 108, 0, 182, 120, 398, 131, 434, 453,
	415, 445, 385, 394, 110, 392, 168, 155, 194, 423,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 389, 439,
	441, 376, 93, 183, 341, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 350, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 380, 448, 206, 207, 208,
	209, 0, 0, 0, 351, 349, 344, 343, 128, 135,
	164, 212, 430, 169, 107, 195, 175, 375, 379, 373,
	374, 419, 420, 457, 458, 459, 437, 370, 0, 377,
	378, 0, 443, 125, 422, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 400, 356, 403, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 170, 407, 154, 104,
	0, 92, 0, 0, 274, 0, 0, 0, 116, 271,
	0, 0, 130, 313, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 898, 0, 50, 0, 0, 272, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	899, 0, 0, 269, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 0, 0,
	0, 0, 325, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 323, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	92, 834, 170, 274, 322, 104, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 265, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 92,
	0, 170, 274, 322, 104, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 513, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 92, 0,
	170, 274, 322, 104, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 265, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	314, 324, 320, 321, 318, 319, 317, 316, 315, 326,
	306, 307, 308, 309, 311, 0, 125, 310, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	154, 322, 104, 92, 0, 0, 274, 0, 0, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 0, 92, 0, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 314, 324, 320, 321, 318, 319,
	317, 316, 315, 326, 306, 307, 308, 309, 311, 0,
	125, 310, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 0, 0, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 170, 116, 322, 104, 0, 130, 313,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 304,
	305, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 272, 292, 291, 294, 295, 296, 297, 0,
	0, 105, 293, 298, 299, 300, 0, 0, 0, 0,
	285, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 282, 283, 0, 0, 0, 0, 325, 0,
	284, 0, 0, 280, 281, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 323, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 1716, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	322, 104, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 0, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 314, 324, 320, 321, 318, 319,
	317, 316, 315, 326, 306, 307, 308, 309, 311, 0,
	125, 310, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 0, 0, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 170, 116, 322, 104, 0, 130, 0,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 547, 546,
	556, 557, 549, 550, 551, 552, 553, 554, 555, 548,
	0, 0, 558, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 535, 0, 0, 0, 170, 116,
	559, 104, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 537,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 532, 531, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 652, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 654, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 23, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 784, 0,
	0, 785, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	672, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 671,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 652, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 654, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 650,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 1393, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 1689, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 1285, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 654, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 352, 0, 537, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 744, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 630, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 336, 163, 118, 197, 0,
	0, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 170, 116, 0, 104, 0, 130, 0, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 0, 170, 0,
	130, 104, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 170, 0, 130, 104, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 170, 0, 0, 104,
}

var yyPact = [...]int{
	2061, -1000, -207, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1324, 1377, -1000, -1000, -1000, -1000, -1000, -1000, 1141,
	230, 265, 304, 122, 13886, 301, 1689, 14450, -1000, 120,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1057, -1000, -1000,
	-1000, -1000, -1000, 1284, 1321, 1110, 1304, 1226, -1000, 7647,
	262, 12191, 13604, 6484, -1000, 877, -176, 275, 14168, 258,
	258, 14168, 14168, 258, -1000, -57, 298, 14450, -1000, 14450,
	255, 874, 255, 255, 255, 14450, -1000, 379, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14450, 871, 1255, 226, 4307, 4307, 4307,
	4307, 170, 4307, -10, 1157, -1000, -1000, -1000, -1000, 4307,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	823, 1251, 8231, 8231, 1324, -1000, 1057, -1000, -1000, -1000,
	1262, -1000, -1000, 588, 1335, -1000, 9371, 378, -1000, 8231,
	58, 1056, -1000, -1000, 1056, -1000, -1000, 344, -1000, -1000,
	8801, 8801, 8801, 8801, 8801, 8801, 8801, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1056, -1000, 7942, 1056, 1056, 1056, 1056, 1056, 1056,
	1056, 1056, 8231, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
	1056, 1056, 1692, 1056, 1056, 1056, 1056, 13319, 997, 1129,
	-1000, -1000, -1000, 1291, 10217, 11063, 14450, 924, -1000, 1042,
	6173, -30, -1000, -1000, -1000, 502, 10781, -1000, -1000, -1000,
	1246, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 918, -1000, 2956, 295, -1000, -1000,
	14450, 1143, 864, 551, 862, 1155, 289, 14450, -1000, 13037,
	4307, 270, 14450, 1270, 1154, 14450, 841, 815, -1000, 5862,
	-1000, 4307, 4307, 4307, 4307, 4307, 4307, 4307, 4307, -1000,
	-1000, -1000, -1000, -1000, -1000, 4307, 4307, -1000, 11, -1000,
	14450, -1000, -1000, -1000, -1000, 1359, 412, 1017, 375, 1053,
	-1000, 489, 1284, 823, 1226, 10499, 1150, -1000, -1000, 14450,
	-1000, 8231, 8231, 698, -1000, 12755, -1000, -1000, 4618, 421,
	8801, 579, 444, 8801, 8801, 8801, 8801, 8801, 8801, 8801,
	8801, 8801, 8801, 8801, 8801, 8801, 8801, 8801, 702, 1692,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 793, -1000,
	1057, 1015, 1015, 24, 24, 24, 24, 24, 24, 9086,
	7069, 823, 912, 491, 7942, 7647, 7647, 8231, 8231, 14732,
	14732, 7647, 1277, 530, 491, 14732, -1000, 823, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 7647, 7647, 7647, 7647, 197,
	14450, -1000, 14732, 12191, 12191, 12191, 12191, 12191, -1000, 1181,
	1180, -1000, 1177, 1169, 1211, 14450, -1000, 909, 10217, 335,
	1056, -1000, 12473, -1000, -1000, 197, 947, 12191, 14450, -1000,
	-1000, 5551, 1042, -30, 1039, -1000, -18, -22, 6780, 395,
	-1000, -1000, -1000, -1000, 3685, 895, 266, -127, 26, -1000,
	-1000, -1000, -1000, 1085, -1000, 1085, 238, 1085, 1085, 1085,
	-1000, 1085, 1085, 61, 61, 61, 61, 61, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1140, 1135, -1000, 1085, 1085,
	1085, -1000, 1085, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1116, 246, 1116, 1086, 1086, -1000, -1000,
	14168, 1290, -79, 780, 4307, 1266, 4307, 14450, 1349, 14450,
	-1000, -1000, -1000, 1871, 14450, -1000, 14450, -1000, -1000, 14450,
	4307, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 480, -1000, -1000, -1000,
	-1000, 1202, 8231, 8231, 5240, 8231, -1000, -1000, -1000, 1251,
	-1000, 1277, 1309, -1000, 1229, 1220, 7647, -1000, -1000, 421,
	436, -1000, -1000, 611, -1000, -1000, -1000, -1000, 372, 1056,
	-1000, 1055, -1000, -1000, -1000, -1000, 579, 8801, 8801, 8801,
	1278, 1055, 745, 813, 1752, 24, 15, 15, 20, 20,
	20, 20, 20, 85, 85, -1000, -1000, -1000, -1000, 823,
	-1000, -1000, -1000, 823, 7647, 1041, -1000, -1000, 8231, -1000,
	823, 888, 888, 503, 583, 1054, -1000, 369, 999, 888,
	7647, 541, -1000, 8231, 823, -1000, -1000, 888, 823, 888,
	888, 1084, 1056, -1000, 1030, -1000, 497, 1129, 1139, 1153,
	1193, -1000, -1000, -1000, -1000, 1171, -1000, 1170, -1000, -1000,
	-1000, -1000, -1000, 279, 277, 269, 14168, -1000, 1333, 12191,
	978, -1000, -1000, 1039, -30, -34, -1000, -1000, -1000, -1000,
	491, -1000, -1000, 777, 1024, 3374, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1131, 578, 14168, 225, 233, 396,
	318, 743, -1000, -1000, -1000, 622, -1000, 14168, 1356, -1000,
	-1000, 222, -1000, 221, 549, 720, 14450, 173, 1128, 1458,
	-1000, -210, -1000, 17, -1000, -1000, 711, 61, 61, 1085,
	61, 61, 61, -1000, -1000, 395, 1237, 395, 395, 395,
	395, 719, 719, -97, -97, -1000, -1000, -1000, 710, 1116,
	-1000, -1000, -1000, 682, -1000, 1127, 1057, -1000, 4929, -1000,
	-1000, -1000, -1000, -1000, 1287, 1152, -1000, -1000, -1000, 140,
	-1000, 876, 1829, 337, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 184, 307, -1000, 4307, -1000,
	511, 14450, 14450, 1194, 491, 491, 367, -1000, -1000, 14450,
	-1000, -1000, -1000, -1000, 980, -1000, -1000, -1000, 3996, 7647,
	-1000, 1278, 1055, 726, -1000, 8801, 8801, -1000, -1000, 888,
	7647, 491, -1000, -1000, -1000, 1276, 702, 1276, 8801, 8801,
	5240, 8801, 8801, -71, 989, 490, -1000, 8231, 531, -1000,
	-1000, -1000, -1000, -1000, 1151, 14732, 1056, -1000, 9935, 14168,
	1324, 14732, 8231, 8231, -1000, -1000, 8231, 1113, -1000, 8231,
	-1000, -1000, -1000, 1056, 1056, 1056, 849, -1000, 1324, 978,
	-1000, -1000, -1000, -27, -44, -1000, -1000, 3685, -1000, 3685,
	11909, -1000, 1345, 1312, 239, 252, -1000, 735, 732, -1000,
	725, -1000, -3, -1000, -174, 100, -4, -1000, -1000, 1056,
	-1000, 1107, 1282, -1000, 1259, 677, -1000, 988, -189, -1000,
	-1000, -1000, -1000, -1000, -1000, 1056, 1091, 1090, -1000, 1089,
	-1000, -1000, -1000, 928, 395, 395, 61, 395, 395, 395,
	-1000, 449, -1000, -1000, -1000, -1000, 886, -1000, 884, -1000,
	83, 81, -1000, 1014, -1000, 870, 14450, 14168, -1000, 1013,
	-1000, 495, 1311, 154, 14450, 1349, -1000, 231, -1000, 14168,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14450, -1000, -1000, -1000, -1000, -1000, 14168, 234, -1000, -1000,
	718, 8231, -1000, -1000, -1000, 4929, -1000, 1333, 12191, -1000,
	-1000, 823, -1000, 8801, 1055, 1055, -1000, -1000, 823, 1085,
	1085, -1000, 1085, 1086, -1000, -1000, 1085, 103, 1085, 99,
	823, 823, 158, 445, -1000, 108, 334, 1056, -66, -1000,
	491, 8231, -1000, 1263, 931, 985, -1000, -1000, 7358, 823,
	868, 366, 849, 1284, -1000, 491, 491, 491, 11345, 491,
	11345, 11345, 11345, 9653, 14168, 1284, -1000, -1000, -1000, -1000,
	3374, -1000, 847, -1000, 1085, 1085, 312, 312, -175, 219,
	215, -1000, -1000, -1000, -1000, -176, -1000, -1000, 549, -1000,
	8231, 11345, -124, -1000, 1004, 926, 1190, -1000, 90, 823,
	-1000, 689, -1000, 615, 925, -1000, -1000, -1000, 395, -1000,
	-1000, -1000, -1000, -1000, 61, 717, 61, 13, 0, 667,
	-1000, 649, 1008, 1148, 4929, 3685, 268, 1313, -1000, -1000,
	1308, 1281, 14168, -1000, -1000, -1000, 1083, -1000, -1000, -1000,
	-1000, 1271, 14168, -1000, -1000, 491, 1331, 991, -1000, 1055,
	-1000, -1000, 228, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 8801, 8801, -1000, 8801, 8801, 8801, 823, 715,
	491, 209, -1000, 1056, -1000, -1000, 1046, 14168, 14168, -1000,
	-1000, 845, -1000, -1000, 839, 839, 839, 335, -1000, -1000,
	635, 11909, 1267, -1000, 570, -1000, -1000, 563, 151, 566,
	-1000, 14168, -176, -1000, 1056, 556, 834, 1082, 646, -1000,
	898, 67, -97, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	395, -1000, 395, -1000, -1000, 892, 850, 11909, 14168, 14450,
	-1000, -1000, 14168, -1000, -1000, -1000, -1000, -1000, 131, 267,
	1080, 11345, 1056, 249, 1328, 1317, -1000, -1000, 311, 311,
	311, 311, 74, -1000, -1000, 1353, -1000, 1056, -1000, 1057,
	365, -1000, 14168, -1000, -1000, -1000, -1000, -1000, 1146, 1442,
	142, -1000, 723, 486, 714, 484, 450, 448, 446, 440,
	437, 431, -1000, -1000, -1000, 1343, -1000, -1000, -1000, 1339,
	1079, -1000, 1078, 8231, 160, -1000, -1000, 840, 829, -1000,
	-1000, -1000, -1000, -1000, -1000, 828, 1076, 1075, 923, -1000,
	129, 267, -1000, -1000, -1000, -1000, -1000, -1000, 14168, 11909,
	826, 181, 208, -1000, 8231, 8231, -1000, -1000, -1000, -1000,
	823, 175, -103, 14732, 985, 823, 14168, -1000, -1000, 14168,
	-1000, -100, 1442, 14168, -1000, 643, -1000, -1000, 594, 638,
	594, 594, 594, 594, 594, 312, 312, 14168, 11909, 556,
	-1000, -68, 308, -1000, -1000, -186, 11909, 11909, -76, 14168,
	8231, 267, -1000, 983, 2824, -1000, 822, 1143, 820, -1000,
	14168, 1073, 491, 979, -1000, 1192, -74, -106, 935, -1000,
	-1000, 1056, 799, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 549, 549, 776, 760, -1000,
	-1000, -1000, 157, 647, 636, 629, 624, -9, -1000, 1316,
	1333, 1065, 757, 755, -1000, -191, -1000, 491, -1000, 14168,
	125, -1000, -1000, -1000, -79, -1000, 181, 1209, 11909, -1000,
	1189, -1000, 14168, -1000, 1442, -1000, -1000, 244, 635, 623,
	-1000, 617, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11627,
	635, 11345, 1333, 635, 8231, -1000, 2956, 1297, -1000, -1000,
	178, 741, -95, 823, -1000, 14450, 1146, -1000, -1000, -1000,
	355, 1146, 731, 635, -1000, 491, 1057, 167, -1000, -104,
	-1000, 1059, -1000, 4929, -1000, -1000, -1000, -1000, 1056, -119,
	14168, -1000, 8516, -1000, 729, 311, 823, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1637, 23, 949, 1636, 1635, 1634, 1403, 1400, 1394,
	1386, 1632, 1631, 1630, 1628, 1625, 1624, 1623, 1622, 1621,
	1620, 1618, 1617, 1616, 1615, 294, 1614, 1598, 1596, 88,
	1595, 98, 1594, 1588, 53, 99, 57, 50, 1329, 1587,
	41, 95, 119, 1586, 75, 1576, 1574, 107, 1573, 85,
	1567, 1566, 42, 1564, 1563, 29, 7, 1562, 31, 1559,
	1556, 96, 311, 1555, 1551, 1548, 1546, 1545, 1544, 65,
	13, 16, 27, 25, 1543, 84, 14, 1541, 74, 1540,
	1539, 1538, 1537, 51, 1536, 94, 22, 36, 93, 1534,
	6, 1532, 83, 55, 40, 17, 102, 82, 1531, 52,
	87, 70, 1528, 1521, 656, 1520, 1515, 1514, 1513, 1512,
	1508, 582, 633, 1503, 1502, 1501, 60, 0, 217, 15,
	104, 1500, 58, 1499, 1933, 111, 81, 33, 1497, 45,
	463, 56, 1496, 1487, 54, 101, 106, 100, 97, 1483,
	1481, 1479, 1477, 1476, 1064, 47, 66, 37, 1475, 1471,
	1469, 19, 68, 46, 61, 76, 1467, 1462, 1461, 43,
	1460, 18, 20, 4, 67, 1459, 1457, 1456, 1455, 48,
	30, 1454, 21, 12, 5, 8, 26, 1453, 1451, 1449,
	1, 1448, 32, 1447, 2, 1446, 9, 1445, 1444, 1437,
	1436, 1435, 1434, 1428, 1426, 1422, 1421, 28, 10, 49,
	34, 39, 59, 44, 1418, 11, 3, 1417, 1413, 1408,
	1407, 1509, 816, 1405, 1396, 1392, 1390, 268,
}

var yyR1 = [...]int{
	0, 209, 210, 210, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 28, 28, 8, 9, 9, 9, 213,
	213, 47, 47, 92, 92, 10, 10, 10, 10, 11,
	11, 207, 207, 206, 208, 208, 97, 97, 101, 101,
	101, 102, 102, 102, 102, 132, 132, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 202, 202,
	203, 203, 203, 204, 204, 205, 205, 205, 205, 205,
	188, 188, 188, 189, 189, 189, 189, 189, 189, 191,
	191, 192, 192, 122, 122, 186, 186, 185, 184, 184,
	183, 183, 182, 193, 193, 17, 166, 167, 167, 167,
	167, 167, 155, 136, 136, 136, 136, 136, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 199,
	199, 199, 200, 200, 200, 200, 200, 200, 200, 200,
	195, 195, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 145, 145, 145, 145,
	145, 145, 194, 194, 190, 190, 190, 190, 190, 140,
	140, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 139, 139, 139, 139, 139, 139, 139, 139, 141,
	141, 141, 141, 141, 141, 141, 141, 137, 137, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 143, 143, 143, 143, 143, 143, 143, 143,
	154, 154, 144, 144, 152, 152, 153, 153, 153, 151,
	151, 151, 148, 148, 149, 149, 150, 150, 150, 146,
	146, 146, 147, 147, 147, 157, 175, 175, 175, 177,
	177, 178, 178, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 165, 165, 201, 201, 174, 174,
	174, 171, 171, 171, 171, 171, 171, 171, 171, 164,
	164, 173, 173, 172, 172, 159, 159, 159, 159, 159,
	160, 161, 161, 161, 161, 158, 197, 197, 197, 198,
	198, 162, 162, 163, 163, 168, 168, 168, 169, 169,
	169, 170, 170, 170, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 214, 214, 215,
	215, 215, 215, 215, 215, 215, 181, 179, 179, 180,
	180, 14, 15, 15, 15, 15, 15, 16, 16, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 109, 109, 106, 106, 107, 107, 108,
	108, 108, 110, 110, 110, 133, 133, 133, 20, 20,
	22, 22, 23, 24, 21, 21, 21, 21, 21, 216,
	25, 26, 26, 27, 27, 27, 31, 31, 31, 29,
	29, 30, 30, 36, 36, 35, 35, 37, 37, 37,
	37, 121, 121, 121, 120, 120, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 54, 54, 90, 90, 90,
	93, 93, 43, 43, 43, 43, 44, 44, 45, 45,
	46, 46, 128, 128, 127, 127, 127, 126, 126, 48,
	48, 48, 50, 49, 49, 49, 49, 51, 51, 53,
	53, 52, 52, 55, 55, 55, 55, 56, 56, 91,
	91, 38, 38, 38, 38, 38, 38, 38, 105, 105,
	58, 58, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 68, 68, 68, 68, 68, 68, 59, 59,
	59, 59, 59, 59, 59, 34, 34, 69, 69, 69,
	75, 70, 70, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 66, 66, 66, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 217, 217, 67, 67, 67, 67, 32, 32,
	32, 32, 32, 131, 131, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 135,
	135, 135, 135, 135, 135, 135, 79, 79, 33, 33,
	77, 77, 78, 80, 80, 76, 76, 76, 61, 61,
	61, 61, 61, 61, 61, 61, 63, 63, 63, 81,
	81, 82, 82, 83, 83, 84, 84, 85, 86, 86,
	86, 87, 87, 87, 87, 88, 88, 88, 60, 60,
	60, 60, 60, 60, 89, 89, 89, 89, 94, 94,
	71, 71, 73, 73, 72, 74, 95, 95, 99, 96,
	96, 100, 100, 100, 100, 98, 98, 98, 123, 123,
	123, 103, 103, 111, 111, 112, 112, 104, 104, 113,
	113, 113, 113, 113, 113, 113, 113, 113, 113, 114,
	114, 114, 115, 115, 118, 118, 119, 119, 124, 124,
	125, 125, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 211, 212, 129, 130, 130,
	130,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 1, 3, 3, 2,
	2, 2, 2, 2, 1, 1, 1, 2, 14, 13,
	14, 6, 5, 5, 5, 11, 11, 9, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 1, 3, 3,
	3, 3, 2, 3, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 4, 2, 2, 3, 2, 3, 2,
	7, 8, 3, 3, 6, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 2, 1, 2, 1, 1, 1, 1, 4,
	4, 4, 4, 4, 1, 5, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 3, 4, 1,
	1, 1, 3, 3, 2, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 0, 1, 1, 0,
	3, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 7, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -209, -1, -2, -6, -7, -8, -9, -10, -12,
	-13, -14, -15, -16, -18, -19, -20, -22, -23, -24,
	-21, -3, -4, 6, 7, -28, 9, 10, 30, -17,
	113, 114, 116, 115, 144, 117, 137, 49, 178, 179,
	181, 182, 26, 138, 139, 142, 143, -211, 8, 282,
	53, -210, 316, -83, 15, -27, 5, -25, -216, -25,
	-25, -25, -25, -25, -166, 53, -122, -193, 152, 274,
	119, 134, 151, 120, 135, 71, -104, 122, 124, 120,
	120, 121, 122, 274, 119, 120, -52, -124, 56, -117,
	159, 291, 21, 178, 191, 192, 183, 224, 212, 292,
	157, 209, 213, 261, 315, 65, 181, 270, 128, 163,
	140, 204, 207, 206, 198, 195, 28, 230, 298, 197,
	131, 231, 235, 241, 262, 289, 188, 189, 264, 228,
	32, 133, 293, 34, 148, 265, 233, 227, 222, 226,
	187, 221, 38, 201, 237, 236, 238, 260, 215, 158,
	240, 217, 199, 216, 18, 143, 146, 232, 234, 196,
	160, 126, 150, 297, 266, 194, 147, 161, 142, 269,
	312, 156, 182, 263, 190, 272, 37, 246, 208, 185,
	200, 186, 130, 179, 154, 219, 149, 202, 203, 225,
	184, 220, 180, 151, 144, 271, 247, 299, 218, 214,
	210, 211, 155, 122, 152, 153, 253, 254, 255, 256,
	294, 295, 267, 205, 248, 249, 165, 166, 167, 168,
	169, 170, 171, 120, 107, 213, 113, 251, 121, 32,
	150, -133, 120, -106, 153, 253, 254, 255, 256, 56,
	263, 262, 257, -124, 180, -129, -129, -129, -129, -129,
	-2, -87, 17, 16, -5, -3, -211, 6, 21, 22,
	-31, 39, 40, -26, -37, 98, -38, -124, -57, 73,
	-62, 29, 56, -117, 24, -61, -58, -76, -74, -75,
	107, 108, 96, 97, 104, 74, 109, -66, -64, -65,
	-67, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -118, -72, -211, 43, 44, 283, 284, 285, 286,
	290, 287, 76, 33, 273, 281, 280, 279, 277, 278,
	275, 276, 314, 125, 274, 102, 282, -104, -40, -41,
	-42, -43, -54, -75, -211, -52, 11, -47, -52, -96,
	-132, 180, -100, 263, 262, -119, -98, -118, -116, 261,
	213, 260, 56, -117, 118, 173, 301, 72, 23, 25,
	244, 250, 172, 75, 107, 16, 76, 310, 311, 106,
	283, 113, 47, 275, 276, 273, 177, 285, 286, 274,
	251, 20, 29, 10, 26, 138, 22, 100, 115, 174,
	79, 80, 141, 24, 139, 69, 19, 50, 132, 11,
	300, 13, 14, 302, 125, 124, 91, 313, 121, 45,
	8, 109, 27, 88, 41, 136, 43, 89, 17, 277,
	278, 31, 290, 145, 102, 48, 35, 73, 67, 51,
	268, 71, 15, 46, 134, 90, 116, 282, 44, 175,
	119, 176, 6, 288, 30, 137, 42, 120, 252, 78,
	123, 68, 5, 135, 9, 49, 52, 279, 280, 281,
	33, 77, 12, 70, -167, -155, 56, -197, 310, 311,
	122, -118, -112, 125, -112, -118, -118, -112, 282, 120,
	-52, -52, -111, 125, 56, -111, -111, -111, -52, 110,
	-52, 56, 30, 274, 56, 150, 120, 151, 122, -130,
	-211, -119, -130, -130, -130, 154, 155, -130, -107, 258,
	51, -130, -212, 55, -88, 19, 31, -38, -124, -84,
	-85, -38, -83, -2, -25, 35, -29, 22, 64, 11,
	-121, 72, 71, 88, -120, 23, -118, 58, 110, -38,
	-59, 91, 73, 89, 90, 75, 93, 92, 103, 96,
	97, 98, 99, 100, 101, 102, 94, 95, 106, 314,
	81, 82, 83, 84, 85, 86, 87, -105, -211, -75,
	-211, 111, 112, -62, -62, -62, -62, -62, -62, -62,
	-211, -2, -70, -38, -211, -211, -211, -211, -211, -211,
	-211, -211, -211, -79, -38, -211, -217, -211, -217, -217,
	-217, -217, -217, -217, -217, -135, 107, 213, 140, 204,
	-138, -137, 219, 183, 184, 185, 186, 187, 188, 189,
	190, 191, 192, 212, 292, -211, -211, -211, -211, -53,
	27, -52, 30, 54, -48, -50, -49, -51, 41, 45,
	47, 42, 43, 44, 48, -128, 23, -40, -211, -127,
	146, -126, 23, -124, 58, -52, -47, -213, 54, 11,
	52, 54, -96, 180, -97, -101, 264, 266, 81, -123,
	-118, 58, 29, 30, 55, 54, -156, -136, -140, -137,
	-142, -141, -143, -138, -139, 209, 213, 210, 215, 216,
	217, 107, 214, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 218, 230, 30, 140, 202, 203,
	204, 207, 206, 208, 205, 231, 232, 233, 234, 235,
	236, 237, 238, 194, 195, 197, 198, 199, 201, 200,
	121, -52, -186, 52, 56, 73, 56, 51, -202, 51,
	172, 173, -52, -52, 268, -130, 123, -52, 24, 51,
	-52, 56, 56, -125, -124, -116, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -109, 252, 259, -52,
	9, 91, 54, 18, 110, 54, -86, 25, 26, -87,
	-212, -31, -63, -118, 59, 62, -30, 42, -52, -38,
	-38, -68, 67, 73, 68, 69, -120, 98, -125, -119,
	-116, -62, -69, -72, -75, 63, 91, 89, 90, 75,
	-62, -62, -62, -62, -62, -62, -62, -62, -62, -62,
	-62, -62, -62, -62, -62, -131, 56, 58, -135, 56,
	-61, -61, -118, -36, 22, -35, -37, -212, 54, -212,
	-2, -35, -35, -38, -38, -76, -118, -124, -76, -35,
	-29, -77, -78, 77, -76, -212, 211, -35, -36, -35,
	-35, -92, 146, -52, -95, -99, -76, -41, -42, -42,
	-41, -42, 41, 41, 41, 46, 41, 46, 41, -49,
	-124, -212, -55, 49, 124, 50, -211, -126, -92, 52,
	-40, -52, -100, -97, 54, 265, 267, 268, 51, 70,
	-38, -147, 107, 106, -168, -169, -170, -119, 58, 59,
	-155, -157, -159, -158, -171, -160, 128, 126, 130, 131,
	135, -164, 121, 136, 67, 73, -199, 128, 51, 244,
	250, 126, 136, 135, 315, 65, 129, 300, 302, 29,
	-150, 317, 239, -148, 247, -144, 53, -144, -144, 211,
	-144, -144, -144, -144, -144, -146, 213, -146, -146, -146,
	-146, 53, 53, -144, -144, -144, -144, -152, 53, 196,
	-152, -152, -153, 53, -153, -118, 23, -184, 294, -185,
	56, -130, 24, -130, -52, -203, 8, 9, 10, -52,
	-113, 118, 115, 116, -181, 114, 244, 213, 65, 29,
	15, 283, 146, 299, 56, 147, -52, -52, -52, -130,
	-108, 11, 91, 37, -38, -38, -125, -85, -88, -103,
	19, 11, 33, 33, -35, 67, 68, 69, 110, -211,
	-69, -62, -62, -62, -34, 141, 72, -212, -212, -35,
	54, -38, -212, -212, -212, 54, 52, 23, 54, 11,
	110, 54, 11, -212, -35, -80, -78, 79, -38, -212,
	-212, -212, -212, -212, -60, 30, 33, -2, -211, -211,
	-56, 54, 12, 81, -45, -44, 51, 52, -46, 51,
	-44, 41, 41, 121, 121, 121, -93, -118, -56, -40,
	-56, -101, -102, 269, 266, 272, 56, 54, -170, 81,
	53, -198, 51, 73, -162, -118, 136, -164, -164, 56,
	-164, 56, 56, 67, 19, -118, 9, 136, 136, -198,
	58, -124, -195, 301, 16, 53, -200, 53, 58, 59,
	60, 67, -145, 66, -58, 240, 273, 276, 275, 241,
	318, -149, 248, 59, -146, -146, -144, -146, -146, -146,
	-147, 30, -147, -147, -147, -147, -154, 58, -154, -151,
	294, 295, -151, 59, -152, 59, 51, 52, -2, -183,
	-182, -119, -188, 23, 51, -202, -129, -122, -215, 152,
	127, 132, 131, 56, 126, 130, 146, -187, 152, 127,
	128, 132, 131, 56, 121, 136, 126, 130, 146, 135,
	-114, -115, 123, 23, 121, 136, 146, 118, -130, -110,
	89, 12, -124, -124, 38, 110, -52, -39, 11, 98,
	-119, -36, -34, 72, -62, -62, -212, -37, -134, 107,
	209, 140, 204, 198, 228, 229, 215, 246, 202, 247,
	-131, -134, -62, -62, -119, -62, -62, 291, -83, 80,
	-38, 78, -94, 51, -95, -71, -73, -72, -211, -2,
	-89, -118, -93, -83, -99, -38, -38, -38, 53, -38,
	-211, -211, -211, -212, 54, -83, -56, 266, 270, 271,
	-169, -170, -173, -172, -118, 136, 10, 9, 19, 132,
	126, 56, 56, 56, -197, 135, 312, -199, 315, -145,
	-211, 53, 23, 29, 59, -200, 53, -190, 314, -211,
	-144, 53, -144, 53, 53, 55, -147, -147, -146, -147,
	-147, -147, 56, 107, 55, 54, 55, 202, 202, 54,
	55, 54, -52, -118, 54, 81, -189, 19, 160, 161,
	-52, -203, -214, 121, 136, -129, -118, -129, -118, -52,
	-129, -118, 128, -159, 58, -38, -56, -40, -212, -62,
	-212, -144, -144, -144, -153, -144, 189, -144, 189, -212,
	-212, -212, 54, 19, -212, 54, 19, -211, -33, 288,
	-38, 28, -94, 54, -212, -212, -212, 54, 110, -212,
	-87, -90, -118, 136, -90, -90, -90, -127, -118, -87,
	55, 54, -144, -144, -161, 156, 157, 30, 158, -161,
	312, 136, 136, -197, -198, -38, -90, 302, 54, 55,
	-200, 213, 203, 242, 219, -212, 55, 55, 55, -147,
	-146, 58, -146, 249, 249, 59, 59, 53, 52, 51,
	-182, -170, 123, 21, 6, 8, 9, 10, 19, 23,
	-118, 53, 27, -118, -81, 13, -146, 56, -62, -62,
	-62, -62, -62, -212, 58, 136, -73, 33, -2, -211,
	-118, -118, 54, 55, -212, -212, -212, -55, -175, -177,
	294, -176, 52, 133, 65, 165, 166, 167, 168, 169,
	170, 171, -172, -86, -198, 51, 67, 159, -198, 51,
	-162, -118, -197, -211, -212, 55, 53, 59, 55, 211,
	-151, -147, -147, 55, 55, -173, -118, -52, -163, -118,
	174, -204, -205, -7, -9, -8, -11, -10, 20, 53,
	-90, -211, 126, -82, 14, 16, -212, -212, -212, -212,
	-32, 91, 294, 9, -71, -2, 110, -118, -174, 51,
	-176, 294, 53, 296, 56, -165, 81, 58, 81, 81,
	81, 81, 81, 81, 81, 9, 10, 53, 53, -38,
	-194, 158, -196, 55, 55, 55, 53, 53, -191, 54,
	52, 175, -205, -207, -118, -206, -173, 55, -179, -180,
	146, 136, -38, -70, -212, 292, 48, 297, -95, -212,
	-118, -118, -178, -176, -118, 59, -201, 51, 70, 59,
	-201, -201, -201, -201, -201, -161, -161, -163, -173, -212,
	289, 55, 179, 304, 305, 145, 306, 158, 307, 308,
	-91, 313, -173, -173, -192, 294, -118, -38, -205, 54,
	-208, -136, 176, 55, -186, -212, 54, -118, 53, 38,
	293, 298, -211, 55, 54, -198, -198, 55, 55, 294,
	59, 16, 59, 59, 59, 59, 305, 145, 307, 16,
	-56, 53, 55, 55, 315, -206, -118, 177, -184, -180,
	33, -173, 38, -118, -176, 129, -175, 59, 59, 309,
	-124, -175, -90, -56, -175, -38, 19, 148, 55, 294,
	-212, -52, -174, 110, -174, 55, -175, -2, 149, 297,
	53, -119, -211, 298, -163, -62, 145, 55, -212, -212,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 683, 0, 439, 439, 439, 439, 439, 439, 0,
	-2, 737, 0, 0, 0, 0, -2, 429, 430, 0,
	432, 433, 1007, 1007, 1007, 1007, 1007, 0, 33, 34,
	1005, 1, 3, 691, 0, 0, 443, 446, 441, 0,
	737, 0, 0, 0, 67, 0, 326, 0, 0, 735,
	735, 0, 0, 735, 104, 0, 0, 0, 738, 0,
	733, 0, 733, 733, 733, 0, 388, 511, 758, 759,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 0, 0, 0, 0, 1008, 1008, 1008,
	1008, 0, 1008, 417, 406, 408, 409, 410, 411, 1008,
	426, 427, 416, 428, 431, 434, 435, 436, 437, 438,
	27, 695, 0, 0, 683, 29, 0, 439, 444, 445,
	449, 447, 448, 440, 0, 457, 461, 0, 521, 0,
	526, 528, -2, -2, 0, 563, 564, 565, 566, 567,
	0, 0, 0, 0, 0, 0, 0, 591, 592, 593,
	594, 668, 669, 670, 671, 672, 673, 674, 675, 530,
	531, 665, 715, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 656, 0, 622, 622, 622, 622, 622, 622,
	622, 622, 0, 0, 0, 0, 0, 0, 0, 468,
	470, 471, 472, 492, 0, 494, 0, 0, 41, 45,
	0, 974, 719, -2, -2, 0, 0, 756, 757, -2,
	884, -2, 754, 755, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 0, 117, 0, 0, 327, 328,
	0, 105, 0, 0, 0, 0, 0, 0, 114, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 387, 0,
	389, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 398,
	1009, 1010, 399, 400, 401, 1008, 1008, 403, 0, 418,
	0, 412, 28, 1006, 22, 0, 0, 692, 0, 684,
	685, 688, 691, 27, 446, 0, 451, 450, 442, 0,
	458, 0, 0, 0, 462, 0, 464, 465, 0, 524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	548, 549, 550, 551, 552, 553, 554, 527, 0, 541,
	0, 0, 0, 583, 584, 585, 586, 587, 588, 0,
	453, 27, 0, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 449, 0, 657, 0, 613, 0, 614, 615,
	616, 617, 618, 619, 620, 621, 649, 0, 651, 652,
	653, 654, 655, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 217, 218, 0, 453, 0, 0, 43,
	0, 510, 0, 0, 0, 0, 0, 0, 499, 0,
	0, 502, 0, 0, 0, 0, 493, 0, 0, 513,
	938, 495, 0, 497, 498, -2, 0, 0, 0, 39,
	40, 0, 46, 974, 48, 56, 0, 0, 0, 272,
	728, 729, 730, 726, 335, 0, 122, 266, 262, 124,
	125, 126, 127, 252, 190, 252, 252, 252, 252, 252,
	224, 252, 252, 269, 269, 269, 269, 269, 233, 234,
	235, 236, 237, 238, 239, 0, 0, 209, 252, 252,
	252, 213, 252, 215, 216, 242, 243, 244, 245, 246,
	247, 248, 249, 254, 254, 254, 256, 256, 207, 208,
	0, 0, 108, 0, 1008, 0, 1008, 0, 0, 0,
	78, 79, 115, 0, 0, 354, 0, 382, 734, 0,
	1008, 385, 386, 512, 760, 761, 390, 391, 392, 393,
	394, 395, 396, 397, 402, 405, 419, 413, 414, 407,
	696, 0, 0, 0, 0, 0, 687, 689, 690, 695,
	30, 449, 0, 676, 0, 0, 0, 452, 25, 522,
	523, 525, 542, 0, 544, 546, 463, 459, 0, 666,
	-2, 532, 533, 557, 558, 559, 0, 0, 0, 0,
	555, 537, 0, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 582, 633, 634, 590, 0,
	580, 581, 589, 0, 0, 454, 455, 560, 0, 714,
	27, 0, 0, 0, 0, 0, 665, 0, 0, 0,
	0, 663, 660, 0, 0, 623, 650, 0, 0, 0,
	0, 0, 0, 509, 517, 716, 0, 469, 488, 490,
	0, 485, 500, 501, 503, 0, 505, 0, 507, 508,
	473, 474, 475, 0, 0, 0, 0, 496, 517, 0,
	517, 42, 720, 47, 0, 0, 59, 60, 721, 722,
	723, 724, 273, 0, 116, 336, 338, 341, 342, 343,
	118, 119, 120, 121, 0, 329, 331, 0, 0, 0,
	0, 0, 309, 310, 129, 0, 131, 0, 0, 134,
	135, 0, 137, 139, 329, 0, 0, 0, 0, 0,
	128, 0, 268, 264, 263, 189, 0, 269, 269, 252,
	269, 269, 269, 226, 227, 272, 0, 272, 272, 272,
	272, 0, 0, 259, 259, 212, 214, 201, 0, 254,
	203, 204, 205, 0, 206, 0, 0, 72, 0, 106,
	107, 73, 736, 74, 90, 0, 80, 81, 82, 0,
	1007, 103, 0, 749, 355, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 0, 0, 381, 1008, 384,
	422, 0, 0, 0, 693, 694, 0, 686, 23, 0,
	731, 732, 677, 678, 466, 543, 545, 547, 0, 453,
	534, 555, 538, 0, 535, 0, 0, 529, 595, 0,
	0, 562, -2, 598, 599, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 683, 0, 661, 0, 0, 612,
	624, 625, 626, 627, 708, 0, 0, -2, 0, 0,
	683, 0, 0, 0, 482, 489, 0, 0, 483, 0,
	484, 504, 506, 0, 0, 0, 0, 480, 683, 517,
	38, 57, 58, 0, 0, 64, 274, 0, 339, 0,
	0, 315, 0, 0, 0, 332, 301, 0, 0, 304,
	0, 306, 326, 130, 0, 0, 0, 136, 138, 0,
	142, 143, 0, 160, 0, 0, 149, 0, 184, 153,
	154, 155, 156, 157, 158, 0, 252, 252, 180, 0,
	267, 123, 265, 0, 272, 272, 269, 272, 272, 272,
	228, 0, 229, 230, 231, 232, 0, 250, 0, 210,
	0, 0, 211, 0, 202, 0, 0, 0, -2, 109,
	110, 0, 93, 0, 0, 0, 344, 0, 1007, 0,
	369, 370, 371, 372, 373, 374, 375, 1007, 0, 356,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	0, 1007, 750, 751, 752, 753, 0, 0, 383, 404,
	0, 0, 420, 421, 697, 0, 24, 517, 0, 460,
	667, 0, 536, 0, 556, 539, 596, 456, 0, 252,
	252, 638, 252, 256, 641, 642, 252, 644, 252, 647,
	0, 0, 0, 0, 666, 0, 0, 0, 658, 611,
	664, 0, 31, 0, 708, 698, 710, 712, 0, 27,
	0, 704, 0, 691, 717, 518, 718, 486, 0, 491,
	0, 0, 0, 494, 0, 691, 37, 61, 62, 63,
	337, 340, 0, 311, 252, 252, 0, 0, 0, 0,
	0, 302, 303, 305, 307, 326, 148, 132, 329, 133,
	0, 0, 0, 161, 0, 0, 0, 152, 0, 0,
	176, 0, 178, 0, 0, 253, 219, 220, 272, 221,
	222, 223, 270, 271, 269, 0, 269, 0, 0, 0,
	257, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 0, 0, 367, 368, 348, 0, 349, 351, 352,
	353, 0, 331, 347, 423, 424, 679, 467, 597, 540,
	600, 635, 269, 639, 640, 643, 645, 646, 648, 602,
	601, 603, 0, 0, 606, 0, 0, 0, 0, 0,
	662, 0, 32, 0, 713, -2, 0, 0, 0, 44,
	35, 0, 477, 478, 0, 0, 0, 513, 481, 36,
	276, 0, 688, 314, 329, 321, 322, 0, 0, 329,
	330, 331, 326, 308, 0, 0, 0, 145, 0, 150,
	0, 0, 259, 187, 188, 159, 177, 179, 181, 225,
	272, 251, 272, 260, 261, 0, 0, 0, 0, 0,
	111, 112, 0, 94, 95, 96, 97, 98, 0, 0,
	0, 0, 0, 332, 681, 0, 636, 637, 0, 0,
	0, 0, 628, 610, 659, 0, 711, 0, -2, 0,
	706, 705, 0, 487, 514, 515, 516, 476, 298, 277,
	0, 279, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 313, 316, 0, 323, 324, 317, 0,
	0, 332, 0, 0, 182, 144, 162, 0, 0, 185,
	186, 240, 241, 255, 258, 0, 0, 0, 99, 333,
	0, 77, 83, 85, 86, 87, 88, 89, 0, 0,
	0, 0, 0, 26, 0, 0, 604, 605, 607, 608,
	0, 0, 0, 0, 701, 27, 0, 479, 275, 0,
	280, 0, 0, 0, 283, 0, 295, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 147, 151, 519, 0, 0, 101, 0,
	0, 0, 84, 49, 54, 51, 0, 105, 0, 377,
	0, 0, 682, 680, 609, 0, 0, 0, 709, -2,
	707, 299, 0, 281, 286, 284, 287, 296, 297, 288,
	289, 290, 291, 292, 293, 329, 329, 0, 0, 141,
	183, 146, 0, 0, 0, 0, 0, 0, 173, 0,
	517, 0, 0, 0, 75, 0, 334, 100, 76, 0,
	0, 53, 55, 345, 108, 376, 0, 0, 0, 629,
	0, 632, 0, 278, 0, 318, 319, 0, 276, 0,
	164, 0, 166, 167, 168, 169, 170, 171, 172, 0,
	276, 0, 517, 276, 0, 52, 0, 0, 350, 378,
	0, 0, 630, 0, 282, 0, 298, 163, 165, 174,
	0, 298, 0, 276, 69, 102, 0, 0, 346, 0,
	300, 0, 325, 0, 68, 520, 70, -2, 0, 0,
	0, 175, 0, 631, 0, 0, 0, 320, 379, 380,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 316,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 317, 3, 318, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:354
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:359
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:360
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:364
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:387
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:405
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:451
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:467
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:493
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &Cursor{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:551
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:561
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:580
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:586
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:590
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:594
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:600
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:604
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:608
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:612
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:618
		{
			yyVAL.str = SessionStr
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:622
		{
			yyVAL.str = GlobalStr
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:628
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 68:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:633
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 69:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:653
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 70:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:669
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:684
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:692
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:700
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:704
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:708
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 76:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:719
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 77:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:729
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].triggerBody,
			}}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:741
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:745
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:751
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:755
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:759
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:765
		{
			yyVAL.triggerBody = []Statement{yyDollar[1].statement}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:769
		{
			yyVAL.triggerBody = append(yyVAL.triggerBody, yyDollar[2].statement)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:775
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:784
		{
			yyVAL.bytes = nil
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:788
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:792
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:797
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:801
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:805
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:809
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:813
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:817
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:822
		{
			yyVAL.expr = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:826
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:831
		{
			yyVAL.expr = nil
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:835
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:840
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:844
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:849
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:853
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:859
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:864
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:869
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:880
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:886
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:891
		{
			yyVAL.bytes = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:895
		{
			yyVAL.bytes = nil
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:901
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:908
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:915
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:920
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:924
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:928
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:932
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:943
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:954
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:966
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:971
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:976
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:981
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:986
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:991
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:996
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1001
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1006
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1011
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1016
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1021
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 141:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1027
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1032
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1037
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1042
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 146:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1054
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 147:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1060
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1066
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1073
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1077
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1081
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1087
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1091
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1095
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1099
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1107
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1111
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1121
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1125
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1130
		{
			yyVAL.sequence = &Sequence{}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1134
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1139
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1144
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1149
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1154
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1159
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1164
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1169
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1174
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1179
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1184
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1189
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1194
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1201
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1205
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1209
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1213
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1217
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1221
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1226
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1230
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1235
		{
			yyVAL.bytes = nil
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1245
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1250
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1260
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1264
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1268
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1298
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1310
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1316
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1322
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1360
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1364
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1368
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1372
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1378
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1382
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1388
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1392
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1396
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1400
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1404
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1408
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1412
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1416
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1420
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1424
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1428
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1432
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1436
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1440
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1444
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1448
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1452
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1456
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1460
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1464
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1468
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1472
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 241:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1517
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1522
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1527
		{
			yyVAL.optVal = nil
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1531
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1536
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1540
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 256:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1548
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1552
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1558
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1574
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1579
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1583
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1588
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1592
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1605
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1610
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1614
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1618
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1623
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1631
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1637
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1642
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1646
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1650
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1656
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1660
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1666
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1670
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1676
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1680
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1685
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1689
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1693
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1697
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1701
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1705
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1709
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1713
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1717
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1723
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1727
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1733
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1737
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1743
		{
			yyVAL.indexPartition = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1751
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1757
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1761
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1765
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1769
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1773
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1777
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1781
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1785
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1791
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1795
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1801
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1805
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1811
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1816
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1822
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 316:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1827
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1834
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 318:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1841
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 319:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1848
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 320:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1857
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1869
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1873
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1877
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1881
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 325:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1887
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1898
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1902
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1906
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1912
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1916
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1921
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1928
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1932
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1937
		{
			yyVAL.str = ""
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1941
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1953
		{
			yyVAL.str = yyDollar[1].str
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1957
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1961
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1967
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1971
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1981
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 345:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1985
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 346:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1999
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 347:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2013
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2022
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 349:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2026
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 350:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2030
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 351:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2043
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 352:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2053
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2058
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2063
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 355:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2067
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 376:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2099
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2105
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2109
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 379:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2115
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 380:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2119
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 381:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2125
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2131
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2139
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2144
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2152
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2156
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2162
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2166
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2171
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2177
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2181
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2185
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2190
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2194
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2198
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2202
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2206
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2210
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2214
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2218
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2222
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2230
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2234
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2244
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2248
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2252
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2256
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2260
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2264
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2268
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2278
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2284
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2288
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 415:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2294
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2298
		{
			yyVAL.str = "extended "
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2304
		{
			yyVAL.str = ""
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2308
		{
			yyVAL.str = "full "
		}
	case 419:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2314
		{
			yyVAL.str = ""
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2318
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2322
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2328
		{
			yyVAL.showFilter = nil
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2332
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2336
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2342
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2346
		{
			yyVAL.str = SessionStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2350
		{
			yyVAL.str = GlobalStr
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2356
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2360
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.statement = &Begin{}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2370
		{
			yyVAL.statement = &Begin{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2376
		{
			yyVAL.statement = &Commit{}
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2382
		{
			yyVAL.statement = &Rollback{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2388
		{
			yyVAL.statement = &OtherRead{}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2392
		{
			yyVAL.statement = &OtherRead{}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2396
		{
			yyVAL.statement = &OtherRead{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2400
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2404
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2409
		{
			setAllowComments(yylex, true)
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2413
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2419
		{
			yyVAL.bytes2 = nil
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2423
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2429
		{
			yyVAL.str = UnionStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.str = UnionAllStr
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.str = UnionDistinctStr
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2442
		{
			yyVAL.str = ""
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2446
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2450
		{
			yyVAL.str = SQLCacheStr
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2455
		{
			yyVAL.str = ""
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2459
		{
			yyVAL.str = DistinctStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2464
		{
			yyVAL.str = ""
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2468
		{
			yyVAL.str = StraightJoinHint
		}
	case 453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2473
		{
			yyVAL.selectExprs = nil
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2477
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2483
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2487
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2493
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2497
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2501
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2505
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2518
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2525
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2530
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2534
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2540
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2544
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2554
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2558
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2562
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2568
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 476:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2572
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2578
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2583
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2587
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2597
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 482:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2610
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2614
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 484:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2628
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2636
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2640
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2642
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2645
		{
			yyVAL.empty = struct{}{}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2647
		{
			yyVAL.empty = struct{}{}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2650
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2654
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2658
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2665
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2671
		{
			yyVAL.str = JoinStr
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2675
		{
			yyVAL.str = JoinStr
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2679
		{
			yyVAL.str = JoinStr
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2685
		{
			yyVAL.str = StraightJoinStr
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2691
		{
			yyVAL.str = LeftJoinStr
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2695
		{
			yyVAL.str = LeftJoinStr
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2699
		{
			yyVAL.str = RightJoinStr
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2703
		{
			yyVAL.str = RightJoinStr
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.str = NaturalJoinStr
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2713
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2723
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2727
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2733
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2737
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2742
		{
			yyVAL.indexHints = nil
		}
	case 514:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2746
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2750
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 516:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2754
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2759
		{
			yyVAL.expr = nil
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2763
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2768
		{
			yyVAL.columns = nil
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2772
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2778
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2782
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2786
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2790
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2794
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 526:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2798
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2802
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2808
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2812
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2818
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2822
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2828
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2832
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2836
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2840
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2844
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2848
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2852
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2856
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2860
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2864
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2870
		{
			yyVAL.str = IsNullStr
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2874
		{
			yyVAL.str = IsNotNullStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2878
		{
			yyVAL.str = IsTrueStr
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2882
		{
			yyVAL.str = IsNotTrueStr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2886
		{
			yyVAL.str = IsFalseStr
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2890
		{
			yyVAL.str = IsNotFalseStr
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2896
		{
			yyVAL.str = EqualStr
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2900
		{
			yyVAL.str = LessThanStr
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2904
		{
			yyVAL.str = GreaterThanStr
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2908
		{
			yyVAL.str = LessEqualStr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2912
		{
			yyVAL.str = GreaterEqualStr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2916
		{
			yyVAL.str = NotEqualStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2920
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2925
		{
			yyVAL.expr = nil
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2929
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2935
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2939
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2943
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2949
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2955
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2959
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2965
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2969
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2973
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2977
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2981
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2985
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2989
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2993
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2997
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3001
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3005
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3009
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3013
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3017
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3021
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3025
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3029
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3033
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3037
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3041
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3045
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3049
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3053
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3061
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3075
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3083
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3091
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3105
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3109
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 597:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3113
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3127
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3131
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 601:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3135
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3139
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3143
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 604:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3147
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 605:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3151
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3155
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 607:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3159
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 608:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 609:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3179
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 613:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3197
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3201
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3206
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3211
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3216
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 620:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3221
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3225
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3239
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3243
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3247
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 627:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3251
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.str = ""
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3261
		{
			yyVAL.str = BooleanModeStr
		}
	case 630:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3265
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 631:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3269
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3273
		{
			yyVAL.str = QueryExpansionStr
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3279
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3283
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3289
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 636:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3293
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3297
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3301
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3305
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3309
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3315
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3319
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3323
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3327
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3331
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 646:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3339
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3343
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3349
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3353
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3357
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3361
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3365
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3369
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3373
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3378
		{
			yyVAL.expr = nil
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3382
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3387
		{
			yyVAL.str = string("")
		}
	case 659:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3391
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3397
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3401
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 662:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3407
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 663:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3412
		{
			yyVAL.expr = nil
		}
	case 664:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3416
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3422
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3426
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 667:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3430
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3436
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3440
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3444
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3456
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3460
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3464
		{
			yyVAL.expr = &NullVal{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3470
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3483
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.exprs = nil
		}
	case 680:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3497
		{
			yyVAL.expr = nil
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3501
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3506
		{
			yyVAL.orderBy = nil
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3510
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3516
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 686:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3520
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3526
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 688:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3531
		{
			yyVAL.str = AscScr
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3535
		{
			yyVAL.str = AscScr
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3539
		{
			yyVAL.str = DescScr
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3544
		{
			yyVAL.limit = nil
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3548
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3552
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 694:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3556
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 695:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3561
		{
			yyVAL.str = ""
		}
	case 696:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3565
		{
			yyVAL.str = ForUpdateStr
		}
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3569
		{
			yyVAL.str = ShareModeStr
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3582
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3586
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3590
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 701:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3595
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3599
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 703:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3603
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3610
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3614
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3618
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 707:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3622
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3627
		{
			yyVAL.updateExprs = nil
		}
	case 709:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3631
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3637
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3641
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3647
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3651
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 714:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3657
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3663
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3673
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3683
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3689
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3693
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3699
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3703
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3707
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3711
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3718
		{
			yyVAL.bytes = []byte("charset")
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3725
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3729
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3733
		{
			yyVAL.expr = &Default{}
		}
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3742
		{
			yyVAL.byt = 0
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3744
		{
			yyVAL.byt = 1
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3747
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3749
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3752
		{
			yyVAL.str = ""
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3754
		{
			yyVAL.str = IgnoreStr
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3758
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3760
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3762
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3764
		{
			yyVAL.empty = struct{}{}
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3766
		{
			yyVAL.empty = struct{}{}
		}
	case 744:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3768
		{
			yyVAL.empty = struct{}{}
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3770
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3772
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3774
		{
			yyVAL.empty = struct{}{}
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3776
		{
			yyVAL.empty = struct{}{}
		}
	case 749:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3779
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3781
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3783
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3787
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3789
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3793
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3797
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3804
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3810
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3814
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3821
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4090
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4099
		{
			decNesting(yylex)
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4104
		{
			forceEOF(yylex)
		}
	case 1008:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4109
		{
			forceEOF(yylex)
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4113
		{
			forceEOF(yylex)
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4117
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
