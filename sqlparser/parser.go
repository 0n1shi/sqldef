// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEGIN = 57496
const START = 57497
const TRANSACTION = 57498
const COMMIT = 57499
const ROLLBACK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const SMALLSERIAL = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const SERIAL = 57508
const BIGINT = 57509
const BIGSERIAL = 57510
const INTNUM = 57511
const REAL = 57512
const DOUBLE = 57513
const PRECISION = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const SMALLMONEY = 57518
const MONEY = 57519
const TIME = 57520
const TIMESTAMP = 57521
const DATETIME = 57522
const YEAR = 57523
const DATETIMEOFFSET = 57524
const DATETIME2 = 57525
const SMALLDATETIME = 57526
const CHAR = 57527
const VARCHAR = 57528
const VARYING = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const NVARCHAR = 57534
const NTEXT = 57535
const UUID = 57536
const TEXT = 57537
const TINYTEXT = 57538
const MEDIUMTEXT = 57539
const LONGTEXT = 57540
const CITEXT = 57541
const BLOB = 57542
const TINYBLOB = 57543
const MEDIUMBLOB = 57544
const LONGBLOB = 57545
const JSON = 57546
const JSONB = 57547
const ENUM = 57548
const GEOMETRY = 57549
const POINT = 57550
const LINESTRING = 57551
const POLYGON = 57552
const GEOMETRYCOLLECTION = 57553
const MULTIPOINT = 57554
const MULTILINESTRING = 57555
const MULTIPOLYGON = 57556
const ARRAY = 57557
const NOW = 57558
const GETDATE = 57559
const BPCHAR = 57560
const NULLX = 57561
const AUTO_INCREMENT = 57562
const APPROXNUM = 57563
const SIGNED = 57564
const UNSIGNED = 57565
const ZEROFILL = 57566
const ZONE = 57567
const AUTOINCREMENT = 57568
const DATABASES = 57569
const TABLES = 57570
const VITESS_KEYSPACES = 57571
const VITESS_SHARDS = 57572
const VITESS_TABLETS = 57573
const VSCHEMA_TABLES = 57574
const EXTENDED = 57575
const FULL = 57576
const PROCESSLIST = 57577
const NAMES = 57578
const CHARSET = 57579
const GLOBAL = 57580
const SESSION = 57581
const ISOLATION = 57582
const LEVEL = 57583
const READ = 57584
const WRITE = 57585
const ONLY = 57586
const REPEATABLE = 57587
const COMMITTED = 57588
const UNCOMMITTED = 57589
const SERIALIZABLE = 57590
const CURRENT_TIMESTAMP = 57591
const DATABASE = 57592
const CURRENT_DATE = 57593
const CURRENT_TIME = 57594
const LOCALTIME = 57595
const LOCALTIMESTAMP = 57596
const UTC_DATE = 57597
const UTC_TIME = 57598
const UTC_TIMESTAMP = 57599
const REPLACE = 57600
const CONVERT = 57601
const CAST = 57602
const SUBSTR = 57603
const SUBSTRING = 57604
const GROUP_CONCAT = 57605
const SEPARATOR = 57606
const INHERIT = 57607
const MATCH = 57608
const AGAINST = 57609
const BOOLEAN = 57610
const LANGUAGE = 57611
const WITH = 57612
const WITHOUT = 57613
const PARSER = 57614
const QUERY = 57615
const EXPANSION = 57616
const UNUSED = 57617
const GENERATED = 57618
const ALWAYS = 57619
const IDENTITY = 57620
const SEQUENCE = 57621
const INCREMENT = 57622
const MINVALUE = 57623
const CACHE = 57624
const CYCLE = 57625
const OWNED = 57626
const NONE = 57627
const CLUSTERED = 57628
const NONCLUSTERED = 57629
const REPLICATION = 57630
const INCLUDE = 57631
const TYPECAST = 57632
const CHECK = 57633

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 92,
	-2, 82,
	-1, 36,
	153, 404,
	154, 404,
	-2, 394,
	-1, 271,
	109, 737,
	-2, 733,
	-1, 272,
	109, 738,
	-2, 734,
	-1, 342,
	80, 927,
	-2, 58,
	-1, 343,
	80, 878,
	-2, 59,
	-1, 348,
	80, 857,
	-2, 704,
	-1, 350,
	80, 901,
	-2, 706,
	-1, 646,
	51, 41,
	53, 41,
	-2, 43,
	-1, 787,
	109, 740,
	-2, 736,
	-1, 1024,
	5, 28,
	-2, 539,
	-1, 1049,
	5, 27,
	-2, 678,
	-1, 1150,
	5, 27,
	-2, 64,
	-1, 1363,
	5, 28,
	-2, 679,
	-1, 1444,
	5, 27,
	-2, 681,
	-1, 1561,
	5, 28,
	-2, 682,
}

const yyPrivate = 57344

const yyLast = 14591

var yyAct = [...]int{
	272, 1551, 269, 1494, 1515, 1052, 1457, 964, 723, 1083,
	1235, 888, 851, 1369, 459, 1382, 1262, 573, 1141, 301,
	1263, 763, 276, 869, 1236, 1086, 1152, 1454, 893, 942,
	1108, 640, 492, 1232, 959, 88, 572, 3, 88, 638,
	250, 899, 892, 244, 1568, 275, 1114, 53, 913, 852,
	1068, 1208, 823, 1016, 820, 66, 812, 954, 1138, 656,
	839, 1057, 88, 88, 352, 505, 789, 908, 511, 352,
	655, 341, 352, 457, 278, 347, 517, 88, 274, 88,
	848, 596, 259, 998, 249, 88, 642, 245, 246, 247,
	248, 525, 338, 336, 601, 627, 344, 587, 602, 1122,
	52, 327, 1631, 1203, 929, 1288, 1593, 1275, 1388, 926,
	460, 461, 263, 1276, 539, 1395, 329, 549, 1624, 549,
	1106, 328, 334, 538, 537, 547, 548, 540, 541, 542,
	543, 544, 545, 546, 539, 1665, 332, 549, 1608, 542,
	543, 544, 545, 546, 539, 1661, 1559, 549, 1353, 504,
	1519, 533, 1520, 536, 1142, 1143, 1652, 85, 822, 551,
	552, 553, 554, 555, 556, 557, 965, 534, 535, 532,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 928, 1597, 549, 337, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 1617, 471,
	549, 472, 1350, 504, 1607, 1227, 1558, 479, 1582, 1508,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 490, 88, 549, 1357, 469, 352, 352, 352,
	352, 1076, 352, 500, 1075, 883, 884, 1077, 1257, 352,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 882, 926, 549, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 352, 1412, 549, 504,
	1258, 1259, 1623, 1411, 1625, 915, 460, 461, 657, 1124,
	658, 931, 564, 565, 566, 567, 568, 569, 570, 922,
	1121, 911, 514, 754, 1433, 943, 933, 912, 1485, 1346,
	755, 513, 1354, 843, 1308, 1307, 538, 537, 547, 548,
	540, 541, 542, 543, 544, 545, 546, 539, 955, 550,
	549, 550, 1118, 1344, 1120, 1119, 243, 88, 1400, 1318,
	1319, 300, 1473, 1538, 88, 88, 88, 57, 1399, 550,
	352, 496, 497, 1660, 1402, 481, 352, 1650, 560, 550,
	918, 1552, 914, 923, 83, 79, 80, 81, 1186, 920,
	919, 849, 59, 60, 61, 62, 63, 1401, 1385, 1553,
	1441, 1269, 344, 1390, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 550, 1520, 549, 1278,
	1321, 1389, 909, 1100, 1099, 346, 1088, 1639, 1105, 1093,
	463, 1330, 550, 467, 1499, 1322, 1509, 910, 332, 1270,
	474, 1091, 589, 590, 591, 592, 593, 594, 595, 465,
	76, 77, 77, 1420, 870, 872, 550, 1616, 733, 647,
	462, 1067, 653, 1351, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 1557, 943, 549, 1066, 936, 622,
	493, 494, 495, 1065, 498, 956, 550, 721, 646, 470,
	1187, 502, 916, 88, 909, 222, 78, 1656, 917, 88,
	550, 88, 352, 1513, 88, 1366, 909, 88, 1195, 910,
	1032, 88, 1010, 352, 352, 352, 352, 352, 352, 352,
	352, 910, 562, 563, 1383, 1384, 1386, 352, 352, 871,
	761, 529, 88, 82, 480, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 352, 924, 549,
	925, 88, 550, 890, 889, 758, 1191, 352, 524, 993,
	1531, 1530, 1529, 921, 788, 1528, 1527, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 790, 674, 766, 1302, 742, 670, 346, 346,
	346, 346, 786, 346, 740, 1583, 1526, 485, 522, 1183,
	346, 352, 538, 537, 547, 548, 540, 541, 542, 543,
	544, 545, 546, 539, 524, 722, 549, 1525, 764, 765,
	550, 729, 1229, 730, 515, 1523, 734, 527, 768, 737,
	796, 1315, 1190, 832, 835, 787, 1303, 791, 994, 841,
	74, 1055, 827, 785, 794, 795, 793, 659, 783, 523,
	522, 1017, 88, 1085, 756, 88, 88, 88, 88, 88,
	840, 487, 815, 489, 523, 522, 524, 88, 726, 1472,
	88, 817, 818, 775, 88, 1028, 853, 1027, 550, 88,
	88, 524, 840, 352, 1039, 1587, 1475, 1096, 70, 72,
	837, 486, 488, 504, 523, 522, 352, 1184, 1589, 1182,
	1471, 346, 845, 71, 73, 519, 827, 661, 1085, 523,
	522, 524, 1185, 1584, 1642, 344, 75, 1641, 877, 1405,
	1622, 68, 1085, 1125, 732, 1621, 524, 464, 894, 332,
	332, 332, 332, 332, 1095, 743, 744, 745, 746, 747,
	748, 749, 750, 1620, 332, 944, 945, 946, 947, 751,
	752, 550, 352, 332, 879, 880, 352, 875, 352, 88,
	874, 866, 88, 1569, 88, 828, 829, 88, 352, 1571,
	897, 836, 855, 856, 850, 858, 854, 326, 1567, 857,
	1483, 1618, 1570, 961, 1084, 538, 537, 547, 548, 540,
	541, 542, 543, 544, 545, 546, 539, 1414, 466, 549,
	468, 760, 878, 957, 958, 844, 1085, 846, 847, 484,
	540, 541, 542, 543, 544, 545, 546, 539, 550, 1413,
	549, 1404, 1458, 1619, 786, 1125, 473, 1013, 1014, 1015,
	1284, 1029, 813, 346, 814, 1460, 759, 69, 1585, 1586,
	1588, 1590, 1591, 790, 346, 346, 346, 346, 346, 346,
	346, 346, 1147, 523, 522, 1007, 1008, 1009, 346, 346,
	1145, 999, 1000, 1110, 1111, 1112, 50, 787, 523, 522,
	524, 1115, 1113, 298, 299, 1231, 792, 1125, 770, 523,
	522, 971, 1524, 1440, 988, 524, 989, 1409, 527, 990,
	1012, 346, 1332, 458, 1139, 504, 524, 1102, 791, 779,
	781, 782, 1521, 1459, 352, 780, 1273, 88, 476, 477,
	478, 1070, 1272, 1072, 21, 1049, 291, 290, 293, 294,
	295, 296, 1271, 352, 1094, 292, 297, 1546, 1669, 1038,
	1448, 1658, 819, 1078, 352, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 833, 833, 967, 352, 1071, 816, 833, 1062,
	739, 1080, 1379, 1651, 88, 894, 1379, 1630, 909, 1379,
	1629, 1101, 1006, 904, 738, 903, 727, 905, 906, 725,
	254, 1073, 907, 910, 1379, 1615, 1546, 1614, 968, 482,
	970, 332, 1611, 1610, 1132, 833, 1134, 1135, 1136, 1137,
	991, 1603, 504, 1541, 1126, 1127, 352, 1129, 1130, 1131,
	1144, 550, 1116, 1089, 1090, 1092, 475, 503, 1379, 1600,
	1021, 1448, 1549, 1540, 346, 1379, 1542, 1448, 1481, 1448,
	504, 352, 550, 458, 88, 88, 1036, 346, 1153, 982,
	1150, 1490, 88, 1448, 1449, 1379, 1378, 1489, 1140, 1117,
	1121, 352, 981, 1547, 1146, 1546, 1156, 1254, 504, 1484,
	1204, 1205, 1365, 504, 1311, 1310, 1305, 1306, 1456, 1157,
	1305, 1304, 23, 1222, 1223, 1406, 1225, 1226, 1053, 986,
	1022, 504, 1118, 1200, 1120, 1119, 624, 504, 980, 825,
	504, 352, 352, 962, 650, 1047, 1397, 346, 1048, 346,
	1234, 666, 665, 1295, 1198, 1224, 1201, 1202, 1237, 346,
	853, 1233, 1054, 54, 1053, 1207, 853, 1256, 50, 23,
	352, 1221, 352, 352, 1228, 1220, 1054, 1239, 825, 1034,
	1031, 932, 623, 346, 651, 1361, 649, 977, 974, 975,
	1243, 973, 1242, 1244, 624, 1443, 1022, 23, 787, 1274,
	1261, 1022, 894, 624, 894, 876, 624, 649, 1255, 1416,
	1415, 256, 1260, 1396, 1196, 50, 1516, 1053, 1314, 984,
	987, 1033, 1030, 1309, 1079, 881, 1022, 652, 1296, 1297,
	1285, 1299, 1300, 1301, 762, 1279, 1277, 50, 1662, 88,
	352, 1628, 1605, 50, 1544, 1116, 1543, 1286, 1298, 1535,
	352, 1534, 1110, 1111, 1112, 1496, 1163, 50, 1482, 352,
	1115, 1113, 298, 299, 1427, 933, 960, 1294, 1293, 1109,
	1291, 88, 1281, 1248, 1110, 1111, 1112, 352, 1148, 1149,
	979, 955, 1115, 1113, 298, 299, 352, 1107, 1082, 88,
	1058, 1059, 1323, 1334, 949, 1069, 1337, 948, 65, 724,
	1458, 1325, 1417, 1188, 1233, 1061, 736, 728, 501, 774,
	1064, 978, 863, 1460, 346, 1328, 861, 864, 1200, 1331,
	865, 862, 633, 634, 1063, 1087, 1164, 1160, 1335, 860,
	1165, 1162, 1161, 859, 1636, 73, 1097, 1606, 1342, 352,
	1194, 352, 352, 352, 88, 352, 1166, 260, 261, 265,
	983, 352, 1159, 995, 1372, 1373, 1374, 518, 1360, 1634,
	1005, 1312, 1004, 332, 1359, 506, 985, 1133, 664, 483,
	516, 1283, 352, 1387, 1368, 1375, 507, 1428, 1392, 1080,
	1391, 1459, 969, 894, 735, 1394, 1377, 346, 629, 632,
	633, 634, 630, 1327, 631, 635, 764, 765, 1058, 1059,
	1407, 1282, 1155, 963, 637, 352, 352, 1398, 257, 258,
	518, 352, 346, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1317, 352, 1116, 1268, 1408, 1003, 1410, 251, 1117, 1121,
	54, 1418, 346, 1002, 1419, 1626, 1502, 1153, 894, 252,
	1501, 1209, 1431, 1434, 1435, 1054, 1436, 1437, 1438, 520,
	1117, 1121, 1267, 1266, 346, 1533, 352, 352, 1532, 1510,
	1432, 1118, 1098, 1120, 1119, 757, 56, 58, 1158, 833,
	352, 1237, 1241, 1069, 1211, 833, 1442, 1320, 648, 51,
	352, 1, 1470, 1118, 1539, 1120, 1119, 1474, 1104, 1453,
	1468, 1444, 1469, 1537, 67, 1478, 1596, 1545, 1287, 302,
	47, 346, 1316, 346, 1264, 1476, 352, 352, 88, 1486,
	1487, 352, 1488, 629, 632, 633, 634, 630, 352, 631,
	635, 1422, 1491, 1423, 1424, 1425, 1213, 1154, 1167, 966,
	1218, 1497, 1212, 1151, 976, 1421, 1518, 1210, 1550, 352,
	1564, 1455, 901, 1216, 1511, 891, 456, 47, 64, 1522,
	902, 900, 1517, 1237, 898, 255, 1214, 1215, 667, 927,
	1123, 333, 930, 673, 671, 672, 669, 675, 668, 230,
	339, 1313, 1512, 636, 1217, 1219, 660, 521, 1181, 1180,
	972, 1324, 767, 1189, 753, 992, 499, 352, 232, 558,
	1326, 1001, 1074, 345, 1592, 1240, 510, 1500, 1430, 1037,
	584, 508, 512, 1548, 352, 838, 277, 352, 1329, 778,
	1555, 352, 289, 1560, 286, 288, 1565, 346, 530, 287,
	769, 1046, 531, 853, 267, 352, 352, 331, 1579, 620,
	1493, 628, 626, 625, 352, 352, 1060, 352, 1577, 1578,
	824, 826, 1580, 352, 1056, 330, 1197, 1356, 1601, 1507,
	1594, 1595, 574, 773, 25, 55, 842, 262, 19, 18,
	17, 585, 1572, 1573, 1574, 1575, 1576, 20, 16, 15,
	1370, 14, 1370, 1370, 1370, 29, 1376, 1612, 1613, 13,
	12, 11, 346, 10, 9, 8, 7, 6, 1627, 5,
	4, 253, 22, 2, 0, 1633, 352, 0, 0, 1632,
	352, 0, 0, 1370, 0, 0, 868, 0, 1638, 0,
	0, 0, 1635, 0, 0, 0, 0, 88, 0, 352,
	0, 0, 0, 0, 0, 1647, 491, 491, 491, 491,
	88, 491, 1646, 1640, 0, 1655, 346, 346, 491, 0,
	1657, 0, 1426, 0, 0, 1645, 0, 352, 1648, 0,
	0, 0, 1429, 352, 0, 47, 1666, 1667, 0, 0,
	0, 0, 0, 0, 0, 1659, 0, 0, 0, 0,
	559, 0, 0, 561, 0, 0, 0, 0, 0, 1663,
	0, 0, 0, 0, 0, 0, 0, 1446, 1447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 1264, 575, 576, 577, 578, 579, 580, 581, 582,
	583, 1477, 586, 588, 588, 588, 588, 588, 588, 588,
	588, 0, 616, 617, 618, 619, 0, 0, 0, 0,
	0, 0, 0, 639, 0, 0, 0, 1264, 1492, 0,
	0, 0, 1495, 0, 0, 0, 0, 0, 0, 1370,
	0, 0, 1654, 0, 0, 0, 0, 0, 934, 935,
	937, 938, 939, 0, 940, 941, 0, 0, 0, 0,
	1514, 0, 776, 777, 0, 0, 0, 0, 0, 0,
	0, 950, 951, 952, 1019, 953, 0, 0, 1020, 0,
	0, 0, 0, 0, 0, 1024, 1025, 1026, 0, 0,
	0, 0, 0, 0, 1035, 0, 0, 0, 0, 1041,
	0, 0, 1042, 1043, 1044, 1045, 0, 0, 1264, 0,
	0, 0, 0, 0, 1018, 574, 0, 0, 830, 831,
	0, 0, 833, 0, 0, 1562, 0, 0, 1563, 0,
	0, 0, 1566, 597, 538, 537, 547, 548, 540, 541,
	542, 543, 544, 545, 546, 539, 1495, 1264, 549, 0,
	0, 0, 0, 0, 0, 1264, 1264, 0, 1598, 0,
	228, 491, 0, 0, 1604, 0, 599, 0, 0, 0,
	0, 0, 491, 491, 491, 491, 491, 491, 491, 491,
	0, 0, 0, 0, 238, 0, 491, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 0, 0, 0, 0, 1264, 0, 0,
	0, 1637, 0, 0, 600, 0, 0, 0, 509, 0,
	0, 0, 614, 598, 0, 223, 0, 0, 0, 603,
	1370, 225, 0, 0, 0, 0, 0, 0, 231, 227,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 575, 242, 0, 346, 0,
	0, 0, 1173, 0, 1495, 0, 0, 0, 229, 1206,
	0, 233, 0, 0, 0, 0, 0, 0, 266, 0,
	86, 86, 0, 0, 0, 0, 0, 0, 0, 996,
	997, 0, 512, 0, 0, 86, 0, 86, 1128, 0,
	0, 0, 615, 86, 333, 333, 333, 333, 333, 0,
	0, 0, 0, 0, 0, 0, 1253, 0, 0, 639,
	0, 873, 0, 0, 0, 224, 0, 1174, 333, 0,
	0, 0, 1176, 1169, 1170, 0, 1177, 1172, 1171, 0,
	550, 1179, 1175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1178, 0, 0, 1023, 0, 0, 1168, 0,
	0, 0, 0, 226, 0, 234, 235, 236, 237, 241,
	1040, 0, 0, 0, 240, 239, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 491, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 1336,
	0, 0, 0, 0, 0, 0, 1338, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1011, 0, 1347, 1348,
	1349, 0, 0, 1352, 0, 0, 0, 0, 0, 0,
	1290, 1292, 0, 0, 0, 0, 1362, 1363, 1364, 0,
	1367, 0, 0, 23, 24, 48, 26, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 42, 0, 0, 0, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 1051,
	0, 0, 0, 0, 0, 37, 0, 1403, 0, 50,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 86, 644, 86, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1230,
	0, 1339, 1340, 0, 1341, 0, 0, 0, 1343, 0,
	1345, 0, 0, 0, 1245, 1246, 0, 0, 1247, 0,
	0, 1249, 0, 0, 0, 0, 0, 0, 0, 30,
	31, 33, 32, 35, 1439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1450, 1451, 1452, 36, 43, 44, 1380, 1381, 45, 46,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1480, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 39,
	0, 40, 41, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 1503, 1504, 1505, 1506, 0, 86, 0, 86,
	0, 0, 86, 0, 0, 86, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 1333, 0, 0, 0, 0, 0, 0, 1238, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 1250, 1251, 1252, 741, 0,
	0, 0, 0, 0, 0, 1556, 0, 0, 0, 0,
	1561, 1358, 49, 0, 0, 0, 0, 0, 574, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1280, 0, 0, 1581, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 266, 266, 1289, 1602, 834,
	834, 266, 0, 0, 0, 834, 0, 0, 0, 0,
	1393, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 266, 266, 266, 266, 0,
	86, 0, 834, 86, 86, 86, 86, 86, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 86, 0,
	0, 0, 644, 0, 0, 0, 0, 86, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 1653, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 0, 0,
	0, 0, 0, 0, 0, 1670, 1671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	86, 0, 86, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 697, 0, 0, 0, 0, 0, 0, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1554, 574, 0, 0, 0, 0, 0, 0, 0,
	266, 1238, 0, 0, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1479, 0, 0, 0, 0, 1599, 682, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1498, 0,
	0, 698, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 0, 47, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 0, 714,
	715, 1649, 716, 717, 718, 720, 719, 699, 700, 701,
	705, 703, 702, 704, 676, 678, 0, 614, 677, 683,
	679, 680, 681, 695, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 696, 706, 707, 708, 709,
	710, 711, 712, 713, 0, 0, 0, 0, 0, 0,
	0, 0, 1192, 1193, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 1609, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 615, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1664, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 444, 434, 0, 404, 446,
	378, 393, 454, 395, 396, 426, 362, 412, 153, 390,
	91, 381, 356, 387, 357, 379, 406, 115, 377, 436,
	415, 129, 452, 132, 420, 0, 175, 141, 0, 0,
	408, 438, 410, 432, 403, 427, 369, 419, 447, 391,
	423, 448, 644, 0, 0, 351, 0, 895, 896, 0,
	0, 0, 0, 0, 104, 0, 422, 443, 389, 455,
	425, 355, 421, 0, 360, 363, 453, 441, 384, 385,
	1081, 0, 0, 0, 0, 0, 0, 407, 411, 429,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	0, 418, 0, 0, 0, 366, 361, 0, 405, 0,
	0, 0, 368, 0, 383, 430, 0, 353, 433, 439,
	402, 202, 442, 399, 398, 160, 0, 107, 0, 181,
	119, 392, 130, 428, 445, 409, 437, 380, 388, 109,
	386, 167, 154, 193, 417, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 86, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 358, 0, 176,
	195, 213, 214, 359, 376, 440, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 424, 168, 106, 194, 174, 372, 375, 370, 371,
	413, 414, 449, 450, 451, 431, 367, 0, 373, 374,
	0, 435, 124, 416, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 394, 354, 397, 0, 0, 0, 0,
	0, 0, 0, 364, 365, 169, 401, 0, 103, 834,
	0, 0, 0, 0, 0, 0, 0, 444, 434, 0,
	404, 446, 378, 393, 454, 395, 396, 426, 362, 412,
	153, 390, 91, 381, 356, 387, 357, 379, 406, 115,
	377, 436, 415, 129, 452, 132, 420, 0, 175, 141,
	0, 0, 408, 438, 410, 432, 403, 427, 369, 419,
	447, 391, 423, 448, 0, 0, 0, 351, 0, 895,
	896, 0, 0, 0, 0, 0, 104, 0, 422, 443,
	389, 455, 425, 355, 421, 0, 360, 363, 453, 441,
	384, 385, 0, 0, 0, 0, 0, 0, 0, 407,
	411, 429, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 382, 0, 418, 0, 0, 0, 366, 361, 0,
	405, 0, 0, 0, 368, 1644, 383, 430, 0, 353,
	433, 439, 402, 202, 442, 399, 398, 160, 86, 107,
	0, 181, 119, 392, 130, 428, 445, 409, 437, 380,
	388, 109, 386, 167, 154, 193, 417, 155, 165, 133,
	185, 161, 192, 203, 204, 183, 201, 170, 99, 148,
	89, 159, 166, 0, 108, 0, 215, 216, 217, 218,
	219, 220, 221, 92, 182, 191, 105, 171, 95, 189,
	178, 180, 139, 125, 126, 173, 93, 94, 0, 164,
	114, 158, 118, 113, 151, 179, 142, 186, 187, 110,
	212, 112, 111, 177, 100, 199, 200, 97, 101, 198,
	147, 152, 150, 197, 184, 190, 140, 137, 0, 96,
	188, 138, 136, 128, 0, 116, 120, 156, 135, 157,
	121, 144, 143, 145, 0, 149, 122, 0, 0, 358,
	0, 176, 195, 213, 214, 359, 376, 440, 205, 206,
	207, 208, 0, 0, 0, 146, 102, 123, 172, 127,
	134, 163, 211, 424, 168, 106, 194, 174, 372, 375,
	370, 371, 413, 414, 449, 450, 451, 431, 367, 0,
	373, 374, 0, 435, 124, 416, 90, 98, 131, 209,
	210, 0, 162, 117, 196, 394, 354, 397, 0, 0,
	0, 0, 0, 0, 0, 364, 365, 169, 401, 0,
	103, 444, 434, 0, 404, 446, 378, 393, 454, 395,
	396, 426, 362, 412, 153, 390, 91, 381, 356, 387,
	357, 379, 406, 115, 377, 436, 415, 129, 452, 132,
	420, 0, 175, 141, 0, 0, 408, 438, 410, 432,
	403, 427, 369, 419, 447, 391, 423, 448, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 422, 443, 389, 455, 425, 355, 421, 0,
	360, 363, 453, 441, 384, 385, 0, 0, 0, 0,
	0, 0, 0, 407, 411, 429, 400, 0, 0, 0,
	0, 0, 0, 1199, 0, 382, 0, 418, 0, 0,
	0, 366, 361, 0, 405, 0, 0, 0, 368, 0,
	383, 430, 0, 353, 433, 439, 402, 202, 442, 399,
	398, 160, 0, 107, 0, 181, 119, 392, 130, 428,
	445, 409, 437, 380, 388, 109, 386, 167, 154, 193,
	417, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 101, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 358, 0, 176, 195, 213, 214, 359,
	376, 440, 205, 206, 207, 208, 0, 0, 0, 146,
	102, 123, 172, 127, 134, 163, 211, 424, 168, 106,
	194, 174, 372, 375, 370, 371, 413, 414, 449, 450,
	451, 431, 367, 0, 373, 374, 0, 435, 124, 416,
	90, 98, 131, 209, 210, 0, 162, 117, 196, 394,
	354, 397, 0, 0, 0, 0, 0, 0, 0, 364,
	365, 169, 401, 0, 103, 444, 434, 0, 404, 446,
	378, 393, 454, 395, 396, 426, 362, 412, 153, 390,
	91, 381, 356, 387, 357, 379, 406, 115, 377, 436,
	415, 129, 452, 132, 420, 0, 175, 141, 0, 0,
	408, 438, 410, 432, 403, 427, 369, 419, 447, 391,
	423, 448, 50, 0, 0, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 422, 443, 389, 455,
	425, 355, 421, 0, 360, 363, 453, 441, 384, 385,
	0, 0, 0, 0, 0, 0, 0, 407, 411, 429,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	0, 418, 0, 0, 0, 366, 361, 0, 405, 0,
	0, 0, 368, 0, 383, 430, 0, 353, 433, 439,
	402, 202, 442, 399, 398, 160, 0, 107, 0, 181,
	119, 392, 130, 428, 445, 409, 437, 380, 388, 109,
	386, 167, 154, 193, 417, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 358, 0, 176,
	195, 213, 214, 359, 376, 440, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 424, 168, 106, 194, 174, 372, 375, 370, 371,
	413, 414, 449, 450, 451, 431, 367, 0, 373, 374,
	0, 435, 124, 416, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 394, 354, 397, 0, 0, 0, 0,
	0, 0, 0, 364, 365, 169, 401, 0, 103, 444,
	434, 0, 404, 446, 378, 393, 454, 395, 396, 426,
	362, 412, 153, 390, 91, 381, 356, 387, 357, 379,
	406, 115, 377, 436, 415, 129, 452, 132, 420, 0,
	175, 141, 0, 0, 408, 438, 410, 432, 403, 427,
	369, 419, 447, 391, 423, 448, 0, 0, 0, 271,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	422, 443, 389, 455, 425, 355, 421, 0, 360, 363,
	453, 441, 384, 385, 0, 0, 0, 0, 0, 0,
	0, 407, 411, 429, 400, 0, 0, 0, 0, 0,
	0, 784, 0, 382, 0, 418, 0, 0, 0, 366,
	361, 0, 405, 0, 0, 0, 368, 0, 383, 430,
	0, 353, 433, 439, 402, 202, 442, 399, 398, 160,
	0, 107, 0, 181, 119, 392, 130, 428, 445, 409,
	437, 380, 388, 109, 386, 167, 154, 193, 417, 155,
	165, 133, 185, 161, 192, 203, 204, 183, 201, 170,
	99, 148, 89, 159, 166, 0, 108, 0, 215, 216,
	217, 218, 219, 220, 221, 92, 182, 191, 105, 171,
	95, 189, 178, 180, 139, 125, 126, 173, 93, 94,
	0, 164, 114, 158, 118, 113, 151, 179, 142, 186,
	187, 110, 212, 112, 111, 177, 100, 199, 200, 97,
	101, 198, 147, 152, 150, 197, 184, 190, 140, 137,
	0, 96, 188, 138, 136, 128, 0, 116, 120, 156,
	135, 157, 121, 144, 143, 145, 0, 149, 122, 0,
	0, 358, 0, 176, 195, 213, 214, 359, 376, 440,
	205, 206, 207, 208, 0, 0, 0, 146, 102, 123,
	172, 127, 134, 163, 211, 424, 168, 106, 194, 174,
	372, 375, 370, 371, 413, 414, 449, 450, 451, 431,
	367, 0, 373, 374, 0, 435, 124, 416, 90, 98,
	131, 209, 210, 0, 162, 117, 196, 394, 354, 397,
	0, 0, 0, 0, 0, 0, 0, 364, 365, 169,
	401, 0, 103, 444, 434, 0, 404, 446, 378, 393,
	454, 395, 396, 426, 362, 412, 153, 390, 91, 381,
	356, 387, 357, 379, 406, 115, 377, 436, 415, 129,
	452, 132, 420, 0, 175, 141, 0, 0, 408, 438,
	410, 432, 403, 427, 369, 419, 447, 391, 423, 448,
	0, 0, 0, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 422, 443, 389, 455, 425, 355,
	421, 0, 360, 363, 453, 441, 384, 385, 0, 0,
	0, 0, 0, 0, 0, 407, 411, 429, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 382, 0, 418,
	0, 0, 0, 366, 361, 0, 405, 0, 0, 0,
	368, 0, 383, 430, 0, 353, 433, 439, 402, 202,
	442, 399, 398, 160, 0, 107, 0, 181, 119, 392,
	130, 428, 445, 409, 437, 380, 388, 109, 386, 167,
	154, 193, 417, 155, 165, 133, 185, 161, 192, 203,
	204, 183, 201, 170, 99, 148, 89, 159, 166, 0,
	108, 0, 215, 216, 217, 218, 219, 220, 221, 92,
	182, 191, 105, 171, 95, 189, 178, 180, 139, 125,
	126, 173, 93, 94, 0, 164, 114, 158, 118, 113,
	151, 179, 142, 186, 187, 110, 212, 112, 111, 177,
	100, 199, 200, 97, 101, 198, 147, 152, 150, 197,
	184, 190, 140, 137, 0, 96, 188, 138, 136, 128,
	0, 116, 120, 156, 135, 157, 121, 144, 143, 145,
	0, 149, 122, 0, 0, 358, 0, 176, 195, 213,
	214, 359, 376, 440, 205, 206, 207, 208, 0, 0,
	0, 146, 102, 123, 172, 127, 134, 163, 211, 424,
	168, 106, 194, 174, 372, 375, 370, 371, 413, 414,
	449, 450, 451, 431, 367, 0, 373, 374, 0, 435,
	124, 416, 90, 98, 131, 209, 210, 0, 162, 117,
	196, 394, 354, 397, 0, 0, 0, 0, 0, 0,
	0, 364, 365, 169, 401, 0, 103, 444, 434, 0,
	404, 446, 378, 393, 454, 395, 396, 426, 362, 412,
	153, 390, 91, 381, 356, 387, 357, 379, 406, 115,
	377, 436, 415, 129, 452, 132, 420, 0, 175, 141,
	0, 0, 408, 438, 410, 432, 403, 427, 369, 419,
	447, 391, 423, 448, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 422, 443,
	389, 455, 425, 355, 421, 0, 360, 363, 453, 441,
	384, 385, 0, 0, 0, 0, 0, 0, 0, 407,
	411, 429, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 382, 0, 418, 0, 0, 0, 366, 361, 0,
	405, 0, 0, 0, 368, 0, 383, 430, 0, 353,
	433, 439, 402, 202, 442, 399, 398, 160, 0, 107,
	0, 181, 119, 392, 130, 428, 445, 409, 437, 380,
	388, 109, 386, 167, 154, 193, 417, 155, 165, 133,
	185, 161, 192, 203, 204, 183, 201, 170, 99, 148,
	89, 159, 166, 0, 108, 0, 215, 216, 217, 218,
	219, 220, 221, 92, 182, 191, 105, 171, 95, 189,
	178, 180, 139, 125, 126, 173, 93, 94, 0, 164,
	114, 158, 118, 113, 151, 179, 142, 186, 187, 110,
	212, 112, 111, 177, 100, 199, 200, 97, 101, 198,
	147, 152, 150, 197, 184, 190, 140, 137, 0, 96,
	188, 138, 136, 128, 0, 116, 120, 156, 135, 157,
	121, 144, 143, 145, 0, 149, 122, 0, 0, 358,
	0, 176, 195, 213, 214, 359, 376, 440, 205, 206,
	207, 208, 0, 0, 0, 146, 102, 123, 172, 127,
	134, 163, 211, 424, 168, 106, 194, 174, 372, 375,
	370, 371, 413, 414, 449, 450, 451, 431, 367, 0,
	373, 374, 0, 435, 124, 416, 90, 98, 131, 209,
	210, 0, 162, 117, 196, 394, 354, 397, 0, 0,
	0, 0, 0, 0, 0, 364, 365, 169, 401, 0,
	103, 444, 434, 0, 404, 446, 378, 393, 454, 395,
	396, 426, 362, 412, 153, 390, 91, 381, 356, 387,
	357, 379, 406, 115, 377, 436, 415, 129, 452, 132,
	420, 0, 175, 141, 0, 0, 408, 438, 410, 432,
	403, 427, 369, 419, 447, 391, 423, 448, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 422, 443, 389, 455, 425, 355, 421, 0,
	360, 363, 453, 441, 384, 385, 0, 0, 0, 0,
	0, 0, 0, 407, 411, 429, 400, 0, 0, 0,
	0, 0, 0, 0, 0, 382, 0, 418, 0, 0,
	0, 366, 361, 0, 405, 0, 0, 0, 368, 0,
	383, 430, 0, 353, 433, 439, 402, 202, 442, 399,
	398, 160, 0, 107, 0, 181, 119, 392, 130, 428,
	445, 409, 437, 380, 388, 109, 386, 167, 154, 193,
	417, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 349, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 358, 0, 176, 195, 213, 214, 359,
	376, 440, 205, 206, 207, 208, 0, 0, 0, 350,
	348, 123, 172, 127, 134, 163, 211, 424, 168, 106,
	194, 174, 372, 375, 370, 371, 413, 414, 449, 450,
	451, 431, 367, 0, 373, 374, 0, 435, 124, 416,
	90, 98, 131, 209, 210, 0, 162, 117, 196, 394,
	354, 397, 0, 0, 0, 0, 0, 0, 0, 364,
	365, 169, 401, 0, 103, 444, 434, 0, 404, 446,
	378, 393, 454, 395, 396, 426, 362, 412, 153, 390,
	91, 381, 356, 387, 357, 379, 406, 115, 377, 436,
	415, 129, 452, 132, 420, 0, 175, 141, 0, 0,
	408, 438, 410, 432, 403, 427, 369, 419, 447, 391,
	423, 448, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 422, 443, 389, 455,
	425, 355, 421, 0, 360, 363, 453, 441, 384, 385,
	0, 0, 0, 0, 0, 0, 0, 407, 411, 429,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	0, 418, 0, 0, 0, 366, 361, 0, 405, 0,
	0, 0, 368, 0, 383, 430, 0, 353, 433, 439,
	402, 202, 442, 399, 398, 160, 0, 107, 0, 181,
	119, 392, 130, 428, 445, 409, 437, 380, 388, 109,
	386, 167, 154, 193, 417, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 358, 0, 176,
	195, 213, 214, 359, 376, 440, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 424, 168, 106, 194, 174, 372, 375, 370, 371,
	413, 414, 449, 450, 451, 431, 367, 0, 373, 374,
	0, 435, 124, 416, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 394, 354, 397, 0, 0, 0, 0,
	0, 0, 0, 364, 365, 169, 401, 0, 103, 444,
	434, 0, 404, 446, 378, 393, 454, 395, 396, 426,
	362, 412, 153, 390, 91, 381, 356, 387, 357, 379,
	406, 115, 377, 436, 415, 129, 452, 132, 420, 0,
	175, 141, 0, 0, 408, 438, 410, 432, 403, 427,
	369, 419, 447, 391, 423, 448, 0, 0, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	422, 443, 389, 455, 425, 355, 421, 0, 360, 363,
	453, 441, 384, 385, 0, 0, 0, 0, 0, 0,
	0, 407, 411, 429, 400, 0, 0, 0, 0, 0,
	0, 0, 0, 382, 0, 418, 0, 0, 0, 366,
	361, 0, 405, 0, 0, 0, 368, 0, 383, 430,
	0, 353, 433, 439, 402, 202, 442, 399, 398, 160,
	0, 107, 0, 181, 119, 392, 130, 428, 445, 409,
	437, 380, 388, 109, 386, 167, 154, 193, 417, 155,
	165, 133, 185, 161, 192, 203, 204, 183, 201, 170,
	99, 148, 89, 159, 166, 0, 108, 0, 215, 216,
	217, 218, 219, 220, 221, 92, 182, 654, 105, 171,
	95, 189, 178, 180, 139, 125, 126, 173, 93, 94,
	0, 164, 114, 158, 118, 113, 151, 179, 142, 186,
	187, 110, 212, 112, 111, 177, 100, 199, 200, 97,
	349, 198, 147, 152, 150, 197, 184, 190, 140, 137,
	0, 96, 188, 138, 136, 128, 0, 116, 120, 156,
	135, 157, 121, 144, 143, 145, 0, 149, 122, 0,
	0, 358, 0, 176, 195, 213, 214, 359, 376, 440,
	205, 206, 207, 208, 0, 0, 0, 350, 348, 123,
	172, 127, 134, 163, 211, 424, 168, 106, 194, 174,
	372, 375, 370, 371, 413, 414, 449, 450, 451, 431,
	367, 0, 373, 374, 0, 435, 124, 416, 90, 98,
	131, 209, 210, 0, 162, 117, 196, 394, 354, 397,
	0, 0, 0, 0, 0, 0, 0, 364, 365, 169,
	401, 0, 103, 444, 434, 0, 404, 446, 378, 393,
	454, 395, 396, 426, 362, 412, 153, 390, 91, 381,
	356, 387, 357, 379, 406, 115, 377, 436, 415, 129,
	452, 132, 420, 0, 175, 141, 0, 0, 408, 438,
	410, 432, 403, 427, 369, 419, 447, 391, 423, 448,
	0, 0, 0, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 422, 443, 389, 455, 425, 355,
	421, 0, 360, 363, 453, 441, 384, 385, 0, 0,
	0, 0, 0, 0, 0, 407, 411, 429, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 382, 0, 418,
	0, 0, 0, 366, 361, 0, 405, 0, 0, 0,
	368, 0, 383, 430, 0, 353, 433, 439, 402, 202,
	442, 399, 398, 160, 0, 107, 0, 181, 119, 392,
	130, 428, 445, 409, 437, 380, 388, 109, 386, 167,
	154, 193, 417, 155, 165, 133, 185, 161, 192, 203,
	204, 183, 201, 170, 99, 148, 89, 159, 166, 0,
	108, 0, 215, 216, 217, 218, 219, 220, 221, 92,
	182, 340, 105, 171, 95, 189, 178, 180, 139, 125,
	126, 173, 93, 94, 0, 164, 114, 158, 118, 113,
	151, 179, 142, 186, 187, 110, 212, 112, 111, 177,
	100, 199, 200, 97, 349, 198, 147, 152, 150, 197,
	184, 190, 140, 137, 0, 96, 188, 138, 136, 128,
	0, 116, 120, 156, 135, 157, 121, 144, 143, 145,
	0, 149, 122, 0, 0, 358, 0, 176, 195, 213,
	214, 359, 376, 440, 205, 206, 207, 208, 0, 0,
	0, 350, 348, 343, 342, 127, 134, 163, 211, 424,
	168, 106, 194, 174, 372, 375, 370, 371, 413, 414,
	449, 450, 451, 431, 367, 0, 373, 374, 0, 435,
	124, 416, 90, 98, 131, 209, 210, 0, 162, 117,
	196, 394, 354, 397, 0, 0, 0, 0, 0, 0,
	0, 364, 365, 169, 401, 153, 103, 91, 0, 0,
	273, 0, 0, 0, 115, 270, 0, 0, 129, 312,
	132, 0, 0, 175, 141, 0, 0, 0, 0, 303,
	304, 0, 0, 0, 0, 0, 0, 885, 0, 50,
	0, 0, 271, 291, 290, 293, 294, 295, 296, 0,
	0, 104, 292, 297, 298, 299, 886, 0, 0, 268,
	284, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 281, 282, 0, 0, 0, 0, 324, 0,
	283, 0, 0, 279, 280, 285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 322, 160, 0, 107, 0, 181, 119, 0, 130,
	0, 0, 0, 0, 0, 0, 109, 0, 167, 154,
	193, 0, 155, 165, 133, 185, 161, 192, 203, 204,
	183, 201, 170, 99, 148, 89, 159, 166, 0, 108,
	0, 215, 216, 217, 218, 219, 220, 221, 92, 182,
	191, 105, 171, 95, 189, 178, 180, 139, 125, 126,
	173, 93, 94, 0, 164, 114, 158, 118, 113, 151,
	179, 142, 186, 187, 110, 212, 112, 111, 177, 100,
	199, 200, 97, 101, 198, 147, 152, 150, 197, 184,
	190, 140, 137, 0, 96, 188, 138, 136, 128, 0,
	116, 120, 156, 135, 157, 121, 144, 143, 145, 0,
	149, 122, 0, 0, 0, 0, 176, 195, 213, 214,
	0, 0, 0, 205, 206, 207, 208, 0, 0, 0,
	146, 102, 123, 172, 127, 134, 163, 211, 0, 168,
	106, 194, 174, 313, 323, 319, 320, 317, 318, 316,
	315, 314, 325, 305, 306, 307, 308, 310, 0, 124,
	309, 90, 98, 131, 209, 210, 0, 162, 117, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	91, 821, 169, 273, 321, 103, 0, 115, 270, 0,
	0, 129, 312, 132, 0, 0, 175, 141, 0, 0,
	0, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 271, 291, 290, 293, 294,
	295, 296, 0, 0, 104, 292, 297, 298, 299, 0,
	0, 0, 268, 284, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 282, 264, 0, 0,
	0, 324, 0, 283, 0, 0, 279, 280, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 322, 160, 0, 107, 0, 181,
	119, 0, 130, 0, 0, 0, 0, 0, 0, 109,
	0, 167, 154, 193, 0, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 0, 0, 176,
	195, 213, 214, 0, 0, 0, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 0, 168, 106, 194, 174, 313, 323, 319, 320,
	317, 318, 316, 315, 314, 325, 305, 306, 307, 308,
	310, 0, 124, 309, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 0, 91, 0, 169, 273, 321, 103, 0,
	115, 270, 0, 0, 129, 312, 132, 0, 0, 175,
	141, 0, 0, 0, 0, 303, 304, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 504, 271, 291,
	290, 293, 294, 295, 296, 0, 0, 104, 292, 297,
	298, 299, 0, 0, 0, 268, 284, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 281, 282,
	0, 0, 0, 0, 324, 0, 283, 0, 0, 279,
	280, 285, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 0, 0, 322, 160, 0,
	107, 0, 181, 119, 0, 130, 0, 0, 0, 0,
	0, 0, 109, 0, 167, 154, 193, 0, 155, 165,
	133, 185, 161, 192, 203, 204, 183, 201, 170, 99,
	148, 89, 159, 166, 0, 108, 0, 215, 216, 217,
	218, 219, 220, 221, 92, 182, 191, 105, 171, 95,
	189, 178, 180, 139, 125, 126, 173, 93, 94, 0,
	164, 114, 158, 118, 113, 151, 179, 142, 186, 187,
	110, 212, 112, 111, 177, 100, 199, 200, 97, 101,
	198, 147, 152, 150, 197, 184, 190, 140, 137, 0,
	96, 188, 138, 136, 128, 0, 116, 120, 156, 135,
	157, 121, 144, 143, 145, 0, 149, 122, 0, 0,
	0, 0, 176, 195, 213, 214, 0, 0, 0, 205,
	206, 207, 208, 0, 0, 0, 146, 102, 123, 172,
	127, 134, 163, 211, 0, 168, 106, 194, 174, 313,
	323, 319, 320, 317, 318, 316, 315, 314, 325, 305,
	306, 307, 308, 310, 0, 124, 309, 90, 98, 131,
	209, 210, 0, 162, 117, 196, 0, 0, 0, 0,
	0, 0, 0, 0, 153, 0, 91, 0, 169, 273,
	321, 103, 0, 115, 270, 0, 0, 129, 312, 132,
	0, 0, 175, 141, 0, 0, 0, 0, 303, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 271, 291, 290, 293, 294, 295, 296, 0, 0,
	104, 292, 297, 298, 299, 0, 0, 0, 268, 284,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 282, 264, 0, 0, 0, 324, 0, 283,
	0, 0, 279, 280, 285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	322, 160, 0, 107, 0, 181, 119, 0, 130, 0,
	0, 0, 0, 0, 0, 109, 0, 167, 154, 193,
	0, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 101, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 0, 0, 176, 195, 213, 214, 0,
	0, 0, 205, 206, 207, 208, 0, 0, 0, 146,
	102, 123, 172, 127, 134, 163, 211, 0, 168, 106,
	194, 174, 313, 323, 319, 320, 317, 318, 316, 315,
	314, 325, 305, 306, 307, 308, 310, 0, 124, 309,
	90, 98, 131, 209, 210, 23, 162, 117, 196, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 91,
	0, 169, 273, 321, 103, 0, 115, 270, 0, 0,
	129, 312, 132, 0, 0, 175, 141, 0, 0, 0,
	0, 303, 304, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 271, 291, 290, 293, 294, 295,
	296, 0, 0, 104, 292, 297, 298, 299, 0, 0,
	0, 268, 284, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 281, 282, 0, 0, 0, 0,
	324, 0, 283, 0, 0, 279, 280, 285, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 322, 160, 0, 107, 0, 181, 119,
	0, 130, 0, 0, 0, 0, 0, 0, 109, 0,
	167, 154, 193, 0, 155, 165, 133, 185, 161, 192,
	203, 204, 183, 201, 170, 99, 148, 89, 159, 166,
	0, 108, 0, 215, 216, 217, 218, 219, 220, 221,
	92, 182, 191, 105, 171, 95, 189, 178, 180, 139,
	125, 126, 173, 93, 94, 0, 164, 114, 158, 118,
	113, 151, 179, 142, 186, 187, 110, 212, 112, 111,
	177, 100, 199, 200, 97, 101, 198, 147, 152, 150,
	197, 184, 190, 140, 137, 0, 96, 188, 138, 136,
	128, 0, 116, 120, 156, 135, 157, 121, 144, 143,
	145, 0, 149, 122, 0, 0, 0, 0, 176, 195,
	213, 214, 0, 0, 0, 205, 206, 207, 208, 0,
	0, 0, 146, 102, 123, 172, 127, 134, 163, 211,
	0, 168, 106, 194, 174, 313, 323, 319, 320, 317,
	318, 316, 315, 314, 325, 305, 306, 307, 308, 310,
	0, 124, 309, 90, 98, 131, 209, 210, 0, 162,
	117, 196, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 0, 91, 0, 169, 273, 321, 103, 0, 115,
	270, 0, 0, 129, 312, 132, 0, 0, 175, 141,
	0, 0, 0, 0, 303, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 271, 291, 290,
	293, 294, 295, 296, 0, 0, 104, 292, 297, 298,
	299, 0, 0, 0, 268, 284, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 281, 282, 0,
	0, 0, 0, 324, 0, 283, 0, 0, 279, 280,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 322, 160, 0, 107,
	0, 181, 119, 0, 130, 0, 0, 0, 0, 0,
	0, 109, 0, 167, 154, 193, 0, 155, 165, 133,
	185, 161, 192, 203, 204, 183, 201, 170, 99, 148,
	89, 159, 166, 0, 108, 0, 215, 216, 217, 218,
	219, 220, 221, 92, 182, 191, 105, 171, 95, 189,
	178, 180, 139, 125, 126, 173, 93, 94, 0, 164,
	114, 158, 118, 113, 151, 179, 142, 186, 187, 110,
	212, 112, 111, 177, 100, 199, 200, 97, 101, 198,
	147, 152, 150, 197, 184, 190, 140, 137, 0, 96,
	188, 138, 136, 128, 0, 116, 120, 156, 135, 157,
	121, 144, 143, 145, 0, 149, 122, 0, 0, 0,
	0, 176, 195, 213, 214, 0, 0, 0, 205, 206,
	207, 208, 0, 0, 0, 146, 102, 123, 172, 127,
	134, 163, 211, 0, 168, 106, 194, 174, 313, 323,
	319, 320, 317, 318, 316, 315, 314, 325, 305, 306,
	307, 308, 310, 0, 124, 309, 90, 98, 131, 209,
	210, 0, 162, 117, 196, 0, 0, 0, 0, 153,
	0, 91, 0, 0, 0, 0, 0, 169, 115, 321,
	103, 0, 129, 312, 132, 0, 0, 175, 141, 0,
	0, 0, 0, 303, 304, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 271, 291, 290, 293,
	294, 295, 296, 0, 0, 104, 292, 297, 298, 299,
	0, 0, 0, 0, 284, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 281, 282, 0, 0,
	0, 0, 324, 0, 283, 0, 0, 279, 280, 285,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 202, 0, 0, 322, 160, 0, 107, 0,
	181, 119, 0, 130, 0, 0, 0, 0, 0, 0,
	109, 0, 167, 154, 193, 1668, 155, 165, 133, 185,
	161, 192, 203, 204, 183, 201, 170, 99, 148, 89,
	159, 166, 0, 108, 0, 215, 216, 217, 218, 219,
	220, 221, 92, 182, 191, 105, 171, 95, 189, 178,
	180, 139, 125, 126, 173, 93, 94, 0, 164, 114,
	158, 118, 113, 151, 179, 142, 186, 187, 110, 212,
	112, 111, 177, 100, 199, 200, 97, 101, 198, 147,
	152, 150, 197, 184, 190, 140, 137, 0, 96, 188,
	138, 136, 128, 0, 116, 120, 156, 135, 157, 121,
	144, 143, 145, 0, 149, 122, 0, 0, 0, 0,
	176, 195, 213, 214, 0, 0, 0, 205, 206, 207,
	208, 0, 0, 0, 146, 102, 123, 172, 127, 134,
	163, 211, 0, 168, 106, 194, 174, 313, 323, 319,
	320, 317, 318, 316, 315, 314, 325, 305, 306, 307,
	308, 310, 0, 124, 309, 90, 98, 131, 209, 210,
	0, 162, 117, 196, 0, 0, 0, 0, 153, 0,
	91, 0, 0, 0, 0, 0, 169, 115, 321, 103,
	0, 129, 312, 132, 0, 0, 175, 141, 0, 0,
	0, 0, 303, 304, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 271, 291, 290, 293, 294,
	295, 296, 0, 0, 104, 292, 297, 298, 299, 0,
	0, 0, 0, 284, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 282, 0, 0, 0,
	0, 324, 0, 283, 0, 0, 279, 280, 285, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 322, 160, 0, 107, 0, 181,
	119, 0, 130, 0, 0, 0, 0, 0, 0, 109,
	0, 167, 154, 193, 0, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 0, 0, 176,
	195, 213, 214, 0, 0, 0, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 0, 168, 106, 194, 174, 313, 323, 319, 320,
	317, 318, 316, 315, 314, 325, 305, 306, 307, 308,
	310, 0, 124, 309, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 0, 0, 0, 0, 153, 0, 91,
	0, 0, 0, 0, 0, 169, 115, 321, 103, 0,
	129, 0, 132, 0, 0, 175, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	538, 537, 547, 548, 540, 541, 542, 543, 544, 545,
	546, 539, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	202, 0, 0, 0, 160, 0, 107, 0, 181, 119,
	0, 130, 0, 0, 0, 0, 0, 0, 109, 0,
	167, 154, 193, 0, 155, 165, 133, 185, 161, 192,
	203, 204, 183, 201, 170, 99, 148, 89, 159, 166,
	0, 108, 0, 215, 216, 217, 218, 219, 220, 221,
	92, 182, 191, 105, 171, 95, 189, 178, 180, 139,
	125, 126, 173, 93, 94, 0, 164, 114, 158, 118,
	113, 151, 179, 142, 186, 187, 110, 212, 112, 111,
	177, 100, 199, 200, 97, 101, 198, 147, 152, 150,
	197, 184, 190, 140, 137, 0, 96, 188, 138, 136,
	128, 0, 116, 120, 156, 135, 157, 121, 144, 143,
	145, 0, 149, 122, 0, 0, 0, 0, 176, 195,
	213, 214, 0, 0, 0, 205, 206, 207, 208, 0,
	0, 0, 146, 102, 123, 172, 127, 134, 163, 211,
	0, 168, 106, 194, 174, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 124, 0, 90, 98, 131, 209, 210, 0, 162,
	117, 196, 0, 0, 0, 0, 153, 0, 91, 0,
	526, 0, 0, 0, 169, 115, 550, 103, 0, 129,
	0, 132, 0, 0, 175, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 351, 0, 528, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 523, 522,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 160, 0, 107, 0, 181, 119, 0,
	130, 0, 0, 0, 0, 0, 0, 109, 0, 167,
	154, 193, 0, 155, 165, 133, 185, 161, 192, 203,
	204, 183, 201, 170, 99, 148, 89, 159, 166, 0,
	108, 0, 215, 216, 217, 218, 219, 220, 221, 92,
	182, 191, 105, 171, 95, 189, 178, 180, 139, 125,
	126, 173, 93, 94, 0, 164, 114, 158, 118, 113,
	151, 179, 142, 186, 187, 110, 212, 112, 111, 177,
	100, 199, 200, 97, 101, 198, 147, 152, 150, 197,
	184, 190, 140, 137, 0, 96, 188, 138, 136, 128,
	0, 116, 120, 156, 135, 157, 121, 144, 143, 145,
	0, 149, 122, 0, 0, 0, 0, 176, 195, 213,
	214, 0, 0, 0, 205, 206, 207, 208, 0, 0,
	0, 146, 102, 123, 172, 127, 134, 163, 211, 0,
	168, 106, 194, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 90, 98, 131, 209, 210, 0, 162, 117,
	196, 0, 153, 0, 91, 0, 643, 0, 0, 0,
	0, 115, 0, 169, 0, 129, 103, 132, 0, 0,
	175, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 645, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 160,
	0, 107, 0, 181, 119, 0, 130, 0, 0, 0,
	0, 0, 0, 109, 0, 167, 154, 193, 0, 155,
	165, 133, 185, 161, 192, 203, 204, 183, 201, 170,
	99, 148, 89, 159, 166, 0, 108, 0, 215, 216,
	217, 218, 219, 220, 221, 92, 182, 191, 105, 171,
	95, 189, 178, 180, 139, 125, 126, 173, 93, 94,
	0, 164, 114, 158, 118, 113, 151, 179, 142, 186,
	187, 110, 212, 112, 111, 177, 100, 199, 200, 97,
	101, 198, 147, 152, 150, 197, 184, 190, 140, 137,
	0, 96, 188, 138, 136, 128, 0, 116, 120, 156,
	135, 157, 121, 144, 143, 145, 0, 149, 122, 0,
	0, 0, 0, 176, 195, 213, 214, 0, 0, 0,
	205, 206, 207, 208, 0, 0, 0, 146, 102, 123,
	172, 127, 134, 163, 211, 0, 168, 106, 194, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 90, 98,
	131, 209, 210, 23, 162, 117, 196, 0, 0, 0,
	0, 0, 0, 0, 0, 153, 0, 91, 0, 169,
	0, 0, 103, 0, 115, 0, 0, 0, 129, 0,
	132, 0, 0, 175, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 0, 160, 0, 107, 0, 181, 119, 0, 130,
	0, 0, 0, 0, 0, 0, 109, 0, 167, 154,
	193, 0, 155, 165, 133, 185, 161, 192, 203, 204,
	183, 201, 170, 99, 148, 89, 159, 166, 0, 108,
	0, 215, 216, 217, 218, 219, 220, 221, 92, 182,
	191, 105, 171, 95, 189, 178, 180, 139, 125, 126,
	173, 93, 94, 0, 164, 114, 158, 118, 113, 151,
	179, 142, 186, 187, 110, 212, 112, 111, 177, 100,
	199, 200, 97, 101, 198, 147, 152, 150, 197, 184,
	190, 140, 137, 0, 96, 188, 138, 136, 128, 0,
	116, 120, 156, 135, 157, 121, 144, 143, 145, 0,
	149, 122, 0, 0, 0, 0, 176, 195, 213, 214,
	0, 0, 0, 205, 206, 207, 208, 0, 0, 0,
	146, 102, 123, 172, 127, 134, 163, 211, 0, 168,
	106, 194, 174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 124,
	0, 90, 98, 131, 209, 210, 23, 162, 117, 196,
	0, 0, 0, 0, 0, 0, 0, 0, 153, 0,
	91, 0, 169, 0, 0, 103, 0, 115, 0, 0,
	0, 129, 0, 132, 0, 0, 175, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 160, 0, 107, 0, 181,
	119, 0, 130, 0, 0, 0, 0, 0, 0, 109,
	0, 167, 154, 193, 0, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 0, 0, 176,
	195, 213, 214, 0, 0, 0, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 0, 168, 106, 194, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 0, 153, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 169, 0, 129, 103, 132,
	0, 0, 175, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 771, 0, 0, 772, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 160, 0, 107, 0, 181, 119, 0, 130, 0,
	0, 0, 0, 0, 0, 109, 0, 167, 154, 193,
	0, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 101, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 0, 0, 176, 195, 213, 214, 0,
	0, 0, 205, 206, 207, 208, 0, 0, 0, 146,
	102, 123, 172, 127, 134, 163, 211, 0, 168, 106,
	194, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	90, 98, 131, 209, 210, 0, 162, 117, 196, 0,
	153, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	663, 169, 0, 129, 103, 132, 0, 0, 175, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 351, 0, 662,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 160, 0, 107,
	0, 181, 119, 0, 130, 0, 0, 0, 0, 0,
	0, 109, 0, 167, 154, 193, 0, 155, 165, 133,
	185, 161, 192, 203, 204, 183, 201, 170, 99, 148,
	89, 159, 166, 0, 108, 0, 215, 216, 217, 218,
	219, 220, 221, 92, 182, 191, 105, 171, 95, 189,
	178, 180, 139, 125, 126, 173, 93, 94, 0, 164,
	114, 158, 118, 113, 151, 179, 142, 186, 187, 110,
	212, 112, 111, 177, 100, 199, 200, 97, 101, 198,
	147, 152, 150, 197, 184, 190, 140, 137, 0, 96,
	188, 138, 136, 128, 0, 116, 120, 156, 135, 157,
	121, 144, 143, 145, 0, 149, 122, 0, 0, 0,
	0, 176, 195, 213, 214, 0, 0, 0, 205, 206,
	207, 208, 0, 0, 0, 146, 102, 123, 172, 127,
	134, 163, 211, 0, 168, 106, 194, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 90, 98, 131, 209,
	210, 0, 162, 117, 196, 0, 153, 0, 91, 0,
	643, 0, 0, 0, 0, 115, 0, 169, 0, 129,
	103, 132, 0, 0, 175, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 645, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 160, 0, 107, 0, 181, 119, 0,
	130, 0, 0, 0, 0, 0, 0, 109, 0, 167,
	154, 193, 0, 641, 165, 133, 185, 161, 192, 203,
	204, 183, 201, 170, 99, 148, 89, 159, 166, 0,
	108, 0, 215, 216, 217, 218, 219, 220, 221, 92,
	182, 191, 105, 171, 95, 189, 178, 180, 139, 125,
	126, 173, 93, 94, 0, 164, 114, 158, 118, 113,
	151, 179, 142, 186, 187, 110, 212, 112, 111, 177,
	100, 199, 200, 97, 101, 198, 147, 152, 150, 197,
	184, 190, 140, 137, 0, 96, 188, 138, 136, 128,
	0, 116, 120, 156, 135, 157, 121, 144, 143, 145,
	0, 149, 122, 0, 0, 0, 0, 176, 195, 213,
	214, 0, 0, 0, 205, 206, 207, 208, 0, 0,
	0, 146, 102, 123, 172, 127, 134, 163, 211, 0,
	168, 106, 194, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 90, 98, 131, 209, 210, 0, 162, 117,
	196, 0, 153, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 169, 0, 129, 103, 132, 0, 0,
	175, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 160,
	0, 107, 0, 181, 119, 0, 130, 0, 0, 1371,
	0, 0, 0, 109, 0, 167, 154, 193, 0, 155,
	165, 133, 185, 161, 192, 203, 204, 183, 201, 170,
	99, 148, 89, 159, 166, 0, 108, 0, 215, 216,
	217, 218, 219, 220, 221, 92, 182, 191, 105, 171,
	95, 189, 178, 180, 139, 125, 126, 173, 93, 94,
	0, 164, 114, 158, 118, 113, 151, 179, 142, 186,
	187, 110, 212, 112, 111, 177, 100, 199, 200, 97,
	101, 198, 147, 152, 150, 197, 184, 190, 140, 137,
	0, 96, 188, 138, 136, 128, 0, 116, 120, 156,
	135, 157, 121, 144, 143, 145, 0, 149, 122, 0,
	0, 0, 0, 176, 195, 213, 214, 0, 0, 0,
	205, 206, 207, 208, 0, 0, 0, 146, 102, 123,
	172, 127, 134, 163, 211, 0, 168, 106, 194, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 90, 98,
	131, 209, 210, 0, 162, 117, 196, 0, 153, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 169,
	0, 129, 103, 132, 0, 0, 175, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 160, 0, 107, 0, 181,
	119, 0, 130, 0, 0, 0, 0, 0, 0, 109,
	0, 167, 154, 193, 0, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 0, 0, 176,
	195, 213, 214, 0, 0, 0, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 0, 168, 106, 194, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 0, 153, 0, 91, 0, 0, 0,
	0, 0, 1643, 115, 0, 169, 0, 129, 103, 132,
	0, 0, 175, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 160, 0, 107, 0, 181, 119, 0, 130, 0,
	0, 1265, 0, 0, 0, 109, 0, 167, 154, 193,
	0, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 101, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 0, 0, 176, 195, 213, 214, 0,
	0, 0, 205, 206, 207, 208, 0, 0, 0, 146,
	102, 123, 172, 127, 134, 163, 211, 0, 168, 106,
	194, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	90, 98, 131, 209, 210, 0, 162, 117, 196, 0,
	153, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 169, 0, 129, 103, 132, 0, 0, 175, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 160, 0, 107,
	0, 181, 119, 0, 130, 0, 0, 0, 0, 0,
	0, 109, 0, 167, 154, 193, 0, 155, 165, 133,
	185, 161, 192, 203, 204, 183, 201, 170, 99, 148,
	89, 159, 166, 0, 108, 0, 215, 216, 217, 218,
	219, 220, 221, 92, 182, 191, 105, 171, 95, 189,
	178, 180, 139, 125, 126, 173, 93, 94, 0, 164,
	114, 158, 118, 113, 151, 179, 142, 186, 187, 110,
	212, 112, 111, 177, 100, 199, 200, 97, 101, 198,
	147, 152, 150, 197, 184, 190, 140, 137, 0, 96,
	188, 138, 136, 128, 0, 116, 120, 156, 135, 157,
	121, 144, 143, 145, 0, 149, 122, 0, 0, 0,
	0, 176, 195, 213, 214, 0, 0, 0, 205, 206,
	207, 208, 0, 0, 0, 146, 102, 123, 172, 127,
	134, 163, 211, 0, 168, 106, 194, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 90, 98, 131, 209,
	210, 0, 162, 117, 196, 0, 153, 0, 91, 0,
	0, 0, 0, 0, 0, 115, 0, 169, 0, 129,
	103, 132, 0, 0, 175, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 645, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 160, 0, 107, 0, 181, 119, 0,
	130, 0, 0, 0, 0, 0, 0, 109, 0, 167,
	154, 193, 0, 155, 165, 133, 185, 161, 192, 203,
	204, 183, 201, 170, 99, 148, 89, 159, 166, 0,
	108, 0, 215, 216, 217, 218, 219, 220, 221, 92,
	182, 191, 105, 171, 95, 189, 178, 180, 139, 125,
	126, 173, 93, 94, 0, 164, 114, 158, 118, 113,
	151, 179, 142, 186, 187, 110, 212, 112, 111, 177,
	100, 199, 200, 97, 101, 198, 147, 152, 150, 197,
	184, 190, 140, 137, 0, 96, 188, 138, 136, 128,
	0, 116, 120, 156, 135, 157, 121, 144, 143, 145,
	0, 149, 122, 0, 0, 0, 0, 176, 195, 213,
	214, 0, 0, 0, 205, 206, 207, 208, 0, 0,
	0, 146, 102, 123, 172, 127, 134, 163, 211, 0,
	168, 106, 194, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 90, 98, 131, 209, 210, 0, 162, 117,
	196, 0, 153, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 169, 0, 129, 103, 132, 0, 0,
	175, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 351,
	0, 528, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 202, 0, 0, 0, 160,
	0, 107, 0, 181, 119, 0, 130, 0, 0, 0,
	0, 0, 0, 109, 0, 167, 154, 193, 0, 155,
	165, 133, 185, 161, 192, 203, 204, 183, 201, 170,
	99, 148, 89, 159, 166, 0, 108, 0, 215, 216,
	217, 218, 219, 220, 221, 92, 182, 191, 105, 171,
	95, 189, 178, 180, 139, 125, 126, 173, 93, 94,
	0, 164, 114, 158, 118, 113, 151, 179, 142, 186,
	187, 110, 212, 112, 111, 177, 100, 199, 200, 97,
	101, 198, 147, 152, 150, 197, 184, 190, 140, 137,
	0, 96, 188, 138, 136, 128, 0, 116, 120, 156,
	135, 157, 121, 144, 143, 145, 0, 149, 122, 0,
	0, 0, 0, 176, 195, 213, 214, 0, 0, 0,
	205, 206, 207, 208, 0, 0, 0, 146, 102, 123,
	172, 127, 134, 163, 211, 0, 168, 106, 194, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 90, 98,
	131, 209, 210, 0, 162, 117, 196, 0, 153, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 169,
	0, 129, 103, 132, 0, 0, 175, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 160, 0, 107, 0, 181,
	119, 0, 130, 0, 0, 0, 0, 0, 0, 109,
	0, 167, 154, 193, 0, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 0, 0, 176,
	195, 213, 214, 0, 0, 0, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 731, 168, 106, 194, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 0, 153, 0, 91, 0, 0, 0,
	0, 0, 621, 115, 0, 169, 0, 129, 103, 132,
	0, 0, 175, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 160, 0, 107, 0, 181, 119, 0, 130, 0,
	0, 0, 0, 0, 0, 109, 0, 167, 154, 193,
	0, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 101, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 0, 0, 176, 195, 213, 214, 0,
	0, 0, 205, 206, 207, 208, 0, 0, 0, 146,
	102, 123, 172, 127, 134, 163, 211, 0, 168, 106,
	194, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	90, 98, 131, 209, 210, 0, 162, 117, 196, 335,
	0, 0, 0, 0, 0, 0, 153, 0, 91, 0,
	0, 169, 0, 0, 103, 115, 0, 0, 0, 129,
	0, 132, 0, 0, 175, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 0, 160, 0, 107, 0, 181, 119, 0,
	130, 0, 0, 0, 0, 0, 0, 109, 0, 167,
	154, 193, 0, 155, 165, 133, 185, 161, 192, 203,
	204, 183, 201, 170, 99, 148, 89, 159, 166, 0,
	108, 0, 215, 216, 217, 218, 219, 220, 221, 92,
	182, 191, 105, 171, 95, 189, 178, 180, 139, 125,
	126, 173, 93, 94, 0, 164, 114, 158, 118, 113,
	151, 179, 142, 186, 187, 110, 212, 112, 111, 177,
	100, 199, 200, 97, 101, 198, 147, 152, 150, 197,
	184, 190, 140, 137, 0, 96, 188, 138, 136, 128,
	0, 116, 120, 156, 135, 157, 121, 144, 143, 145,
	0, 149, 122, 0, 0, 0, 0, 176, 195, 213,
	214, 0, 0, 0, 205, 206, 207, 208, 0, 0,
	0, 146, 102, 123, 172, 127, 134, 163, 211, 0,
	168, 106, 194, 174, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	124, 0, 90, 98, 131, 209, 210, 0, 162, 117,
	196, 0, 153, 0, 91, 0, 0, 0, 0, 0,
	0, 115, 0, 169, 0, 129, 103, 132, 0, 0,
	175, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 202, 0, 0, 0, 160,
	0, 107, 0, 181, 119, 0, 130, 0, 0, 0,
	0, 0, 0, 109, 0, 167, 154, 193, 0, 155,
	165, 133, 185, 161, 192, 203, 204, 183, 201, 170,
	99, 148, 89, 159, 166, 0, 108, 0, 215, 216,
	217, 218, 219, 220, 221, 92, 182, 191, 105, 171,
	95, 189, 178, 180, 139, 125, 126, 173, 93, 94,
	0, 164, 114, 158, 118, 113, 151, 179, 142, 186,
	187, 110, 212, 112, 111, 177, 100, 199, 200, 97,
	101, 198, 147, 152, 150, 197, 184, 190, 140, 137,
	0, 96, 188, 138, 136, 128, 0, 116, 120, 156,
	135, 157, 121, 144, 143, 145, 0, 149, 122, 0,
	0, 0, 0, 176, 195, 213, 214, 0, 0, 0,
	205, 206, 207, 208, 0, 0, 0, 146, 102, 123,
	172, 127, 134, 163, 211, 0, 168, 106, 194, 174,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 124, 0, 90, 98,
	131, 209, 210, 0, 162, 117, 196, 0, 153, 0,
	91, 0, 0, 0, 0, 0, 0, 115, 0, 169,
	0, 129, 103, 132, 0, 0, 175, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 202, 0, 0, 0, 160, 0, 107, 0, 181,
	119, 0, 130, 0, 0, 0, 0, 0, 0, 109,
	0, 167, 154, 193, 0, 155, 165, 133, 185, 161,
	192, 203, 204, 183, 201, 170, 99, 148, 89, 159,
	166, 0, 108, 0, 215, 216, 217, 218, 219, 220,
	221, 92, 182, 191, 105, 171, 95, 189, 178, 180,
	139, 125, 126, 173, 93, 94, 0, 164, 114, 158,
	118, 113, 151, 179, 142, 186, 187, 110, 212, 112,
	111, 177, 100, 199, 200, 97, 101, 198, 147, 152,
	150, 197, 184, 190, 140, 137, 0, 96, 188, 138,
	136, 128, 0, 116, 120, 156, 135, 157, 121, 144,
	143, 145, 0, 149, 122, 0, 0, 0, 0, 176,
	195, 213, 214, 0, 0, 0, 205, 206, 207, 208,
	0, 0, 0, 146, 102, 123, 172, 127, 134, 163,
	211, 0, 168, 106, 194, 174, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 124, 0, 90, 98, 131, 209, 210, 0,
	162, 117, 196, 0, 153, 0, 91, 0, 0, 0,
	0, 0, 0, 115, 0, 169, 0, 129, 103, 132,
	0, 0, 175, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	0, 160, 0, 107, 0, 181, 119, 0, 130, 0,
	0, 0, 0, 0, 0, 109, 0, 167, 154, 193,
	0, 155, 165, 133, 185, 161, 192, 203, 204, 183,
	201, 170, 99, 148, 89, 159, 166, 0, 108, 0,
	215, 216, 217, 218, 219, 220, 221, 92, 182, 191,
	105, 171, 95, 189, 178, 180, 139, 125, 126, 173,
	93, 94, 0, 164, 114, 158, 118, 113, 151, 179,
	142, 186, 187, 110, 212, 112, 111, 177, 100, 199,
	200, 97, 101, 198, 147, 152, 150, 197, 184, 190,
	140, 137, 0, 96, 188, 138, 136, 128, 0, 116,
	120, 156, 135, 157, 121, 144, 143, 145, 0, 149,
	122, 0, 0, 0, 0, 176, 195, 213, 214, 0,
	0, 0, 205, 206, 207, 208, 0, 0, 0, 146,
	102, 123, 172, 127, 134, 163, 211, 0, 168, 106,
	194, 174, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 0,
	90, 98, 131, 209, 210, 0, 162, 117, 196, 0,
	153, 0, 91, 0, 0, 0, 0, 0, 0, 115,
	0, 169, 0, 129, 103, 132, 0, 0, 175, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 202, 0, 0, 0, 160, 0, 107,
	0, 181, 119, 0, 130, 0, 0, 0, 0, 0,
	0, 109, 0, 167, 154, 193, 0, 155, 165, 133,
	185, 161, 192, 203, 204, 183, 201, 170, 99, 148,
	89, 159, 166, 0, 108, 0, 215, 216, 217, 218,
	219, 220, 221, 92, 182, 191, 105, 171, 95, 189,
	178, 180, 139, 125, 126, 173, 93, 94, 0, 164,
	114, 158, 118, 113, 151, 179, 142, 186, 187, 110,
	212, 112, 111, 177, 100, 199, 200, 97, 101, 198,
	147, 152, 150, 197, 184, 190, 140, 137, 0, 96,
	188, 138, 136, 128, 0, 116, 120, 156, 135, 157,
	121, 144, 143, 145, 0, 149, 122, 0, 0, 0,
	0, 176, 195, 213, 214, 0, 0, 0, 205, 206,
	207, 208, 0, 0, 0, 146, 102, 123, 172, 127,
	134, 163, 211, 0, 168, 106, 194, 174, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 124, 0, 90, 98, 131, 209,
	210, 0, 162, 117, 196, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 0, 0,
	103,
}

var yyPact = [...]int{
	2217, -1000, -209, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1325, 1371, -1000, -1000, -1000, -1000, -1000, -1000, 1156,
	540, 299, 347, 236, 13454, 346, 1849, 14006, -1000, 153,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1101, -1000, -1000,
	-1000, -1000, -1000, 1320, 1333, 1115, 1298, 1219, -1000, 7336,
	298, 11792, 13178, 6198, -1000, 938, -193, 309, 13730, 295,
	295, 13730, 295, -1000, -49, 340, 14006, -1000, 14006, 286,
	921, 286, 286, 286, 14006, -1000, 395, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14006, 894, 1250, 512, 4070, 4070, 4070, 4070,
	188, 4070, -18, 1168, -1000, -1000, -1000, -1000, 4070, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 811,
	1256, 7902, 7902, 1325, -1000, 1101, -1000, -1000, -1000, 1246,
	-1000, -1000, 612, 1348, -1000, 9018, 392, -1000, 7902, 79,
	1095, -1000, -1000, 1095, -1000, -1000, 382, -1000, -1000, 8460,
	8460, 8460, 8460, 8460, 8460, 8460, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1095, -1000, 7619, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
	1095, 7902, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095,
	1095, 1747, 1095, 1095, 1095, 1095, 12896, 1063, 1383, -1000,
	-1000, -1000, 1292, 9860, 10688, 14006, 1043, -1000, 1084, 5894,
	21, -1000, -1000, -1000, 537, 10412, -1000, -1000, -1000, 1249,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1008, -1000, 2702, 337,
	-1000, -1000, 14006, 1158, 884, 566, 881, 1167, 14006, -1000,
	12620, 4070, 306, 14006, 1271, 1166, 14006, 879, 865, -1000,
	5590, -1000, 4070, 4070, 4070, 4070, 4070, 4070, 4070, 4070,
	-1000, -1000, -1000, -1000, -1000, -1000, 4070, 4070, -1000, 48,
	-1000, 14006, -1000, -1000, -1000, -1000, 1366, 435, 753, 391,
	1091, -1000, 564, 1320, 811, 1219, 10136, 1178, -1000, -1000,
	14006, -1000, 7902, 7902, 803, -1000, 12344, -1000, -1000, 4374,
	441, 8460, 784, 526, 8460, 8460, 8460, 8460, 8460, 8460,
	8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 8460, 747,
	1747, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 862,
	-1000, 1101, 830, 830, 14, 14, 14, 14, 14, 14,
	8739, 6770, 811, 996, 549, 7619, 7336, 7336, 7902, 7902,
	14282, 14282, 7336, 1299, 554, 549, 14282, -1000, 811, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 99, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7336, 7336, 7336, 7336,
	216, 14006, -1000, 14282, 11792, 11792, 11792, 11792, 11792, -1000,
	1203, 1199, -1000, 1186, 1182, 1190, 14006, -1000, 993, 9860,
	376, 1095, -1000, 12068, -1000, -1000, 216, 1064, 11792, 14006,
	-1000, -1000, 5286, 1084, 21, 1082, -1000, -6, -25, 6487,
	418, -1000, -1000, -1000, -1000, 3462, 808, 225, -128, 41,
	-1000, -1000, -1000, -1000, 1123, -1000, 1123, 244, 1123, 1123,
	1123, -1000, 1123, 1123, 89, 89, 89, 89, 89, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1155, 1152, -1000, 1123,
	1123, 1123, -1000, 1123, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1139, 266, 1139, 1124, 1124, -1000,
	-1000, 13730, 1291, -121, 859, 4070, 1269, 4070, 14006, -1000,
	984, 14006, -1000, 14006, -1000, -1000, 14006, 4070, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 518, -1000, -1000, -1000, -1000, 1227, 7902,
	7902, 4982, 7902, -1000, -1000, -1000, 1256, -1000, 1299, 1324,
	-1000, 1240, 1238, 7336, -1000, -1000, 441, 497, -1000, -1000,
	759, -1000, -1000, -1000, -1000, 373, 1095, -1000, 664, -1000,
	-1000, -1000, -1000, 784, 8460, 8460, 8460, 481, 664, 1763,
	341, 163, 14, 42, 42, 12, 12, 12, 12, 12,
	685, 685, -1000, -1000, -1000, -1000, 811, -1000, -1000, -1000,
	811, 7336, 1083, -1000, -1000, 7902, -1000, 811, 987, 987,
	594, 779, 1079, -1000, 371, 1078, 987, 7336, 576, -1000,
	7902, 811, -1000, -1000, 987, 811, 987, 987, 1026, 1095,
	-1000, 1074, -1000, 531, 1383, 1150, 1165, 1258, -1000, -1000,
	-1000, -1000, 1194, -1000, 1180, -1000, -1000, -1000, -1000, -1000,
	333, 327, 311, 13730, -1000, 1343, 11792, 1060, -1000, -1000,
	1082, 21, -28, -1000, -1000, -1000, -1000, 549, -1000, -1000,
	848, 1081, 3150, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1146, 704, 13730, 261, 272, 356, 344, 839, -1000,
	-1000, -1000, 638, -1000, 13730, 1363, -1000, -1000, 259, -1000,
	258, 551, 810, 14006, 104, 1145, 1127, -1000, -212, -1000,
	38, -1000, -1000, 789, 89, 89, 1123, 89, 89, 89,
	-1000, -1000, 418, 1248, 418, 418, 418, 418, 807, 807,
	-133, -133, -1000, -1000, -1000, 772, 1139, -1000, -1000, -1000,
	764, -1000, 1138, 1101, -1000, 4678, -1000, -1000, -1000, -1000,
	-1000, 1290, -1000, 1111, 1937, 547, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 213, 343, -1000,
	4070, -1000, 514, 14006, 14006, 1213, 549, 549, 369, -1000,
	-1000, 14006, -1000, -1000, -1000, -1000, 1053, -1000, -1000, -1000,
	3766, 7336, -1000, 481, 664, 32, -1000, 8460, 8460, -1000,
	-1000, 987, 7336, 549, -1000, -1000, -1000, 1245, 747, 1245,
	8460, 8460, 4982, 8460, 8460, -79, 1058, 513, -1000, 7902,
	768, -1000, -1000, -1000, -1000, -1000, 1164, 14282, 1095, -1000,
	9577, 13730, 1325, 14282, 7902, 7902, -1000, -1000, 7902, 1131,
	-1000, 7902, -1000, -1000, -1000, 1095, 1095, 1095, 964, -1000,
	1325, 1060, -1000, -1000, -1000, -21, 7, -1000, -1000, 3462,
	-1000, 3462, 11516, -1000, 1353, 1314, 240, 284, -1000, 837,
	827, -1000, 821, -1000, -27, -1000, -192, 81, 56, -1000,
	-1000, 1095, -1000, 1130, 1289, -1000, 1253, 742, -1000, 1105,
	-202, -1000, -1000, -1000, -1000, -1000, -1000, 1095, 1128, 1126,
	-1000, 1125, -1000, -1000, -1000, 1009, 418, 418, 89, 418,
	418, 418, -1000, 500, -1000, -1000, -1000, -1000, 977, -1000,
	973, -1000, 110, 109, -1000, 1080, -1000, 971, 14006, 13730,
	-1000, 1075, -1000, 521, 1311, 170, -1000, 270, -1000, 13730,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13730, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14006, -1000, -1000, -1000, -1000, -1000, 13730, 274, -1000, -1000,
	805, 7902, -1000, -1000, -1000, 4678, -1000, 1343, 11792, -1000,
	-1000, 811, -1000, 8460, 664, 664, -1000, -1000, 811, 1123,
	1123, -1000, 1123, 1124, -1000, -1000, 1123, 141, 1123, 117,
	811, 811, 149, 414, -1000, 95, 283, 1095, -56, -1000,
	549, 7902, -1000, 1247, 1021, 1042, -1000, -1000, 7053, 811,
	969, 366, 964, 1320, -1000, 549, 549, 549, 10964, 549,
	10964, 10964, 10964, 9294, 13730, 1320, -1000, -1000, -1000, -1000,
	3150, -1000, 952, -1000, 1123, 1123, 339, 339, -197, 256,
	238, -1000, -1000, -1000, -1000, -193, -1000, -1000, 551, -1000,
	7902, 10964, -180, -1000, 1070, 1002, 776, -1000, 132, 811,
	-1000, 737, -1000, 635, 981, -1000, -1000, -1000, 418, -1000,
	-1000, -1000, -1000, -1000, 89, 800, 89, 31, 25, 731,
	-1000, 709, 1068, 1162, 4678, 3462, 301, 1425, -1000, -1000,
	13730, -1000, -1000, -1000, 1122, -1000, -1000, -1000, -1000, 1261,
	13730, -1000, -1000, 549, 1339, 1051, -1000, 664, -1000, -1000,
	239, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	8460, 8460, -1000, 8460, 8460, 8460, 811, 796, 549, 235,
	-1000, 1095, -1000, -1000, 1073, 13730, 13730, -1000, -1000, 950,
	-1000, -1000, 936, 936, 936, 376, -1000, -1000, 741, 11516,
	1282, -1000, 620, -1000, -1000, 573, 174, 606, -1000, 13730,
	-193, -1000, 1095, 609, 934, 1116, 692, -1000, 965, 94,
	-133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 418, -1000,
	418, -1000, -1000, 953, 947, 11516, 13730, 14006, -1000, -1000,
	13730, -1000, -1000, -1000, -1000, -1000, 1113, 10964, 1095, 279,
	1336, 1330, -1000, -1000, 215, 215, 215, 215, 119, -1000,
	-1000, 1360, -1000, 1095, -1000, 1101, 364, -1000, 13730, -1000,
	-1000, -1000, -1000, -1000, 1076, 1159, 98, -1000, 817, 515,
	795, 507, 486, 456, 455, 452, 451, 450, -1000, -1000,
	-1000, 1359, -1000, -1000, -1000, 1355, 1109, -1000, 1107, 7902,
	176, -1000, -1000, 929, 909, -1000, -1000, -1000, -1000, -1000,
	-1000, 932, 1104, 1102, 962, -1000, 11516, 928, 206, 234,
	-1000, 7902, 7902, -1000, -1000, -1000, -1000, 811, 159, -144,
	14282, 1042, 811, 13730, -1000, -1000, 13730, -1000, -137, 1159,
	13730, -1000, 690, -1000, -1000, 683, 681, 683, 683, 683,
	683, 683, 339, 339, 13730, 11516, 609, -1000, -74, 511,
	-1000, -1000, -200, 11516, 11516, -104, 13730, 7902, 925, 1158,
	908, -1000, 13730, 1100, 549, 1035, -1000, 1210, -82, -153,
	985, -1000, -1000, 1095, 899, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 551, 551, 893,
	891, -1000, -1000, -1000, 140, 735, 655, 637, 632, -26,
	-1000, 1329, 1343, 1099, 876, 873, -1000, -206, -1000, 549,
	-1000, -121, -1000, 206, 1237, 11516, -1000, 1207, -1000, 13730,
	-1000, 1159, -1000, -1000, 269, 741, 629, -1000, 626, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11240, 741, 10964, 1343,
	741, 7902, -1000, -1000, 200, 869, -131, 811, -1000, 14006,
	1076, -1000, -1000, -1000, 358, 1076, 847, 741, -1000, 549,
	195, -1000, -145, -1000, 1096, -1000, 4678, -1000, -1000, -1000,
	1095, -156, 13730, -1000, 8181, -1000, 844, 215, 811, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1603, 36, 884, 1602, 1601, 1600, 1599, 1597, 1596,
	1595, 1594, 1593, 1591, 1590, 1589, 1585, 1581, 1579, 1578,
	1577, 1570, 1569, 1568, 337, 1567, 1565, 1564, 76, 1563,
	82, 1559, 1557, 53, 158, 54, 52, 1259, 1556, 39,
	121, 116, 1555, 61, 1554, 1546, 93, 1543, 95, 1542,
	1541, 122, 1539, 1537, 23, 5, 1534, 45, 1532, 1531,
	78, 2, 1530, 1529, 1525, 1524, 1522, 1519, 66, 17,
	10, 19, 24, 1516, 74, 22, 1515, 60, 1510, 1509,
	1508, 1507, 47, 1506, 68, 21, 40, 65, 1505, 13,
	1504, 80, 50, 33, 12, 92, 70, 1503, 49, 71,
	59, 1502, 1501, 686, 1499, 1498, 1496, 1495, 1494, 1493,
	796, 697, 1490, 1489, 1488, 75, 0, 331, 32, 91,
	1487, 55, 1486, 1948, 83, 86, 31, 1483, 43, 222,
	56, 1480, 1479, 51, 81, 1478, 98, 94, 1477, 1476,
	1475, 1474, 1473, 1091, 46, 29, 11, 1472, 1470, 1469,
	18, 57, 34, 58, 73, 1468, 1464, 1461, 41, 1460,
	15, 25, 3, 67, 1459, 1458, 1456, 1455, 42, 28,
	1452, 20, 16, 4, 27, 6, 1451, 1450, 1448, 1,
	1444, 26, 1443, 7, 1439, 8, 1438, 1437, 1412, 1408,
	1407, 1406, 1404, 1403, 1398, 1394, 14, 9, 48, 30,
	44, 1391, 1389, 1409, 977, 1388, 1387, 1378, 1377, 97,
}

var yyR1 = [...]int{
	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 205,
	205, 46, 46, 91, 91, 10, 10, 10, 10, 96,
	96, 100, 100, 100, 101, 101, 101, 101, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 187,
	187, 187, 188, 188, 188, 188, 188, 188, 190, 190,
	191, 191, 121, 121, 185, 185, 184, 183, 183, 182,
	182, 181, 192, 192, 16, 165, 166, 166, 166, 166,
	166, 154, 135, 135, 135, 135, 135, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 198, 198,
	198, 199, 199, 199, 199, 199, 199, 199, 199, 194,
	194, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 144, 144, 144, 144, 144,
	144, 193, 193, 189, 189, 189, 189, 189, 139, 139,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	138, 138, 138, 138, 138, 138, 138, 138, 140, 140,
	140, 140, 140, 140, 140, 140, 136, 136, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 142, 142, 142, 142, 142, 142, 142, 142, 153,
	153, 143, 143, 151, 151, 152, 152, 152, 150, 150,
	150, 147, 147, 148, 148, 149, 149, 149, 145, 145,
	145, 146, 146, 146, 156, 174, 174, 174, 176, 176,
	177, 177, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 164, 164, 200, 200, 173, 173, 173,
	170, 170, 170, 170, 170, 170, 170, 170, 163, 163,
	172, 172, 171, 171, 158, 158, 158, 158, 158, 159,
	160, 160, 160, 160, 157, 196, 196, 196, 197, 197,
	161, 161, 162, 162, 167, 167, 167, 168, 168, 168,
	169, 169, 169, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 206, 206, 207, 207,
	207, 207, 207, 207, 207, 180, 178, 178, 179, 179,
	13, 14, 14, 14, 14, 14, 15, 15, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 108, 108, 105, 105, 106, 106, 107, 107,
	107, 109, 109, 109, 132, 132, 132, 19, 19, 21,
	21, 22, 23, 20, 20, 20, 20, 20, 208, 24,
	25, 25, 26, 26, 26, 30, 30, 30, 28, 28,
	29, 29, 35, 35, 34, 34, 36, 36, 36, 36,
	120, 120, 120, 119, 119, 38, 38, 39, 39, 40,
	40, 41, 41, 41, 53, 53, 89, 89, 89, 92,
	92, 42, 42, 42, 42, 43, 43, 44, 44, 45,
	45, 127, 127, 126, 126, 126, 125, 125, 47, 47,
	47, 49, 48, 48, 48, 48, 50, 50, 52, 52,
	51, 51, 54, 54, 54, 54, 55, 55, 90, 90,
	37, 37, 37, 37, 37, 37, 37, 104, 104, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 209, 209, 66, 66, 66, 66, 31, 31, 31,
	31, 31, 130, 130, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 134, 134,
	134, 134, 134, 134, 134, 78, 78, 32, 32, 76,
	76, 77, 79, 79, 75, 75, 75, 60, 60, 60,
	60, 60, 60, 60, 60, 62, 62, 62, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 85, 85, 85,
	86, 86, 86, 86, 87, 87, 87, 59, 59, 59,
	59, 59, 59, 88, 88, 88, 88, 93, 93, 70,
	70, 72, 72, 71, 73, 94, 94, 98, 95, 95,
	99, 99, 99, 99, 97, 97, 97, 122, 122, 122,
	102, 102, 110, 110, 111, 111, 103, 103, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 113, 113,
	113, 114, 114, 117, 117, 118, 118, 123, 123, 124,
	124, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 203, 204, 128,
	129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 14, 13, 14, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	2, 4, 4, 2, 2, 3, 2, 3, 2, 7,
	8, 3, 3, 6, 5, 8, 7, 4, 2, 4,
	6, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 0, 4, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 2, 4, 6, 2, 3, 2, 3, 1,
	3, 0, 2, 0, 3, 3, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 3, 2, 2, 2, 2, 1, 1, 1, 3,
	3, 2, 1, 2, 1, 1, 1, 1, 4, 4,
	4, 4, 4, 1, 5, 2, 2, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 6, 0, 1, 4, 1, 2,
	1, 3, 2, 3, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 1, 1, 0, 2, 5,
	2, 3, 3, 2, 3, 2, 3, 4, 1, 1,
	1, 3, 3, 2, 2, 5, 5, 8, 8, 13,
	1, 1, 2, 2, 10, 0, 1, 1, 0, 3,
	0, 1, 1, 3, 0, 1, 3, 1, 2, 3,
	1, 1, 1, 6, 11, 13, 7, 7, 7, 12,
	7, 7, 7, 4, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 7, 1, 3, 8, 8,
	5, 4, 6, 5, 4, 4, 3, 2, 3, 4,
	4, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	3, 4, 3, 6, 4, 2, 4, 2, 2, 2,
	2, 3, 1, 1, 0, 1, 0, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 0, 2,
	0, 2, 1, 2, 2, 0, 1, 1, 0, 1,
	0, 1, 0, 1, 1, 3, 1, 2, 3, 5,
	0, 1, 2, 1, 1, 0, 2, 1, 3, 1,
	1, 1, 3, 3, 3, 7, 1, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 0, 2, 0, 4,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 0, 2, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 1, 2, 1, 2, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 0, 1, 0, 2, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 0, 3,
	0, 2, 0, 3, 1, 3, 2, 0, 1, 1,
	0, 2, 4, 4, 0, 2, 4, 2, 1, 3,
	5, 4, 6, 1, 3, 3, 5, 0, 5, 1,
	3, 1, 2, 3, 1, 1, 3, 3, 1, 3,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 1,
}

var yyChk = [...]int{
	-1000, -201, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 171, 172,
	174, 175, 25, 137, 138, 141, 142, -203, 8, 275,
	52, -202, 309, -82, 15, -26, 5, -24, -208, -24,
	-24, -24, -24, -24, -165, 52, -121, -192, 151, 267,
	118, 133, 119, 134, 70, -103, 121, 123, 119, 119,
	120, 121, 267, 118, 119, -51, -123, 55, -116, 158,
	284, 20, 171, 184, 185, 176, 217, 205, 285, 156,
	202, 206, 254, 308, 64, 174, 263, 127, 162, 139,
	197, 200, 199, 191, 188, 27, 223, 291, 190, 130,
	224, 228, 234, 255, 282, 181, 182, 257, 221, 31,
	132, 286, 33, 147, 258, 226, 220, 215, 219, 180,
	214, 37, 194, 230, 229, 231, 253, 208, 157, 233,
	210, 192, 209, 18, 142, 145, 225, 227, 189, 159,
	125, 149, 290, 259, 187, 146, 160, 141, 262, 305,
	155, 175, 256, 183, 265, 36, 239, 201, 178, 193,
	179, 129, 172, 153, 212, 148, 195, 196, 218, 177,
	213, 173, 150, 143, 264, 240, 292, 211, 207, 203,
	204, 154, 121, 151, 152, 246, 247, 248, 249, 287,
	288, 260, 198, 241, 242, 164, 165, 166, 167, 168,
	169, 170, 119, 106, 206, 112, 244, 120, 31, 149,
	-132, 119, -105, 152, 246, 247, 248, 249, 55, 256,
	255, 250, -123, 173, -128, -128, -128, -128, -128, -2,
	-86, 17, 16, -5, -3, -203, 6, 20, 21, -30,
	38, 39, -25, -36, 97, -37, -123, -56, 72, -61,
	28, 55, -116, 23, -60, -57, -75, -73, -74, 106,
	107, 95, 96, 103, 73, 108, -65, -63, -64, -66,
	57, 56, 65, 58, 59, 60, 61, 66, 67, 68,
	-117, -71, -203, 42, 43, 276, 277, 278, 279, 283,
	280, 75, 32, 266, 274, 273, 272, 270, 271, 268,
	269, 307, 124, 267, 101, 275, -103, -39, -40, -41,
	-42, -53, -74, -203, -51, 11, -46, -51, -95, -131,
	173, -99, 256, 255, -118, -97, -117, -115, 254, 206,
	253, 55, -116, 117, 294, 71, 22, 24, 237, 243,
	74, 106, 16, 75, 303, 304, 105, 276, 112, 46,
	268, 269, 266, 278, 279, 267, 244, 28, 10, 25,
	137, 21, 99, 114, 78, 79, 140, 23, 138, 68,
	19, 49, 131, 11, 293, 13, 14, 295, 124, 123,
	90, 306, 120, 44, 8, 108, 26, 87, 40, 135,
	42, 88, 17, 270, 271, 30, 283, 144, 101, 47,
	34, 72, 66, 50, 261, 70, 15, 45, 133, 89,
	115, 275, 43, 118, 6, 281, 29, 136, 41, 119,
	245, 77, 122, 67, 5, 134, 9, 48, 51, 272,
	273, 274, 32, 76, 12, 69, -166, -154, 55, -196,
	303, 304, 121, -117, -111, 124, -111, -117, -111, 275,
	119, -51, -51, -110, 124, 55, -110, -110, -110, -51,
	109, -51, 55, 29, 267, 55, 149, 119, 150, 121,
	-129, -203, -118, -129, -129, -129, 153, 154, -129, -106,
	251, 50, -129, -204, 54, -87, 19, 30, -37, -123,
	-83, -84, -37, -82, -2, -24, 34, -28, 21, 63,
	11, -120, 71, 70, 87, -119, 22, -117, 57, 109,
	-37, -58, 90, 72, 88, 89, 74, 92, 91, 102,
	95, 96, 97, 98, 99, 100, 101, 93, 94, 105,
	307, 80, 81, 82, 83, 84, 85, 86, -104, -203,
	-74, -203, 110, 111, -61, -61, -61, -61, -61, -61,
	-61, -203, -2, -69, -37, -203, -203, -203, -203, -203,
	-203, -203, -203, -203, -78, -37, -203, -209, -203, -209,
	-209, -209, -209, -209, -209, -209, -134, 106, 206, 139,
	197, -137, -136, 212, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 205, 285, -203, -203, -203, -203,
	-52, 26, -51, 29, 53, -47, -49, -48, -50, 40,
	44, 46, 41, 42, 43, 47, -127, 22, -39, -203,
	-126, 145, -125, 22, -123, 57, -51, -46, -205, 53,
	11, 51, 53, -95, 173, -96, -100, 257, 259, 80,
	-122, -117, 57, 28, 29, 54, 53, -155, -135, -139,
	-136, -141, -140, -142, -137, -138, 202, 206, 203, 208,
	209, 210, 106, 207, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 211, 223, 29, 139, 195,
	196, 197, 200, 199, 201, 198, 224, 225, 226, 227,
	228, 229, 230, 231, 187, 188, 190, 191, 192, 194,
	193, 120, -51, -185, 51, 55, 72, 55, 50, -51,
	-51, 261, -129, 122, -51, 23, 50, -51, 55, 55,
	-124, -123, -115, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -108, 245, 252, -51, 9, 90, 53,
	18, 109, 53, -85, 24, 25, -86, -204, -30, -62,
	-117, 58, 61, -29, 41, -51, -37, -37, -67, 66,
	72, 67, 68, -119, 97, -124, -118, -115, -61, -68,
	-71, -74, 62, 90, 88, 89, 74, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -130, 55, 57, -134, 55, -60, -60, -117,
	-35, 21, -34, -36, -204, 53, -204, -2, -34, -34,
	-37, -37, -75, -117, -123, -75, -34, -28, -76, -77,
	76, -75, -204, 204, -34, -35, -34, -34, -91, 145,
	-51, -94, -98, -75, -40, -41, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -48, -123, -204, -54,
	48, 123, 49, -203, -125, -91, 51, -39, -51, -99,
	-96, 53, 258, 260, 261, 50, 69, -37, -146, 106,
	105, -167, -168, -169, -118, 57, 58, -154, -156, -158,
	-157, -170, -159, 127, 125, 129, 130, 134, -163, 120,
	135, 66, 72, -198, 127, 50, 237, 243, 125, 135,
	134, 308, 64, 128, 293, 295, 28, -149, 310, 232,
	-147, 240, -143, 52, -143, -143, 204, -143, -143, -143,
	-143, -143, -145, 206, -145, -145, -145, -145, 52, 52,
	-143, -143, -143, -143, -151, 52, 189, -151, -151, -152,
	52, -152, -117, 22, -183, 287, -184, 55, -129, 23,
	-129, -51, -112, 117, 114, 115, -180, 113, 237, 206,
	64, 28, 15, 276, 145, 292, 55, 146, -51, -51,
	-51, -129, -107, 11, 90, 36, -37, -37, -124, -84,
	-87, -102, 19, 11, 32, 32, -34, 66, 67, 68,
	109, -203, -68, -61, -61, -61, -33, 140, 71, -204,
	-204, -34, 53, -37, -204, -204, -204, 53, 51, 22,
	53, 11, 109, 53, 11, -204, -34, -79, -77, 78,
	-37, -204, -204, -204, -204, -204, -59, 29, 32, -2,
	-203, -203, -55, 53, 12, 80, -44, -43, 50, 51,
	-45, 50, -43, 40, 40, 120, 120, 120, -92, -117,
	-55, -39, -55, -100, -101, 262, 259, 265, 55, 53,
	-169, 80, 52, -197, 50, 72, -161, -117, 135, -163,
	-163, 55, -163, 55, 55, 66, 19, -117, 9, 135,
	135, -197, 57, -123, -194, 294, 16, 52, -199, 52,
	57, 58, 59, 66, -144, 65, -57, 233, 266, 269,
	268, 234, 311, -148, 241, 58, -145, -145, -143, -145,
	-145, -145, -146, 29, -146, -146, -146, -146, -153, 57,
	-153, -150, 287, 288, -150, 58, -151, 58, 50, 51,
	-2, -182, -181, -118, -187, 22, -128, -121, -207, 151,
	126, 131, 130, 55, 125, 129, 145, -186, 151, 126,
	127, 131, 130, 55, 120, 135, 125, 129, 145, 134,
	-113, -114, 122, 22, 120, 135, 145, 117, -129, -109,
	88, 12, -123, -123, 37, 109, -51, -38, 11, 97,
	-118, -35, -33, 71, -61, -61, -204, -36, -133, 106,
	202, 139, 197, 191, 221, 222, 208, 239, 195, 240,
	-130, -133, -61, -61, -118, -61, -61, 284, -82, 79,
	-37, 77, -93, 50, -94, -70, -72, -71, -203, -2,
	-88, -117, -92, -82, -98, -37, -37, -37, 52, -37,
	-203, -203, -203, -204, 53, -82, -55, 259, 263, 264,
	-168, -169, -172, -171, -117, 135, 10, 9, 19, 131,
	125, 55, 55, 55, -196, 134, 305, -198, 308, -144,
	-203, 52, 22, 28, 58, -199, 52, -189, 307, -203,
	-143, 52, -143, 52, 52, 54, -146, -146, -145, -146,
	-146, -146, 55, 106, 54, 53, 54, 195, 195, 53,
	54, 53, -51, -117, 53, 80, -188, 19, 159, 160,
	-206, 120, 135, -128, -117, -128, -117, -51, -128, -117,
	127, -158, 57, -37, -55, -39, -204, -61, -204, -143,
	-143, -143, -152, -143, 182, -143, 182, -204, -204, -204,
	53, 19, -204, 53, 19, -203, -32, 281, -37, 27,
	-93, 53, -204, -204, -204, 53, 109, -204, -86, -89,
	-117, 135, -89, -89, -89, -126, -117, -86, 54, 53,
	-143, -143, -160, 155, 156, 29, 157, -160, 305, 135,
	135, -196, -197, -37, -89, 295, 53, 54, -199, 206,
	196, 235, 212, -204, 54, 54, 54, -146, -145, 57,
	-145, 242, 242, 58, 58, 52, 51, 50, -181, -169,
	122, 20, 6, 8, 9, 10, -117, 52, 26, -117,
	-80, 13, -145, 55, -61, -61, -61, -61, -61, -204,
	57, 135, -72, 32, -2, -203, -117, -117, 53, 54,
	-204, -204, -204, -54, -174, -176, 287, -175, 51, 132,
	64, 164, 165, 166, 167, 168, 169, 170, -171, -85,
	-197, 50, 66, 158, -197, 50, -161, -117, -196, -203,
	-204, 54, 52, 58, 54, 204, -150, -146, -146, 54,
	54, -172, -117, -51, -162, -117, 52, -89, -203, 125,
	-81, 14, 16, -204, -204, -204, -204, -31, 90, 287,
	9, -70, -2, 109, -117, -173, 50, -175, 287, 52,
	289, 55, -164, 80, 57, 80, 80, 80, 80, 80,
	80, 80, 9, 10, 52, 52, -37, -193, 157, -195,
	54, 54, 54, 52, 52, -190, 53, 51, -172, 54,
	-178, -179, 145, 135, -37, -69, -204, 285, 47, 290,
	-94, -204, -117, -117, -177, -175, -117, 58, -200, 50,
	69, 58, -200, -200, -200, -200, -200, -160, -160, -162,
	-172, -204, 282, 54, 172, 297, 298, 144, 299, 157,
	300, 301, -90, 306, -172, -172, -191, 287, -117, -37,
	54, -185, -204, 53, -117, 52, 37, 286, 291, -203,
	54, 53, -197, -197, 54, 54, 287, 58, 16, 58,
	58, 58, 58, 298, 144, 300, 16, -55, 52, 54,
	54, 308, -183, -179, 32, -172, 37, -117, -175, 128,
	-174, 58, 58, 302, -123, -174, -89, -55, -174, -37,
	147, 54, 287, -204, -51, -173, 109, -173, 54, -174,
	148, 290, 52, -118, -203, 291, -162, -61, 144, 54,
	-204, -204,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 662, 0, 418, 418, 418, 418, 418, 418, 0,
	-2, 716, 0, 0, 0, 0, -2, 408, 409, 0,
	411, 412, 979, 979, 979, 979, 979, 0, 33, 34,
	977, 1, 3, 670, 0, 0, 422, 425, 420, 0,
	716, 0, 0, 0, 60, 0, 305, 0, 0, 714,
	714, 0, 714, 83, 0, 0, 0, 717, 0, 712,
	0, 712, 712, 712, 0, 367, 490, 737, 738, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 0, 0, 0, 0, 980, 980, 980, 980,
	0, 980, 396, 385, 387, 388, 389, 390, 980, 405,
	406, 395, 407, 410, 413, 414, 415, 416, 417, 27,
	674, 0, 0, 662, 29, 0, 418, 423, 424, 428,
	426, 427, 419, 0, 436, 440, 0, 500, 0, 505,
	507, -2, -2, 0, 542, 543, 544, 545, 546, 0,
	0, 0, 0, 0, 0, 0, 570, 571, 572, 573,
	647, 648, 649, 650, 651, 652, 653, 654, 509, 510,
	644, 694, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 601, 601, 601, 601, 601, 601, 601,
	601, 0, 0, 0, 0, 0, 0, 0, 447, 449,
	450, 451, 471, 0, 473, 0, 0, 41, 45, 0,
	946, 698, -2, -2, 0, 0, 735, 736, -2, 856,
	-2, 733, 734, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 0, 96, 0, 0,
	306, 307, 0, 84, 0, 0, 0, 0, 0, 93,
	0, 980, 0, 0, 0, 0, 0, 0, 0, 366,
	0, 368, 980, 980, 980, 980, 980, 980, 980, 980,
	377, 981, 982, 378, 379, 380, 980, 980, 382, 0,
	397, 0, 391, 28, 978, 22, 0, 0, 671, 0,
	663, 664, 667, 670, 27, 425, 0, 430, 429, 421,
	0, 437, 0, 0, 0, 441, 0, 443, 444, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 527, 528, 529, 530, 531, 532, 533, 506, 0,
	520, 0, 0, 0, 562, 563, 564, 565, 566, 567,
	0, 432, 27, 0, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 428, 0, 636, 0, 592, 0, 593,
	594, 595, 596, 597, 598, 599, 600, 628, 0, 630,
	631, 632, 633, 634, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 196, 197, 0, 432, 0, 0,
	43, 0, 489, 0, 0, 0, 0, 0, 0, 478,
	0, 0, 481, 0, 0, 0, 0, 472, 0, 0,
	492, 910, 474, 0, 476, 477, -2, 0, 0, 0,
	39, 40, 0, 46, 946, 48, 49, 0, 0, 0,
	251, 707, 708, 709, 705, 314, 0, 101, 245, 241,
	103, 104, 105, 106, 231, 169, 231, 231, 231, 231,
	231, 203, 231, 231, 248, 248, 248, 248, 248, 212,
	213, 214, 215, 216, 217, 218, 0, 0, 188, 231,
	231, 231, 192, 231, 194, 195, 221, 222, 223, 224,
	225, 226, 227, 228, 233, 233, 233, 235, 235, 186,
	187, 0, 0, 87, 0, 980, 0, 980, 0, 94,
	0, 0, 333, 0, 361, 713, 0, 980, 364, 365,
	491, 739, 740, 369, 370, 371, 372, 373, 374, 375,
	376, 381, 384, 398, 392, 393, 386, 675, 0, 0,
	0, 0, 0, 666, 668, 669, 674, 30, 428, 0,
	655, 0, 0, 0, 431, 25, 501, 502, 504, 521,
	0, 523, 525, 442, 438, 0, 645, -2, 511, 512,
	536, 537, 538, 0, 0, 0, 0, 534, 516, 0,
	547, 548, 549, 550, 551, 552, 553, 554, 555, 556,
	557, 558, 561, 612, 613, 569, 0, 559, 560, 568,
	0, 0, 433, 434, 539, 0, 693, 27, 0, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 642, 639,
	0, 0, 602, 629, 0, 0, 0, 0, 0, 0,
	488, 496, 695, 0, 448, 467, 469, 0, 464, 479,
	480, 482, 0, 484, 0, 486, 487, 452, 453, 454,
	0, 0, 0, 0, 475, 496, 0, 496, 42, 699,
	47, 0, 0, 52, 53, 700, 701, 702, 703, 252,
	0, 95, 315, 317, 320, 321, 322, 97, 98, 99,
	100, 0, 308, 310, 0, 0, 0, 0, 0, 288,
	289, 108, 0, 110, 0, 0, 113, 114, 0, 116,
	118, 308, 0, 0, 0, 0, 0, 107, 0, 247,
	243, 242, 168, 0, 248, 248, 231, 248, 248, 248,
	205, 206, 251, 0, 251, 251, 251, 251, 0, 0,
	238, 238, 191, 193, 180, 0, 233, 182, 183, 184,
	0, 185, 0, 0, 65, 0, 85, 86, 66, 715,
	67, 69, 979, 82, 0, 728, 334, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 0, 0, 360,
	980, 363, 401, 0, 0, 0, 672, 673, 0, 665,
	23, 0, 710, 711, 656, 657, 445, 522, 524, 526,
	0, 432, 513, 534, 517, 0, 514, 0, 0, 508,
	574, 0, 0, 541, -2, 577, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 662, 0, 640, 0,
	0, 591, 603, 604, 605, 606, 687, 0, 0, -2,
	0, 0, 662, 0, 0, 0, 461, 468, 0, 0,
	462, 0, 463, 483, 485, 0, 0, 0, 0, 459,
	662, 496, 38, 50, 51, 0, 0, 57, 253, 0,
	318, 0, 0, 294, 0, 0, 0, 311, 280, 0,
	0, 283, 0, 285, 305, 109, 0, 0, 0, 115,
	117, 0, 121, 122, 0, 139, 0, 0, 128, 0,
	163, 132, 133, 134, 135, 136, 137, 0, 231, 231,
	159, 0, 246, 102, 244, 0, 251, 251, 248, 251,
	251, 251, 207, 0, 208, 209, 210, 211, 0, 229,
	0, 189, 0, 0, 190, 0, 181, 0, 0, 0,
	-2, 88, 89, 0, 72, 0, 323, 0, 979, 0,
	348, 349, 350, 351, 352, 353, 354, 979, 0, 335,
	336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
	0, 979, 729, 730, 731, 732, 0, 0, 362, 383,
	0, 0, 399, 400, 676, 0, 24, 496, 0, 439,
	646, 0, 515, 0, 535, 518, 575, 435, 0, 231,
	231, 617, 231, 235, 620, 621, 231, 623, 231, 626,
	0, 0, 0, 0, 645, 0, 0, 0, 637, 590,
	643, 0, 31, 0, 687, 677, 689, 691, 0, 27,
	0, 683, 0, 670, 696, 497, 697, 465, 0, 470,
	0, 0, 0, 473, 0, 670, 37, 54, 55, 56,
	316, 319, 0, 290, 231, 231, 0, 0, 0, 0,
	0, 281, 282, 284, 286, 305, 127, 111, 308, 112,
	0, 0, 0, 140, 0, 0, 0, 131, 0, 0,
	155, 0, 157, 0, 0, 232, 198, 199, 251, 200,
	201, 202, 249, 250, 248, 0, 248, 0, 0, 0,
	236, 0, 0, 0, 0, 0, 0, 0, 70, 71,
	0, 346, 347, 327, 0, 328, 330, 331, 332, 0,
	310, 326, 402, 403, 658, 446, 576, 519, 579, 614,
	248, 618, 619, 622, 624, 625, 627, 581, 580, 582,
	0, 0, 585, 0, 0, 0, 0, 0, 641, 0,
	32, 0, 692, -2, 0, 0, 0, 44, 35, 0,
	456, 457, 0, 0, 0, 492, 460, 36, 255, 0,
	667, 293, 308, 300, 301, 0, 0, 308, 309, 310,
	305, 287, 0, 0, 0, 124, 0, 129, 0, 0,
	238, 166, 167, 138, 156, 158, 160, 204, 251, 230,
	251, 239, 240, 0, 0, 0, 0, 0, 90, 91,
	0, 73, 74, 75, 76, 77, 0, 0, 0, 311,
	660, 0, 615, 616, 0, 0, 0, 0, 607, 589,
	638, 0, 690, 0, -2, 0, 685, 684, 0, 466,
	493, 494, 495, 455, 277, 256, 0, 258, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 291, 292,
	295, 0, 302, 303, 296, 0, 0, 311, 0, 0,
	161, 123, 141, 0, 0, 164, 165, 219, 220, 234,
	237, 0, 0, 0, 78, 312, 0, 0, 0, 0,
	26, 0, 0, 583, 584, 586, 587, 0, 0, 0,
	0, 680, 27, 0, 458, 254, 0, 259, 0, 0,
	0, 262, 0, 274, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	126, 130, 498, 0, 0, 80, 0, 0, 0, 84,
	0, 356, 0, 0, 661, 659, 588, 0, 0, 0,
	688, -2, 686, 278, 0, 260, 265, 263, 266, 275,
	276, 267, 268, 269, 270, 271, 272, 308, 308, 0,
	0, 120, 162, 125, 0, 0, 0, 0, 0, 0,
	152, 0, 496, 0, 0, 0, 68, 0, 313, 79,
	324, 87, 355, 0, 0, 0, 608, 0, 611, 0,
	257, 0, 297, 298, 0, 255, 0, 143, 0, 145,
	146, 147, 148, 149, 150, 151, 0, 255, 0, 496,
	255, 0, 329, 357, 0, 0, 609, 0, 261, 0,
	277, 142, 144, 153, 0, 277, 0, 255, 62, 81,
	0, 325, 0, 279, 0, 304, 0, 61, 499, 63,
	0, 0, 0, 154, 0, 610, 0, 0, 0, 299,
	358, 359,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 309,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 310, 3, 311, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:344
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:349
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:350
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:354
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:377
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:385
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:389
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:402
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:408
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:429
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:441
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:453
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:457
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:469
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:477
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:482
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:483
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:491
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:496
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:500
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:514
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:518
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:542
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:552
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:556
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:560
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:581
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:601
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:617
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:632
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:640
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:648
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:652
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:656
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:668
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:681
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:685
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:689
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:697
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:701
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:706
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:710
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:715
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:719
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:724
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:728
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:733
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:737
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:743
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:748
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:753
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:759
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:764
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:770
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:775
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:779
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:785
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:792
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:804
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:808
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:812
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:816
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:822
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:827
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:838
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:850
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:855
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:860
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:865
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:870
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:875
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:880
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:885
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:890
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:895
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:900
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:905
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:911
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:916
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:921
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:926
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:932
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:944
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:957
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:961
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:965
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:971
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:975
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:979
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:983
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:987
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:991
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:995
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:999
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1005
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1009
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1014
		{
			yyVAL.sequence = &Sequence{}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1018
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1023
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1028
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1033
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1043
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1053
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1058
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1063
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1068
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1073
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1078
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1085
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1089
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1093
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1097
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1101
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1105
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1110
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1114
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1119
		{
			yyVAL.bytes = nil
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1129
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1134
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1140
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1148
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1152
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1160
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1164
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1176
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1188
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1200
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1206
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1212
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1228
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1232
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1236
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1240
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1244
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1248
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1252
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1256
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1272
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1276
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1280
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1284
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1288
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1292
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1296
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1300
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1304
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1308
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1312
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1316
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1320
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1324
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1328
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1332
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1336
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1340
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1344
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1348
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1352
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1356
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1361
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1401
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1406
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1411
		{
			yyVAL.optVal = nil
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1415
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1420
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1424
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1432
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1436
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1442
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 238:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1450
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1458
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1467
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1472
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1476
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1481
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1485
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1489
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 248:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1494
		{
			yyVAL.str = ""
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1498
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1502
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1507
		{
			yyVAL.str = ""
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1515
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1521
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1526
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1530
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1534
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1540
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1544
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1550
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1554
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1560
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1564
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1573
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1577
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1581
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1585
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1589
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1607
		{
			yyVAL.str = ""
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1611
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1617
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1621
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1627
		{
			yyVAL.indexPartition = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1631
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1635
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1641
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1645
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1649
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1653
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1657
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1661
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1665
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1685
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1689
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1695
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1700
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1706
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1711
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1718
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 297:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1725
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 298:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1732
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 299:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1741
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1753
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1757
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1761
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1765
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 304:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1771
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1782
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1786
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1790
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1796
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1800
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1805
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1812
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1816
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1821
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1825
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1829
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1837
		{
			yyVAL.str = yyDollar[1].str
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1841
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1845
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1851
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1855
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1865
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1869
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 325:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1883
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 326:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1897
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1906
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1910
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 329:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1914
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 330:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1927
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 331:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1937
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 332:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1942
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1947
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1951
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 355:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1983
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1989
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1993
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 358:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1999
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 359:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2003
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2009
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2015
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 362:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2023
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 363:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2028
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2036
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2040
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2046
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2050
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2055
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2061
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2065
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2069
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2074
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2078
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2082
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2086
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2090
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2094
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2098
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2102
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2106
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2110
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2114
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2118
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2128
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2132
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2136
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2140
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2144
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2148
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2152
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2162
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2168
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2172
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2178
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2182
		{
			yyVAL.str = "extended "
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2188
		{
			yyVAL.str = ""
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2192
		{
			yyVAL.str = "full "
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2198
		{
			yyVAL.str = ""
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2202
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2206
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2212
		{
			yyVAL.showFilter = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2216
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2220
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.str = ""
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2230
		{
			yyVAL.str = SessionStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2234
		{
			yyVAL.str = GlobalStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2240
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2244
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2250
		{
			yyVAL.statement = &Begin{}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2254
		{
			yyVAL.statement = &Begin{}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2260
		{
			yyVAL.statement = &Commit{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2266
		{
			yyVAL.statement = &Rollback{}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2272
		{
			yyVAL.statement = &OtherRead{}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2276
		{
			yyVAL.statement = &OtherRead{}
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2280
		{
			yyVAL.statement = &OtherRead{}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2284
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2288
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2293
		{
			setAllowComments(yylex, true)
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2297
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2303
		{
			yyVAL.bytes2 = nil
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2307
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2313
		{
			yyVAL.str = UnionStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2317
		{
			yyVAL.str = UnionAllStr
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2321
		{
			yyVAL.str = UnionDistinctStr
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2326
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2330
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2334
		{
			yyVAL.str = SQLCacheStr
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2339
		{
			yyVAL.str = ""
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.str = DistinctStr
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2348
		{
			yyVAL.str = ""
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2352
		{
			yyVAL.str = StraightJoinHint
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2357
		{
			yyVAL.selectExprs = nil
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2361
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2367
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2371
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2377
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2381
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2385
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2389
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2394
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2398
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2402
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2409
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2414
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2418
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2442
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2446
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2452
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 455:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2456
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2462
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2467
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2471
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2477
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2481
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2494
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2498
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2502
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2506
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2512
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2518
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2520
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2524
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2526
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2529
		{
			yyVAL.empty = struct{}{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2531
		{
			yyVAL.empty = struct{}{}
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2534
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2538
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2542
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2549
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2555
		{
			yyVAL.str = JoinStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2559
		{
			yyVAL.str = JoinStr
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2563
		{
			yyVAL.str = JoinStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2569
		{
			yyVAL.str = StraightJoinStr
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2575
		{
			yyVAL.str = LeftJoinStr
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2579
		{
			yyVAL.str = LeftJoinStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2583
		{
			yyVAL.str = RightJoinStr
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2587
		{
			yyVAL.str = RightJoinStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.str = NaturalJoinStr
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2597
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2607
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2611
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2617
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2621
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.indexHints = nil
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 495:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2643
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2647
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2652
		{
			yyVAL.columns = nil
		}
	case 499:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2656
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2662
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2666
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2670
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2674
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2678
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2682
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2686
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2692
		{
			yyVAL.str = ""
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2696
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2702
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2706
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2712
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2716
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2720
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 514:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2724
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 515:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2728
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2732
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2736
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 518:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 519:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2744
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2748
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2754
		{
			yyVAL.str = IsNullStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2758
		{
			yyVAL.str = IsNotNullStr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2762
		{
			yyVAL.str = IsTrueStr
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2766
		{
			yyVAL.str = IsNotTrueStr
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2770
		{
			yyVAL.str = IsFalseStr
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2774
		{
			yyVAL.str = IsNotFalseStr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2780
		{
			yyVAL.str = EqualStr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2784
		{
			yyVAL.str = LessThanStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2788
		{
			yyVAL.str = GreaterThanStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2792
		{
			yyVAL.str = LessEqualStr
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2796
		{
			yyVAL.str = GreaterEqualStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2800
		{
			yyVAL.str = NotEqualStr
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2804
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2813
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2819
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2823
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2827
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2839
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2843
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2849
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2853
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2857
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2861
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2865
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2869
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2873
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2877
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2881
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2885
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2889
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2893
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2897
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2901
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2905
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2909
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2913
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2917
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2921
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2925
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2929
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2933
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2937
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2945
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2959
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2963
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2967
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2989
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2993
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2997
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3015
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 580:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3019
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 581:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3023
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 582:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3027
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 583:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3031
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 584:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3035
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3039
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 586:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3043
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 587:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3047
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 588:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3051
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 589:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3055
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 590:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3059
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3063
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3073
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3077
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3081
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3085
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3090
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3095
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3100
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3105
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3109
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3123
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3127
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3131
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3135
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3141
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3145
		{
			yyVAL.str = BooleanModeStr
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3149
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 610:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3153
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3157
		{
			yyVAL.str = QueryExpansionStr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3173
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3177
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3181
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3185
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3199
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3203
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3207
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3211
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3215
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3219
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3223
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3227
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3233
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3237
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3241
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3245
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3249
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3253
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3262
		{
			yyVAL.expr = nil
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3271
		{
			yyVAL.str = string("")
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3275
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3281
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3285
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3291
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3296
		{
			yyVAL.expr = nil
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3300
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3306
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3310
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3314
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3320
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3324
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3328
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3332
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3336
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3340
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3344
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3348
		{
			yyVAL.expr = &NullVal{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3354
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3363
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3372
		{
			yyVAL.exprs = nil
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3376
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3381
		{
			yyVAL.expr = nil
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3385
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3390
		{
			yyVAL.orderBy = nil
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3394
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3400
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3404
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3410
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3415
		{
			yyVAL.str = AscScr
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3419
		{
			yyVAL.str = AscScr
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3423
		{
			yyVAL.str = DescScr
		}
	case 670:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3428
		{
			yyVAL.limit = nil
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3432
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3436
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3440
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 674:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3445
		{
			yyVAL.str = ""
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3449
		{
			yyVAL.str = ForUpdateStr
		}
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3453
		{
			yyVAL.str = ShareModeStr
		}
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3466
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3470
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3474
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 680:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3483
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3487
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3494
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3498
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3502
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 686:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3506
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3511
		{
			yyVAL.updateExprs = nil
		}
	case 688:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3515
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3521
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3525
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3531
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3535
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3541
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3547
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3557
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3561
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 697:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3567
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3573
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3577
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 700:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3583
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 701:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3587
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3591
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 703:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3595
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3602
		{
			yyVAL.bytes = []byte("charset")
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3609
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3613
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3617
		{
			yyVAL.expr = &Default{}
		}
	case 712:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3626
		{
			yyVAL.byt = 0
		}
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3628
		{
			yyVAL.byt = 1
		}
	case 714:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3631
		{
			yyVAL.empty = struct{}{}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3633
		{
			yyVAL.empty = struct{}{}
		}
	case 716:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3636
		{
			yyVAL.str = ""
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3638
		{
			yyVAL.str = IgnoreStr
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3642
		{
			yyVAL.empty = struct{}{}
		}
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3644
		{
			yyVAL.empty = struct{}{}
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3646
		{
			yyVAL.empty = struct{}{}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3648
		{
			yyVAL.empty = struct{}{}
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3650
		{
			yyVAL.empty = struct{}{}
		}
	case 723:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3652
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3654
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3656
		{
			yyVAL.empty = struct{}{}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3658
		{
			yyVAL.empty = struct{}{}
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3660
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3663
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3665
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3667
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3671
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3673
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3681
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3688
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3694
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3698
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3705
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3967
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3976
		{
			decNesting(yylex)
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3981
		{
			forceEOF(yylex)
		}
	case 980:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3986
		{
			forceEOF(yylex)
		}
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3990
		{
			forceEOF(yylex)
		}
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3994
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
