// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const PRECISION = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const VARYING = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const UUID = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const JSONB = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const ARRAY = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const ZONE = 57542
const DATABASES = 57543
const TABLES = 57544
const VITESS_KEYSPACES = 57545
const VITESS_SHARDS = 57546
const VITESS_TABLETS = 57547
const VSCHEMA_TABLES = 57548
const EXTENDED = 57549
const FULL = 57550
const PROCESSLIST = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const MATCH = 57581
const AGAINST = 57582
const BOOLEAN = 57583
const LANGUAGE = 57584
const WITH = 57585
const WITHOUT = 57586
const PARSER = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 310,
	152, 310,
	-2, 300,
	-1, 247,
	108, 630,
	-2, 626,
	-1, 248,
	108, 631,
	-2, 627,
	-1, 317,
	79, 797,
	-2, 58,
	-1, 318,
	79, 756,
	-2, 59,
	-1, 323,
	79, 740,
	-2, 597,
	-1, 325,
	79, 777,
	-2, 599,
	-1, 588,
	51, 41,
	53, 41,
	-2, 43,
	-1, 732,
	108, 633,
	-2, 629,
	-1, 954,
	5, 28,
	-2, 442,
	-1, 979,
	5, 27,
	-2, 572,
	-1, 1243,
	5, 28,
	-2, 573,
	-1, 1299,
	5, 27,
	-2, 575,
	-1, 1372,
	5, 28,
	-2, 576,
}

const yyPrivate = 57344

const yyLast = 11540

var yyAct = [...]int{

	248, 1378, 669, 895, 1362, 982, 1249, 252, 794, 535,
	1310, 277, 1170, 1021, 1260, 1142, 1061, 812, 1143, 835,
	226, 830, 889, 534, 3, 582, 580, 1139, 841, 834,
	309, 53, 795, 254, 1115, 87, 874, 998, 87, 767,
	757, 66, 322, 946, 1050, 1047, 764, 884, 598, 783,
	987, 734, 468, 474, 584, 569, 488, 423, 304, 597,
	928, 303, 87, 87, 327, 84, 848, 316, 87, 791,
	327, 225, 480, 250, 220, 235, 87, 313, 87, 311,
	1034, 863, 52, 549, 87, 1409, 1390, 1406, 302, 1370,
	912, 1311, 1352, 312, 241, 307, 1051, 1052, 426, 239,
	1403, 896, 1389, 911, 1313, 1134, 434, 1369, 435, 1237,
	427, 825, 1179, 68, 442, 1165, 1166, 448, 221, 222,
	223, 224, 826, 827, 1024, 1025, 1026, 599, 1164, 600,
	916, 463, 1029, 1027, 82, 78, 79, 80, 862, 910,
	1273, 1272, 1036, 245, 865, 1340, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 699, 875,
	512, 71, 72, 1006, 67, 700, 1005, 1288, 867, 1007,
	1191, 1312, 1190, 885, 1226, 1224, 73, 219, 1318, 1405,
	450, 1401, 452, 459, 460, 1363, 1093, 907, 904, 905,
	792, 903, 766, 69, 1364, 57, 1296, 1201, 1266, 87,
	1080, 1019, 850, 327, 327, 327, 327, 1032, 327, 449,
	451, 1202, 1017, 1031, 1014, 327, 851, 1177, 914, 917,
	59, 60, 61, 62, 63, 1399, 1210, 1331, 1263, 444,
	813, 815, 204, 437, 1090, 75, 430, 76, 668, 76,
	678, 997, 327, 996, 995, 425, 433, 198, 77, 1094,
	524, 525, 1116, 487, 512, 477, 214, 1345, 81, 1246,
	1102, 476, 909, 962, 1081, 850, 940, 706, 492, 1083,
	1076, 1077, 443, 1084, 1079, 1078, 850, 1086, 1082, 851,
	832, 831, 923, 522, 1118, 70, 502, 908, 1085, 512,
	851, 854, 703, 1185, 1075, 276, 886, 486, 485, 875,
	1314, 870, 87, 447, 814, 1350, 199, 1028, 1098, 87,
	87, 87, 201, 855, 487, 327, 1341, 1136, 1368, 207,
	203, 327, 471, 475, 1120, 913, 1125, 860, 1119, 852,
	1117, 1091, 564, 1089, 853, 1199, 1123, 985, 601, 493,
	915, 588, 307, 1186, 784, 1092, 1121, 1122, 205, 486,
	485, 209, 1261, 1262, 1264, 741, 1138, 672, 1317, 321,
	924, 1124, 1126, 1023, 482, 428, 487, 1374, 485, 739,
	740, 738, 1351, 536, 551, 552, 553, 554, 555, 556,
	557, 1275, 547, 1097, 487, 1274, 1056, 857, 200, 784,
	589, 969, 595, 1054, 1037, 859, 858, 50, 1295, 526,
	527, 528, 529, 530, 531, 532, 1270, 737, 1070, 1212,
	503, 504, 505, 506, 507, 508, 509, 502, 74, 202,
	512, 210, 211, 212, 213, 217, 327, 327, 478, 1048,
	216, 215, 1033, 87, 87, 327, 758, 87, 759, 1348,
	87, 959, 424, 1176, 87, 436, 327, 327, 327, 327,
	327, 327, 327, 327, 505, 506, 507, 508, 509, 502,
	327, 327, 512, 674, 675, 87, 1175, 679, 21, 1174,
	682, 429, 709, 710, 958, 856, 957, 1071, 1067, 301,
	327, 1072, 1069, 1068, 87, 73, 687, 705, 486, 485,
	327, 1020, 486, 485, 1008, 701, 1073, 711, 321, 321,
	321, 321, 1066, 321, 685, 487, 850, 735, 898, 487,
	321, 844, 760, 849, 720, 845, 846, 486, 485, 847,
	851, 684, 704, 683, 230, 455, 439, 440, 441, 736,
	937, 938, 939, 327, 487, 732, 673, 490, 486, 485,
	724, 726, 727, 431, 432, 725, 728, 1392, 1413, 467,
	776, 779, 671, 730, 713, 487, 785, 1303, 1402, 1392,
	1391, 771, 1385, 467, 87, 1303, 1382, 87, 87, 87,
	87, 87, 445, 796, 1303, 1381, 1303, 1380, 1324, 87,
	721, 722, 87, 1303, 1360, 1323, 87, 1303, 1325, 319,
	438, 87, 87, 424, 793, 327, 1303, 467, 761, 762,
	307, 307, 307, 307, 307, 771, 788, 1180, 327, 983,
	321, 1303, 1304, 1258, 1257, 307, 603, 820, 781, 1161,
	467, 769, 821, 54, 307, 1241, 798, 799, 797, 801,
	566, 800, 536, 809, 1140, 774, 775, 983, 733, 1198,
	817, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 823, 1192, 818, 1245,
	467, 952, 822, 876, 877, 878, 839, 1194, 1193, 87,
	1188, 1189, 327, 1009, 327, 866, 819, 87, 591, 87,
	1188, 1187, 87, 327, 952, 467, 566, 467, 891, 769,
	467, 571, 574, 575, 576, 572, 829, 573, 577, 894,
	824, 988, 989, 608, 607, 1196, 1195, 918, 952, 919,
	887, 888, 920, 23, 267, 266, 269, 270, 271, 272,
	592, 666, 321, 268, 273, 23, 984, 1105, 565, 984,
	321, 772, 773, 594, 964, 961, 977, 780, 707, 978,
	23, 321, 321, 321, 321, 321, 321, 321, 321, 732,
	735, 787, 566, 789, 790, 321, 321, 50, 1407, 50,
	593, 929, 591, 1387, 930, 1355, 1298, 566, 232, 952,
	983, 50, 736, 1328, 1327, 715, 963, 960, 1326, 1282,
	867, 890, 1155, 885, 1012, 490, 50, 880, 321, 879,
	942, 571, 574, 575, 576, 572, 65, 573, 577, 926,
	927, 670, 475, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 50, 979, 512, 327, 988, 989,
	87, 892, 893, 1319, 1000, 1316, 1002, 1197, 763, 1140,
	1013, 991, 968, 681, 464, 327, 806, 804, 777, 777,
	319, 807, 805, 719, 777, 808, 1001, 575, 576, 994,
	327, 992, 993, 307, 1010, 803, 802, 236, 237, 1398,
	1388, 777, 1101, 925, 953, 481, 1396, 935, 934, 469,
	1043, 606, 446, 1003, 1239, 1283, 900, 680, 479, 970,
	470, 579, 481, 943, 944, 945, 233, 234, 466, 227,
	321, 1334, 228, 87, 327, 327, 1042, 327, 1044, 1045,
	1046, 54, 1333, 321, 1286, 1038, 1039, 933, 1041, 1233,
	467, 936, 1015, 1016, 1018, 932, 984, 1173, 1172, 1353,
	483, 327, 1354, 1057, 87, 87, 1049, 1053, 1342, 1030,
	702, 56, 87, 58, 1055, 1065, 1200, 590, 51, 1,
	1074, 327, 897, 1060, 906, 1064, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 951, 1361,
	512, 1309, 1103, 1169, 842, 833, 422, 321, 64, 321,
	1349, 843, 840, 609, 966, 861, 1035, 1063, 321, 864,
	615, 327, 327, 613, 614, 796, 1141, 1109, 1108, 611,
	1144, 796, 1114, 617, 1128, 616, 612, 610, 1135, 1127,
	206, 314, 321, 578, 1146, 732, 602, 1163, 484, 1088,
	327, 1087, 327, 327, 1150, 902, 1151, 1096, 731, 1149,
	698, 510, 511, 503, 504, 505, 506, 507, 508, 509,
	502, 1168, 1162, 512, 922, 462, 208, 520, 931, 1167,
	1004, 501, 500, 510, 511, 503, 504, 505, 506, 507,
	508, 509, 502, 320, 1147, 512, 708, 473, 1332, 1285,
	1181, 1182, 967, 1184, 1137, 546, 782, 327, 253, 723,
	265, 262, 264, 263, 714, 976, 327, 1183, 494, 1152,
	1153, 251, 243, 1154, 306, 562, 1156, 570, 87, 947,
	568, 1111, 1112, 567, 327, 990, 986, 305, 1104, 1236,
	1339, 718, 25, 327, 1129, 1130, 87, 1132, 1133, 55,
	1214, 238, 999, 19, 18, 17, 20, 16, 1207, 15,
	319, 14, 29, 1211, 13, 12, 11, 10, 9, 8,
	321, 7, 1215, 836, 6, 5, 4, 229, 22, 307,
	1203, 2, 0, 1222, 0, 1022, 0, 0, 0, 1205,
	0, 0, 0, 0, 0, 0, 327, 0, 327, 327,
	327, 87, 327, 1208, 1251, 1252, 1253, 0, 327, 1240,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1256, 0, 0, 1254, 1010, 1265, 1058,
	321, 0, 321, 1213, 0, 0, 327, 327, 87, 327,
	327, 327, 1276, 0, 0, 1268, 0, 0, 0, 0,
	0, 327, 0, 0, 0, 1279, 321, 0, 0, 1280,
	0, 0, 0, 0, 1269, 0, 1271, 0, 1278, 0,
	0, 0, 731, 1238, 0, 0, 321, 0, 0, 0,
	536, 0, 0, 0, 0, 0, 327, 327, 0, 0,
	0, 0, 0, 1144, 1217, 0, 0, 1287, 321, 327,
	1297, 0, 0, 0, 0, 0, 0, 327, 1299, 0,
	0, 1315, 1308, 777, 0, 0, 1148, 999, 0, 777,
	1320, 0, 0, 327, 0, 0, 0, 0, 0, 1329,
	0, 1321, 0, 1322, 0, 0, 868, 869, 871, 872,
	873, 0, 0, 0, 327, 321, 0, 321, 1171, 0,
	1144, 278, 47, 0, 1343, 881, 882, 883, 0, 0,
	1347, 0, 0, 0, 1344, 0, 0, 327, 327, 327,
	0, 1356, 0, 1357, 1358, 1359, 0, 0, 0, 0,
	0, 0, 0, 0, 1366, 0, 327, 0, 0, 0,
	796, 1371, 0, 327, 0, 0, 327, 0, 0, 47,
	836, 0, 1204, 1383, 327, 0, 712, 231, 1376, 1377,
	0, 1206, 0, 308, 1289, 1290, 0, 1291, 1292, 1293,
	472, 0, 0, 0, 0, 0, 1393, 1394, 327, 1209,
	1395, 0, 0, 327, 1397, 0, 0, 0, 321, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 327, 1410,
	0, 0, 0, 0, 0, 85, 0, 0, 218, 0,
	0, 0, 1062, 768, 770, 0, 0, 0, 1365, 536,
	1404, 0, 0, 1230, 467, 0, 0, 0, 0, 786,
	242, 0, 85, 85, 0, 0, 0, 0, 85, 0,
	0, 1250, 0, 1250, 1250, 1250, 85, 1255, 85, 0,
	0, 0, 0, 321, 85, 0, 1107, 0, 0, 811,
	501, 500, 510, 511, 503, 504, 505, 506, 507, 508,
	509, 502, 0, 0, 512, 0, 0, 0, 1131, 0,
	0, 1250, 1277, 0, 321, 321, 1281, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1284, 0, 0, 0,
	0, 0, 0, 0, 454, 454, 454, 454, 0, 454,
	0, 0, 0, 0, 0, 0, 454, 467, 0, 453,
	0, 0, 0, 0, 0, 836, 0, 836, 0, 0,
	0, 1301, 1302, 47, 0, 0, 1040, 0, 0, 0,
	0, 0, 1411, 0, 1171, 0, 0, 0, 521, 0,
	0, 523, 1022, 501, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 0, 0, 512, 1250, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 533, 0,
	537, 538, 539, 540, 541, 542, 543, 544, 545, 1346,
	548, 550, 550, 550, 550, 550, 550, 550, 550, 558,
	559, 560, 561, 0, 0, 0, 0, 0, 0, 0,
	581, 0, 1250, 1250, 1250, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 1234, 0, 0, 0, 777, 0,
	0, 1373, 0, 0, 0, 0, 0, 0, 1375, 949,
	0, 1379, 0, 950, 0, 0, 0, 0, 0, 1386,
	954, 955, 956, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 971, 0, 972, 973, 974, 975,
	0, 0, 85, 1250, 0, 0, 0, 0, 1400, 85,
	586, 85, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1379, 1178, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 0, 0, 512,
	0, 0, 0, 0, 1062, 836, 0, 0, 0, 0,
	0, 0, 0, 456, 457, 458, 0, 461, 454, 0,
	0, 0, 0, 0, 465, 0, 454, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 454, 454, 454,
	454, 454, 454, 454, 454, 0, 0, 0, 0, 0,
	0, 454, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 23, 24, 48, 26, 27, 0, 0,
	0, 0, 1219, 1220, 0, 1221, 0, 0, 0, 1223,
	0, 1225, 42, 0, 0, 0, 28, 0, 0, 0,
	0, 0, 0, 85, 85, 0, 0, 85, 0, 0,
	85, 0, 0, 0, 686, 37, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 85, 0, 1259, 0, 537,
	0, 0, 0, 0, 0, 1267, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 686, 0, 0, 0, 0, 308, 308,
	308, 308, 308, 0, 0, 0, 0, 1160, 30, 31,
	33, 32, 35, 581, 0, 816, 0, 0, 0, 0,
	0, 0, 308, 0, 0, 0, 0, 0, 0, 0,
	0, 36, 43, 44, 242, 0, 45, 46, 34, 242,
	242, 0, 0, 778, 778, 242, 0, 0, 0, 778,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 242,
	242, 242, 242, 0, 85, 0, 778, 85, 85, 85,
	85, 85, 0, 0, 0, 0, 667, 0, 0, 810,
	0, 0, 85, 0, 677, 0, 586, 0, 0, 0,
	0, 85, 85, 0, 0, 688, 689, 690, 691, 692,
	693, 694, 695, 454, 0, 454, 0, 0, 0, 696,
	697, 0, 0, 0, 454, 0, 0, 1216, 0, 0,
	0, 0, 0, 0, 1218, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1227, 1228, 1229, 0,
	0, 1232, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 1242, 1243, 1244, 1231, 1247, 0,
	0, 0, 0, 941, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 496, 85, 499, 85,
	0, 0, 85, 0, 513, 514, 515, 516, 517, 518,
	519, 0, 497, 498, 495, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 686, 0, 512,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	0, 0, 0, 980, 981, 0, 0, 0, 501, 500,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	0, 0, 512, 0, 0, 1294, 0, 1110, 0, 0,
	0, 308, 0, 0, 0, 0, 0, 0, 0, 0,
	1305, 1306, 1307, 948, 0, 0, 242, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	0, 512, 242, 501, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 0, 0, 512, 1335, 1336,
	1337, 1338, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 512, 0, 0, 0,
	85, 899, 0, 901, 0, 0, 454, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1367, 0,
	0, 0, 454, 1372, 637, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1145, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	1414, 1415, 0, 0, 1099, 1100, 0, 1157, 1158, 1159,
	623, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 638, 686, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 778, 0,
	0, 0, 0, 0, 778, 0, 0, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 0, 661, 662,
	0, 663, 664, 665, 639, 640, 641, 642, 620, 622,
	0, 618, 621, 624, 0, 635, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 636, 643, 644, 645,
	646, 647, 648, 649, 650, 0, 0, 308, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1235, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 586, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1145, 0, 0, 1300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1145, 0, 47, 411, 401, 0, 372, 413, 349, 364,
	421, 365, 366, 394, 335, 380, 141, 361, 0, 352,
	330, 358, 331, 350, 374, 109, 348, 403, 383, 121,
	419, 124, 388, 0, 160, 133, 0, 0, 376, 405,
	378, 399, 371, 395, 340, 387, 414, 362, 391, 415,
	0, 0, 0, 326, 0, 837, 838, 0, 0, 0,
	0, 0, 101, 0, 390, 410, 360, 393, 329, 389,
	0, 333, 336, 420, 408, 355, 356, 1011, 0, 0,
	0, 0, 0, 0, 375, 379, 396, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 0, 386, 0,
	0, 0, 337, 334, 0, 373, 0, 1408, 0, 339,
	0, 354, 397, 778, 328, 400, 406, 370, 185, 409,
	368, 367, 147, 0, 104, 0, 164, 113, 363, 122,
	412, 377, 404, 351, 359, 105, 357, 153, 142, 176,
	385, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	85, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	332, 0, 161, 178, 196, 197, 347, 407, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 392, 154, 103, 177, 159, 343, 346,
	341, 342, 381, 382, 416, 417, 418, 398, 338, 0,
	344, 345, 0, 402, 384, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 411, 401, 0, 372, 413, 349,
	364, 421, 365, 366, 394, 335, 380, 141, 361, 0,
	352, 330, 358, 331, 350, 374, 109, 348, 403, 383,
	121, 419, 124, 388, 0, 160, 133, 0, 0, 376,
	405, 378, 399, 371, 395, 340, 387, 414, 362, 391,
	415, 0, 0, 0, 326, 0, 837, 838, 0, 0,
	0, 0, 0, 101, 0, 390, 410, 360, 393, 329,
	389, 0, 333, 336, 420, 408, 355, 356, 0, 0,
	0, 0, 0, 0, 0, 375, 379, 396, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 353, 0, 386,
	0, 0, 0, 337, 334, 0, 373, 0, 0, 0,
	339, 0, 354, 397, 0, 328, 400, 406, 370, 185,
	409, 368, 367, 147, 0, 104, 0, 164, 113, 363,
	122, 412, 377, 404, 351, 359, 105, 357, 153, 142,
	176, 385, 143, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 99, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 0,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 332, 0, 161, 178, 196, 197, 347, 407, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 392, 154, 103, 177, 159, 343,
	346, 341, 342, 381, 382, 416, 417, 418, 398, 338,
	0, 344, 345, 0, 402, 384, 89, 96, 123, 192,
	193, 0, 149, 111, 179, 411, 401, 0, 372, 413,
	349, 364, 421, 365, 366, 394, 335, 380, 141, 361,
	0, 352, 330, 358, 331, 350, 374, 109, 348, 403,
	383, 121, 419, 124, 388, 0, 160, 133, 0, 0,
	376, 405, 378, 399, 371, 395, 340, 387, 414, 362,
	391, 415, 0, 0, 0, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 390, 410, 360, 393,
	329, 389, 0, 333, 336, 420, 408, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 375, 379, 396, 369,
	0, 0, 0, 0, 0, 0, 1106, 0, 353, 0,
	386, 0, 0, 0, 337, 334, 0, 373, 0, 0,
	0, 339, 0, 354, 397, 0, 328, 400, 406, 370,
	185, 409, 368, 367, 147, 0, 104, 0, 164, 113,
	363, 122, 412, 377, 404, 351, 359, 105, 357, 153,
	142, 176, 385, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 332, 0, 161, 178, 196, 197, 347, 407,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 392, 154, 103, 177, 159,
	343, 346, 341, 342, 381, 382, 416, 417, 418, 398,
	338, 0, 344, 345, 0, 402, 384, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 411, 401, 0, 372,
	413, 349, 364, 421, 365, 366, 394, 335, 380, 141,
	361, 0, 352, 330, 358, 331, 350, 374, 109, 348,
	403, 383, 121, 419, 124, 388, 0, 160, 133, 0,
	0, 376, 405, 378, 399, 371, 395, 340, 387, 414,
	362, 391, 415, 50, 0, 0, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 390, 410, 360,
	393, 329, 389, 0, 333, 336, 420, 408, 355, 356,
	0, 0, 0, 0, 0, 0, 0, 375, 379, 396,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	0, 386, 0, 0, 0, 337, 334, 0, 373, 0,
	0, 0, 339, 0, 354, 397, 0, 328, 400, 406,
	370, 185, 409, 368, 367, 147, 0, 104, 0, 164,
	113, 363, 122, 412, 377, 404, 351, 359, 105, 357,
	153, 142, 176, 385, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 332, 0, 161, 178, 196, 197, 347,
	407, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 392, 154, 103, 177,
	159, 343, 346, 341, 342, 381, 382, 416, 417, 418,
	398, 338, 0, 344, 345, 0, 402, 384, 89, 96,
	123, 192, 193, 0, 149, 111, 179, 411, 401, 0,
	372, 413, 349, 364, 421, 365, 366, 394, 335, 380,
	141, 361, 0, 352, 330, 358, 331, 350, 374, 109,
	348, 403, 383, 121, 419, 124, 388, 0, 160, 133,
	0, 0, 376, 405, 378, 399, 371, 395, 340, 387,
	414, 362, 391, 415, 0, 0, 0, 247, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 390, 410,
	360, 393, 329, 389, 0, 333, 336, 420, 408, 355,
	356, 0, 0, 0, 0, 0, 0, 0, 375, 379,
	396, 369, 0, 0, 0, 0, 0, 0, 729, 0,
	353, 0, 386, 0, 0, 0, 337, 334, 0, 373,
	0, 0, 0, 339, 0, 354, 397, 0, 328, 400,
	406, 370, 185, 409, 368, 367, 147, 0, 104, 0,
	164, 113, 363, 122, 412, 377, 404, 351, 359, 105,
	357, 153, 142, 176, 385, 143, 152, 125, 168, 148,
	175, 186, 187, 166, 184, 155, 97, 139, 88, 90,
	165, 174, 102, 156, 93, 172, 162, 163, 131, 117,
	118, 158, 91, 92, 0, 151, 108, 146, 112, 107,
	140, 169, 170, 106, 195, 98, 182, 183, 95, 99,
	181, 138, 180, 167, 173, 132, 129, 94, 171, 130,
	128, 120, 0, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 332, 0, 161, 178, 196, 197,
	347, 407, 188, 189, 190, 191, 0, 0, 0, 137,
	100, 116, 157, 119, 126, 150, 194, 392, 154, 103,
	177, 159, 343, 346, 341, 342, 381, 382, 416, 417,
	418, 398, 338, 0, 344, 345, 0, 402, 384, 89,
	96, 123, 192, 193, 0, 149, 111, 179, 411, 401,
	0, 372, 413, 349, 364, 421, 365, 366, 394, 335,
	380, 141, 361, 0, 352, 330, 358, 331, 350, 374,
	109, 348, 403, 383, 121, 419, 124, 388, 0, 160,
	133, 0, 0, 376, 405, 378, 399, 371, 395, 340,
	387, 414, 362, 391, 415, 0, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 390,
	410, 360, 393, 329, 389, 0, 333, 336, 420, 408,
	355, 356, 0, 0, 0, 0, 0, 0, 0, 375,
	379, 396, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 0, 386, 0, 0, 0, 337, 334, 0,
	373, 0, 0, 0, 339, 0, 354, 397, 0, 328,
	400, 406, 370, 185, 409, 368, 367, 147, 0, 104,
	0, 164, 113, 363, 122, 412, 377, 404, 351, 359,
	105, 357, 153, 142, 176, 385, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 332, 0, 161, 178, 196,
	197, 347, 407, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 392, 154,
	103, 177, 159, 343, 346, 341, 342, 381, 382, 416,
	417, 418, 398, 338, 0, 344, 345, 0, 402, 384,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 411,
	401, 0, 372, 413, 349, 364, 421, 365, 366, 394,
	335, 380, 141, 361, 0, 352, 330, 358, 331, 350,
	374, 109, 348, 403, 383, 121, 419, 124, 388, 0,
	160, 133, 0, 0, 376, 405, 378, 399, 371, 395,
	340, 387, 414, 362, 391, 415, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	390, 410, 360, 393, 329, 389, 0, 333, 336, 420,
	408, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	375, 379, 396, 369, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 0, 386, 0, 0, 0, 337, 334,
	0, 373, 0, 0, 0, 339, 0, 354, 397, 0,
	328, 400, 406, 370, 185, 409, 368, 367, 147, 0,
	104, 0, 164, 113, 363, 122, 412, 377, 404, 351,
	359, 105, 357, 153, 142, 176, 385, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 0, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 332, 0, 161, 178,
	196, 197, 347, 407, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 392,
	154, 103, 177, 159, 343, 346, 341, 342, 381, 382,
	416, 417, 418, 398, 338, 0, 344, 345, 0, 402,
	384, 89, 96, 123, 192, 193, 0, 149, 111, 179,
	411, 401, 0, 372, 413, 349, 364, 421, 365, 366,
	394, 335, 380, 141, 361, 0, 352, 330, 358, 331,
	350, 374, 109, 348, 403, 383, 121, 419, 124, 388,
	0, 160, 133, 0, 0, 376, 405, 378, 399, 371,
	395, 340, 387, 414, 362, 391, 415, 0, 0, 0,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 390, 410, 360, 393, 329, 389, 0, 333, 336,
	420, 408, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 375, 379, 396, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 0, 386, 0, 0, 0, 337,
	334, 0, 373, 0, 0, 0, 339, 0, 354, 397,
	0, 328, 400, 406, 370, 185, 409, 368, 367, 147,
	0, 104, 0, 164, 113, 363, 122, 412, 377, 404,
	351, 359, 105, 357, 153, 142, 176, 385, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 324, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 0, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 332, 0, 161,
	178, 196, 197, 347, 407, 188, 189, 190, 191, 0,
	0, 0, 325, 323, 116, 157, 119, 126, 150, 194,
	392, 154, 103, 177, 159, 343, 346, 341, 342, 381,
	382, 416, 417, 418, 398, 338, 0, 344, 345, 0,
	402, 384, 89, 96, 123, 192, 193, 0, 149, 111,
	179, 411, 401, 0, 372, 413, 349, 364, 421, 365,
	366, 394, 335, 380, 141, 361, 0, 352, 330, 358,
	331, 350, 374, 109, 348, 403, 383, 121, 419, 124,
	388, 0, 160, 133, 0, 0, 376, 405, 378, 399,
	371, 395, 340, 387, 414, 362, 391, 415, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 390, 410, 360, 393, 329, 389, 0, 333,
	336, 420, 408, 355, 356, 0, 0, 0, 0, 0,
	0, 0, 375, 379, 396, 369, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 0, 386, 0, 0, 0,
	337, 334, 0, 373, 0, 0, 0, 339, 0, 354,
	397, 0, 328, 400, 406, 370, 185, 409, 368, 367,
	147, 0, 104, 0, 164, 113, 363, 122, 412, 377,
	404, 351, 359, 105, 357, 153, 142, 176, 385, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 332, 0,
	161, 178, 196, 197, 347, 407, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 392, 154, 103, 177, 159, 343, 346, 341, 342,
	381, 382, 416, 417, 418, 398, 338, 0, 344, 345,
	0, 402, 384, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 411, 401, 0, 372, 413, 349, 364, 421,
	365, 366, 394, 335, 380, 141, 361, 0, 352, 330,
	358, 331, 350, 374, 109, 348, 403, 383, 121, 419,
	124, 388, 0, 160, 133, 0, 0, 376, 405, 378,
	399, 371, 395, 340, 387, 414, 362, 391, 415, 0,
	0, 0, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 390, 410, 360, 393, 329, 389, 0,
	333, 336, 420, 408, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 375, 379, 396, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 0, 386, 0, 0,
	0, 337, 334, 0, 373, 0, 0, 0, 339, 0,
	354, 397, 0, 328, 400, 406, 370, 185, 409, 368,
	367, 147, 0, 104, 0, 164, 113, 363, 122, 412,
	377, 404, 351, 359, 105, 357, 153, 142, 176, 385,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 596, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 324, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 332,
	0, 161, 178, 196, 197, 347, 407, 188, 189, 190,
	191, 0, 0, 0, 325, 323, 116, 157, 119, 126,
	150, 194, 392, 154, 103, 177, 159, 343, 346, 341,
	342, 381, 382, 416, 417, 418, 398, 338, 0, 344,
	345, 0, 402, 384, 89, 96, 123, 192, 193, 0,
	149, 111, 179, 411, 401, 0, 372, 413, 349, 364,
	421, 365, 366, 394, 335, 380, 141, 361, 0, 352,
	330, 358, 331, 350, 374, 109, 348, 403, 383, 121,
	419, 124, 388, 0, 160, 133, 0, 0, 376, 405,
	378, 399, 371, 395, 340, 387, 414, 362, 391, 415,
	0, 0, 0, 326, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 390, 410, 360, 393, 329, 389,
	0, 333, 336, 420, 408, 355, 356, 0, 0, 0,
	0, 0, 0, 0, 375, 379, 396, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 0, 386, 0,
	0, 0, 337, 334, 0, 373, 0, 0, 0, 339,
	0, 354, 397, 0, 328, 400, 406, 370, 185, 409,
	368, 367, 147, 0, 104, 0, 164, 113, 363, 122,
	412, 377, 404, 351, 359, 105, 357, 153, 142, 176,
	385, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 315, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 324, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	332, 0, 161, 178, 196, 197, 347, 407, 188, 189,
	190, 191, 0, 0, 0, 325, 323, 318, 317, 119,
	126, 150, 194, 392, 154, 103, 177, 159, 343, 346,
	341, 342, 381, 382, 416, 417, 418, 398, 338, 0,
	344, 345, 0, 402, 384, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 141, 0, 0, 765, 0, 249,
	0, 0, 0, 109, 246, 0, 0, 121, 288, 124,
	0, 0, 160, 133, 0, 0, 0, 0, 279, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 247, 267, 266, 269, 270, 271, 272, 0, 0,
	101, 268, 273, 274, 275, 0, 0, 244, 260, 0,
	287, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	257, 258, 240, 0, 0, 0, 299, 0, 259, 0,
	0, 255, 256, 261, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 297,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 0, 154, 103, 177, 159, 289, 298, 295, 296,
	293, 294, 292, 291, 290, 300, 281, 282, 283, 284,
	286, 0, 285, 89, 96, 123, 192, 193, 141, 149,
	111, 179, 0, 249, 0, 0, 0, 109, 246, 0,
	0, 121, 288, 124, 0, 0, 160, 133, 0, 0,
	0, 0, 279, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 467, 247, 267, 266, 269, 270,
	271, 272, 0, 0, 101, 268, 273, 274, 275, 0,
	0, 244, 260, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 0, 0, 0, 0,
	299, 0, 259, 0, 0, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 297, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 0, 154, 103, 177, 159,
	289, 298, 295, 296, 293, 294, 292, 291, 290, 300,
	281, 282, 283, 284, 286, 0, 285, 89, 96, 123,
	192, 193, 141, 149, 111, 179, 0, 249, 0, 0,
	0, 109, 246, 0, 0, 121, 288, 124, 0, 0,
	160, 133, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 247,
	267, 266, 269, 270, 271, 272, 0, 0, 101, 268,
	273, 274, 275, 0, 0, 244, 260, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	240, 0, 0, 0, 299, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 297, 147, 0,
	104, 0, 164, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 153, 142, 176, 0, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 0, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 0, 161, 178,
	196, 197, 0, 0, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 0,
	154, 103, 177, 159, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 281, 282, 283, 284, 286, 0,
	285, 89, 96, 123, 192, 193, 141, 149, 111, 179,
	0, 249, 0, 0, 0, 109, 246, 0, 0, 121,
	288, 124, 0, 0, 160, 133, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 0, 0, 828, 0,
	50, 0, 0, 247, 267, 266, 269, 270, 271, 272,
	0, 0, 101, 268, 273, 274, 275, 0, 0, 244,
	260, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 0, 0, 0, 0, 299, 0,
	259, 0, 0, 255, 256, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 297, 147, 0, 104, 0, 164, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 153, 142, 176,
	0, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 0, 154, 103, 177, 159, 289, 298,
	295, 296, 293, 294, 292, 291, 290, 300, 281, 282,
	283, 284, 286, 23, 285, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 141, 0, 0, 0, 0,
	249, 0, 0, 0, 109, 246, 0, 0, 121, 288,
	124, 0, 0, 160, 133, 0, 0, 0, 0, 279,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 247, 267, 266, 269, 270, 271, 272, 0,
	0, 101, 268, 273, 274, 275, 0, 0, 244, 260,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 257, 258, 0, 0, 0, 0, 299, 0, 259,
	0, 0, 255, 256, 261, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	297, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 0, 154, 103, 177, 159, 289, 298, 295,
	296, 293, 294, 292, 291, 290, 300, 281, 282, 283,
	284, 286, 0, 285, 89, 96, 123, 192, 193, 141,
	149, 111, 179, 0, 249, 0, 0, 0, 109, 246,
	0, 0, 121, 288, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 247, 267, 266, 269,
	270, 271, 272, 0, 0, 101, 268, 273, 274, 275,
	0, 0, 244, 260, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 0, 0, 0,
	0, 299, 0, 259, 0, 0, 255, 256, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 297, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 281, 282, 283, 284, 286, 0, 285, 89, 96,
	123, 192, 193, 141, 149, 111, 179, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 121, 288, 124, 0,
	0, 160, 133, 0, 0, 0, 0, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	247, 267, 266, 269, 270, 271, 272, 0, 0, 101,
	268, 273, 274, 275, 0, 0, 0, 260, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 0, 0, 0, 0, 299, 0, 259, 0, 0,
	255, 256, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 297, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 1412, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 0, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	0, 285, 89, 96, 123, 192, 193, 141, 149, 111,
	179, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 288, 124, 0, 0, 160, 133, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 247, 267, 266, 269, 270, 271,
	272, 0, 0, 101, 268, 273, 274, 275, 0, 0,
	0, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 0, 0, 0, 0, 299,
	0, 259, 0, 0, 255, 256, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 297, 147, 0, 104, 0, 164, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 153, 142,
	176, 0, 143, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 99, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 0,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 0, 161, 178, 196, 197, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 0, 154, 103, 177, 159, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 281,
	282, 283, 284, 286, 0, 285, 89, 96, 123, 192,
	193, 141, 149, 111, 179, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 501, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 0, 0, 512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 0, 154,
	103, 177, 159, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 96, 123, 192, 193, 141, 149, 111, 179, 489,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 491, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 486, 485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 0, 154, 103, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 96, 123, 192, 193, 141,
	149, 111, 179, 585, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 587, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 89, 96,
	123, 192, 193, 109, 149, 111, 179, 121, 0, 124,
	0, 0, 160, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 0, 154, 103, 177, 159, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 89, 96, 123, 192, 193, 109, 149,
	111, 179, 121, 0, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 141, 154, 103, 177,
	159, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 160, 133, 0, 0, 89, 96,
	123, 192, 193, 0, 149, 111, 179, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 716, 0, 0, 717,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 147, 0, 104, 0, 164, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 153, 142, 176,
	0, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 141, 154, 103, 177, 159, 0, 0,
	0, 0, 109, 605, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 0, 0, 0, 0, 0,
	326, 0, 604, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 0, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 96, 123, 192, 193, 141, 149, 111,
	179, 585, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 160, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 587, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 147, 0, 104, 0, 164, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 153, 142,
	176, 0, 583, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 99, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 0,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 0, 161, 178, 196, 197, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 141, 154, 103, 177, 159, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 160, 133, 0, 0, 89, 96, 123, 192,
	193, 0, 149, 111, 179, 0, 0, 0, 50, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 141, 154, 103, 177, 159, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 0, 0, 0, 0, 0, 0, 86, 0,
	587, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 326, 0, 491, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 141, 154, 103, 177, 159,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 676, 154, 103, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 96, 123, 192, 193, 141,
	149, 111, 179, 0, 0, 0, 0, 563, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 89, 96,
	123, 192, 193, 109, 149, 111, 179, 121, 0, 124,
	0, 0, 160, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 141, 154, 103, 177, 159, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 141, 154, 103, 177, 159,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 141, 154, 103, 177, 159, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	160, 133, 0, 0, 89, 96, 123, 192, 193, 0,
	149, 111, 179, 0, 0, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 147, 0,
	104, 0, 164, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 153, 142, 176, 0, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 0, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 0, 161, 178,
	196, 197, 0, 0, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 0,
	154, 103, 177, 159, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 96, 123, 192, 193, 0, 149, 111, 179,
}
var yyPact = [...]int{

	1777, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 886, 926, -1000, -1000, -1000, -1000, -1000, -1000, 744,
	44, 115, 130, 17, 10623, 129, 201, 11057, -1000, 18,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 719, -1000, -1000,
	-1000, -1000, -1000, 872, 876, 762, 866, 819, -1000, 5954,
	117, 9276, 10406, 5218, -1000, 538, 126, 11057, -139, 10840,
	113, 113, 113, -1000, 128, 11057, -1000, 11057, 110, 535,
	110, 110, 110, 11057, -1000, 164, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11057, 517,
	843, 62, 3391, 3391, 3391, 3391, 32, 3391, -94, 784,
	-1000, -1000, -1000, -1000, 3391, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 495, 850, 6691, 6691, 886,
	-1000, 719, -1000, -1000, -1000, 844, -1000, -1000, 301, 909,
	-1000, 7667, 160, -1000, 6691, 1985, 705, -1000, -1000, 705,
	-1000, -1000, 141, -1000, -1000, 7179, 7179, 7179, 7179, 7179,
	7179, 7179, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 705, -1000, 6447, 705,
	705, 705, 705, 705, 705, 705, 705, 6691, 705, 705,
	705, 705, 705, 705, 705, 705, 705, 705, 705, 705,
	705, 10171, 699, 751, -1000, -1000, -1000, 859, 8381, 9059,
	11057, 709, -1000, 680, 4957, -104, -1000, -1000, -1000, 259,
	8815, -1000, -1000, -1000, 842, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 650, -1000, 2205, 10840, 3391, 118, 750, 497,
	286, 481, 11057, 9927, 3391, 119, 11057, 854, 783, 11057,
	468, 466, -1000, 4696, -1000, 3391, 3391, 3391, 3391, 3391,
	3391, 3391, 3391, -1000, -1000, -1000, -1000, -1000, -1000, 3391,
	3391, -1000, -61, -1000, 11057, -1000, -1000, -1000, -1000, 921,
	203, 469, 159, 685, -1000, 448, 872, 495, 819, 8598,
	802, -1000, -1000, 11057, -1000, 6691, 6691, 474, -1000, 9710,
	-1000, -1000, 3652, 167, 7179, 345, 282, 7179, 7179, 7179,
	7179, 7179, 7179, 7179, 7179, 7179, 7179, 7179, 7179, 7179,
	7179, 7179, 381, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 457, -1000, 719, 658, 658, 150, 150, 150, 150,
	150, 150, 7423, 5466, 495, 636, 228, 6447, 5954, 5954,
	6691, 6691, 11274, 11274, 5954, 861, 269, 228, 11274, -1000,
	495, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5954, 5954,
	5954, 5954, 47, 11057, -1000, 11274, 9276, 9276, 9276, 9276,
	9276, -1000, 816, 815, -1000, 797, 796, 805, 11057, -1000,
	633, 8381, 182, 705, -1000, 9493, -1000, -1000, 47, 625,
	9276, 11057, -1000, -1000, 4435, 680, -104, 647, -1000, -121,
	-112, 6198, 176, -1000, -1000, -1000, -1000, 2869, 387, 263,
	-129, -71, -1000, -1000, -1000, -1000, 728, -1000, -1000, -1000,
	728, 116, 728, 728, 728, -28, -28, -28, -28, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 737, 735, -1000, 728,
	728, 728, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 731, 121, 731, 729, 729, 771, -1000, 11057, -159,
	453, 3391, 853, 3391, -1000, 75, 11057, -1000, 11057, -1000,
	-1000, 11057, 3391, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 271, -1000,
	-1000, -1000, -1000, 827, 6691, 6691, 4174, 6691, -1000, -1000,
	-1000, 850, -1000, 861, 896, -1000, 836, 835, 5954, -1000,
	-1000, 167, 298, -1000, -1000, 464, -1000, -1000, -1000, -1000,
	158, 705, -1000, 2092, -1000, -1000, -1000, -1000, 345, 7179,
	7179, 7179, 951, 2092, 2073, 929, 712, 150, 358, 358,
	185, 185, 185, 185, 185, 316, 316, -1000, -1000, -1000,
	495, -1000, -1000, -1000, 495, 5954, 655, -1000, -1000, 6691,
	-1000, 495, 631, 631, 423, 419, 724, -1000, 155, 723,
	631, 5954, 314, -1000, 6691, 495, -1000, 631, 495, 631,
	631, 707, 705, -1000, 717, -1000, 258, 751, 768, 781,
	651, -1000, -1000, -1000, -1000, 812, -1000, 809, -1000, -1000,
	-1000, -1000, -1000, 125, 124, 122, 10840, -1000, 904, 9276,
	714, -1000, -1000, 647, -104, -70, -1000, -1000, -1000, 228,
	-1000, -1000, 439, 620, 2608, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 732, 780, 81, 83, 157, 146, 436, 10840,
	-1000, -1000, -1000, 297, 67, 920, -1000, 80, -1000, 74,
	375, -1000, -188, -1000, -74, -1000, -1000, 336, -28, -28,
	728, -28, -1000, -1000, 176, 841, 176, 176, 176, 372,
	372, -164, -164, -1000, -1000, 335, 731, -1000, -1000, -1000,
	328, -1000, 11057, 10840, 3391, -1000, 3913, -1000, -1000, -1000,
	-1000, -1000, -1000, 353, 145, 212, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43, 133, -1000,
	3391, -1000, 296, 11057, 11057, 825, 228, 228, 152, -1000,
	-1000, 11057, -1000, -1000, -1000, -1000, 716, -1000, -1000, -1000,
	3130, 5954, -1000, 951, 2092, 2057, -1000, 7179, 7179, -1000,
	-1000, 631, 5954, 228, -1000, -1000, -1000, 147, 381, 147,
	7179, 7179, 4174, 7179, 7179, -152, 608, 239, -1000, 6691,
	280, -1000, -1000, -1000, -1000, -1000, 779, 11274, 705, -1000,
	8146, 10840, 886, 11274, 6691, 6691, -1000, -1000, 6691, 730,
	-1000, 6691, -1000, -1000, -1000, 705, 705, 705, 566, -1000,
	886, 714, -1000, -1000, -1000, -105, -122, -1000, -1000, 2869,
	-1000, 2869, 10840, 908, -1000, 414, 411, -1000, 388, -1000,
	-1000, 87, -1000, -1000, -1000, -1000, -1000, -1000, 728, -1000,
	-128, -1000, -1000, -1000, -1000, -1000, -1000, 553, 176, 176,
	-28, 176, -1000, 238, -1000, -1000, -1000, 627, -1000, 617,
	-1000, -7, -9, -1000, 604, -1000, 614, 654, 777, -1000,
	586, -1000, 256, -1000, 78, -1000, 10840, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10840, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11057, -1000, -1000,
	-1000, -1000, -1000, 10840, 100, -1000, -1000, 352, 6691, -1000,
	-1000, -1000, 3913, -1000, 904, 9276, -1000, -1000, 495, -1000,
	7179, 2092, 2092, -1000, -1000, 495, 728, 728, -1000, 728,
	729, -1000, -1000, 728, 7, 728, 6, 495, 495, 1380,
	2018, -1000, 856, 1615, 705, -146, -1000, 228, 6691, -1000,
	847, 584, 572, -1000, -1000, 5710, 495, 606, 151, 566,
	872, -1000, 228, 228, 228, 10840, 228, 10840, 10840, 10840,
	7911, 10840, 872, -1000, -1000, -1000, -1000, 2608, -1000, 560,
	-1000, 728, 199, 199, -1000, -1000, -1000, 65, -1000, 728,
	-1000, -1000, -1000, 176, -1000, -1000, -1000, -28, 349, -28,
	-76, -77, 327, -1000, 323, 10840, 10840, 11057, 3913, 2869,
	10840, -1000, -1000, -1000, 727, -1000, -1000, -1000, -1000, 849,
	10840, -1000, -1000, 228, 891, 577, -1000, 2092, -1000, -1000,
	112, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	7179, 7179, -1000, 7179, 7179, 7179, 495, 341, 228, 63,
	-1000, 705, -1000, -1000, 734, 10840, 10840, -1000, -1000, 558,
	-1000, 543, 543, 543, 182, -1000, -1000, 40, 10840, -1000,
	775, -1000, -1000, 292, 22, 773, 10840, -1000, -1000, 176,
	-1000, 176, -1000, -1000, 531, 524, 534, 726, 722, -1000,
	-1000, 721, 10840, 705, 103, 888, 875, -1000, -1000, 1473,
	1473, 1473, 1473, 56, -1000, -1000, 919, -1000, 705, -1000,
	719, 149, -1000, 10840, -1000, -1000, -1000, -1000, -1000, 40,
	-1000, 384, 226, 315, -170, -1000, 910, -1000, -1000, 912,
	713, -1000, -1000, -1000, -1000, 904, 10840, 10840, 10840, 530,
	42, 61, -1000, 6691, 6691, -1000, -1000, -1000, -1000, 495,
	60, -174, 11274, 572, 495, 10840, -1000, -1000, -1000, 309,
	-1000, -1000, 10840, 199, 199, 10840, -1000, 523, 521, 512,
	750, 509, -1000, 10840, 711, 228, 568, -1000, 823, -157,
	-178, 556, -1000, -1000, -1000, -1000, -1000, -1000, 506, -1000,
	904, -1000, -1000, -159, -1000, 42, 834, 10840, -1000, 822,
	-1000, 98, 10840, -1000, -1000, -1000, 36, 504, -160, 11057,
	-1000, 33, -1000, -176, 706, 705, -179, 10840, 6935, -1000,
	494, 1473, 495, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1141, 23, 468, 1138, 1137, 1136, 1135, 1134, 1131,
	1129, 1128, 1127, 1126, 1125, 1124, 1122, 1121, 1119, 1117,
	1116, 1115, 1114, 1113, 195, 1111, 1109, 1102, 72, 1101,
	75, 1100, 1099, 43, 192, 46, 39, 94, 1098, 26,
	61, 58, 1097, 50, 1096, 1095, 79, 1093, 55, 1090,
	1087, 30, 1085, 1084, 17, 5, 1082, 1081, 1078, 1075,
	73, 143, 1074, 1073, 1072, 1071, 1070, 1069, 51, 9,
	15, 11, 18, 1068, 33, 7, 1066, 49, 1065, 1062,
	1059, 1058, 31, 1057, 53, 1056, 20, 52, 1054, 6,
	69, 37, 27, 8, 77, 59, 1053, 32, 67, 48,
	1040, 1038, 418, 1037, 1036, 1035, 1034, 1020, 1017, 445,
	471, 1015, 1011, 1009, 42, 0, 295, 525, 56, 1008,
	41, 1006, 1380, 60, 54, 25, 1003, 74, 1529, 40,
	1001, 1000, 34, 997, 996, 995, 993, 989, 984, 983,
	980, 675, 36, 21, 979, 976, 975, 44, 47, 22,
	45, 57, 973, 972, 28, 971, 14, 13, 1, 66,
	970, 968, 966, 965, 29, 19, 964, 12, 963, 10,
	961, 959, 4, 944, 16, 943, 3, 942, 2, 940,
	939, 938, 1311, 888, 937, 936, 935, 933, 83,
}
var yyR1 = [...]int{

	0, 180, 181, 181, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 184,
	184, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 178, 178, 177, 176, 176, 175, 175, 174, 16,
	161, 162, 162, 162, 162, 151, 133, 133, 133, 133,
	133, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 136, 138, 138, 138, 138, 138,
	134, 134, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 140, 140, 150,
	150, 141, 141, 148, 148, 149, 149, 149, 147, 147,
	147, 144, 144, 145, 145, 146, 146, 146, 142, 142,
	142, 143, 143, 143, 153, 153, 170, 170, 169, 169,
	169, 169, 160, 160, 166, 166, 166, 166, 166, 166,
	166, 159, 159, 168, 168, 167, 154, 154, 154, 154,
	154, 155, 156, 156, 156, 156, 157, 157, 158, 158,
	163, 163, 163, 164, 164, 164, 165, 165, 165, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 185, 185, 186, 186, 186, 186, 186, 186,
	186, 173, 171, 171, 172, 172, 13, 14, 14, 14,
	14, 14, 15, 15, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 107, 107,
	104, 104, 105, 105, 106, 106, 106, 108, 108, 108,
	131, 131, 131, 19, 19, 21, 21, 22, 23, 20,
	20, 20, 20, 20, 187, 24, 25, 25, 26, 26,
	26, 30, 30, 30, 28, 28, 29, 29, 35, 35,
	34, 34, 36, 36, 36, 36, 119, 119, 119, 118,
	118, 38, 38, 39, 39, 40, 40, 41, 41, 41,
	53, 53, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 126, 126, 125, 125,
	125, 124, 124, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 188, 188, 66, 66, 66, 66, 31, 31,
	31, 31, 31, 129, 129, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 97, 94, 94, 98, 98, 98, 96, 96, 96,
	121, 121, 121, 101, 101, 109, 109, 110, 110, 102,
	102, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 112, 113, 113, 116, 116, 117, 117,
	122, 122, 123, 123, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 182, 183,
	127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 2, 2, 3, 3, 3, 3, 3, 4, 3,
	5, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 3, 3, 2, 1,
	1, 1, 4, 4, 4, 5, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 2, 1, 0, 3,
	3, 0, 1, 2, 5, 4, 1, 2, 2, 3,
	2, 3, 0, 1, 2, 3, 3, 2, 3, 2,
	2, 1, 1, 1, 3, 2, 1, 4, 4, 7,
	7, 13, 1, 1, 2, 2, 0, 1, 1, 3,
	0, 1, 3, 1, 2, 3, 1, 1, 1, 6,
	11, 13, 7, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 1, 3, 8, 8, 5, 4, 6, 5,
	4, 4, 3, 2, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 3, 4, 3, 6,
	4, 2, 4, 2, 2, 2, 2, 3, 1, 1,
	0, 1, 0, 1, 0, 2, 2, 0, 2, 2,
	0, 1, 1, 2, 1, 1, 2, 1, 1, 2,
	2, 2, 2, 2, 0, 2, 0, 2, 1, 2,
	2, 0, 1, 1, 0, 1, 0, 1, 0, 1,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	1, 0, 2, 1, 3, 1, 1, 1, 3, 3,
	3, 7, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -180, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -182, 8, 249,
	52, -181, 266, -82, 15, -26, 5, -24, -187, -24,
	-24, -24, -24, -24, -161, 52, -120, 120, 69, 149,
	241, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 241, 117, 118, -51, -122, 55, -115, 156, 257,
	157, 170, 171, 162, 195, 186, 258, 154, 183, 187,
	228, 64, 160, 237, 126, 137, 181, 177, 174, 27,
	201, 264, 176, 129, 202, 206, 229, 167, 168, 231,
	199, 31, 131, 259, 33, 145, 232, 204, 198, 194,
	197, 166, 193, 37, 208, 207, 209, 227, 189, 155,
	178, 18, 140, 143, 203, 205, 175, 124, 147, 263,
	233, 173, 144, 139, 236, 153, 161, 230, 169, 239,
	36, 214, 164, 165, 128, 158, 151, 191, 146, 179,
	180, 196, 163, 192, 159, 148, 141, 238, 215, 265,
	190, 188, 184, 185, 152, 120, 149, 150, 220, 221,
	222, 223, 260, 261, 234, 182, 216, 217, 118, 105,
	187, 111, 218, 119, 31, 147, -131, 118, -104, 150,
	220, 221, 222, 223, 55, 230, 229, 224, -122, 159,
	-127, -127, -127, -127, -127, -2, -86, 17, 16, -5,
	-3, -182, 6, 20, 21, -30, 38, 39, -25, -36,
	96, -37, -122, -56, 71, -61, 28, 55, -115, 23,
	-60, -57, -75, -73, -74, 105, 106, 94, 95, 102,
	72, 107, -65, -63, -64, -66, 57, 56, 65, 58,
	59, 60, 61, 66, 67, 68, -116, -71, -182, 42,
	43, 250, 251, 252, 253, 256, 254, 74, 32, 240,
	248, 247, 246, 244, 245, 242, 243, 123, 241, 100,
	249, -102, -39, -40, -41, -42, -53, -74, -182, -51,
	11, -46, -51, -94, -130, 159, -98, 230, 229, -117,
	-96, -116, -114, 228, 187, 227, 55, -115, 116, 70,
	22, 24, 212, 73, 105, 16, 74, 104, 250, 111,
	46, 242, 243, 240, 252, 253, 241, 218, 28, 10,
	25, 135, 21, 98, 113, 77, 78, 138, 23, 136,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 133, 42, 87,
	17, 244, 245, 30, 256, 142, 100, 47, 34, 71,
	66, 50, 235, 69, 15, 45, 88, 114, 249, 43,
	117, 6, 255, 29, 134, 41, 118, 219, 76, 121,
	67, 5, 132, 9, 48, 51, 246, 247, 248, 32,
	75, 12, -162, -151, 55, 119, -51, 249, -116, -110,
	123, -110, -110, 118, -51, -51, -109, 123, 55, -109,
	-109, -109, -51, 108, -51, 55, 29, 241, 55, 147,
	118, 148, 120, -128, -182, -117, -128, -128, -128, 151,
	152, -128, -105, 225, 50, -128, -183, 54, -87, 19,
	30, -37, -122, -83, -84, -37, -82, -2, -24, 34,
	-28, 21, 63, 11, -119, 70, 69, 86, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-103, -182, -74, -182, 109, 110, -61, -61, -61, -61,
	-61, -61, -61, -182, -2, -69, -37, -182, -182, -182,
	-182, -182, -182, -182, -182, -182, -78, -37, -182, -188,
	-182, -188, -188, -188, -188, -188, -188, -188, -182, -182,
	-182, -182, -52, 26, -51, 29, 53, -47, -49, -48,
	-50, 40, 44, 46, 41, 42, 43, 47, -126, 22,
	-39, -182, -125, 143, -124, 22, -122, 57, -51, -46,
	-184, 53, 11, 51, 53, -94, 159, -95, -99, 231,
	233, 79, -121, -116, 57, 28, 29, 54, 53, -152,
	-133, -137, -134, -139, -138, -140, -135, -136, 186, 258,
	183, 187, 184, 105, 188, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 190, 201, 29, 137, 179,
	180, 181, 182, 202, 203, 204, 205, 206, 207, 208,
	209, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 173, 174, 176, 177, 178, -116, -128, 120, -178,
	51, 55, 71, 55, -51, -51, 235, -128, 121, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 219,
	226, -51, 9, 89, 53, 18, 108, 53, -85, 24,
	25, -86, -183, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 71, 67, 68, -118, 96,
	-123, -117, -114, -61, -68, -71, -74, 62, 89, 87,
	88, 73, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	55, -60, -60, -116, -35, 21, -34, -36, -183, 53,
	-183, -2, -34, -34, -37, -37, -75, -116, -122, -75,
	-34, -28, -76, -77, 75, -75, -183, -34, -35, -34,
	-34, -90, 143, -51, -93, -97, -75, -40, -41, -41,
	-40, -41, 40, 40, 40, 45, 40, 45, 40, -48,
	-122, -183, -54, 48, 122, 49, -182, -124, -90, 51,
	-39, -51, -98, -95, 53, 232, 234, 235, 50, -37,
	-143, 105, 104, -163, -164, -165, -117, 57, 58, -151,
	-153, -154, -166, -155, 124, 128, 129, 132, -159, 126,
	119, 133, 66, 71, 28, 50, 212, 124, 133, 132,
	64, -146, 267, 210, -144, 215, -141, 52, -141, -141,
	185, -141, -141, -141, -142, 187, -142, -142, -142, 52,
	52, -141, -141, -141, -148, 52, 175, -148, -148, -149,
	52, -149, 50, 51, -51, -176, 260, -177, 55, -128,
	23, -128, -111, 116, 113, 114, -173, 112, 212, 187,
	64, 28, 15, 250, 143, 265, 55, 144, -51, -51,
	-51, -128, -106, 11, 89, 36, -37, -37, -123, -84,
	-87, -101, 19, 11, 32, 32, -34, 66, 67, 68,
	108, -182, -68, -61, -61, -61, -33, 138, 70, -183,
	-183, -34, 53, -37, -183, -183, -183, 53, 51, 22,
	53, 11, 108, 53, 11, -183, -34, -79, -77, 77,
	-37, -183, -183, -183, -183, -183, -59, 29, 32, -2,
	-182, -182, -55, 53, 12, 79, -44, -43, 50, 51,
	-45, 50, -43, 40, 40, 119, 119, 119, -91, -116,
	-55, -39, -55, -99, -100, 236, 233, 239, 55, 53,
	-165, 79, 52, 50, 133, -159, -159, 55, -159, 55,
	55, -157, -116, 66, 57, 58, 59, 66, 240, 65,
	9, 133, 133, 57, 268, -145, 216, 58, -142, -142,
	-141, -142, -143, 29, -143, -143, -143, -150, 57, -150,
	-147, 260, 261, -147, 58, -148, 58, -51, -116, -128,
	-175, -174, -117, -127, -120, -186, 149, 125, 130, 129,
	55, 124, 128, 143, -179, 149, 125, 126, 130, 129,
	55, 119, 133, 124, 128, 143, 132, -112, -113, 121,
	22, 119, 133, 143, 116, -128, -108, 87, 12, -122,
	-122, 37, 108, -51, -38, 11, 96, -117, -35, -33,
	70, -61, -61, -183, -36, -132, 105, 183, 137, 181,
	177, 199, 200, 189, 214, 179, 215, -129, -132, -61,
	-61, -117, -61, -61, 257, -82, 78, -37, 76, -92,
	50, -93, -70, -72, -71, -182, -2, -88, -116, -91,
	-82, -97, -37, -37, -37, 52, -37, -182, -182, -182,
	-183, 53, -82, -55, 233, 237, 238, -164, -165, -168,
	-167, -116, 10, 9, 55, 55, 55, 130, -141, 240,
	54, -143, -143, -142, -143, 55, 105, 54, 53, 54,
	179, 179, 53, 54, 53, 52, 51, 50, 53, 79,
	-185, 119, 133, -127, -116, -127, -116, -51, -127, -116,
	126, -154, 57, -37, -55, -39, -183, -61, -183, -141,
	-141, -141, -149, -141, 168, -141, 168, -183, -183, -183,
	53, 19, -183, 53, 19, -182, -32, 255, -37, 27,
	-92, 53, -183, -183, -183, 53, 108, -183, -86, -89,
	-116, -89, -89, -89, -125, -116, -86, 54, 53, -141,
	-156, 153, 154, 29, 155, -156, 133, -141, -143, -142,
	57, -142, 217, 217, 58, 58, -89, -116, -51, -174,
	-165, -116, 52, 26, -116, -80, 13, -142, 55, -61,
	-61, -61, -61, -61, -183, 57, 133, -72, 32, -2,
	-182, -116, -116, 53, 54, -183, -183, -183, -54, -170,
	-169, 51, 131, 64, 260, -167, 50, 66, 156, 50,
	-157, -143, -143, 54, 54, 54, 52, 52, 52, -89,
	-182, 124, -81, 14, 16, -183, -183, -183, -183, -31,
	89, 260, 9, -70, -2, 108, -116, -169, 55, -160,
	79, 57, 262, 9, 10, 52, -55, -89, -89, -89,
	54, -171, -172, 143, 133, -37, -69, -183, 258, 47,
	263, -93, -183, -116, 58, -116, -156, -156, -158, -116,
	54, 54, 54, -178, -183, 53, -116, 52, 37, 259,
	264, 54, 53, -55, -176, -172, 32, -89, 37, 127,
	-116, 145, 54, 260, -51, 146, 263, 52, -182, 264,
	-158, -61, 142, 54, -183, -183,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 556, 0, 324, 324, 324, 324, 324, 324, 0,
	69, 609, 0, 0, 0, 0, -2, 314, 315, 0,
	317, 318, 840, 840, 840, 840, 840, 0, 33, 34,
	838, 1, 3, 564, 0, 0, 328, 331, 326, 0,
	609, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	607, 607, 607, 70, 0, 0, 610, 0, 605, 0,
	605, 605, 605, 0, 273, 395, 630, 631, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 0, 0,
	0, 0, 841, 841, 841, 841, 0, 841, 302, 291,
	293, 294, 295, 296, 841, 311, 312, 301, 313, 316,
	319, 320, 321, 322, 323, 27, 568, 0, 0, 556,
	29, 0, 324, 329, 330, 334, 332, 333, 325, 0,
	342, 346, 0, 403, 0, 408, 410, -2, -2, 0,
	445, 446, 447, 448, 449, 0, 0, 0, 0, 0,
	0, 0, 472, 473, 474, 475, 541, 542, 543, 544,
	545, 546, 547, 548, 412, 413, 538, 588, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 529, 0, 502,
	502, 502, 502, 502, 502, 502, 502, 0, 0, 0,
	0, 0, 0, 353, 355, 356, 357, 376, 0, 378,
	0, 0, 41, 45, 0, 814, 592, -2, -2, 0,
	0, 628, 629, -2, 739, -2, 626, 627, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 0, 81, 0, 0, 841, 0, 71, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 272, 0, 274, 841, 841, 841, 841, 841,
	841, 841, 841, 283, 842, 843, 284, 285, 286, 841,
	841, 288, 0, 303, 0, 297, 28, 839, 22, 0,
	0, 565, 0, 557, 558, 561, 564, 27, 331, 0,
	336, 335, 327, 0, 343, 0, 0, 0, 347, 0,
	349, 350, 0, 406, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 430, 431, 432, 433, 434, 435, 436,
	409, 0, 423, 0, 0, 0, 465, 466, 467, 468,
	469, 470, 0, 338, 27, 0, 443, 0, 0, 0,
	0, 0, 0, 0, 0, 334, 0, 530, 0, 494,
	0, 495, 496, 497, 498, 499, 500, 501, 0, 338,
	0, 0, 43, 0, 394, 0, 0, 0, 0, 0,
	0, 383, 0, 0, 386, 0, 0, 0, 0, 377,
	0, 0, 397, 783, 379, 0, 381, 382, -2, 0,
	0, 0, 39, 40, 0, 46, 814, 48, 49, 0,
	0, 0, 181, 600, 601, 602, 598, 220, 0, 85,
	175, 171, 87, 88, 89, 90, 161, 108, 130, 131,
	161, 161, 161, 161, 161, 178, 178, 178, 178, 142,
	143, 144, 145, 146, 147, 148, 0, 0, 125, 161,
	161, 161, 129, 151, 152, 153, 154, 155, 156, 157,
	158, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 163, 163, 163, 165, 165, 0, 64, 0, 74,
	0, 841, 0, 841, 79, 0, 0, 239, 0, 267,
	606, 0, 841, 270, 271, 396, 632, 633, 275, 276,
	277, 278, 279, 280, 281, 282, 287, 290, 304, 298,
	299, 292, 569, 0, 0, 0, 0, 0, 560, 562,
	563, 568, 30, 334, 0, 549, 0, 0, 0, 337,
	25, 404, 405, 407, 424, 0, 426, 428, 348, 344,
	0, 539, -2, 414, 415, 439, 440, 441, 0, 0,
	0, 0, 437, 419, 0, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 464, 513, 514,
	0, 462, 463, 471, 0, 0, 339, 340, 442, 0,
	587, 27, 0, 0, 0, 0, 0, 538, 0, 0,
	0, 0, 536, 533, 0, 0, 503, 0, 0, 0,
	0, 0, 0, 393, 401, 589, 0, 354, 372, 374,
	0, 369, 384, 385, 387, 0, 389, 0, 391, 392,
	358, 359, 360, 0, 0, 0, 0, 380, 401, 0,
	401, 42, 593, 47, 0, 0, 52, 53, 594, 595,
	596, 182, 0, 80, 221, 223, 226, 227, 228, 82,
	83, 84, 0, 206, 0, 0, 0, 0, 0, 216,
	201, 202, 92, 0, 0, 0, 101, 0, 103, 105,
	0, 91, 0, 177, 173, 172, 107, 0, 178, 178,
	161, 178, 136, 137, 181, 0, 181, 181, 181, 0,
	0, 168, 168, 128, 119, 0, 163, 121, 122, 123,
	0, 124, 0, 0, 841, 66, 0, 72, 73, 67,
	608, 68, 840, 69, 0, 621, 240, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 0, 0, 266,
	841, 269, 307, 0, 0, 0, 566, 567, 0, 559,
	23, 0, 603, 604, 550, 551, 351, 425, 427, 429,
	0, 338, 416, 437, 420, 0, 417, 0, 0, 411,
	476, 0, 0, 444, -2, 479, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 556, 0, 534, 0,
	0, 493, 504, 505, 506, 507, 581, 0, 0, -2,
	0, 0, 556, 0, 0, 0, 366, 373, 0, 0,
	367, 0, 368, 388, 390, 0, 0, 0, 0, 364,
	556, 401, 38, 50, 51, 0, 0, 57, 183, 0,
	224, 0, 0, 0, 194, 0, 0, 197, 0, 199,
	200, 0, 217, 93, 94, 95, 96, 97, 161, 99,
	0, 102, 104, 106, 176, 86, 174, 0, 181, 181,
	178, 181, 138, 0, 139, 140, 141, 0, 159, 0,
	126, 0, 0, 127, 0, 120, 0, 0, 0, 65,
	75, 76, 0, 229, 0, 840, 0, 254, 255, 256,
	257, 258, 259, 260, 840, 0, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 251, 0, 840, 622,
	623, 624, 625, 0, 0, 268, 289, 0, 0, 305,
	306, 570, 0, 24, 401, 0, 345, 540, 0, 418,
	0, 438, 421, 477, 341, 0, 161, 161, 518, 161,
	165, 521, 522, 161, 524, 161, 527, 0, 0, 0,
	0, 539, 0, 0, 0, 531, 492, 537, 0, 31,
	0, 581, 571, 583, 585, 0, 27, 0, 577, 0,
	564, 590, 402, 591, 370, 0, 375, 0, 0, 0,
	378, 0, 564, 37, 54, 55, 56, 222, 225, 0,
	203, 161, 0, 0, 195, 196, 198, 0, 98, 161,
	162, 132, 133, 181, 134, 179, 180, 178, 0, 178,
	0, 0, 0, 166, 0, 0, 0, 0, 0, 0,
	0, 252, 253, 233, 0, 234, 236, 237, 238, 0,
	216, 232, 308, 309, 552, 352, 478, 422, 481, 515,
	178, 519, 520, 523, 525, 526, 528, 483, 482, 484,
	0, 0, 487, 0, 0, 0, 0, 0, 535, 0,
	32, 0, 586, -2, 0, 0, 0, 44, 35, 0,
	362, 0, 0, 0, 397, 365, 36, 185, 0, 205,
	207, 212, 213, 0, 0, 208, 216, 100, 135, 181,
	160, 181, 169, 170, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 0, 217, 554, 0, 516, 517, 0,
	0, 0, 0, 508, 491, 532, 0, 584, 0, -2,
	0, 579, 578, 0, 371, 398, 399, 400, 361, 184,
	186, 0, 192, 0, 0, 204, 0, 214, 215, 0,
	0, 149, 150, 164, 167, 401, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 485, 486, 488, 489, 0,
	0, 0, 0, 574, 27, 0, 363, 187, 188, 0,
	193, 190, 0, 0, 0, 0, 61, 0, 0, 0,
	71, 0, 262, 0, 0, 555, 553, 490, 0, 0,
	0, 582, -2, 580, 189, 191, 209, 210, 0, 218,
	401, 62, 230, 74, 261, 0, 0, 0, 509, 0,
	512, 0, 0, 63, 235, 263, 0, 0, 510, 0,
	219, 0, 231, 0, 0, 0, 0, 0, 0, 511,
	0, 0, 0, 211, 264, 265,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 266,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 267, 3, 268, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:311
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:316
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:317
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:321
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:344
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:352
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:356
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:362
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:369
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:375
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:379
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:396
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:408
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:420
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:424
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:430
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:440
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:450
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:458
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:463
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:467
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:495
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:501
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:505
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:533
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:537
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:543
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:564
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:619
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:623
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:628
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:632
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:638
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:643
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:654
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:659
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:665
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:671
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:678
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:685
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:690
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:694
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:698
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:704
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:720
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:731
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:736
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:741
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:746
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:751
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:756
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:761
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:766
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:771
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:781
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:786
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:791
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:796
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:801
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:813
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1049
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1054
		{
			yyVAL.optVal = nil
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1058
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1063
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1067
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1075
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1079
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1085
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1093
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1106
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1110
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1115
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1124
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1128
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1132
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1137
		{
			yyVAL.str = ""
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1141
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1145
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1150
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1158
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1164
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1168
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1174
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1178
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1184
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1188
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1193
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1197
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1203
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1207
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1213
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1221
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1225
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1229
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1233
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1237
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1243
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1247
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1253
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1257
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1263
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1270
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1276
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 209:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1282
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 210:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1288
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 211:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1296
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1308
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1312
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1316
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1320
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1325
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1332
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1336
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1341
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1345
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1349
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1357
		{
			yyVAL.str = yyDollar[1].str
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1361
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1365
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1371
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1375
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1379
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1385
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1389
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 231:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1403
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1417
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1426
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1430
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1434
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1447
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1457
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1462
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1467
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1471
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1503
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1509
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1513
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1519
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1523
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1529
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1535
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1543
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1548
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1556
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1560
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1570
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1585
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1589
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1622
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1630
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1638
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1648
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1668
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1672
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1688
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1692
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1698
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1702
		{
			yyVAL.str = "extended "
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1708
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1712
		{
			yyVAL.str = "full "
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1718
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1722
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1726
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1732
		{
			yyVAL.showFilter = nil
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1736
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1740
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1746
		{
			yyVAL.str = ""
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1750
		{
			yyVAL.str = SessionStr
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1754
		{
			yyVAL.str = GlobalStr
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1760
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1764
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1770
		{
			yyVAL.statement = &Begin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1774
		{
			yyVAL.statement = &Begin{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1780
		{
			yyVAL.statement = &Commit{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1786
		{
			yyVAL.statement = &Rollback{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1796
		{
			yyVAL.statement = &OtherRead{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1800
		{
			yyVAL.statement = &OtherRead{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1804
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1808
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1813
		{
			setAllowComments(yylex, true)
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1817
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1823
		{
			yyVAL.bytes2 = nil
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1827
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1833
		{
			yyVAL.str = UnionStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1837
		{
			yyVAL.str = UnionAllStr
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1841
		{
			yyVAL.str = UnionDistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1846
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1850
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1854
		{
			yyVAL.str = SQLCacheStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1859
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1863
		{
			yyVAL.str = DistinctStr
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1868
		{
			yyVAL.str = ""
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1872
		{
			yyVAL.str = StraightJoinHint
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1877
		{
			yyVAL.selectExprs = nil
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1881
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1887
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1891
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1897
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1901
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1905
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 345:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1909
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1914
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1918
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1922
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1934
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1938
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1944
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1948
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1958
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1962
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1966
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1972
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1976
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1986
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1992
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1996
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2009
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2013
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2017
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2021
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2027
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2029
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2033
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2035
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2039
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2041
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2044
		{
			yyVAL.empty = struct{}{}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2046
		{
			yyVAL.empty = struct{}{}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2049
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2053
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2057
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2064
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2070
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2074
		{
			yyVAL.str = JoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2078
		{
			yyVAL.str = JoinStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2084
		{
			yyVAL.str = StraightJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2090
		{
			yyVAL.str = LeftJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2094
		{
			yyVAL.str = LeftJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2098
		{
			yyVAL.str = RightJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2102
		{
			yyVAL.str = RightJoinStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2108
		{
			yyVAL.str = NaturalJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2112
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2122
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2126
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2132
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2136
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2141
		{
			yyVAL.indexHints = nil
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2145
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2149
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 400:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2153
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2158
		{
			yyVAL.expr = nil
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2162
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2168
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2172
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2176
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2180
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2184
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2192
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2198
		{
			yyVAL.str = ""
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2202
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2208
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2212
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2230
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 418:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2238
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2242
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2246
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 422:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2250
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2254
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2260
		{
			yyVAL.str = IsNullStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2264
		{
			yyVAL.str = IsNotNullStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2268
		{
			yyVAL.str = IsTrueStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2272
		{
			yyVAL.str = IsNotTrueStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2276
		{
			yyVAL.str = IsFalseStr
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2280
		{
			yyVAL.str = IsNotFalseStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2286
		{
			yyVAL.str = EqualStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2290
		{
			yyVAL.str = LessThanStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.str = GreaterThanStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2298
		{
			yyVAL.str = LessEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2302
		{
			yyVAL.str = GreaterEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2306
		{
			yyVAL.str = NotEqualStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2310
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2315
		{
			yyVAL.expr = nil
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2319
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2325
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2329
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2333
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2339
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2345
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2349
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2355
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2359
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2363
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2423
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2427
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2431
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2435
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2439
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2443
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2451
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2465
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2473
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2491
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2495
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2499
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 480:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2517
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2521
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2525
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 484:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2529
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 485:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2533
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2537
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2541
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 488:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2545
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 489:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2549
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 490:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2553
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 491:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2557
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2561
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2565
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2592
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2597
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2607
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2625
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2629
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2639
		{
			yyVAL.str = ""
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2643
		{
			yyVAL.str = BooleanModeStr
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2647
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2651
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2655
		{
			yyVAL.str = QueryExpansionStr
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2661
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2665
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2687
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2691
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2721
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2725
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2730
		{
			yyVAL.expr = nil
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2734
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2739
		{
			yyVAL.str = string("")
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2743
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2749
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2753
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2759
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2764
		{
			yyVAL.expr = nil
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2768
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2774
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2778
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2782
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2788
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2792
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2796
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2800
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2808
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2812
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2816
		{
			yyVAL.expr = &NullVal{}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2822
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2831
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2835
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2840
		{
			yyVAL.exprs = nil
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2844
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2849
		{
			yyVAL.expr = nil
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2858
		{
			yyVAL.orderBy = nil
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2862
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2868
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2872
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2878
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2883
		{
			yyVAL.str = AscScr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2887
		{
			yyVAL.str = AscScr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2891
		{
			yyVAL.str = DescScr
		}
	case 564:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2896
		{
			yyVAL.limit = nil
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2900
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2904
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2908
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2913
		{
			yyVAL.str = ""
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2917
		{
			yyVAL.str = ForUpdateStr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2921
		{
			yyVAL.str = ShareModeStr
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2934
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2942
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2947
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2951
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 576:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2955
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2962
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2966
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2970
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2974
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2979
		{
			yyVAL.updateExprs = nil
		}
	case 582:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2983
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2989
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2993
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3003
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3009
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3015
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3025
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3029
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3035
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3041
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3045
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3051
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3055
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3059
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3066
		{
			yyVAL.bytes = []byte("charset")
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3081
		{
			yyVAL.expr = &Default{}
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3090
		{
			yyVAL.byt = 0
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3092
		{
			yyVAL.byt = 1
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3095
		{
			yyVAL.empty = struct{}{}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3097
		{
			yyVAL.empty = struct{}{}
		}
	case 609:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3100
		{
			yyVAL.str = ""
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3102
		{
			yyVAL.str = IgnoreStr
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3116
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3118
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3120
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3122
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3124
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3131
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3135
		{
			yyVAL.empty = struct{}{}
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3137
		{
			yyVAL.empty = struct{}{}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3141
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3145
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3152
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3158
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3162
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3169
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3399
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3408
		{
			decNesting(yylex)
		}
	case 840:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3413
		{
			forceEOF(yylex)
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3418
		{
			forceEOF(yylex)
		}
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3422
		{
			forceEOF(yylex)
		}
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3426
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
