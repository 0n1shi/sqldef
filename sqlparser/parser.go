// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	triggerBody          []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const UNIQUE = 57460
const KEY = 57461
const SHOW = 57462
const DESCRIBE = 57463
const EXPLAIN = 57464
const DATE = 57465
const ESCAPE = 57466
const REPAIR = 57467
const OPTIMIZE = 57468
const TRUNCATE = 57469
const MAXVALUE = 57470
const PARTITION = 57471
const REORGANIZE = 57472
const LESS = 57473
const THAN = 57474
const PROCEDURE = 57475
const TRIGGER = 57476
const VINDEX = 57477
const VINDEXES = 57478
const STATUS = 57479
const VARIABLES = 57480
const RESTRICT = 57481
const CASCADE = 57482
const NO = 57483
const ACTION = 57484
const PERMISSIVE = 57485
const RESTRICTIVE = 57486
const PUBLIC = 57487
const CURRENT_USER = 57488
const SESSION_USER = 57489
const PAD_INDEX = 57490
const FILLFACTOR = 57491
const IGNORE_DUP_KEY = 57492
const STATISTICS_NORECOMPUTE = 57493
const STATISTICS_INCREMENTAL = 57494
const ALLOW_ROW_LOCKS = 57495
const ALLOW_PAGE_LOCKS = 57496
const BEFORE = 57497
const AFTER = 57498
const EACH = 57499
const ROW = 57500
const SCROLL = 57501
const CURSOR = 57502
const OPEN = 57503
const CLOSE = 57504
const FETCH = 57505
const PRIOR = 57506
const FIRST = 57507
const LAST = 57508
const BEGIN = 57509
const START = 57510
const TRANSACTION = 57511
const COMMIT = 57512
const ROLLBACK = 57513
const BIT = 57514
const TINYINT = 57515
const SMALLINT = 57516
const SMALLSERIAL = 57517
const MEDIUMINT = 57518
const INT = 57519
const INTEGER = 57520
const SERIAL = 57521
const BIGINT = 57522
const BIGSERIAL = 57523
const INTNUM = 57524
const REAL = 57525
const DOUBLE = 57526
const PRECISION = 57527
const FLOAT_TYPE = 57528
const DECIMAL = 57529
const NUMERIC = 57530
const SMALLMONEY = 57531
const MONEY = 57532
const TIME = 57533
const TIMESTAMP = 57534
const DATETIME = 57535
const YEAR = 57536
const DATETIMEOFFSET = 57537
const DATETIME2 = 57538
const SMALLDATETIME = 57539
const CHAR = 57540
const VARCHAR = 57541
const VARYING = 57542
const BOOL = 57543
const CHARACTER = 57544
const VARBINARY = 57545
const NCHAR = 57546
const NVARCHAR = 57547
const NTEXT = 57548
const UUID = 57549
const TEXT = 57550
const TINYTEXT = 57551
const MEDIUMTEXT = 57552
const LONGTEXT = 57553
const CITEXT = 57554
const BLOB = 57555
const TINYBLOB = 57556
const MEDIUMBLOB = 57557
const LONGBLOB = 57558
const JSON = 57559
const JSONB = 57560
const ENUM = 57561
const GEOMETRY = 57562
const POINT = 57563
const LINESTRING = 57564
const POLYGON = 57565
const GEOMETRYCOLLECTION = 57566
const MULTIPOINT = 57567
const MULTILINESTRING = 57568
const MULTIPOLYGON = 57569
const ARRAY = 57570
const NOW = 57571
const GETDATE = 57572
const BPCHAR = 57573
const NULLX = 57574
const AUTO_INCREMENT = 57575
const APPROXNUM = 57576
const SIGNED = 57577
const UNSIGNED = 57578
const ZEROFILL = 57579
const ZONE = 57580
const AUTOINCREMENT = 57581
const DATABASES = 57582
const TABLES = 57583
const VITESS_KEYSPACES = 57584
const VITESS_SHARDS = 57585
const VITESS_TABLETS = 57586
const VSCHEMA_TABLES = 57587
const EXTENDED = 57588
const FULL = 57589
const PROCESSLIST = 57590
const NAMES = 57591
const CHARSET = 57592
const GLOBAL = 57593
const SESSION = 57594
const ISOLATION = 57595
const LEVEL = 57596
const READ = 57597
const WRITE = 57598
const ONLY = 57599
const REPEATABLE = 57600
const COMMITTED = 57601
const UNCOMMITTED = 57602
const SERIALIZABLE = 57603
const CURRENT_TIMESTAMP = 57604
const DATABASE = 57605
const CURRENT_DATE = 57606
const CURRENT_TIME = 57607
const LOCALTIME = 57608
const LOCALTIMESTAMP = 57609
const UTC_DATE = 57610
const UTC_TIME = 57611
const UTC_TIMESTAMP = 57612
const REPLACE = 57613
const CONVERT = 57614
const CAST = 57615
const SUBSTR = 57616
const SUBSTRING = 57617
const GROUP_CONCAT = 57618
const SEPARATOR = 57619
const INHERIT = 57620
const MATCH = 57621
const AGAINST = 57622
const BOOLEAN = 57623
const LANGUAGE = 57624
const WITH = 57625
const WITHOUT = 57626
const PARSER = 57627
const QUERY = 57628
const EXPANSION = 57629
const UNUSED = 57630
const GENERATED = 57631
const ALWAYS = 57632
const IDENTITY = 57633
const SEQUENCE = 57634
const INCREMENT = 57635
const MINVALUE = 57636
const CACHE = 57637
const CYCLE = 57638
const OWNED = 57639
const NONE = 57640
const CLUSTERED = 57641
const NONCLUSTERED = 57642
const REPLICATION = 57643
const INCLUDE = 57644
const TYPECAST = 57645
const CHECK = 57646

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 123,
	-2, 113,
	-1, 36,
	154, 435,
	155, 435,
	-2, 425,
	-1, 272,
	110, 768,
	-2, 764,
	-1, 273,
	110, 769,
	-2, 765,
	-1, 343,
	81, 971,
	-2, 74,
	-1, 344,
	81, 922,
	-2, 75,
	-1, 349,
	81, 901,
	-2, 735,
	-1, 351,
	81, 945,
	-2, 737,
	-1, 661,
	52, 41,
	54, 41,
	-2, 43,
	-1, 806,
	110, 771,
	-2, 767,
	-1, 1048,
	5, 28,
	-2, 570,
	-1, 1073,
	5, 27,
	-2, 709,
	-1, 1174,
	5, 27,
	-2, 80,
	-1, 1391,
	5, 28,
	-2, 710,
	-1, 1474,
	5, 27,
	-2, 712,
	-1, 1616,
	5, 28,
	-2, 713,
	-1, 1731,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15434

var yyAct = [...]int{
	273, 1606, 270, 1524, 1558, 1076, 1487, 1288, 1595, 983,
	738, 587, 3, 1397, 1107, 1484, 870, 277, 1528, 588,
	1410, 1261, 473, 302, 507, 1165, 782, 1262, 1289, 1623,
	1110, 1176, 1132, 888, 276, 89, 655, 1258, 89, 653,
	918, 912, 978, 251, 991, 932, 907, 1138, 911, 53,
	245, 871, 348, 842, 1234, 1092, 1040, 839, 831, 250,
	744, 1162, 89, 89, 353, 66, 671, 858, 520, 353,
	961, 808, 353, 353, 279, 973, 927, 1081, 89, 526,
	89, 471, 670, 867, 532, 642, 89, 342, 345, 657,
	540, 275, 689, 335, 246, 247, 248, 249, 330, 260,
	1022, 328, 1658, 339, 337, 685, 611, 329, 1146, 52,
	1696, 1314, 554, 264, 948, 564, 1648, 564, 1416, 945,
	1302, 548, 1423, 551, 474, 475, 1301, 1130, 86, 566,
	567, 568, 569, 570, 571, 572, 333, 549, 550, 547,
	553, 552, 562, 563, 555, 556, 557, 558, 559, 560,
	561, 554, 1737, 1673, 564, 1733, 338, 1551, 553, 552,
	562, 563, 555, 556, 557, 558, 559, 560, 561, 554,
	519, 486, 564, 487, 1689, 1614, 1562, 1563, 1723, 494,
	553, 552, 562, 563, 555, 556, 557, 558, 559, 560,
	561, 554, 947, 841, 564, 1166, 1167, 1682, 984, 1652,
	1672, 1253, 1637, 1381, 519, 1385, 1613, 553, 552, 562,
	563, 555, 556, 557, 558, 559, 560, 561, 554, 1382,
	484, 564, 505, 1283, 89, 1284, 1285, 901, 353, 353,
	353, 353, 1100, 353, 515, 1099, 902, 903, 1101, 1440,
	353, 553, 552, 562, 563, 555, 556, 557, 558, 559,
	560, 561, 554, 1439, 1148, 564, 552, 562, 563, 555,
	556, 557, 558, 559, 560, 561, 554, 353, 529, 564,
	555, 556, 557, 558, 559, 560, 561, 554, 950, 1463,
	564, 962, 1515, 579, 580, 581, 582, 583, 584, 585,
	952, 862, 553, 552, 562, 563, 555, 556, 557, 558,
	559, 560, 561, 554, 528, 1374, 564, 474, 475, 773,
	1334, 1145, 1378, 519, 1379, 1333, 774, 496, 562, 563,
	555, 556, 557, 558, 559, 560, 561, 554, 89, 565,
	564, 565, 1372, 974, 1638, 89, 89, 89, 244, 1699,
	1688, 353, 1690, 1142, 1591, 1144, 1143, 353, 1503, 575,
	553, 552, 562, 563, 555, 556, 557, 558, 559, 560,
	561, 554, 1526, 1581, 564, 345, 1552, 672, 565, 673,
	553, 552, 562, 563, 555, 556, 557, 558, 559, 560,
	561, 554, 1599, 1732, 564, 1607, 565, 553, 552, 562,
	563, 555, 556, 557, 558, 559, 560, 561, 554, 746,
	747, 564, 557, 558, 559, 560, 561, 554, 565, 333,
	564, 1304, 1344, 1345, 500, 616, 511, 512, 1129, 1041,
	1721, 637, 1212, 868, 1642, 1563, 1608, 945, 617, 1428,
	661, 1295, 1349, 1471, 1418, 565, 1417, 1644, 1681, 1427,
	1358, 662, 962, 1124, 668, 1430, 301, 1350, 602, 934,
	1123, 508, 509, 510, 955, 513, 1612, 1112, 75, 1708,
	1117, 928, 517, 941, 1639, 930, 745, 1542, 1429, 565,
	1115, 931, 84, 80, 81, 82, 929, 89, 502, 489,
	504, 1296, 975, 565, 89, 479, 89, 353, 78, 89,
	1413, 77, 89, 78, 565, 1448, 89, 752, 353, 353,
	353, 353, 353, 353, 353, 353, 70, 73, 501, 503,
	347, 476, 353, 353, 1091, 477, 1090, 89, 481, 482,
	565, 71, 74, 1209, 937, 928, 933, 942, 1600, 1601,
	1602, 1089, 353, 939, 938, 928, 89, 736, 72, 68,
	929, 485, 353, 223, 565, 889, 891, 79, 761, 807,
	929, 1213, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 577, 578, 805,
	737, 809, 785, 1727, 1556, 683, 1394, 748, 565, 749,
	57, 1488, 753, 1221, 1056, 756, 353, 746, 747, 1640,
	1641, 1643, 1645, 1646, 1490, 1034, 759, 806, 565, 780,
	544, 495, 846, 909, 908, 59, 60, 61, 62, 63,
	775, 815, 1328, 851, 854, 565, 1411, 1412, 1414, 860,
	890, 1210, 810, 1208, 565, 813, 814, 812, 1017, 794,
	787, 777, 802, 83, 538, 537, 1211, 89, 499, 539,
	89, 89, 89, 89, 89, 804, 1574, 1573, 935, 1572,
	1571, 539, 89, 1570, 936, 89, 872, 537, 616, 89,
	1569, 1568, 1489, 1329, 89, 89, 846, 69, 353, 836,
	837, 617, 834, 539, 347, 347, 347, 347, 1566, 347,
	1341, 353, 1217, 856, 538, 537, 347, 1079, 674, 1255,
	864, 1257, 345, 859, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 539, 1109, 896, 943, 913, 944, 741, 1018, 751,
	859, 1502, 1063, 542, 333, 333, 333, 333, 333, 940,
	762, 763, 764, 765, 766, 767, 768, 769, 534, 333,
	869, 1711, 1505, 1053, 770, 771, 885, 353, 333, 874,
	875, 353, 877, 353, 89, 894, 89, 873, 893, 76,
	876, 89, 899, 89, 1109, 898, 89, 353, 897, 1216,
	1052, 1710, 1051, 916, 604, 605, 606, 607, 608, 609,
	610, 963, 964, 965, 966, 1501, 980, 1108, 472, 538,
	537, 538, 537, 1120, 50, 847, 848, 347, 783, 784,
	1567, 855, 1624, 676, 811, 1687, 539, 1109, 539, 1109,
	1470, 1488, 798, 800, 801, 805, 976, 977, 799, 478,
	327, 1625, 1683, 951, 1490, 1189, 1037, 1038, 1039, 1031,
	1032, 1033, 1433, 488, 1686, 863, 1149, 865, 866, 1486,
	1685, 1119, 1626, 806, 538, 537, 809, 990, 530, 995,
	1622, 1432, 1229, 928, 1012, 1149, 1013, 1513, 923, 1014,
	922, 539, 924, 925, 1024, 1684, 779, 926, 929, 1442,
	1441, 1023, 553, 552, 562, 563, 555, 556, 557, 558,
	559, 560, 561, 554, 1310, 832, 564, 833, 1437, 1073,
	480, 266, 1489, 483, 1036, 1190, 1186, 810, 1171, 1191,
	1188, 1187, 778, 353, 74, 1169, 89, 519, 1149, 1360,
	1094, 1163, 1096, 1126, 1564, 1192, 491, 492, 493, 538,
	537, 1185, 353, 1299, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1589, 1741, 353, 519, 1062, 539, 1478, 1729, 1407,
	1722, 1407, 1695, 347, 353, 1095, 913, 1407, 1694, 1584,
	538, 537, 1298, 89, 347, 347, 347, 347, 347, 347,
	347, 347, 1297, 1104, 1086, 1125, 1118, 539, 347, 347,
	1407, 1680, 1583, 987, 1102, 989, 986, 1097, 1589, 1679,
	333, 1520, 292, 291, 294, 295, 296, 297, 789, 1015,
	1140, 293, 298, 1676, 1675, 353, 1030, 835, 542, 1668,
	519, 347, 1407, 1665, 1174, 758, 1168, 1478, 1604, 1407,
	1585, 1113, 1114, 1116, 1478, 1511, 1478, 519, 1156, 1177,
	1158, 1159, 1160, 1161, 757, 353, 1478, 1479, 89, 89,
	1407, 1406, 1280, 519, 1150, 1151, 89, 1153, 1154, 1155,
	1164, 742, 838, 740, 1045, 353, 1393, 519, 1337, 1336,
	1331, 1332, 852, 852, 1230, 1231, 497, 1182, 852, 1561,
	1060, 1170, 1331, 1330, 1046, 519, 1181, 1248, 1249, 1226,
	1251, 1252, 518, 1183, 639, 519, 844, 519, 681, 680,
	48, 26, 27, 490, 665, 353, 353, 472, 23, 1519,
	21, 1250, 1535, 1514, 1434, 852, 1265, 1425, 1260, 872,
	565, 23, 28, 1227, 1228, 872, 1263, 1590, 1321, 1589,
	1233, 1282, 1071, 1078, 353, 1072, 353, 353, 1247, 806,
	1254, 1246, 1077, 844, 347, 666, 1078, 664, 1473, 1222,
	1259, 1656, 54, 1077, 23, 50, 1269, 347, 913, 1270,
	913, 1268, 1224, 1058, 523, 527, 255, 1055, 50, 50,
	1199, 1300, 1389, 639, 1281, 639, 895, 1287, 664, 1444,
	1443, 545, 1286, 644, 647, 648, 649, 645, 1077, 646,
	650, 1046, 1424, 1082, 1083, 1340, 1311, 1303, 1140, 638,
	1305, 50, 1734, 89, 353, 1046, 1057, 1335, 1103, 900,
	1054, 89, 1046, 981, 667, 589, 353, 347, 781, 347,
	1693, 257, 739, 639, 600, 353, 1670, 1322, 1323, 1587,
	1325, 1326, 1327, 347, 1586, 1200, 1578, 89, 1577, 1539,
	1202, 1195, 1196, 353, 1203, 1198, 1197, 1512, 1457, 1205,
	1201, 952, 353, 1324, 979, 89, 1347, 347, 1320, 1362,
	1204, 1319, 1365, 1317, 1307, 1351, 1194, 1214, 50, 1274,
	1536, 1537, 1538, 974, 1353, 1131, 1226, 1172, 1173, 644,
	647, 648, 649, 645, 1359, 646, 650, 1106, 1356, 968,
	1082, 1083, 1559, 967, 1363, 65, 1338, 1445, 1259, 1180,
	1085, 755, 743, 516, 1346, 353, 793, 353, 353, 353,
	89, 353, 1370, 882, 880, 1088, 1087, 353, 883, 881,
	1400, 1401, 1402, 884, 879, 648, 649, 878, 1388, 333,
	1355, 261, 262, 1705, 1671, 1220, 1019, 533, 353, 1703,
	1029, 913, 1028, 1396, 1415, 521, 1403, 1157, 679, 1420,
	531, 1422, 498, 1309, 1419, 1405, 1387, 522, 1104, 1700,
	783, 784, 988, 1458, 754, 1455, 1308, 1179, 982, 1093,
	652, 353, 353, 258, 259, 1426, 533, 1140, 1312, 353,
	49, 1719, 1027, 1134, 1135, 1136, 1454, 1343, 347, 353,
	1026, 1139, 1137, 299, 300, 1177, 913, 1294, 252, 1111,
	1691, 1435, 1446, 1450, 1545, 1451, 1452, 1453, 253, 54,
	1121, 1464, 1465, 1447, 1466, 1467, 1468, 1544, 1449, 1461,
	1078, 992, 993, 994, 353, 353, 1664, 1663, 1662, 1661,
	535, 1436, 1576, 1438, 1474, 1293, 1292, 1575, 353, 1553,
	1122, 776, 56, 1263, 1533, 8, 58, 1472, 353, 795,
	796, 1530, 7, 1531, 6, 1500, 1529, 5, 1184, 1348,
	1504, 347, 663, 51, 1, 1499, 1498, 1483, 1657, 1462,
	1593, 1508, 1527, 1598, 353, 353, 89, 1582, 1506, 353,
	1128, 1521, 1580, 67, 1516, 1651, 1588, 1313, 353, 1342,
	1178, 347, 1193, 985, 1175, 1000, 1605, 1619, 1485, 920,
	910, 1540, 589, 470, 64, 849, 850, 1565, 921, 353,
	919, 347, 917, 1517, 682, 1518, 946, 1555, 1147, 949,
	688, 686, 1560, 687, 684, 1554, 690, 1263, 231, 340,
	651, 675, 536, 347, 1207, 953, 954, 956, 957, 958,
	1206, 959, 960, 996, 1215, 772, 1016, 514, 852, 233,
	573, 1267, 1093, 1025, 852, 1098, 346, 1647, 969, 970,
	971, 1266, 972, 525, 1543, 1460, 353, 353, 353, 1523,
	353, 1141, 1145, 1061, 599, 857, 1592, 1603, 278, 797,
	347, 290, 347, 1290, 287, 289, 906, 353, 288, 788,
	353, 303, 47, 1070, 353, 1610, 546, 268, 332, 1620,
	1615, 872, 635, 643, 1142, 641, 1144, 1143, 353, 353,
	640, 1634, 1084, 1080, 331, 1223, 1635, 353, 353, 1384,
	353, 1550, 786, 792, 1649, 1650, 1632, 1633, 25, 353,
	1627, 1628, 1629, 1630, 1631, 55, 263, 19, 353, 47,
	1655, 18, 17, 20, 16, 1666, 15, 256, 14, 29,
	1339, 1133, 13, 334, 12, 11, 1134, 1135, 1136, 10,
	9, 1534, 1352, 1532, 1139, 1137, 299, 300, 4, 254,
	22, 1354, 2, 0, 0, 0, 0, 1677, 1678, 0,
	843, 845, 0, 1692, 0, 0, 0, 353, 0, 1357,
	1020, 1021, 0, 527, 0, 1697, 861, 0, 347, 0,
	1702, 353, 0, 0, 0, 353, 1701, 0, 1704, 0,
	0, 0, 0, 1707, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 353, 0, 1709, 0, 0, 0,
	1716, 353, 0, 0, 0, 0, 0, 1715, 1714, 89,
	0, 1717, 0, 0, 1726, 0, 887, 0, 0, 1728,
	0, 1398, 0, 1398, 1398, 1398, 1047, 1404, 353, 0,
	0, 1731, 1730, 347, 0, 353, 0, 1042, 1738, 1739,
	612, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1735, 0, 1398, 0, 0, 553, 552, 562,
	563, 555, 556, 557, 558, 559, 560, 561, 554, 1152,
	0, 564, 0, 614, 1134, 1135, 1136, 0, 0, 0,
	0, 0, 1139, 1137, 299, 300, 0, 347, 347, 506,
	506, 506, 506, 0, 506, 1456, 0, 0, 0, 0,
	0, 506, 1725, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 1141, 1145, 0, 0, 47, 0,
	0, 0, 619, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 0, 574, 0, 0, 576, 0, 0, 0,
	1476, 1477, 0, 615, 0, 0, 0, 1142, 0, 1144,
	1143, 629, 613, 0, 1290, 0, 0, 0, 618, 0,
	229, 0, 0, 586, 1507, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 0, 601, 603, 603, 603, 603,
	603, 603, 603, 603, 239, 631, 632, 633, 634, 1006,
	1290, 1522, 0, 0, 0, 1525, 654, 0, 1043, 0,
	0, 0, 1044, 1005, 1398, 0, 0, 0, 0, 1048,
	1049, 1050, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 0, 1065, 0, 1557, 1066, 1067, 1068, 1069,
	1010, 630, 0, 0, 0, 224, 0, 0, 0, 1004,
	0, 226, 0, 0, 0, 1256, 0, 0, 232, 228,
	0, 0, 0, 0, 0, 0, 1316, 1318, 0, 0,
	1271, 1272, 1141, 1145, 1273, 0, 0, 1275, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 230, 0,
	0, 234, 1594, 1596, 1597, 565, 1290, 0, 1001, 998,
	999, 0, 997, 0, 0, 1142, 0, 1144, 1143, 0,
	852, 0, 0, 1617, 0, 0, 1618, 0, 0, 0,
	1621, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 1011, 1235, 0, 1525, 1290, 0, 0, 0, 0,
	0, 0, 0, 1290, 1290, 0, 1653, 0, 0, 0,
	0, 0, 0, 0, 0, 1660, 0, 225, 506, 1367,
	1368, 0, 1369, 0, 1669, 1237, 1371, 0, 1373, 506,
	506, 506, 506, 506, 506, 506, 506, 0, 0, 0,
	0, 0, 0, 506, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 235, 236, 237,
	238, 242, 0, 1003, 0, 0, 241, 240, 0, 1361,
	0, 0, 0, 1698, 1408, 1409, 0, 0, 1232, 0,
	0, 0, 0, 0, 0, 0, 0, 1290, 0, 1239,
	0, 1706, 0, 1244, 1002, 1238, 0, 0, 0, 0,
	1236, 0, 0, 0, 0, 0, 1242, 0, 47, 1386,
	1398, 0, 0, 0, 0, 0, 589, 1720, 0, 1240,
	1241, 0, 590, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 1007, 0, 0, 0, 1243, 1245, 0,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 1009,
	0, 1525, 0, 0, 0, 524, 0, 0, 1421, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 334, 334, 334, 334, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 654, 0, 892, 0,
	87, 0, 0, 243, 0, 334, 23, 24, 48, 26,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 42, 87, 87, 0,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 87, 0, 0, 0, 37,
	0, 87, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1364, 0, 0, 0, 0, 0, 0, 1366, 0, 0,
	0, 0, 506, 0, 506, 0, 0, 0, 0, 1375,
	1376, 1377, 0, 0, 1380, 0, 0, 0, 506, 0,
	0, 0, 0, 0, 0, 0, 0, 1390, 1391, 1392,
	0, 1395, 0, 30, 31, 33, 32, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 43, 44,
	0, 0, 45, 46, 34, 0, 0, 1035, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1609, 589, 0, 1074,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 0, 1480, 1481, 1482, 0, 0, 0, 0,
	0, 0, 1654, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1510, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	87, 659, 87, 0, 0, 0, 0, 1546, 1547, 1548,
	1549, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 0, 1718, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1611, 0, 0, 0, 0, 1616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1264, 0, 47, 0, 0, 0,
	0, 0, 1636, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 1277, 1278, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 1667, 87,
	0, 87, 0, 0, 87, 0, 0, 87, 0, 0,
	0, 760, 0, 0, 0, 0, 0, 1306, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 87, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1724,
	0, 0, 267, 697, 0, 0, 0, 267, 267, 0,
	0, 853, 853, 267, 0, 0, 334, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1742, 1743, 0, 0, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 1383, 0, 267, 267, 267,
	267, 0, 87, 0, 853, 87, 87, 87, 87, 87,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	87, 0, 1659, 0, 659, 0, 0, 0, 0, 87,
	87, 0, 0, 0, 0, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 0, 729, 730, 0, 731,
	732, 733, 735, 734, 714, 715, 716, 720, 718, 717,
	719, 691, 693, 0, 629, 692, 698, 694, 695, 696,
	710, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 711, 721, 722, 723, 724, 725, 726, 727,
	728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 87, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 0, 0, 1475, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 630, 0, 760, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1541, 0, 0, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 697, 0, 1264, 0, 47, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 0, 729, 730, 1127, 731,
	732, 733, 735, 734, 714, 715, 716, 720, 718, 717,
	719, 691, 693, 0, 629, 692, 698, 694, 695, 696,
	710, 699, 700, 701, 702, 703, 704, 705, 706, 707,
	708, 709, 711, 721, 722, 723, 724, 725, 726, 727,
	728, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1218, 1219, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 630, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
	448, 0, 413, 460, 384, 402, 468, 404, 405, 437,
	365, 422, 154, 399, 382, 92, 387, 358, 394, 359,
	385, 415, 116, 383, 450, 425, 130, 466, 133, 430,
	0, 176, 142, 0, 0, 417, 452, 420, 444, 412,
	438, 373, 429, 461, 400, 433, 462, 0, 0, 0,
	352, 0, 914, 915, 0, 0, 0, 0, 0, 105,
	0, 432, 457, 396, 469, 436, 357, 431, 0, 363,
	366, 467, 455, 391, 392, 1105, 0, 0, 0, 0,
	0, 0, 416, 421, 441, 409, 0, 0, 0, 0,
	0, 0, 0, 0, 388, 0, 428, 0, 0, 0,
	370, 364, 0, 414, 0, 0, 0, 372, 0, 389,
	442, 0, 354, 446, 453, 411, 203, 456, 408, 407,
	161, 87, 108, 0, 182, 120, 401, 131, 439, 459,
	418, 451, 386, 395, 110, 393, 168, 155, 194, 427,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 390, 445,
	447, 377, 435, 367, 397, 440, 398, 419, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 853,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 381, 454, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 434, 169,
	107, 195, 175, 376, 380, 374, 375, 423, 424, 463,
	464, 465, 443, 371, 0, 378, 379, 0, 449, 125,
	426, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	403, 356, 406, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 170, 410, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 458, 448, 0, 413, 460, 384, 402, 468,
	404, 405, 437, 365, 422, 154, 399, 382, 92, 387,
	358, 394, 359, 385, 415, 116, 383, 450, 425, 130,
	466, 133, 430, 0, 176, 142, 0, 1713, 417, 452,
	420, 444, 412, 438, 373, 429, 461, 400, 433, 462,
	0, 0, 0, 352, 87, 914, 915, 0, 0, 0,
	0, 0, 105, 0, 432, 457, 396, 469, 436, 357,
	431, 0, 363, 366, 467, 455, 391, 392, 0, 0,
	0, 0, 0, 0, 0, 416, 421, 441, 409, 0,
	0, 0, 0, 0, 0, 0, 0, 388, 0, 428,
	0, 0, 0, 370, 364, 0, 414, 0, 0, 0,
	372, 0, 389, 442, 0, 354, 446, 453, 411, 203,
	456, 408, 407, 161, 0, 108, 0, 182, 120, 401,
	131, 439, 459, 418, 451, 386, 395, 110, 393, 168,
	155, 194, 427, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 390, 445, 447, 377, 435, 367, 397, 440, 398,
	419, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 454, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 434, 169, 107, 195, 175, 376, 380, 374, 375,
	423, 424, 463, 464, 465, 443, 371, 0, 378, 379,
	0, 449, 125, 426, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 403, 356, 406, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 410, 0, 104, 458,
	448, 0, 413, 460, 384, 402, 468, 404, 405, 437,
	365, 422, 154, 399, 382, 92, 387, 358, 394, 359,
	385, 415, 116, 383, 450, 425, 130, 466, 133, 430,
	0, 176, 142, 0, 0, 417, 452, 420, 444, 412,
	438, 373, 429, 461, 400, 433, 462, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 432, 457, 396, 469, 436, 357, 431, 0, 363,
	366, 467, 455, 391, 392, 0, 0, 0, 0, 0,
	0, 0, 416, 421, 441, 409, 0, 0, 0, 0,
	0, 0, 1225, 0, 388, 0, 428, 0, 0, 0,
	370, 364, 0, 414, 0, 0, 0, 372, 0, 389,
	442, 0, 354, 446, 453, 411, 203, 456, 408, 407,
	161, 0, 108, 0, 182, 120, 401, 131, 439, 459,
	418, 451, 386, 395, 110, 393, 168, 155, 194, 427,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 390, 445,
	447, 377, 435, 367, 397, 440, 398, 419, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 381, 454, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 434, 169,
	107, 195, 175, 376, 380, 374, 375, 423, 424, 463,
	464, 465, 443, 371, 0, 378, 379, 0, 449, 125,
	426, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	403, 356, 406, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 170, 410, 0, 104, 458, 448, 0, 413,
	460, 384, 402, 468, 404, 405, 437, 365, 422, 154,
	399, 382, 92, 387, 358, 394, 359, 385, 415, 116,
	383, 450, 425, 130, 466, 133, 430, 0, 176, 142,
	0, 0, 417, 452, 420, 444, 412, 438, 373, 429,
	461, 400, 433, 462, 50, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 432, 457,
	396, 469, 436, 357, 431, 0, 363, 366, 467, 455,
	391, 392, 0, 0, 0, 0, 0, 0, 0, 416,
	421, 441, 409, 0, 0, 0, 0, 0, 0, 0,
	0, 388, 0, 428, 0, 0, 0, 370, 364, 0,
	414, 0, 0, 0, 372, 0, 389, 442, 0, 354,
	446, 453, 411, 203, 456, 408, 407, 161, 0, 108,
	0, 182, 120, 401, 131, 439, 459, 418, 451, 386,
	395, 110, 393, 168, 155, 194, 427, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 390, 445, 447, 377, 435,
	367, 397, 440, 398, 419, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 381, 454,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 434, 169, 107, 195, 175,
	376, 380, 374, 375, 423, 424, 463, 464, 465, 443,
	371, 0, 378, 379, 0, 449, 125, 426, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 403, 356, 406,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 170,
	410, 0, 104, 458, 448, 0, 413, 460, 384, 402,
	468, 404, 405, 437, 365, 422, 154, 399, 382, 92,
	387, 358, 394, 359, 385, 415, 116, 383, 450, 425,
	130, 466, 133, 430, 0, 176, 142, 0, 0, 417,
	452, 420, 444, 412, 438, 373, 429, 461, 400, 433,
	462, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 432, 457, 396, 469, 436,
	357, 431, 0, 363, 366, 467, 455, 391, 392, 0,
	0, 0, 0, 0, 0, 0, 416, 421, 441, 409,
	0, 0, 0, 0, 0, 0, 803, 0, 388, 0,
	428, 0, 0, 0, 370, 364, 0, 414, 0, 0,
	0, 372, 0, 389, 442, 0, 354, 446, 453, 411,
	203, 456, 408, 407, 161, 0, 108, 0, 182, 120,
	401, 131, 439, 459, 418, 451, 386, 395, 110, 393,
	168, 155, 194, 427, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 390, 445, 447, 377, 435, 367, 397, 440,
	398, 419, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 381, 454, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 434, 169, 107, 195, 175, 376, 380, 374,
	375, 423, 424, 463, 464, 465, 443, 371, 0, 378,
	379, 0, 449, 125, 426, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 403, 356, 406, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 410, 0, 104,
	458, 448, 0, 413, 460, 384, 402, 468, 404, 405,
	437, 365, 422, 154, 399, 382, 92, 387, 358, 394,
	359, 385, 415, 116, 383, 450, 425, 130, 466, 133,
	430, 0, 176, 142, 0, 0, 417, 452, 420, 444,
	412, 438, 373, 429, 461, 400, 433, 462, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 432, 457, 396, 469, 436, 357, 431, 0,
	363, 366, 467, 455, 391, 392, 0, 0, 0, 0,
	0, 0, 0, 416, 421, 441, 409, 0, 0, 0,
	0, 0, 0, 0, 0, 388, 0, 428, 0, 0,
	0, 370, 364, 0, 414, 0, 0, 0, 372, 0,
	389, 442, 0, 354, 446, 453, 411, 203, 456, 408,
	407, 161, 0, 108, 0, 182, 120, 401, 131, 439,
	459, 418, 451, 386, 395, 110, 393, 168, 155, 194,
	427, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 390,
	445, 447, 377, 435, 367, 397, 440, 398, 419, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 381, 454, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 434,
	169, 107, 195, 175, 376, 380, 374, 375, 423, 424,
	463, 464, 465, 443, 371, 0, 378, 379, 0, 449,
	125, 426, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 403, 356, 406, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 410, 0, 104, 458, 448, 0,
	413, 460, 384, 402, 468, 404, 405, 437, 365, 422,
	154, 399, 382, 92, 387, 358, 394, 359, 385, 415,
	116, 383, 450, 425, 130, 466, 133, 430, 0, 176,
	142, 0, 0, 417, 452, 420, 444, 412, 438, 373,
	429, 461, 400, 433, 462, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 432,
	457, 396, 469, 436, 357, 431, 0, 363, 366, 467,
	455, 391, 392, 0, 0, 0, 0, 0, 0, 0,
	416, 421, 441, 409, 0, 0, 0, 0, 0, 0,
	0, 0, 388, 0, 428, 0, 0, 0, 370, 364,
	0, 414, 0, 0, 0, 372, 0, 389, 442, 0,
	354, 446, 453, 411, 203, 456, 408, 407, 161, 0,
	108, 0, 182, 120, 401, 131, 439, 459, 418, 451,
	386, 395, 110, 393, 168, 155, 194, 427, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 390, 445, 447, 377,
	435, 367, 397, 440, 398, 419, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 381,
	454, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 434, 169, 107, 195,
	175, 376, 380, 374, 375, 423, 424, 463, 464, 465,
	443, 371, 0, 378, 379, 0, 449, 125, 426, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 403, 356,
	406, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	170, 410, 0, 104, 458, 448, 0, 413, 460, 384,
	402, 468, 404, 405, 437, 365, 422, 154, 399, 382,
	92, 387, 358, 394, 359, 385, 415, 116, 383, 450,
	425, 130, 466, 133, 430, 0, 176, 142, 0, 0,
	417, 452, 420, 444, 412, 438, 373, 429, 461, 400,
	433, 462, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 432, 457, 396, 469,
	436, 357, 431, 0, 363, 366, 467, 455, 391, 392,
	0, 0, 0, 0, 0, 0, 0, 416, 421, 441,
	409, 0, 0, 0, 0, 0, 0, 0, 0, 388,
	0, 428, 0, 0, 0, 370, 364, 0, 414, 0,
	0, 0, 372, 0, 389, 442, 0, 354, 446, 453,
	411, 203, 456, 408, 407, 161, 0, 108, 0, 182,
	120, 401, 131, 439, 459, 418, 451, 386, 395, 110,
	393, 168, 155, 194, 427, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 390, 445, 447, 377, 435, 367, 397,
	440, 398, 419, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 350, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 381, 454, 206, 207,
	208, 209, 0, 0, 0, 351, 349, 124, 173, 128,
	135, 164, 212, 434, 169, 107, 195, 175, 376, 380,
	374, 375, 423, 424, 463, 464, 465, 443, 371, 0,
	378, 379, 0, 449, 125, 426, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 403, 356, 406, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 170, 410, 0,
	104, 458, 448, 0, 413, 460, 384, 402, 468, 404,
	405, 437, 365, 422, 154, 399, 382, 92, 387, 358,
	394, 359, 385, 415, 116, 383, 450, 425, 130, 466,
	133, 430, 0, 176, 142, 0, 0, 417, 452, 420,
	444, 412, 438, 373, 429, 461, 400, 433, 462, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 432, 457, 396, 469, 436, 357, 431,
	0, 363, 366, 467, 455, 391, 392, 0, 0, 0,
	0, 0, 0, 0, 416, 421, 441, 409, 0, 0,
	0, 0, 0, 0, 0, 0, 388, 0, 428, 0,
	0, 0, 370, 364, 0, 414, 0, 0, 0, 372,
	0, 389, 442, 0, 354, 446, 453, 411, 203, 456,
	408, 407, 161, 0, 108, 0, 182, 120, 401, 131,
	439, 459, 418, 451, 386, 395, 110, 393, 168, 155,
	194, 427, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	390, 445, 447, 377, 435, 367, 397, 440, 398, 419,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 381, 454, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	434, 169, 107, 195, 175, 376, 380, 374, 375, 423,
	424, 463, 464, 465, 443, 371, 0, 378, 379, 0,
	449, 125, 426, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 403, 356, 406, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 170, 410, 0, 104, 458, 448,
	0, 413, 460, 384, 402, 468, 404, 405, 437, 365,
	422, 154, 399, 382, 92, 387, 358, 394, 359, 385,
	415, 116, 383, 450, 425, 130, 466, 133, 430, 0,
	176, 142, 0, 0, 417, 452, 420, 444, 412, 438,
	373, 429, 461, 400, 433, 462, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	432, 457, 396, 469, 436, 357, 431, 0, 363, 366,
	467, 455, 391, 392, 0, 0, 0, 0, 0, 0,
	0, 416, 421, 441, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 388, 0, 428, 0, 0, 0, 370,
	364, 0, 414, 0, 0, 0, 372, 0, 389, 442,
	0, 354, 446, 453, 411, 203, 456, 408, 407, 161,
	0, 108, 0, 182, 120, 401, 131, 439, 459, 418,
	451, 386, 395, 110, 393, 168, 155, 194, 427, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 390, 445, 447,
	377, 435, 367, 397, 440, 398, 419, 93, 183, 669,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 350, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	381, 454, 206, 207, 208, 209, 0, 0, 0, 351,
	349, 124, 173, 128, 135, 164, 212, 434, 169, 107,
	195, 175, 376, 380, 374, 375, 423, 424, 463, 464,
	465, 443, 371, 0, 378, 379, 0, 449, 125, 426,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 403,
	356, 406, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 170, 410, 0, 104, 458, 448, 0, 413, 460,
	384, 402, 468, 404, 405, 437, 365, 422, 154, 399,
	382, 92, 387, 358, 394, 359, 385, 415, 116, 383,
	450, 425, 130, 466, 133, 430, 0, 176, 142, 0,
	0, 417, 452, 420, 444, 412, 438, 373, 429, 461,
	400, 433, 462, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 432, 457, 396,
	469, 436, 357, 431, 0, 363, 366, 467, 455, 391,
	392, 0, 0, 0, 0, 0, 0, 0, 416, 421,
	441, 409, 0, 0, 0, 0, 0, 0, 0, 0,
	388, 0, 428, 0, 0, 0, 370, 364, 0, 414,
	0, 0, 0, 372, 0, 389, 442, 0, 354, 446,
	453, 411, 203, 456, 408, 407, 161, 0, 108, 0,
	182, 120, 401, 131, 439, 459, 418, 451, 386, 395,
	110, 393, 168, 155, 194, 427, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 390, 445, 447, 377, 435, 367,
	397, 440, 398, 419, 93, 183, 341, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 350,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 381, 454, 206,
	207, 208, 209, 0, 0, 0, 351, 349, 344, 343,
	128, 135, 164, 212, 434, 169, 107, 195, 175, 376,
	380, 374, 375, 423, 424, 463, 464, 465, 443, 371,
	0, 378, 379, 0, 449, 125, 426, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 403, 356, 406, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 170, 410,
	154, 104, 0, 92, 0, 0, 274, 0, 0, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 904, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 905, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 92, 840,
	170, 274, 322, 104, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 265, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 92, 0, 170, 274, 322, 104, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 519, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 154, 0, 0, 92, 0,
	170, 274, 322, 104, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 265, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 170, 154, 322, 104, 92,
	0, 0, 274, 0, 0, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 314, 324, 320,
	321, 318, 319, 317, 316, 315, 326, 306, 307, 308,
	309, 311, 0, 125, 310, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 0, 0, 0, 0, 0, 0,
	0, 154, 0, 0, 92, 0, 170, 274, 322, 104,
	0, 116, 271, 0, 0, 130, 313, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 272,
	292, 291, 294, 295, 296, 297, 0, 0, 105, 293,
	298, 299, 300, 0, 0, 0, 269, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 325, 0, 284, 0, 0,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 323, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 170, 116, 322, 104, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 1740,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 170, 116, 322, 104, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 0, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 314, 324, 320, 321, 318, 319,
	317, 316, 315, 326, 306, 307, 308, 309, 311, 0,
	125, 310, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 0, 0, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 170, 116, 322, 104, 0, 130, 0,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	562, 563, 555, 556, 557, 558, 559, 560, 561, 554,
	0, 0, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 154, 0, 0, 92, 0,
	541, 0, 0, 0, 170, 116, 565, 104, 0, 130,
	0, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 543, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 538, 537,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 658, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 660, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 23, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 790, 0,
	0, 791, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 678, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 677, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 658, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 660, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 656, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 1399,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 1712, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 1291, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 125, 0, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 154, 0, 0, 92, 0, 0, 0,
	0, 0, 0, 116, 0, 170, 0, 130, 104, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 660, 0, 0, 0, 0, 0, 0,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 154, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 116, 0, 170, 0, 130, 104, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 543, 0, 0, 0, 0, 0, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 116,
	0, 170, 0, 130, 104, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 750, 169, 107, 195, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 154, 0, 0,
	92, 0, 0, 0, 0, 0, 636, 116, 0, 170,
	0, 130, 104, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 0, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 336, 163, 118, 197, 0, 0, 0, 154, 0,
	0, 92, 0, 0, 0, 0, 0, 170, 116, 0,
	104, 0, 130, 0, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 0, 116, 0, 170, 0,
	130, 104, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	203, 0, 0, 0, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 0, 0,
	177, 196, 214, 215, 0, 0, 0, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 0, 169, 107, 195, 175, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 154, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 116, 0, 170, 0, 130, 104,
	133, 0, 0, 176, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 161, 0, 108, 0, 182, 120, 0, 131,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	116, 0, 170, 0, 130, 104, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 0, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 104,
}

var yyPact = [...]int{
	2220, -1000, -213, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1364, 1407, -1000, -1000, -1000, -1000, -1000, -1000, 1212,
	387, 369, 427, 353, 14248, 423, 1828, 14824, -1000, 152,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1118, -1000, -1000,
	-1000, -1000, -1000, 1351, 1362, 1185, 1322, 1262, -1000, 7877,
	364, 12517, 13960, 6690, -1000, 1021, -192, 389, 14536, 360,
	360, 14536, 14536, 360, -1000, -68, 421, 14824, -1000, 14824,
	354, 1017, 354, 354, 354, 14824, -1000, 491, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14824, 990, 1292, 358, 4471, 4471, 4471,
	4471, 262, 4471, -30, 1222, -1000, -1000, -1000, -1000, 4471,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	842, 1296, 8473, 8473, 1364, -1000, 1118, -1000, -1000, -1000,
	1285, -1000, -1000, 664, 1389, -1000, 9637, 490, -1000, 8473,
	48, 1086, -1000, -1000, 1086, -1000, -1000, 456, -1000, -1000,
	9055, 9055, 9055, 9055, 9055, 9055, 9055, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1086, -1000, 8178, 1086, 1086, 1086, 1086, 1086, 1086,
	1086, 1086, 8473, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
	1086, 1086, 1633, 1086, 1086, 1086, 1086, 13669, 1139, 1208,
	-1000, -1000, -1000, 1317, 10501, 11365, 14824, 1063, -1000, 1130,
	6373, 97, -1000, -1000, -1000, 607, 11077, -1000, -1000, -1000,
	1288, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1014, -1000, 2926, 416, -1000, -1000, 14824, 1140, 977, 634,
	975, 1221, 415, 14824, -1000, 13381, 4471, 374, 14824, 1310,
	1220, 14824, 958, 939, -1000, 6056, -1000, 4471, 4471, 4471,
	4471, 4471, 4471, 4471, 4471, -1000, -1000, -1000, -1000, -1000,
	-1000, 4471, 4471, -1000, 51, -1000, 14824, -1000, -1000, -1000,
	-1000, 1402, 540, 838, 489, 1134, -1000, 763, 1351, 842,
	1262, 10789, 1234, -1000, -1000, 14824, -1000, 8473, 8473, 735,
	-1000, 13093, -1000, -1000, 4788, 551, 9055, 731, 536, 9055,
	9055, 9055, 9055, 9055, 9055, 9055, 9055, 9055, 9055, 9055,
	9055, 9055, 9055, 9055, 819, 1633, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 931, -1000, 1118, 915, 915, 11,
	11, 11, 11, 11, 11, 9346, 7287, 842, 1012, 563,
	8178, 7877, 7877, 8473, 8473, 15112, 15112, 7877, 1324, 616,
	563, 15112, -1000, 842, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 74, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7877, 7877, 7877, 7877, 277, 14824, -1000, 15112, 12517,
	12517, 12517, 12517, 12517, -1000, 1256, 1253, -1000, 1243, 1242,
	1252, 14824, -1000, 1010, 10501, 496, 1086, -1000, 12805, -1000,
	-1000, 277, 1094, 12517, 14824, -1000, -1000, 5739, 1130, 97,
	1125, -1000, -44, -37, 6992, 497, -1000, -1000, -1000, -1000,
	3837, 722, 398, -131, 25, -1000, -1000, -1000, -1000, 1168,
	-1000, 1168, 237, 1168, 1168, 1168, -1000, 1168, 1168, 62,
	62, 62, 62, 62, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1210, 1206, -1000, 1168, 1168, 1168, -1000, 1168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1190,
	280, 1190, 1171, 1171, -1000, -1000, 14536, 1315, -102, 910,
	4471, 1308, 4471, 14824, 1383, 14824, -1000, -1000, -1000, 1874,
	14824, -1000, 14824, -1000, -1000, 14824, 4471, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 617, -1000, -1000, -1000, -1000, 1269, 8473, 8473,
	5422, 8473, -1000, -1000, -1000, 1296, -1000, 1324, 1341, -1000,
	1279, 1277, 7877, -1000, -1000, 551, 585, -1000, -1000, 752,
	-1000, -1000, -1000, -1000, 485, 1086, -1000, 88, -1000, -1000,
	-1000, -1000, 731, 9055, 9055, 9055, 278, 88, 1665, 224,
	163, 11, 304, 304, 9, 9, 9, 9, 9, 174,
	174, -1000, -1000, -1000, -1000, 842, -1000, -1000, -1000, 842,
	7877, 1128, -1000, -1000, 8473, -1000, 842, 1000, 1000, 708,
	710, 1126, -1000, 474, 1122, 1000, 7877, 633, -1000, 8473,
	842, -1000, -1000, 1000, 842, 1000, 1000, 1072, 1086, -1000,
	1104, -1000, 606, 1208, 1209, 1219, 1112, -1000, -1000, -1000,
	-1000, 1245, -1000, 1244, -1000, -1000, -1000, -1000, -1000, 410,
	395, 393, 14536, -1000, 1378, 12517, 1091, -1000, -1000, 1125,
	97, -40, -1000, -1000, -1000, -1000, 563, -1000, -1000, 908,
	1124, 3504, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1204, 726, 14536, 321, 340, 414, 404, 900, -1000, -1000,
	-1000, 764, -1000, 14536, 1401, -1000, -1000, 314, -1000, 307,
	629, 845, 14824, 111, 1192, 1568, -1000, -216, -1000, 0,
	-1000, -1000, 839, 62, 62, 1168, 62, 62, 62, -1000,
	-1000, 497, 1287, 497, 497, 497, 497, 843, 843, -105,
	-105, -1000, -1000, -1000, 836, 1190, -1000, -1000, -1000, 829,
	-1000, 1196, 1118, -1000, 5105, -1000, -1000, -1000, -1000, -1000,
	1314, 1218, -1000, -1000, -1000, 227, -1000, 759, 1084, 500,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 276, 433, -1000, 4471, -1000, 670, 14824, 14824, 1267,
	563, 563, 473, -1000, -1000, 14824, -1000, -1000, -1000, -1000,
	1121, -1000, -1000, -1000, 4154, 7877, -1000, 278, 88, 770,
	-1000, 9055, 9055, -1000, -1000, 1000, 7877, 563, -1000, -1000,
	-1000, 1915, 819, 1915, 9055, 9055, 5422, 9055, 9055, -96,
	1107, 609, -1000, 8473, 613, -1000, -1000, -1000, -1000, -1000,
	1217, 15112, 1086, -1000, 10213, 14536, 1364, 15112, 8473, 8473,
	-1000, -1000, 8473, 1186, -1000, 8473, -1000, -1000, -1000, 1086,
	1086, 1086, 968, -1000, 1364, 1091, -1000, -1000, -1000, -49,
	-51, -1000, -1000, 3837, -1000, 3837, 12229, -1000, 1396, 1348,
	299, 355, -1000, 896, 886, -1000, 857, -1000, -9, -1000,
	-198, 90, 64, -1000, -1000, 1086, -1000, 1181, 1313, -1000,
	1294, 815, -1000, 1295, -209, -1000, -1000, -1000, -1000, -1000,
	-1000, 1086, 1180, 1178, -1000, 1175, -1000, -1000, -1000, 1043,
	497, 497, 62, 497, 497, 497, -1000, 556, -1000, -1000,
	-1000, -1000, 998, -1000, 986, -1000, 107, 102, -1000, 1123,
	-1000, 984, 14824, 14536, -1000, 1111, -1000, 599, 1338, 252,
	14824, 1383, -1000, 311, -1000, 14536, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14536, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 14824, -1000, -1000, -1000,
	-1000, -1000, 14536, 312, -1000, -1000, 841, 8473, -1000, -1000,
	-1000, 5105, -1000, 1378, 12517, -1000, -1000, 842, -1000, 9055,
	88, 88, -1000, -1000, 842, 1168, 1168, -1000, 1168, 1171,
	-1000, -1000, 1168, 137, 1168, 110, 842, 842, 258, 295,
	-1000, 149, 200, 1086, -89, -1000, 563, 8473, -1000, 1298,
	1069, 1088, -1000, -1000, 7582, 842, 982, 466, 968, 1351,
	-1000, 563, 563, 563, 11653, 563, 11653, 11653, 11653, 9925,
	14536, 1351, -1000, -1000, -1000, -1000, 3504, -1000, 966, -1000,
	1168, 1168, 460, 460, -200, 300, 298, -1000, -1000, -1000,
	-1000, -192, -1000, -1000, 629, -1000, 8473, 11653, -186, -1000,
	1108, 1032, 1716, -1000, 220, 842, -1000, 786, -1000, 767,
	1029, -1000, -1000, -1000, 497, -1000, -1000, -1000, -1000, -1000,
	62, 820, 62, -2, -16, 801, -1000, 800, 1097, 1216,
	5105, 3837, 372, 1367, -1000, -1000, 1337, 1312, 14536, -1000,
	-1000, -1000, 1165, -1000, -1000, -1000, -1000, 1306, 14536, -1000,
	-1000, 563, 1376, 1089, -1000, 88, -1000, -1000, 223, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 9055, 9055,
	-1000, 9055, 9055, 9055, 842, 742, 563, 297, -1000, 1086,
	-1000, -1000, 1085, 14536, 14536, -1000, -1000, 962, -1000, -1000,
	952, 952, 952, 496, -1000, -1000, 529, 12229, 1305, -1000,
	724, -1000, -1000, 644, 189, 681, -1000, 14536, -192, -1000,
	1086, 869, 950, 1164, 788, -1000, 1028, 65, -105, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 497, -1000, 497, -1000,
	-1000, 1024, 916, 12229, 14536, 14824, -1000, -1000, 14536, -1000,
	-1000, -1000, -1000, -1000, 188, 1062, 1156, 11653, 1086, 341,
	1373, 1358, -1000, -1000, 115, 115, 115, 115, 66, -1000,
	-1000, 1400, -1000, 1086, -1000, 1118, 464, -1000, 14536, -1000,
	-1000, -1000, -1000, -1000, 1211, 749, 123, -1000, 848, 597,
	732, 580, 579, 572, 569, 568, 566, 565, -1000, -1000,
	-1000, 1398, -1000, -1000, -1000, 1392, 1155, -1000, 1153, 8473,
	205, -1000, -1000, 907, 884, -1000, -1000, -1000, -1000, -1000,
	-1000, 945, 1151, 1146, 1045, -1000, 169, 1062, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14536, 14536, 14536, 347, 12229,
	943, 239, 290, -1000, 8473, 8473, -1000, -1000, -1000, -1000,
	842, 158, -128, 15112, 1088, 842, 14536, -1000, -1000, 14536,
	-1000, -125, 749, 14536, -1000, 781, -1000, -1000, 741, 773,
	741, 741, 741, 741, 741, 460, 460, 14536, 12229, 869,
	-1000, -93, 279, -1000, -1000, -203, 12229, 12229, -101, 14536,
	8473, 1062, -1000, 1067, 2666, -1000, -1000, -1000, 14536, 1388,
	1387, 1386, 1385, 938, 1140, 935, -1000, 14536, 1143, 563,
	1059, -1000, 1266, -99, -151, 1058, -1000, -1000, 1086, 929,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 629, 629, 914, 906, -1000, -1000, -1000, 138,
	796, 771, 765, 736, 29, -1000, 1354, 1378, 1137, 883,
	877, -1000, -211, -1000, 563, -1000, 14536, 162, -1000, -1000,
	1302, -1000, -1000, -1000, -1000, -1000, -102, -1000, 239, 1276,
	12229, -1000, 1265, -1000, 14536, -1000, 749, -1000, -1000, 330,
	529, 702, -1000, 672, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11941, 529, 11653, 1378, 529, 8473, -1000, 2926, 1332,
	14536, -1000, -1000, 272, 875, -122, 842, -1000, 14824, 1211,
	-1000, -1000, -1000, 463, 1211, 873, 529, -1000, 563, 1118,
	-1000, 234, -1000, -148, -1000, 1119, -1000, 5105, -1000, -1000,
	-1000, -1000, 1086, -152, 14536, -1000, 8764, -1000, 867, 115,
	842, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1642, 11, 1080, 1640, 1639, 1638, 1426, 1423, 1421,
	1414, 1633, 1631, 1630, 1629, 1625, 1624, 1622, 1619, 1618,
	1616, 1614, 1613, 1612, 1611, 1607, 580, 1606, 1605, 1598,
	84, 1593, 99, 1591, 1589, 56, 193, 57, 53, 881,
	1585, 39, 107, 98, 1584, 77, 1583, 1582, 104, 1580,
	85, 1575, 1573, 93, 1572, 1568, 33, 5, 1567, 34,
	1566, 1563, 91, 2, 1559, 1558, 1555, 1554, 1551, 1549,
	71, 19, 21, 23, 27, 1548, 74, 17, 1545, 67,
	1544, 1543, 1535, 1534, 49, 1533, 79, 26, 43, 68,
	1531, 13, 1527, 83, 55, 37, 16, 103, 82, 1526,
	51, 87, 66, 1525, 1523, 749, 1520, 1519, 1517, 1516,
	1515, 1514, 823, 809, 1513, 1510, 1504, 52, 0, 446,
	24, 90, 1502, 65, 1501, 2185, 100, 89, 36, 1500,
	50, 222, 58, 1499, 1498, 54, 106, 102, 105, 92,
	1496, 1494, 1493, 1491, 1490, 813, 47, 70, 46, 1489,
	1488, 1486, 25, 75, 42, 61, 81, 1484, 1482, 1480,
	40, 1478, 20, 30, 3, 76, 1477, 1474, 1473, 1470,
	48, 41, 1469, 28, 7, 4, 15, 6, 1468, 1467,
	1466, 1, 1465, 31, 1464, 9, 1463, 10, 1462, 1460,
	1459, 1457, 1456, 1455, 1453, 1452, 1450, 1447, 22, 14,
	45, 32, 29, 60, 44, 1443, 1442, 18, 8, 1440,
	1438, 1434, 1433, 1561, 1062, 1432, 1429, 1428, 1416, 448,
}

var yyR1 = [...]int{
	0, 211, 212, 212, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 29, 29, 8, 9, 9, 9, 215,
	215, 48, 48, 93, 93, 10, 10, 10, 10, 11,
	11, 209, 209, 208, 210, 210, 12, 12, 12, 12,
	205, 205, 205, 205, 205, 98, 98, 102, 102, 102,
	103, 103, 103, 103, 133, 133, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 203, 203, 204,
	204, 204, 206, 206, 207, 207, 207, 207, 207, 207,
	189, 189, 189, 190, 190, 190, 190, 190, 190, 192,
	192, 193, 193, 123, 123, 187, 187, 186, 185, 185,
	184, 184, 183, 194, 194, 18, 167, 168, 168, 168,
	168, 168, 156, 137, 137, 137, 137, 137, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 200,
	200, 200, 201, 201, 201, 201, 201, 201, 201, 201,
	196, 196, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 146, 146, 146, 146,
	146, 146, 195, 195, 191, 191, 191, 191, 191, 141,
	141, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 140, 140, 142,
	142, 142, 142, 142, 142, 142, 142, 138, 138, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 144, 144, 144, 144, 144, 144, 144, 144,
	155, 155, 145, 145, 153, 153, 154, 154, 154, 152,
	152, 152, 149, 149, 150, 150, 151, 151, 151, 147,
	147, 147, 148, 148, 148, 158, 176, 176, 176, 178,
	178, 179, 179, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 166, 166, 202, 202, 175, 175,
	175, 172, 172, 172, 172, 172, 172, 172, 172, 165,
	165, 174, 174, 173, 173, 160, 160, 160, 160, 160,
	161, 162, 162, 162, 162, 159, 198, 198, 198, 199,
	199, 163, 163, 164, 164, 169, 169, 169, 170, 170,
	170, 171, 171, 171, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 216, 216, 217,
	217, 217, 217, 217, 217, 217, 182, 180, 180, 181,
	181, 15, 16, 16, 16, 16, 16, 17, 17, 19,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 110, 110, 107, 107, 108, 108, 109,
	109, 109, 111, 111, 111, 134, 134, 134, 21, 21,
	23, 23, 24, 25, 22, 22, 22, 22, 22, 218,
	26, 27, 27, 28, 28, 28, 32, 32, 32, 30,
	30, 31, 31, 37, 37, 36, 36, 38, 38, 38,
	38, 122, 122, 122, 121, 121, 40, 40, 41, 41,
	42, 42, 43, 43, 43, 55, 55, 91, 91, 91,
	94, 94, 44, 44, 44, 44, 45, 45, 46, 46,
	47, 47, 129, 129, 128, 128, 128, 127, 127, 49,
	49, 49, 51, 50, 50, 50, 50, 52, 52, 54,
	54, 53, 53, 56, 56, 56, 56, 57, 57, 92,
	92, 39, 39, 39, 39, 39, 39, 39, 106, 106,
	59, 59, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 69, 69, 69, 69, 69, 69, 60, 60,
	60, 60, 60, 60, 60, 35, 35, 70, 70, 70,
	76, 71, 71, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 67, 67, 67, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 66, 66, 66, 66, 66, 66, 66,
	66, 66, 219, 219, 68, 68, 68, 68, 33, 33,
	33, 33, 33, 132, 132, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 136, 136, 80, 80, 34, 34,
	78, 78, 79, 81, 81, 77, 77, 77, 62, 62,
	62, 62, 62, 62, 62, 62, 64, 64, 64, 82,
	82, 83, 83, 84, 84, 85, 85, 86, 87, 87,
	87, 88, 88, 88, 88, 89, 89, 89, 61, 61,
	61, 61, 61, 61, 90, 90, 90, 90, 95, 95,
	72, 72, 74, 74, 73, 75, 96, 96, 100, 97,
	97, 101, 101, 101, 101, 99, 99, 99, 124, 124,
	124, 104, 104, 112, 112, 113, 113, 105, 105, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 115,
	115, 115, 116, 116, 119, 119, 120, 120, 125, 125,
	126, 126, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 213, 214, 130, 131, 131, 131,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 3, 5,
	0, 2, 2, 2, 2, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 14, 13, 14,
	6, 5, 5, 5, 11, 11, 9, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	2, 0, 3, 0, 1, 0, 2, 1, 0, 2,
	1, 3, 3, 0, 2, 4, 4, 1, 3, 3,
	3, 3, 2, 3, 1, 1, 1, 1, 2, 2,
	3, 2, 4, 4, 2, 2, 3, 2, 3, 2,
	7, 8, 3, 3, 6, 5, 8, 7, 4, 2,
	4, 6, 2, 1, 1, 1, 1, 1, 1, 3,
	1, 2, 0, 4, 3, 4, 3, 3, 3, 3,
	3, 3, 3, 2, 4, 6, 2, 3, 2, 3,
	1, 3, 0, 2, 0, 3, 3, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 2, 2, 2, 2, 1, 1, 1,
	3, 3, 2, 1, 2, 1, 1, 1, 1, 4,
	4, 4, 4, 4, 1, 5, 2, 2, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	3, 3, 0, 1, 0, 1, 0, 2, 1, 0,
	3, 3, 0, 1, 2, 6, 0, 1, 4, 1,
	2, 1, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 1, 1, 0, 2,
	5, 2, 3, 3, 2, 3, 2, 3, 4, 1,
	1, 1, 3, 3, 2, 2, 5, 5, 8, 8,
	13, 1, 1, 2, 2, 10, 0, 1, 1, 0,
	3, 0, 1, 1, 3, 0, 1, 3, 1, 2,
	3, 1, 1, 1, 6, 11, 13, 7, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 3, 3,
	3, 3, 4, 3, 6, 4, 2, 4, 2, 2,
	2, 2, 3, 1, 1, 0, 1, 0, 1, 0,
	2, 2, 0, 2, 2, 0, 1, 1, 2, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 3, 3, 7, 1, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 0,
	4, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 4, 5, 6, 4, 4,
	6, 6, 6, 6, 8, 8, 6, 8, 8, 9,
	7, 5, 4, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 0, 2, 4, 4, 4, 4, 0, 3,
	4, 7, 3, 1, 1, 2, 3, 3, 1, 2,
	2, 1, 1, 2, 1, 2, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -211, -1, -2, -6, -7, -8, -9, -10, -13,
	-14, -15, -16, -17, -19, -20, -21, -23, -24, -25,
	-22, -3, -4, 6, 7, -29, 9, 10, 30, -18,
	113, 114, 116, 115, 144, 117, 137, 49, 184, 185,
	187, 188, 26, 138, 139, 142, 143, -213, 8, 288,
	53, -212, 322, -84, 15, -28, 5, -26, -218, -26,
	-26, -26, -26, -26, -167, 53, -123, -194, 152, 280,
	119, 134, 151, 120, 135, 71, -105, 122, 124, 120,
	120, 121, 122, 280, 119, 120, -53, -125, 56, -118,
	159, 297, 21, 184, 197, 198, 189, 230, 218, 298,
	157, 215, 219, 267, 321, 65, 187, 276, 128, 163,
	140, 210, 213, 212, 204, 201, 28, 236, 304, 203,
	131, 237, 241, 247, 268, 295, 194, 195, 270, 234,
	32, 133, 299, 34, 148, 271, 239, 233, 228, 232,
	193, 227, 38, 207, 243, 242, 244, 266, 221, 158,
	246, 223, 205, 222, 18, 143, 146, 238, 240, 202,
	160, 126, 150, 303, 272, 200, 147, 161, 142, 275,
	318, 156, 188, 269, 196, 278, 37, 252, 214, 191,
	206, 192, 130, 185, 154, 225, 149, 208, 209, 231,
	190, 226, 186, 151, 144, 277, 253, 305, 224, 220,
	216, 217, 155, 122, 152, 153, 259, 260, 261, 262,
	300, 301, 273, 211, 254, 255, 165, 166, 167, 168,
	169, 170, 171, 120, 107, 219, 113, 257, 121, 32,
	150, -134, 120, -107, 153, 259, 260, 261, 262, 56,
	269, 268, 263, -125, 186, -130, -130, -130, -130, -130,
	-2, -88, 17, 16, -5, -3, -213, 6, 21, 22,
	-32, 39, 40, -27, -38, 98, -39, -125, -58, 73,
	-63, 29, 56, -118, 24, -62, -59, -77, -75, -76,
	107, 108, 96, 97, 104, 74, 109, -67, -65, -66,
	-68, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -119, -73, -213, 43, 44, 289, 290, 291, 292,
	296, 293, 76, 33, 279, 287, 286, 285, 283, 284,
	281, 282, 320, 125, 280, 102, 288, -105, -41, -42,
	-43, -44, -55, -76, -213, -53, 11, -48, -53, -97,
	-133, 186, -101, 269, 268, -120, -99, -119, -117, 267,
	219, 266, 56, -118, 118, 173, 307, 72, 23, 25,
	250, 256, 172, 75, 107, 16, 76, 179, 316, 317,
	106, 289, 113, 47, 281, 282, 279, 177, 291, 292,
	280, 257, 20, 29, 10, 26, 138, 22, 100, 115,
	174, 79, 80, 141, 24, 139, 69, 180, 182, 19,
	50, 132, 11, 306, 13, 14, 308, 125, 124, 91,
	319, 121, 45, 8, 109, 27, 88, 41, 136, 183,
	43, 89, 17, 283, 284, 31, 296, 145, 102, 48,
	35, 73, 67, 51, 274, 178, 71, 15, 46, 134,
	181, 90, 116, 288, 44, 175, 119, 176, 6, 294,
	30, 137, 42, 120, 258, 78, 123, 68, 5, 135,
	9, 49, 52, 285, 286, 287, 33, 77, 12, 70,
	-168, -156, 56, -198, 316, 317, 122, -119, -113, 125,
	-113, -119, -119, -113, 288, 120, -53, -53, -112, 125,
	56, -112, -112, -112, -53, 110, -53, 56, 30, 280,
	56, 150, 120, 151, 122, -131, -213, -120, -131, -131,
	-131, 154, 155, -131, -108, 264, 51, -131, -214, 55,
	-89, 19, 31, -39, -125, -85, -86, -39, -84, -2,
	-26, 35, -30, 22, 64, 11, -122, 72, 71, 88,
	-121, 23, -119, 58, 110, -39, -60, 91, 73, 89,
	90, 75, 93, 92, 103, 96, 97, 98, 99, 100,
	101, 102, 94, 95, 106, 320, 81, 82, 83, 84,
	85, 86, 87, -106, -213, -76, -213, 111, 112, -63,
	-63, -63, -63, -63, -63, -63, -213, -2, -71, -39,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -80,
	-39, -213, -219, -213, -219, -219, -219, -219, -219, -219,
	-219, -136, 107, 219, 140, 210, -139, -138, 225, 189,
	190, 191, 192, 193, 194, 195, 196, 197, 198, 218,
	298, -213, -213, -213, -213, -54, 27, -53, 30, 54,
	-49, -51, -50, -52, 41, 45, 47, 42, 43, 44,
	48, -129, 23, -41, -213, -128, 146, -127, 23, -125,
	58, -53, -48, -215, 54, 11, 52, 54, -97, 186,
	-98, -102, 270, 272, 81, -124, -119, 58, 29, 30,
	55, 54, -157, -137, -141, -138, -143, -142, -144, -139,
	-140, 215, 219, 216, 221, 222, 223, 107, 220, 225,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	224, 236, 30, 140, 208, 209, 210, 213, 212, 214,
	211, 237, 238, 239, 240, 241, 242, 243, 244, 200,
	201, 203, 204, 205, 207, 206, 121, -53, -187, 52,
	56, 73, 56, 51, -203, 51, 172, 173, -53, -53,
	274, -131, 123, -53, 24, 51, -53, 56, 56, -126,
	-125, -117, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -110, 258, 265, -53, 9, 91, 54, 18,
	110, 54, -87, 25, 26, -88, -214, -32, -64, -119,
	59, 62, -31, 42, -53, -39, -39, -69, 67, 73,
	68, 69, -121, 98, -126, -120, -117, -63, -70, -73,
	-76, 63, 91, 89, 90, 75, -63, -63, -63, -63,
	-63, -63, -63, -63, -63, -63, -63, -63, -63, -63,
	-63, -132, 56, 58, -136, 56, -62, -62, -119, -37,
	22, -36, -38, -214, 54, -214, -2, -36, -36, -39,
	-39, -77, -119, -125, -77, -36, -30, -78, -79, 77,
	-77, -214, 217, -36, -37, -36, -36, -93, 146, -53,
	-96, -100, -77, -42, -43, -43, -42, -43, 41, 41,
	41, 46, 41, 46, 41, -50, -125, -214, -56, 49,
	124, 50, -213, -127, -93, 52, -41, -53, -101, -98,
	54, 271, 273, 274, 51, 70, -39, -148, 107, 106,
	-169, -170, -171, -120, 58, 59, -156, -158, -160, -159,
	-172, -161, 128, 126, 130, 131, 135, -165, 121, 136,
	67, 73, -200, 128, 51, 250, 256, 126, 136, 135,
	321, 65, 129, 306, 308, 29, -151, 323, 245, -149,
	253, -145, 53, -145, -145, 217, -145, -145, -145, -145,
	-145, -147, 219, -147, -147, -147, -147, 53, 53, -145,
	-145, -145, -145, -153, 53, 202, -153, -153, -154, 53,
	-154, -119, 23, -185, 300, -186, 56, -131, 24, -131,
	-53, -204, 8, 9, 10, -53, -114, 118, 115, 116,
	-182, 114, 250, 219, 65, 29, 15, 289, 146, 305,
	56, 147, -53, -53, -53, -131, -109, 11, 91, 37,
	-39, -39, -126, -86, -89, -104, 19, 11, 33, 33,
	-36, 67, 68, 69, 110, -213, -70, -63, -63, -63,
	-35, 141, 72, -214, -214, -36, 54, -39, -214, -214,
	-214, 54, 52, 23, 54, 11, 110, 54, 11, -214,
	-36, -81, -79, 79, -39, -214, -214, -214, -214, -214,
	-61, 30, 33, -2, -213, -213, -57, 54, 12, 81,
	-46, -45, 51, 52, -47, 51, -45, 41, 41, 121,
	121, 121, -94, -119, -57, -41, -57, -102, -103, 275,
	272, 278, 56, 54, -171, 81, 53, -199, 51, 73,
	-163, -119, 136, -165, -165, 56, -165, 56, 56, 67,
	19, -119, 9, 136, 136, -199, 58, -125, -196, 307,
	16, 53, -201, 53, 58, 59, 60, 67, -146, 66,
	-59, 246, 279, 282, 281, 247, 324, -150, 254, 59,
	-147, -147, -145, -147, -147, -147, -148, 30, -148, -148,
	-148, -148, -155, 58, -155, -152, 300, 301, -152, 59,
	-153, 59, 51, 52, -2, -184, -183, -120, -189, 23,
	51, -203, -130, -123, -217, 152, 127, 132, 131, 56,
	126, 130, 146, -188, 152, 127, 128, 132, 131, 56,
	121, 136, 126, 130, 146, 135, -115, -116, 123, 23,
	121, 136, 146, 118, -131, -111, 89, 12, -125, -125,
	38, 110, -53, -40, 11, 98, -120, -37, -35, 72,
	-63, -63, -214, -38, -135, 107, 215, 140, 210, 204,
	234, 235, 221, 252, 208, 253, -132, -135, -63, -63,
	-120, -63, -63, 297, -84, 80, -39, 78, -95, 51,
	-96, -72, -74, -73, -213, -2, -90, -119, -94, -84,
	-100, -39, -39, -39, 53, -39, -213, -213, -213, -214,
	54, -84, -57, 272, 276, 277, -170, -171, -174, -173,
	-119, 136, 10, 9, 19, 132, 126, 56, 56, 56,
	-198, 135, 318, -200, 321, -146, -213, 53, 23, 29,
	59, -201, 53, -191, 320, -213, -145, 53, -145, 53,
	53, 55, -148, -148, -147, -148, -148, -148, 56, 107,
	55, 54, 55, 208, 208, 54, 55, 54, -53, -119,
	54, 81, -190, 19, 160, 161, -53, -204, -216, 121,
	136, -130, -119, -130, -119, -53, -130, -119, 128, -160,
	58, -39, -57, -41, -214, -63, -214, -145, -145, -145,
	-154, -145, 195, -145, 195, -214, -214, -214, 54, 19,
	-214, 54, 19, -213, -34, 294, -39, 28, -95, 54,
	-214, -214, -214, 54, 110, -214, -88, -91, -119, 136,
	-91, -91, -91, -128, -119, -88, 55, 54, -145, -145,
	-162, 156, 157, 30, 158, -162, 318, 136, 136, -198,
	-199, -39, -91, 308, 54, 55, -201, 219, 209, 248,
	225, -214, 55, 55, 55, -148, -147, 58, -147, 255,
	255, 59, 59, 53, 52, 51, -183, -171, 123, 21,
	6, 8, 9, 10, 19, 23, -119, 53, 27, -119,
	-82, 13, -147, 56, -63, -63, -63, -63, -63, -214,
	58, 136, -74, 33, -2, -213, -119, -119, 54, 55,
	-214, -214, -214, -56, -176, -178, 300, -177, 52, 133,
	65, 165, 166, 167, 168, 169, 170, 171, -173, -87,
	-199, 51, 67, 159, -199, 51, -163, -119, -198, -213,
	-214, 55, 53, 59, 55, 217, -152, -148, -148, 55,
	55, -174, -119, -53, -164, -119, 174, -206, -207, -7,
	-9, -8, -11, -10, -12, 20, 178, 179, 180, 53,
	-91, -213, 126, -83, 14, 16, -214, -214, -214, -214,
	-33, 91, 300, 9, -72, -2, 110, -119, -175, 51,
	-177, 300, 53, 302, 56, -166, 81, 58, 81, 81,
	81, 81, 81, 81, 81, 9, 10, 53, 53, -39,
	-195, 158, -197, 55, 55, 55, 53, 53, -192, 54,
	52, 175, -207, -209, -119, -208, -119, -119, -205, 35,
	181, 182, 183, -174, 55, -180, -181, 146, 136, -39,
	-71, -214, 298, 48, 303, -96, -214, -119, -119, -179,
	-177, -119, 59, -202, 51, 70, 59, -202, -202, -202,
	-202, -202, -162, -162, -164, -174, -214, 295, 55, 185,
	310, 311, 145, 312, 158, 313, 314, -92, 319, -174,
	-174, -193, 300, -119, -39, -207, 54, -210, -137, 176,
	-119, 11, 11, 11, 11, 55, -187, -214, 54, -119,
	53, 38, 299, 304, -213, 55, 54, -199, -199, 55,
	55, 300, 59, 16, 59, 59, 59, 59, 311, 145,
	313, 16, -57, 53, 55, 55, 321, -208, -119, 177,
	27, -185, -181, 33, -174, 38, -119, -177, 129, -176,
	59, 59, 315, -125, -176, -91, -57, -176, -39, 19,
	-119, 148, 55, 300, -214, -53, -175, 110, -175, 55,
	-176, -2, 149, 303, 53, -120, -213, 304, -164, -63,
	145, 55, -214, -214,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 693, 0, 449, 449, 449, 449, 449, 449, 0,
	-2, 747, 0, 0, 0, 0, -2, 439, 440, 0,
	442, 443, 1023, 1023, 1023, 1023, 1023, 0, 33, 34,
	1021, 1, 3, 701, 0, 0, 453, 456, 451, 0,
	747, 0, 0, 0, 76, 0, 336, 0, 0, 745,
	745, 0, 0, 745, 114, 0, 0, 0, 748, 0,
	743, 0, 743, 743, 743, 0, 398, 521, 768, 769,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 0, 0, 0, 0, 1024, 1024, 1024,
	1024, 0, 1024, 427, 416, 418, 419, 420, 421, 1024,
	436, 437, 426, 438, 441, 444, 445, 446, 447, 448,
	27, 705, 0, 0, 693, 29, 0, 449, 454, 455,
	459, 457, 458, 450, 0, 467, 471, 0, 531, 0,
	536, 538, -2, -2, 0, 573, 574, 575, 576, 577,
	0, 0, 0, 0, 0, 0, 0, 601, 602, 603,
	604, 678, 679, 680, 681, 682, 683, 684, 685, 540,
	541, 675, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 0, 632, 632, 632, 632, 632, 632,
	632, 632, 0, 0, 0, 0, 0, 0, 0, 478,
	480, 481, 482, 502, 0, 504, 0, 0, 41, 45,
	0, 990, 729, -2, -2, 0, 0, 766, 767, -2,
	900, -2, 764, 765, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	0, 127, 0, 0, 337, 338, 0, 115, 0, 0,
	0, 0, 0, 0, 124, 0, 1024, 0, 0, 0,
	0, 0, 0, 0, 397, 0, 399, 1024, 1024, 1024,
	1024, 1024, 1024, 1024, 1024, 408, 1025, 1026, 409, 410,
	411, 1024, 1024, 413, 0, 428, 0, 422, 28, 1022,
	22, 0, 0, 702, 0, 694, 695, 698, 701, 27,
	456, 0, 461, 460, 452, 0, 468, 0, 0, 0,
	472, 0, 474, 475, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 558, 559, 560, 561,
	562, 563, 564, 537, 0, 551, 0, 0, 0, 593,
	594, 595, 596, 597, 598, 0, 463, 27, 0, 571,
	0, 0, 0, 0, 0, 0, 0, 0, 459, 0,
	667, 0, 623, 0, 624, 625, 626, 627, 628, 629,
	630, 631, 659, 0, 661, 662, 663, 664, 665, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 227,
	228, 0, 463, 0, 0, 43, 0, 520, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 512, 0, 0,
	0, 0, 503, 0, 0, 523, 954, 505, 0, 507,
	508, -2, 0, 0, 0, 39, 40, 0, 46, 990,
	48, 65, 0, 0, 0, 282, 738, 739, 740, 736,
	345, 0, 132, 276, 272, 134, 135, 136, 137, 262,
	200, 262, 262, 262, 262, 262, 234, 262, 262, 279,
	279, 279, 279, 279, 243, 244, 245, 246, 247, 248,
	249, 0, 0, 219, 262, 262, 262, 223, 262, 225,
	226, 252, 253, 254, 255, 256, 257, 258, 259, 264,
	264, 264, 266, 266, 217, 218, 0, 0, 118, 0,
	1024, 0, 1024, 0, 0, 0, 87, 88, 125, 0,
	0, 364, 0, 392, 744, 0, 1024, 395, 396, 522,
	770, 771, 400, 401, 402, 403, 404, 405, 406, 407,
	412, 415, 429, 423, 424, 417, 706, 0, 0, 0,
	0, 0, 697, 699, 700, 705, 30, 459, 0, 686,
	0, 0, 0, 462, 25, 532, 533, 535, 552, 0,
	554, 556, 473, 469, 0, 676, -2, 542, 543, 567,
	568, 569, 0, 0, 0, 0, 565, 547, 0, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	589, 592, 643, 644, 600, 0, 590, 591, 599, 0,
	0, 464, 465, 570, 0, 724, 27, 0, 0, 0,
	0, 0, 675, 0, 0, 0, 0, 673, 670, 0,
	0, 633, 660, 0, 0, 0, 0, 0, 0, 519,
	527, 726, 0, 479, 498, 500, 0, 495, 510, 511,
	513, 0, 515, 0, 517, 518, 483, 484, 485, 0,
	0, 0, 0, 506, 527, 0, 527, 42, 730, 47,
	0, 0, 68, 69, 731, 732, 733, 734, 283, 0,
	126, 346, 348, 351, 352, 353, 128, 129, 130, 131,
	0, 339, 341, 0, 0, 0, 0, 0, 319, 320,
	139, 0, 141, 0, 0, 144, 145, 0, 147, 149,
	339, 0, 0, 0, 0, 0, 138, 0, 278, 274,
	273, 199, 0, 279, 279, 262, 279, 279, 279, 236,
	237, 282, 0, 282, 282, 282, 282, 0, 0, 269,
	269, 222, 224, 211, 0, 264, 213, 214, 215, 0,
	216, 0, 0, 81, 0, 116, 117, 82, 746, 83,
	100, 0, 89, 90, 91, 0, 1023, 113, 0, 759,
	365, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 0, 0, 391, 1024, 394, 432, 0, 0, 0,
	703, 704, 0, 696, 23, 0, 741, 742, 687, 688,
	476, 553, 555, 557, 0, 463, 544, 565, 548, 0,
	545, 0, 0, 539, 605, 0, 0, 572, -2, 608,
	609, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	693, 0, 671, 0, 0, 622, 634, 635, 636, 637,
	718, 0, 0, -2, 0, 0, 693, 0, 0, 0,
	492, 499, 0, 0, 493, 0, 494, 514, 516, 0,
	0, 0, 0, 490, 693, 527, 38, 66, 67, 0,
	0, 73, 284, 0, 349, 0, 0, 325, 0, 0,
	0, 342, 311, 0, 0, 314, 0, 316, 336, 140,
	0, 0, 0, 146, 148, 0, 152, 153, 0, 170,
	0, 0, 159, 0, 194, 163, 164, 165, 166, 167,
	168, 0, 262, 262, 190, 0, 277, 133, 275, 0,
	282, 282, 279, 282, 282, 282, 238, 0, 239, 240,
	241, 242, 0, 260, 0, 220, 0, 0, 221, 0,
	212, 0, 0, 0, -2, 119, 120, 0, 103, 0,
	0, 0, 354, 0, 1023, 0, 379, 380, 381, 382,
	383, 384, 385, 1023, 0, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 0, 1023, 760, 761,
	762, 763, 0, 0, 393, 414, 0, 0, 430, 431,
	707, 0, 24, 527, 0, 470, 677, 0, 546, 0,
	566, 549, 606, 466, 0, 262, 262, 648, 262, 266,
	651, 652, 262, 654, 262, 657, 0, 0, 0, 0,
	676, 0, 0, 0, 668, 621, 674, 0, 31, 0,
	718, 708, 720, 722, 0, 27, 0, 714, 0, 701,
	727, 528, 728, 496, 0, 501, 0, 0, 0, 504,
	0, 701, 37, 70, 71, 72, 347, 350, 0, 321,
	262, 262, 0, 0, 0, 0, 0, 312, 313, 315,
	317, 336, 158, 142, 339, 143, 0, 0, 0, 171,
	0, 0, 0, 162, 0, 0, 186, 0, 188, 0,
	0, 263, 229, 230, 282, 231, 232, 233, 280, 281,
	279, 0, 279, 0, 0, 0, 267, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 0, 0, 0, 377,
	378, 358, 0, 359, 361, 362, 363, 0, 341, 357,
	433, 434, 689, 477, 607, 550, 610, 645, 279, 649,
	650, 653, 655, 656, 658, 612, 611, 613, 0, 0,
	616, 0, 0, 0, 0, 0, 672, 0, 32, 0,
	723, -2, 0, 0, 0, 44, 35, 0, 487, 488,
	0, 0, 0, 523, 491, 36, 286, 0, 698, 324,
	339, 331, 332, 0, 0, 339, 340, 341, 336, 318,
	0, 0, 0, 155, 0, 160, 0, 0, 269, 197,
	198, 169, 187, 189, 191, 235, 282, 261, 282, 270,
	271, 0, 0, 0, 0, 0, 121, 122, 0, 104,
	105, 106, 107, 108, 0, 0, 0, 0, 0, 342,
	691, 0, 646, 647, 0, 0, 0, 0, 638, 620,
	669, 0, 721, 0, -2, 0, 716, 715, 0, 497,
	524, 525, 526, 486, 308, 287, 0, 289, 0, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 322, 323,
	326, 0, 333, 334, 327, 0, 0, 342, 0, 0,
	192, 154, 172, 0, 0, 195, 196, 250, 251, 265,
	268, 0, 0, 0, 109, 343, 0, 86, 92, 94,
	95, 96, 97, 98, 99, 0, 0, 0, 60, 0,
	0, 0, 0, 26, 0, 0, 614, 615, 617, 618,
	0, 0, 0, 0, 711, 27, 0, 489, 285, 0,
	290, 0, 0, 0, 293, 0, 305, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 157, 161, 529, 0, 0, 111, 0,
	0, 0, 93, 49, 54, 51, 56, 57, 0, 0,
	0, 0, 0, 0, 115, 0, 387, 0, 0, 692,
	690, 619, 0, 0, 0, 719, -2, 717, 309, 0,
	291, 296, 294, 297, 306, 307, 298, 299, 300, 301,
	302, 303, 339, 339, 0, 0, 151, 193, 156, 0,
	0, 0, 0, 0, 0, 183, 0, 527, 0, 0,
	0, 84, 0, 344, 110, 85, 0, 0, 53, 55,
	58, 61, 62, 63, 64, 355, 118, 386, 0, 0,
	0, 639, 0, 642, 0, 288, 0, 328, 329, 0,
	286, 0, 174, 0, 176, 177, 178, 179, 180, 181,
	182, 0, 286, 0, 527, 286, 0, 52, 0, 0,
	0, 360, 388, 0, 0, 640, 0, 292, 0, 308,
	173, 175, 184, 0, 308, 0, 286, 78, 112, 0,
	59, 0, 356, 0, 310, 0, 335, 0, 77, 530,
	79, -2, 0, 0, 0, 185, 0, 641, 0, 0,
	0, 330, 389, 390,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 322,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 323, 3, 324, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:354
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:359
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:360
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:364
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:387
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:395
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:399
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:405
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:412
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:418
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:422
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:428
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:432
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:439
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:451
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:463
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:467
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:473
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:483
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:487
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:492
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:493
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:497
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:501
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:510
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:520
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:524
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:528
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:534
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:538
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:551
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:561
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:566
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:570
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:576
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:583
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:590
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:598
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:608
		{
			yyVAL.str = ""
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:612
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:616
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:624
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:630
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:634
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:640
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:644
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:648
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:654
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:658
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:662
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:666
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.str = SessionStr
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.str = GlobalStr
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:682
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:687
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 78:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:707
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 79:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:723
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:738
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:746
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:754
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:758
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 84:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:762
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 85:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:773
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].str,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 86:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:783
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].str,
				Body:      yyDollar[9].triggerBody,
			}}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:795
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:805
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:809
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:813
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:819
		{
			yyVAL.triggerBody = []Statement{yyDollar[1].statement}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:823
		{
			yyVAL.triggerBody = append(yyVAL.triggerBody, yyDollar[2].statement)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:829
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:839
		{
			yyVAL.bytes = nil
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:843
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:847
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:852
		{
			yyVAL.bytes = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:856
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:860
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:864
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:868
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:872
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:877
		{
			yyVAL.expr = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:881
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:886
		{
			yyVAL.expr = nil
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:890
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:895
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:899
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:904
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:908
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:914
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:919
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:924
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:930
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:935
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:941
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyVAL.bytes = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyVAL.bytes = nil
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:956
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:963
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:970
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:975
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:979
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:983
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:987
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:993
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:998
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1009
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1021
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1026
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1031
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1036
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1041
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1046
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1051
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1056
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1061
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1066
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1071
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 150:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1076
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1082
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1087
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1092
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1097
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1103
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1109
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1121
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1128
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1132
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1136
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1142
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1146
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1150
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1154
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1158
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1162
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1166
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1170
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1176
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1180
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1185
		{
			yyVAL.sequence = &Sequence{}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1189
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1194
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1199
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1204
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1209
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1214
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1219
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1224
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1229
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1234
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1239
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1244
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1249
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1256
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1260
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1264
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1268
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1272
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1276
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1281
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1285
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1290
		{
			yyVAL.bytes = nil
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1300
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1305
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1353
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1365
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1377
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1399
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1403
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1407
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1411
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1415
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1419
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1423
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1437
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1443
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1447
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1455
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1459
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1471
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1475
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1479
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1483
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1487
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1491
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1495
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1499
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1503
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1515
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1519
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1523
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1527
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1538
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1542
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1546
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1550
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1554
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1558
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1566
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1572
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1577
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1582
		{
			yyVAL.optVal = nil
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1586
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1591
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1595
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1603
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1607
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 268:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1613
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1621
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1625
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1629
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1634
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1638
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1643
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1647
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1652
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1656
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1660
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1665
		{
			yyVAL.str = ""
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1673
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1678
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1682
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1686
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1692
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1697
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1701
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1705
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1711
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1715
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1721
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1725
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1731
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1735
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1740
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1744
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1748
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1752
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1760
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1764
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1768
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1772
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1778
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1782
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1788
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1792
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1798
		{
			yyVAL.indexPartition = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1802
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1806
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1812
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1816
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1820
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1824
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1828
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1832
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1836
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1840
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1846
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1850
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1856
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1860
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1866
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1871
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1877
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1882
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1889
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 328:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1896
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 329:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1903
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 330:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1912
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1924
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1928
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1932
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1936
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 335:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1942
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1953
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1957
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1961
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1967
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1971
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1976
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1983
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1987
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1992
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1996
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2000
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2008
		{
			yyVAL.str = yyDollar[1].str
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2012
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2016
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2022
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2026
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2030
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 354:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2036
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 355:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:2040
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 356:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:2054
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 357:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2068
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2077
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2081
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 360:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2085
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 361:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2098
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2108
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2113
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2118
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2122
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2154
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2160
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2164
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 389:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2170
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 390:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2174
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 391:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2180
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2186
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 393:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2194
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2199
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2207
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2211
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2217
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2221
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2232
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2236
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2240
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2245
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2249
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 405:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2253
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2257
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2261
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2265
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2269
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2273
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2277
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2281
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2285
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2289
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2299
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2303
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2307
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2311
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2315
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2319
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2333
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2339
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 425:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2349
		{
			yyVAL.str = ""
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2353
		{
			yyVAL.str = "extended "
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2363
		{
			yyVAL.str = "full "
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2369
		{
			yyVAL.str = ""
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2373
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2377
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2383
		{
			yyVAL.showFilter = nil
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2387
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2391
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2397
		{
			yyVAL.str = ""
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2401
		{
			yyVAL.str = SessionStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2405
		{
			yyVAL.str = GlobalStr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2411
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2415
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2421
		{
			yyVAL.statement = &Begin{}
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2425
		{
			yyVAL.statement = &Begin{}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2431
		{
			yyVAL.statement = &Commit{}
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.statement = &Rollback{}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2443
		{
			yyVAL.statement = &OtherRead{}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2447
		{
			yyVAL.statement = &OtherRead{}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2451
		{
			yyVAL.statement = &OtherRead{}
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2455
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2459
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2464
		{
			setAllowComments(yylex, true)
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2468
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2474
		{
			yyVAL.bytes2 = nil
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2478
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2484
		{
			yyVAL.str = UnionStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2488
		{
			yyVAL.str = UnionAllStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2492
		{
			yyVAL.str = UnionDistinctStr
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2497
		{
			yyVAL.str = ""
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2501
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2505
		{
			yyVAL.str = SQLCacheStr
		}
	case 459:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.str = ""
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.str = DistinctStr
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2519
		{
			yyVAL.str = ""
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2523
		{
			yyVAL.str = StraightJoinHint
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2528
		{
			yyVAL.selectExprs = nil
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2532
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2538
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2542
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2548
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2552
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2556
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2560
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2569
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2573
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2580
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2585
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2589
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2595
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2599
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2609
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2613
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2617
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2623
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 486:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2627
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2633
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2638
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2642
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2648
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2652
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2665
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2669
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2673
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2677
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2683
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2685
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2689
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2691
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2695
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2697
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2700
		{
			yyVAL.empty = struct{}{}
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2702
		{
			yyVAL.empty = struct{}{}
		}
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2705
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2713
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2720
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2726
		{
			yyVAL.str = JoinStr
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2730
		{
			yyVAL.str = JoinStr
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2734
		{
			yyVAL.str = JoinStr
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2740
		{
			yyVAL.str = StraightJoinStr
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2746
		{
			yyVAL.str = LeftJoinStr
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2750
		{
			yyVAL.str = LeftJoinStr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2754
		{
			yyVAL.str = RightJoinStr
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2758
		{
			yyVAL.str = RightJoinStr
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2764
		{
			yyVAL.str = NaturalJoinStr
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2768
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2778
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2782
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2788
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2792
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2797
		{
			yyVAL.indexHints = nil
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2801
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 525:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 526:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2814
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2818
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2823
		{
			yyVAL.columns = nil
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2827
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2833
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2837
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2841
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2845
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2849
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2853
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2857
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2863
		{
			yyVAL.str = ""
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2867
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2873
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2877
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2883
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2887
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2891
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2895
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 546:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2899
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2903
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2907
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2911
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 550:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2915
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2925
		{
			yyVAL.str = IsNullStr
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2929
		{
			yyVAL.str = IsNotNullStr
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2933
		{
			yyVAL.str = IsTrueStr
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2937
		{
			yyVAL.str = IsNotTrueStr
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2941
		{
			yyVAL.str = IsFalseStr
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2945
		{
			yyVAL.str = IsNotFalseStr
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2951
		{
			yyVAL.str = EqualStr
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2955
		{
			yyVAL.str = LessThanStr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2959
		{
			yyVAL.str = GreaterThanStr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2963
		{
			yyVAL.str = LessEqualStr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2967
		{
			yyVAL.str = GreaterEqualStr
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.str = NotEqualStr
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2980
		{
			yyVAL.expr = nil
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2984
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2990
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2994
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2998
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3004
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3010
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3014
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3020
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3024
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3028
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3032
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3036
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3040
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3044
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3048
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3052
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3056
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3060
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3064
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3068
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3072
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3076
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3080
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3084
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3088
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3092
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3096
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3100
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3104
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3108
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3116
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3130
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3134
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3138
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3146
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3160
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3164
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3168
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3178
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3182
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3186
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 611:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3190
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3194
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 613:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3198
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 614:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3202
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 615:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3206
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 616:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3210
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 617:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3214
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3218
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 619:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3222
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 620:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3226
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3230
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3234
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3244
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3248
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3252
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3256
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3261
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3271
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3276
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3298
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3302
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 637:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3306
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3312
		{
			yyVAL.str = ""
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3316
		{
			yyVAL.str = BooleanModeStr
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3320
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 641:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3324
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3328
		{
			yyVAL.str = QueryExpansionStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3334
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3338
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3344
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3348
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3352
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3356
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3360
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3364
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3370
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3374
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3378
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3382
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 655:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3386
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 656:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3390
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3394
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3398
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3404
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3408
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3412
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3416
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3420
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3424
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3428
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3433
		{
			yyVAL.expr = nil
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3437
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3442
		{
			yyVAL.str = string("")
		}
	case 669:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3446
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3456
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 672:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3462
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.expr = nil
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3477
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3481
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 677:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3485
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3491
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3495
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3499
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3503
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3511
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3515
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3519
		{
			yyVAL.expr = &NullVal{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3525
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3534
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3538
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3543
		{
			yyVAL.exprs = nil
		}
	case 690:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3547
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3552
		{
			yyVAL.expr = nil
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3556
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 693:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3561
		{
			yyVAL.orderBy = nil
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3565
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3571
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 696:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3575
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3581
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3586
		{
			yyVAL.str = AscScr
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3590
		{
			yyVAL.str = AscScr
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3594
		{
			yyVAL.str = DescScr
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3599
		{
			yyVAL.limit = nil
		}
	case 702:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3603
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3607
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3611
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3616
		{
			yyVAL.str = ""
		}
	case 706:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3620
		{
			yyVAL.str = ForUpdateStr
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3624
		{
			yyVAL.str = ShareModeStr
		}
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3637
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3641
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3645
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 711:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3650
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3654
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 713:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3658
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3665
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 715:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3669
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 716:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3673
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 717:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 718:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3682
		{
			yyVAL.updateExprs = nil
		}
	case 719:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3686
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 720:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3692
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 721:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3696
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3702
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3706
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3712
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3718
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3728
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3732
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3738
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3744
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3748
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3754
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3758
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3762
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3766
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 736:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3773
		{
			yyVAL.bytes = []byte("charset")
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3780
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3784
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3788
		{
			yyVAL.expr = &Default{}
		}
	case 743:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3797
		{
			yyVAL.byt = 0
		}
	case 744:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3799
		{
			yyVAL.byt = 1
		}
	case 745:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3802
		{
			yyVAL.empty = struct{}{}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3804
		{
			yyVAL.empty = struct{}{}
		}
	case 747:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3807
		{
			yyVAL.str = ""
		}
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3809
		{
			yyVAL.str = IgnoreStr
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3813
		{
			yyVAL.empty = struct{}{}
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3815
		{
			yyVAL.empty = struct{}{}
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3817
		{
			yyVAL.empty = struct{}{}
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3819
		{
			yyVAL.empty = struct{}{}
		}
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3821
		{
			yyVAL.empty = struct{}{}
		}
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3823
		{
			yyVAL.empty = struct{}{}
		}
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3825
		{
			yyVAL.empty = struct{}{}
		}
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3827
		{
			yyVAL.empty = struct{}{}
		}
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3829
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3831
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3834
		{
			yyVAL.empty = struct{}{}
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3836
		{
			yyVAL.empty = struct{}{}
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3838
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3842
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3844
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3848
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3852
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3859
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3865
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3869
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 771:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3876
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4151
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4160
		{
			decNesting(yylex)
		}
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4165
		{
			forceEOF(yylex)
		}
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4170
		{
			forceEOF(yylex)
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4174
		{
			forceEOF(yylex)
		}
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4178
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
