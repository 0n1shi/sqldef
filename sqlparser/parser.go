// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const BLOB = 57526
const TINYBLOB = 57527
const MEDIUMBLOB = 57528
const LONGBLOB = 57529
const JSON = 57530
const JSONB = 57531
const ENUM = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const ARRAY = 57541
const NOW = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const ZONE = 57549
const DATABASES = 57550
const TABLES = 57551
const VITESS_KEYSPACES = 57552
const VITESS_SHARDS = 57553
const VITESS_TABLETS = 57554
const VSCHEMA_TABLES = 57555
const EXTENDED = 57556
const FULL = 57557
const PROCESSLIST = 57558
const NAMES = 57559
const CHARSET = 57560
const GLOBAL = 57561
const SESSION = 57562
const ISOLATION = 57563
const LEVEL = 57564
const READ = 57565
const WRITE = 57566
const ONLY = 57567
const REPEATABLE = 57568
const COMMITTED = 57569
const UNCOMMITTED = 57570
const SERIALIZABLE = 57571
const CURRENT_TIMESTAMP = 57572
const DATABASE = 57573
const CURRENT_DATE = 57574
const CURRENT_TIME = 57575
const LOCALTIME = 57576
const LOCALTIMESTAMP = 57577
const UTC_DATE = 57578
const UTC_TIME = 57579
const UTC_TIMESTAMP = 57580
const REPLACE = 57581
const CONVERT = 57582
const CAST = 57583
const SUBSTR = 57584
const SUBSTRING = 57585
const GROUP_CONCAT = 57586
const SEPARATOR = 57587
const MATCH = 57588
const AGAINST = 57589
const BOOLEAN = 57590
const LANGUAGE = 57591
const WITH = 57592
const WITHOUT = 57593
const PARSER = 57594
const QUERY = 57595
const EXPANSION = 57596
const UNUSED = 57597
const TYPECAST = 57598
const CHECK = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	152, 326,
	153, 326,
	-2, 316,
	-1, 253,
	108, 654,
	-2, 650,
	-1, 254,
	108, 655,
	-2, 651,
	-1, 324,
	79, 827,
	-2, 58,
	-1, 325,
	79, 783,
	-2, 59,
	-1, 330,
	79, 766,
	-2, 621,
	-1, 332,
	79, 804,
	-2, 623,
	-1, 598,
	51, 41,
	53, 41,
	-2, 43,
	-1, 751,
	108, 657,
	-2, 653,
	-1, 972,
	5, 28,
	-2, 459,
	-1, 997,
	5, 27,
	-2, 596,
	-1, 1274,
	5, 28,
	-2, 597,
	-1, 1338,
	5, 27,
	-2, 599,
	-1, 1416,
	5, 28,
	-2, 600,
}

const yyPrivate = 57344

const yyLast = 12266

var yyAct = [...]int{

	254, 1406, 1368, 1000, 679, 1280, 911, 810, 247, 1291,
	544, 1349, 258, 1166, 1039, 1194, 828, 851, 1167, 890,
	1081, 232, 905, 283, 1163, 592, 857, 850, 1137, 590,
	783, 53, 846, 260, 811, 88, 66, 1016, 88, 1067,
	543, 3, 964, 900, 1070, 780, 608, 257, 329, 753,
	1005, 799, 226, 477, 483, 607, 807, 594, 864, 579,
	311, 431, 88, 88, 334, 310, 489, 498, 88, 256,
	334, 320, 945, 334, 241, 1054, 323, 88, 318, 88,
	558, 464, 879, 52, 1455, 88, 496, 929, 231, 316,
	245, 309, 720, 721, 1203, 314, 227, 228, 229, 230,
	928, 1382, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 976, 1457, 975, 495, 494, 1435,
	1453, 1414, 495, 494, 85, 977, 1394, 933, 476, 1162,
	494, 1451, 495, 494, 496, 1350, 927, 495, 494, 496,
	716, 1448, 878, 495, 494, 326, 496, 912, 1352, 496,
	1071, 1072, 319, 1434, 496, 1413, 251, 434, 1158, 1268,
	496, 435, 1206, 1188, 457, 609, 443, 610, 444, 1189,
	1190, 841, 495, 494, 451, 715, 472, 23, 24, 48,
	26, 27, 842, 843, 924, 921, 922, 710, 920, 496,
	68, 495, 494, 1306, 711, 1024, 42, 1305, 1023, 1056,
	28, 1025, 881, 891, 1327, 88, 1298, 883, 496, 334,
	334, 334, 334, 1360, 334, 1351, 931, 934, 957, 37,
	1218, 334, 1217, 50, 1042, 1043, 1044, 459, 1257, 461,
	901, 1255, 1048, 1046, 280, 281, 567, 1294, 71, 73,
	225, 67, 480, 484, 782, 1229, 1230, 1357, 334, 468,
	469, 1452, 1446, 72, 74, 1407, 1115, 458, 460, 503,
	83, 79, 80, 81, 808, 926, 1037, 485, 1408, 1335,
	1297, 69, 1232, 497, 1052, 866, 1051, 1201, 486, 1383,
	1032, 1444, 30, 31, 33, 32, 35, 1233, 1112, 531,
	867, 925, 1241, 545, 453, 446, 1035, 1373, 829, 831,
	438, 282, 556, 76, 77, 77, 36, 43, 44, 88,
	1314, 45, 46, 34, 689, 678, 88, 88, 88, 1015,
	1014, 497, 334, 1013, 433, 442, 497, 57, 334, 930,
	866, 204, 78, 497, 38, 39, 497, 40, 41, 1116,
	1387, 497, 891, 1277, 932, 867, 886, 497, 1124, 314,
	980, 1353, 59, 60, 61, 62, 63, 456, 714, 902,
	866, 958, 1292, 1293, 1295, 328, 533, 534, 717, 70,
	870, 436, 830, 1412, 440, 867, 497, 560, 561, 562,
	563, 564, 565, 566, 1049, 1113, 502, 1111, 452, 848,
	847, 82, 871, 605, 512, 497, 599, 1120, 574, 740,
	1114, 1212, 1392, 326, 1226, 1003, 876, 598, 868, 611,
	1092, 1160, 940, 869, 1047, 682, 800, 1356, 535, 536,
	537, 538, 539, 540, 541, 1041, 882, 49, 800, 491,
	987, 75, 742, 1418, 334, 334, 515, 516, 517, 518,
	519, 512, 88, 88, 334, 437, 88, 1308, 1307, 88,
	1150, 1213, 1151, 88, 50, 334, 334, 334, 334, 334,
	334, 334, 334, 445, 756, 1076, 873, 1393, 744, 334,
	334, 1074, 1119, 1057, 88, 875, 874, 1334, 1303, 1093,
	1089, 743, 760, 1094, 1091, 1090, 745, 741, 74, 334,
	941, 746, 308, 88, 1243, 1068, 758, 759, 757, 1095,
	334, 698, 1053, 732, 733, 1088, 1390, 722, 1200, 462,
	328, 328, 328, 328, 1199, 328, 21, 439, 1198, 441,
	1402, 1462, 328, 1342, 1447, 696, 954, 955, 956, 754,
	1038, 685, 686, 1402, 1436, 690, 1430, 476, 693, 755,
	1342, 1427, 334, 1342, 1424, 448, 449, 450, 1026, 500,
	914, 751, 735, 737, 738, 545, 776, 736, 790, 791,
	695, 872, 724, 712, 792, 795, 487, 747, 1342, 1423,
	801, 694, 236, 683, 88, 749, 681, 88, 88, 88,
	88, 88, 731, 454, 750, 1342, 1404, 787, 812, 88,
	1342, 1365, 88, 1342, 476, 476, 88, 1342, 1343, 1289,
	1288, 88, 88, 777, 778, 334, 1185, 476, 1276, 476,
	314, 314, 314, 314, 314, 804, 1221, 1220, 334, 447,
	845, 797, 432, 328, 1364, 314, 210, 1215, 1216, 613,
	836, 1401, 787, 1402, 314, 1215, 1214, 1363, 814, 815,
	1207, 817, 813, 970, 476, 816, 1164, 825, 680, 1001,
	220, 576, 476, 833, 1001, 834, 892, 893, 894, 785,
	476, 752, 839, 809, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 88,
	855, 838, 334, 785, 334, 88, 326, 1002, 88, 602,
	88, 837, 23, 88, 334, 618, 617, 1272, 907, 852,
	205, 581, 584, 585, 586, 582, 207, 583, 587, 23,
	576, 1006, 1007, 213, 209, 995, 903, 904, 996, 465,
	466, 467, 1225, 470, 943, 944, 54, 484, 576, 603,
	474, 601, 835, 1127, 601, 676, 328, 1002, 50, 23,
	1219, 982, 979, 211, 1027, 328, 215, 513, 514, 515,
	516, 517, 518, 519, 512, 50, 328, 328, 328, 328,
	328, 328, 328, 328, 970, 1337, 751, 840, 910, 970,
	328, 328, 575, 946, 918, 970, 947, 935, 1001, 936,
	604, 754, 937, 981, 978, 50, 1223, 1222, 206, 718,
	726, 755, 788, 789, 971, 238, 576, 50, 796, 750,
	1454, 500, 1432, 1397, 328, 1370, 1367, 960, 1366, 988,
	1321, 883, 906, 803, 1179, 805, 806, 901, 1030, 1102,
	208, 896, 216, 217, 218, 219, 223, 1006, 1007, 908,
	909, 222, 221, 334, 895, 65, 88, 1358, 1018, 730,
	1020, 50, 1355, 779, 1224, 1164, 1031, 1009, 997, 692,
	986, 334, 684, 793, 793, 473, 822, 820, 1012, 793,
	1011, 823, 821, 819, 818, 1019, 334, 1010, 1028, 314,
	273, 272, 275, 276, 277, 278, 1443, 793, 1433, 274,
	279, 1123, 824, 1103, 585, 586, 942, 1021, 1105, 1098,
	1099, 1441, 1106, 1101, 1100, 242, 243, 1108, 1104, 490,
	952, 951, 1063, 616, 1058, 1059, 328, 1061, 1107, 88,
	334, 334, 488, 334, 1097, 961, 962, 963, 1045, 328,
	1033, 1034, 1036, 1062, 478, 1064, 1065, 1066, 455, 1270,
	1322, 916, 852, 691, 1084, 479, 1069, 589, 334, 239,
	240, 88, 88, 1073, 677, 490, 1075, 950, 1316, 88,
	1317, 1318, 1319, 688, 1228, 949, 233, 1086, 54, 334,
	1376, 234, 1315, 1375, 699, 700, 701, 702, 703, 704,
	705, 706, 1085, 1325, 953, 1002, 1197, 1196, 707, 708,
	492, 1396, 56, 328, 1395, 328, 581, 584, 585, 586,
	582, 1384, 583, 587, 1082, 328, 1161, 1050, 1077, 334,
	334, 1136, 713, 1165, 1131, 1130, 1152, 58, 812, 1087,
	1231, 1176, 1177, 600, 812, 1178, 1159, 475, 1180, 328,
	1168, 51, 1, 1187, 1450, 1202, 969, 1227, 334, 751,
	334, 334, 1174, 1083, 1096, 913, 1175, 1173, 1125, 1170,
	1129, 1080, 984, 923, 1405, 1348, 1193, 1192, 858, 849,
	1186, 430, 64, 1391, 859, 1191, 856, 884, 885, 887,
	888, 889, 1155, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 619, 897, 898, 899, 877,
	1210, 1055, 880, 625, 623, 624, 621, 627, 626, 334,
	622, 1208, 1209, 620, 1211, 739, 212, 321, 334, 520,
	521, 513, 514, 515, 516, 517, 518, 519, 512, 852,
	88, 852, 965, 1149, 588, 612, 334, 493, 1110, 1109,
	919, 1118, 1133, 1134, 709, 334, 939, 471, 88, 1244,
	1245, 214, 529, 948, 1017, 1153, 1154, 1022, 1156, 1157,
	1234, 327, 1171, 1242, 719, 482, 1374, 1324, 985, 1236,
	555, 798, 328, 259, 734, 271, 268, 1246, 270, 269,
	725, 314, 994, 1239, 504, 1253, 249, 1040, 313, 1138,
	572, 1269, 580, 578, 577, 1008, 1004, 312, 545, 1126,
	334, 1267, 334, 334, 334, 88, 334, 1282, 1283, 1284,
	1271, 915, 334, 917, 1381, 729, 1279, 25, 55, 1238,
	244, 19, 1140, 938, 18, 17, 1129, 1296, 1287, 1028,
	1285, 1078, 328, 20, 328, 16, 15, 14, 29, 13,
	12, 11, 10, 334, 334, 88, 334, 334, 1309, 9,
	8, 7, 334, 6, 1302, 5, 1304, 4, 235, 328,
	22, 2, 334, 1301, 1313, 0, 1312, 1142, 0, 1147,
	0, 1141, 0, 1139, 0, 0, 0, 0, 0, 1145,
	328, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
	1144, 1326, 0, 852, 0, 432, 0, 334, 334, 0,
	0, 0, 328, 0, 0, 1146, 1148, 0, 0, 1248,
	334, 1336, 0, 0, 0, 0, 1168, 793, 334, 0,
	1172, 1017, 1347, 793, 0, 1354, 0, 1082, 852, 0,
	0, 0, 1359, 1060, 1311, 334, 1338, 0, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 1371, 0, 328,
	0, 328, 1195, 0, 0, 1361, 0, 1362, 0, 866,
	0, 0, 0, 334, 860, 0, 865, 0, 861, 862,
	0, 1385, 0, 863, 867, 0, 0, 0, 0, 0,
	1389, 1168, 0, 0, 0, 0, 0, 334, 334, 1398,
	0, 334, 1399, 1400, 0, 0, 1403, 0, 0, 0,
	1386, 0, 0, 0, 1409, 545, 0, 1410, 334, 0,
	1235, 0, 1415, 0, 0, 334, 0, 812, 334, 1237,
	1422, 481, 0, 334, 0, 1420, 1421, 0, 334, 1428,
	0, 0, 0, 0, 0, 0, 0, 1240, 1328, 1329,
	1079, 1330, 1331, 1332, 0, 0, 328, 1437, 0, 0,
	0, 0, 1440, 334, 1438, 1439, 86, 0, 1442, 224,
	0, 0, 0, 0, 0, 88, 0, 1117, 0, 0,
	0, 0, 284, 47, 0, 334, 0, 1458, 0, 0,
	0, 248, 0, 86, 86, 0, 0, 0, 1463, 86,
	0, 0, 0, 0, 1204, 0, 0, 0, 86, 0,
	86, 1281, 0, 1281, 1281, 1281, 86, 1286, 0, 0,
	0, 0, 0, 328, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 0, 723, 0, 0, 0, 237, 1264,
	476, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1281, 1310, 0, 328, 328, 0,
	0, 0, 0, 1320, 1449, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 511, 510, 520, 521,
	513, 514, 515, 516, 517, 518, 519, 512, 0, 0,
	0, 784, 786, 0, 0, 1250, 1251, 0, 1252, 0,
	0, 0, 1254, 0, 1256, 0, 0, 802, 1340, 1341,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 1195, 0, 0, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 86, 0, 827, 0,
	0, 0, 0, 1460, 0, 0, 1369, 0, 0, 0,
	0, 0, 1290, 1281, 0, 0, 0, 0, 0, 506,
	0, 509, 0, 1300, 0, 0, 0, 522, 523, 524,
	525, 526, 527, 528, 1388, 507, 508, 505, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	0, 463, 463, 463, 463, 0, 463, 0, 1281, 1281,
	0, 0, 1281, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1261, 476, 0, 793, 0, 0, 1417,
	47, 0, 0, 0, 0, 0, 1419, 0, 0, 1369,
	0, 0, 0, 0, 1426, 530, 0, 0, 532, 1431,
	86, 1265, 0, 0, 0, 0, 0, 86, 596, 86,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 476, 1281, 542, 0, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 0, 557, 559, 559,
	559, 559, 559, 559, 559, 559, 1369, 568, 569, 570,
	571, 0, 0, 0, 0, 0, 0, 0, 591, 511,
	510, 520, 521, 513, 514, 515, 516, 517, 518, 519,
	512, 0, 511, 510, 520, 521, 513, 514, 515, 516,
	517, 518, 519, 512, 967, 0, 0, 0, 968, 0,
	0, 0, 0, 0, 0, 972, 973, 974, 1132, 0,
	0, 0, 0, 0, 983, 0, 0, 0, 0, 989,
	0, 990, 991, 992, 993, 0, 0, 0, 511, 510,
	520, 521, 513, 514, 515, 516, 517, 518, 519, 512,
	966, 0, 0, 86, 86, 0, 0, 86, 0, 0,
	86, 0, 1262, 0, 697, 0, 0, 0, 0, 0,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 0, 0, 86, 0, 463, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 0, 463, 463, 463,
	463, 463, 463, 463, 463, 0, 0, 0, 0, 0,
	0, 463, 463, 511, 510, 520, 521, 513, 514, 515,
	516, 517, 518, 519, 512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 248,
	248, 0, 0, 794, 794, 248, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 248, 248, 248, 0, 86, 0, 794, 86, 86,
	86, 86, 86, 0, 0, 47, 0, 1135, 0, 0,
	826, 0, 0, 86, 0, 0, 0, 596, 0, 546,
	0, 0, 86, 86, 511, 510, 520, 521, 513, 514,
	515, 516, 517, 518, 519, 512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 315,
	315, 315, 315, 315, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 832, 0, 0, 0,
	0, 0, 0, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 86, 0, 0, 86,
	0, 86, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 0, 463, 0, 463, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 463, 633, 1247, 0,
	0, 0, 0, 0, 0, 1249, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1258, 0, 0,
	1259, 1260, 0, 0, 1263, 0, 0, 0, 0, 0,
	648, 0, 0, 248, 0, 0, 0, 1273, 1274, 1275,
	0, 1278, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 0, 959, 0, 0, 0, 0, 0, 0,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	0, 671, 672, 1299, 673, 674, 675, 649, 650, 651,
	652, 630, 632, 0, 628, 631, 634, 86, 645, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 646,
	653, 654, 655, 656, 657, 658, 659, 660, 0, 0,
	998, 999, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1333, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1344, 1345, 1346, 0, 0, 0, 0, 629, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 1122, 0, 0, 1377, 1378, 1379, 1380,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 248, 0, 463, 0, 0, 0, 0, 0, 0,
	0, 0, 248, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 697, 0, 0, 0, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 0, 0, 794, 0, 1411,
	0, 0, 0, 794, 1416, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1169,
	0, 47, 0, 0, 0, 0, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1181, 1182, 1183, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 1465,
	0, 1466, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1205, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1169, 0, 0, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1372, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 794, 0, 0, 0,
	1169, 0, 47, 0, 0, 0, 0, 0, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 86, 0, 333, 0,
	853, 854, 0, 0, 1425, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 1029, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 1456, 361, 405, 1459, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 333, 0,
	853, 854, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 1128,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 50, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 748,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 331, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 332, 330, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 606, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 331, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 332, 330, 119,
	163, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 0, 103, 419, 409,
	0, 379, 421, 356, 371, 429, 372, 373, 401, 342,
	387, 145, 368, 91, 359, 337, 365, 338, 357, 381,
	112, 355, 411, 390, 124, 427, 127, 395, 0, 166,
	136, 0, 0, 383, 413, 385, 407, 378, 402, 347,
	394, 422, 369, 398, 423, 0, 0, 0, 333, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 397,
	418, 367, 400, 336, 396, 0, 340, 343, 428, 416,
	362, 363, 0, 0, 0, 0, 0, 0, 0, 382,
	386, 404, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 393, 0, 0, 0, 344, 341, 0,
	380, 0, 0, 0, 346, 0, 361, 405, 0, 335,
	408, 414, 377, 191, 417, 375, 374, 152, 0, 107,
	0, 170, 116, 370, 125, 403, 420, 384, 412, 358,
	366, 108, 364, 159, 146, 182, 392, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 322, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 331, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 339, 0, 167, 184, 202, 203, 354, 415,
	194, 195, 196, 197, 0, 0, 0, 332, 330, 325,
	324, 122, 129, 155, 200, 399, 160, 106, 183, 165,
	350, 353, 348, 349, 388, 389, 424, 425, 426, 406,
	345, 0, 351, 352, 0, 410, 391, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 145, 103, 91, 781,
	0, 255, 0, 0, 0, 112, 252, 0, 0, 124,
	294, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	285, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 253, 273, 272, 275, 276, 277, 278,
	0, 0, 104, 274, 279, 280, 281, 0, 0, 250,
	266, 0, 293, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 264, 246, 0, 0, 0, 306, 0,
	265, 0, 0, 261, 262, 267, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 304, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 295, 305, 301, 302, 299,
	300, 298, 297, 296, 307, 287, 288, 289, 290, 292,
	0, 291, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 303, 103, 145, 0, 91, 0, 0, 255, 0,
	0, 0, 112, 252, 0, 0, 124, 294, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 285, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 476,
	253, 273, 272, 275, 276, 277, 278, 0, 0, 104,
	274, 279, 280, 281, 0, 0, 250, 266, 0, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	264, 0, 0, 0, 0, 306, 0, 265, 0, 0,
	261, 262, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 304, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 295, 305, 301, 302, 299, 300, 298, 297,
	296, 307, 287, 288, 289, 290, 292, 0, 291, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 303, 103,
	145, 0, 91, 0, 0, 255, 0, 0, 0, 112,
	252, 0, 0, 124, 294, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 285, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 253, 273, 272,
	275, 276, 277, 278, 0, 0, 104, 274, 279, 280,
	281, 0, 0, 250, 266, 0, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 246, 0,
	0, 0, 306, 0, 265, 0, 0, 261, 262, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 304, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 295,
	305, 301, 302, 299, 300, 298, 297, 296, 307, 287,
	288, 289, 290, 292, 0, 291, 90, 98, 126, 198,
	199, 0, 154, 114, 185, 303, 103, 145, 0, 91,
	0, 0, 255, 0, 0, 0, 112, 252, 0, 0,
	124, 294, 127, 0, 0, 166, 136, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 0, 0, 844,
	0, 50, 0, 0, 253, 273, 272, 275, 276, 277,
	278, 0, 0, 104, 274, 279, 280, 281, 0, 0,
	250, 266, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 0, 0, 0, 0, 306,
	0, 265, 0, 0, 261, 262, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 304, 152, 0, 107, 0, 170, 116, 0,
	125, 0, 0, 0, 0, 0, 0, 108, 0, 159,
	146, 182, 0, 147, 157, 128, 174, 153, 181, 192,
	193, 172, 190, 161, 99, 142, 89, 151, 158, 0,
	0, 0, 92, 171, 180, 105, 162, 95, 178, 168,
	169, 134, 120, 121, 164, 93, 94, 0, 156, 111,
	150, 115, 110, 144, 175, 176, 109, 201, 100, 188,
	189, 97, 101, 187, 141, 186, 173, 179, 135, 132,
	96, 177, 133, 131, 123, 0, 113, 117, 148, 130,
	149, 118, 138, 137, 139, 0, 143, 0, 0, 0,
	167, 184, 202, 203, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 140, 102, 119, 163, 122, 129, 155,
	200, 0, 160, 106, 183, 165, 295, 305, 301, 302,
	299, 300, 298, 297, 296, 307, 287, 288, 289, 290,
	292, 0, 291, 90, 98, 126, 198, 199, 23, 154,
	114, 185, 303, 103, 0, 0, 0, 0, 0, 0,
	145, 0, 91, 0, 0, 255, 0, 0, 0, 112,
	252, 0, 0, 124, 294, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 285, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 253, 273, 272,
	275, 276, 277, 278, 0, 0, 104, 274, 279, 280,
	281, 0, 0, 250, 266, 0, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 264, 0, 0,
	0, 0, 306, 0, 265, 0, 0, 261, 262, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 304, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 295,
	305, 301, 302, 299, 300, 298, 297, 296, 307, 287,
	288, 289, 290, 292, 0, 291, 90, 98, 126, 198,
	199, 0, 154, 114, 185, 303, 103, 145, 0, 91,
	0, 0, 255, 0, 0, 0, 112, 252, 0, 0,
	124, 294, 127, 0, 0, 166, 136, 0, 0, 0,
	0, 285, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 253, 273, 272, 275, 276, 277,
	278, 0, 0, 104, 274, 279, 280, 281, 0, 0,
	250, 266, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 264, 0, 0, 0, 0, 306,
	0, 265, 0, 0, 261, 262, 267, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 304, 152, 0, 107, 0, 170, 116, 0,
	125, 0, 0, 0, 0, 0, 0, 108, 0, 159,
	146, 182, 0, 147, 157, 128, 174, 153, 181, 192,
	193, 172, 190, 161, 99, 142, 89, 151, 158, 0,
	0, 0, 92, 171, 180, 105, 162, 95, 178, 168,
	169, 134, 120, 121, 164, 93, 94, 0, 156, 111,
	150, 115, 110, 144, 175, 176, 109, 201, 100, 188,
	189, 97, 101, 187, 141, 186, 173, 179, 135, 132,
	96, 177, 133, 131, 123, 0, 113, 117, 148, 130,
	149, 118, 138, 137, 139, 0, 143, 0, 0, 0,
	167, 184, 202, 203, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 140, 102, 119, 163, 122, 129, 155,
	200, 0, 160, 106, 183, 165, 295, 305, 301, 302,
	299, 300, 298, 297, 296, 307, 287, 288, 289, 290,
	292, 0, 291, 90, 98, 126, 198, 199, 0, 154,
	114, 185, 303, 103, 145, 0, 91, 0, 0, 0,
	0, 0, 0, 112, 0, 0, 0, 124, 294, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 285, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 253, 273, 272, 275, 276, 277, 278, 0, 0,
	104, 274, 279, 280, 281, 0, 0, 0, 266, 0,
	293, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	263, 264, 0, 0, 0, 0, 306, 0, 265, 0,
	0, 261, 262, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 304,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 1461,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 0, 160,
	106, 183, 165, 295, 305, 301, 302, 299, 300, 298,
	297, 296, 307, 287, 288, 289, 290, 292, 0, 291,
	90, 98, 126, 198, 199, 0, 154, 114, 185, 303,
	103, 145, 0, 91, 0, 0, 0, 0, 0, 0,
	112, 0, 0, 0, 124, 294, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 285, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 253, 273,
	272, 275, 276, 277, 278, 0, 0, 104, 274, 279,
	280, 281, 0, 0, 0, 266, 0, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 264, 0,
	0, 0, 0, 306, 0, 265, 0, 0, 261, 262,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 304, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	295, 305, 301, 302, 299, 300, 298, 297, 296, 307,
	287, 288, 289, 290, 292, 0, 291, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 303, 103, 145, 0,
	91, 0, 0, 0, 0, 0, 0, 112, 0, 0,
	0, 124, 0, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	511, 510, 520, 521, 513, 514, 515, 516, 517, 518,
	519, 512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 98, 126, 198, 199, 0,
	154, 114, 185, 145, 103, 91, 0, 499, 0, 0,
	0, 0, 112, 0, 0, 0, 124, 0, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	333, 0, 501, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 0, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 90,
	98, 126, 198, 199, 0, 154, 114, 185, 497, 103,
	145, 0, 91, 0, 595, 0, 0, 0, 0, 112,
	0, 0, 0, 124, 0, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 597,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 91, 0, 90, 98, 126, 198,
	199, 112, 154, 114, 185, 124, 103, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 333,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 91, 0, 90, 98,
	126, 198, 199, 112, 154, 114, 185, 124, 103, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 0,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 0, 160,
	106, 183, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 145, 0, 91, 0,
	90, 98, 126, 198, 199, 112, 154, 114, 185, 124,
	103, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 333, 0, 0, 727, 0, 0, 728,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 147, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 98, 126, 198, 199, 0, 154, 114,
	185, 145, 103, 91, 0, 0, 0, 0, 0, 0,
	112, 615, 0, 0, 124, 0, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 333, 0,
	614, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 98, 126,
	198, 199, 0, 154, 114, 185, 145, 103, 91, 0,
	595, 0, 0, 0, 0, 112, 0, 0, 0, 124,
	0, 127, 0, 0, 166, 136, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 597, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 0, 152, 0, 107, 0, 170, 116, 0, 125,
	0, 0, 0, 0, 0, 0, 108, 0, 159, 146,
	182, 0, 593, 157, 128, 174, 153, 181, 192, 193,
	172, 190, 161, 99, 142, 89, 151, 158, 0, 0,
	0, 92, 171, 180, 105, 162, 95, 178, 168, 169,
	134, 120, 121, 164, 93, 94, 0, 156, 111, 150,
	115, 110, 144, 175, 176, 109, 201, 100, 188, 189,
	97, 101, 187, 141, 186, 173, 179, 135, 132, 96,
	177, 133, 131, 123, 0, 113, 117, 148, 130, 149,
	118, 138, 137, 139, 0, 143, 0, 0, 0, 167,
	184, 202, 203, 0, 0, 194, 195, 196, 197, 0,
	0, 0, 140, 102, 119, 163, 122, 129, 155, 200,
	0, 160, 106, 183, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 145, 0,
	91, 0, 90, 98, 126, 198, 199, 112, 154, 114,
	185, 124, 103, 127, 0, 0, 166, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	191, 0, 0, 0, 152, 0, 107, 0, 170, 116,
	0, 125, 0, 0, 0, 0, 0, 0, 108, 0,
	159, 146, 182, 0, 147, 157, 128, 174, 153, 181,
	192, 193, 172, 190, 161, 99, 142, 89, 151, 158,
	0, 0, 0, 92, 171, 180, 105, 162, 95, 178,
	168, 169, 134, 120, 121, 164, 93, 94, 0, 156,
	111, 150, 115, 110, 144, 175, 176, 109, 201, 100,
	188, 189, 97, 101, 187, 141, 186, 173, 179, 135,
	132, 96, 177, 133, 131, 123, 0, 113, 117, 148,
	130, 149, 118, 138, 137, 139, 0, 143, 0, 0,
	0, 167, 184, 202, 203, 0, 0, 194, 195, 196,
	197, 0, 0, 0, 140, 102, 119, 163, 122, 129,
	155, 200, 0, 160, 106, 183, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	145, 0, 91, 0, 90, 98, 126, 198, 199, 112,
	154, 114, 185, 124, 103, 127, 0, 0, 166, 136,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 597,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 0, 0, 0, 152, 0, 107, 0,
	170, 116, 0, 125, 0, 0, 0, 0, 0, 0,
	108, 0, 159, 146, 182, 0, 147, 157, 128, 174,
	153, 181, 192, 193, 172, 190, 161, 99, 142, 89,
	151, 158, 0, 0, 0, 92, 171, 180, 105, 162,
	95, 178, 168, 169, 134, 120, 121, 164, 93, 94,
	0, 156, 111, 150, 115, 110, 144, 175, 176, 109,
	201, 100, 188, 189, 97, 101, 187, 141, 186, 173,
	179, 135, 132, 96, 177, 133, 131, 123, 0, 113,
	117, 148, 130, 149, 118, 138, 137, 139, 0, 143,
	0, 0, 0, 167, 184, 202, 203, 0, 0, 194,
	195, 196, 197, 0, 0, 0, 140, 102, 119, 163,
	122, 129, 155, 200, 0, 160, 106, 183, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 145, 0, 91, 0, 90, 98, 126, 198,
	199, 112, 154, 114, 185, 124, 103, 127, 0, 0,
	166, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 333,
	0, 501, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 0, 152, 0,
	107, 0, 170, 116, 0, 125, 0, 0, 0, 0,
	0, 0, 108, 0, 159, 146, 182, 0, 147, 157,
	128, 174, 153, 181, 192, 193, 172, 190, 161, 99,
	142, 89, 151, 158, 0, 0, 0, 92, 171, 180,
	105, 162, 95, 178, 168, 169, 134, 120, 121, 164,
	93, 94, 0, 156, 111, 150, 115, 110, 144, 175,
	176, 109, 201, 100, 188, 189, 97, 101, 187, 141,
	186, 173, 179, 135, 132, 96, 177, 133, 131, 123,
	0, 113, 117, 148, 130, 149, 118, 138, 137, 139,
	0, 143, 0, 0, 0, 167, 184, 202, 203, 0,
	0, 194, 195, 196, 197, 0, 0, 0, 140, 102,
	119, 163, 122, 129, 155, 200, 0, 160, 106, 183,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 145, 0, 91, 0, 90, 98,
	126, 198, 199, 112, 154, 114, 185, 124, 103, 127,
	0, 0, 166, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 191, 0, 0, 0,
	152, 0, 107, 0, 170, 116, 0, 125, 0, 0,
	0, 0, 0, 0, 108, 0, 159, 146, 182, 0,
	147, 157, 128, 174, 153, 181, 192, 193, 172, 190,
	161, 99, 142, 89, 151, 158, 0, 0, 0, 92,
	171, 180, 105, 162, 95, 178, 168, 169, 134, 120,
	121, 164, 93, 94, 0, 156, 111, 150, 115, 110,
	144, 175, 176, 109, 201, 100, 188, 189, 97, 101,
	187, 141, 186, 173, 179, 135, 132, 96, 177, 133,
	131, 123, 0, 113, 117, 148, 130, 149, 118, 138,
	137, 139, 0, 143, 0, 0, 0, 167, 184, 202,
	203, 0, 0, 194, 195, 196, 197, 0, 0, 0,
	140, 102, 119, 163, 122, 129, 155, 200, 687, 160,
	106, 183, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 98, 126, 198, 199, 0, 154, 114, 185, 145,
	103, 91, 0, 0, 0, 0, 0, 573, 112, 0,
	0, 0, 124, 0, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 0, 0,
	0, 0, 0, 0, 317, 0, 0, 0, 0, 0,
	0, 145, 0, 91, 0, 90, 98, 126, 198, 199,
	112, 154, 114, 185, 124, 103, 127, 0, 0, 166,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 0, 0, 0, 152, 0, 107,
	0, 170, 116, 0, 125, 0, 0, 0, 0, 0,
	0, 108, 0, 159, 146, 182, 0, 147, 157, 128,
	174, 153, 181, 192, 193, 172, 190, 161, 99, 142,
	89, 151, 158, 0, 0, 0, 92, 171, 180, 105,
	162, 95, 178, 168, 169, 134, 120, 121, 164, 93,
	94, 0, 156, 111, 150, 115, 110, 144, 175, 176,
	109, 201, 100, 188, 189, 97, 101, 187, 141, 186,
	173, 179, 135, 132, 96, 177, 133, 131, 123, 0,
	113, 117, 148, 130, 149, 118, 138, 137, 139, 0,
	143, 0, 0, 0, 167, 184, 202, 203, 0, 0,
	194, 195, 196, 197, 0, 0, 0, 140, 102, 119,
	163, 122, 129, 155, 200, 0, 160, 106, 183, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 145, 0, 91, 0, 90, 98, 126,
	198, 199, 112, 154, 114, 185, 124, 103, 127, 0,
	0, 166, 136, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 191, 0, 0, 0, 152,
	0, 107, 0, 170, 116, 0, 125, 0, 0, 0,
	0, 0, 0, 108, 0, 159, 146, 182, 0, 147,
	157, 128, 174, 153, 181, 192, 193, 172, 190, 161,
	99, 142, 89, 151, 158, 0, 0, 0, 92, 171,
	180, 105, 162, 95, 178, 168, 169, 134, 120, 121,
	164, 93, 94, 0, 156, 111, 150, 115, 110, 144,
	175, 176, 109, 201, 100, 188, 189, 97, 101, 187,
	141, 186, 173, 179, 135, 132, 96, 177, 133, 131,
	123, 0, 113, 117, 148, 130, 149, 118, 138, 137,
	139, 0, 143, 0, 0, 0, 167, 184, 202, 203,
	0, 0, 194, 195, 196, 197, 0, 0, 0, 140,
	102, 119, 163, 122, 129, 155, 200, 0, 160, 106,
	183, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 145, 0, 91, 0, 90,
	98, 126, 198, 199, 112, 154, 114, 185, 124, 103,
	127, 0, 0, 166, 136, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 333, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 191, 0, 0,
	0, 152, 0, 107, 0, 170, 116, 0, 125, 0,
	0, 0, 0, 0, 0, 108, 0, 159, 146, 182,
	0, 147, 157, 128, 174, 153, 181, 192, 193, 172,
	190, 161, 99, 142, 89, 151, 158, 0, 0, 0,
	92, 171, 180, 105, 162, 95, 178, 168, 169, 134,
	120, 121, 164, 93, 94, 0, 156, 111, 150, 115,
	110, 144, 175, 176, 109, 201, 100, 188, 189, 97,
	101, 187, 141, 186, 173, 179, 135, 132, 96, 177,
	133, 131, 123, 0, 113, 117, 148, 130, 149, 118,
	138, 137, 139, 0, 143, 0, 0, 0, 167, 184,
	202, 203, 0, 0, 194, 195, 196, 197, 0, 0,
	0, 140, 102, 119, 163, 122, 129, 155, 200, 0,
	160, 106, 183, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 145, 0, 91,
	0, 90, 98, 126, 198, 199, 112, 154, 114, 185,
	124, 103, 127, 0, 0, 166, 136, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 191,
	0, 0, 0, 152, 0, 107, 0, 170, 116, 0,
	125, 0, 0, 0, 0, 0, 0, 108, 0, 159,
	146, 182, 0, 147, 157, 128, 174, 153, 181, 192,
	193, 172, 190, 161, 99, 142, 89, 151, 158, 0,
	0, 0, 92, 171, 180, 105, 162, 95, 178, 168,
	169, 134, 120, 121, 164, 93, 94, 0, 156, 111,
	150, 115, 110, 144, 175, 176, 109, 201, 100, 188,
	189, 97, 101, 187, 141, 186, 173, 179, 135, 132,
	96, 177, 133, 131, 123, 0, 113, 117, 148, 130,
	149, 118, 138, 137, 139, 0, 143, 0, 0, 0,
	167, 184, 202, 203, 0, 0, 194, 195, 196, 197,
	0, 0, 0, 140, 102, 119, 163, 122, 129, 155,
	200, 0, 160, 106, 183, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 145,
	0, 91, 0, 90, 98, 126, 198, 199, 112, 154,
	114, 185, 124, 103, 127, 0, 0, 166, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 191, 0, 0, 0, 152, 0, 107, 0, 170,
	116, 0, 125, 0, 0, 0, 0, 0, 0, 108,
	0, 159, 146, 182, 0, 147, 157, 128, 174, 153,
	181, 192, 193, 172, 190, 161, 99, 142, 89, 151,
	158, 0, 0, 0, 92, 171, 180, 105, 162, 95,
	178, 168, 169, 134, 120, 121, 164, 93, 94, 0,
	156, 111, 150, 115, 110, 144, 175, 176, 109, 201,
	100, 188, 189, 97, 101, 187, 141, 186, 173, 179,
	135, 132, 96, 177, 133, 131, 123, 0, 113, 117,
	148, 130, 149, 118, 138, 137, 139, 0, 143, 0,
	0, 0, 167, 184, 202, 203, 0, 0, 194, 195,
	196, 197, 0, 0, 0, 140, 102, 119, 163, 122,
	129, 155, 200, 0, 160, 106, 183, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 98, 126, 198, 199,
	0, 154, 114, 185, 0, 103,
}
var yyPact = [...]int{

	171, -1000, -192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 943, 977, -1000, -1000, -1000, -1000, -1000, -1000, 783,
	121, 183, 214, 143, 11265, 213, 595, 11749, -1000, 75,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 703, -1000, -1000,
	-1000, -1000, -1000, 939, 945, 789, 919, 857, -1000, 6262,
	182, 9800, 11023, 5493, -1000, 567, 205, 11749, -95, 11507,
	177, 177, 11507, 177, -1000, 207, 11749, -1000, 11749, 172,
	564, 172, 172, 172, 11749, -1000, 280, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11749, 528, 899, 109, 3603, 3603,
	3603, 3603, 97, 3603, -56, 805, -1000, -1000, -1000, -1000,
	3603, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 541, 905, 7039, 7039, 943, -1000, 703, -1000, -1000,
	-1000, 878, -1000, -1000, 366, 969, -1000, 8065, 278, -1000,
	7039, 1558, 745, -1000, -1000, 745, -1000, -1000, 257, -1000,
	-1000, 7553, 7553, 7553, 7553, 7553, 7553, 7553, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 745, -1000, 6782, 745, 745, 745, 745, 745,
	745, 745, 745, 7039, 745, 745, 745, 745, 745, 745,
	745, 745, 745, 62, 745, 745, 745, 745, 10781, 743,
	946, -1000, -1000, -1000, 915, 8806, 9558, 11749, 678, -1000,
	727, 5223, -73, -1000, -1000, -1000, 330, 9303, -1000, -1000,
	-1000, 874, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	642, -1000, 2042, 11507, 3603, 195, 597, 521, 344, 518,
	802, 11749, 10526, 3603, 193, 11749, 910, 799, 11749, 516,
	505, -1000, 4953, -1000, 3603, 3603, 3603, 3603, 3603, 3603,
	3603, 3603, -1000, -1000, -1000, -1000, -1000, -1000, 3603, 3603,
	-1000, -39, -1000, 11749, -1000, -1000, -1000, -1000, 993, 269,
	122, 260, 736, -1000, 68, 939, 541, 857, 9048, 798,
	-1000, -1000, 11749, -1000, 7039, 7039, 486, 294, -1000, 10284,
	-1000, -1000, 3873, 0, 7553, 402, 409, 7553, 7553, 7553,
	7553, 7553, 7553, 7553, 7553, 7553, 7553, 7553, 7553, 7553,
	7553, 7553, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	501, -1000, 703, 814, 814, -1000, -1000, -1000, -1000, -1000,
	-1000, 7810, 5748, 541, 606, 48, 6782, 6262, 6262, 7039,
	7039, 11991, 11991, 6262, 924, 341, 48, 11991, -1000, 541,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6262, 6262,
	6262, 6262, 120, 11749, -1000, 11991, 9800, 9800, 9800, 9800,
	9800, -1000, 824, 823, -1000, 817, 816, 842, 11749, -1000,
	598, 8806, 250, 745, -1000, 10042, -1000, -1000, 120, 681,
	9800, 11749, -1000, -1000, 4683, 727, -73, 714, -1000, -68,
	-59, 6519, 285, -1000, -1000, -1000, -1000, 3063, 1220, 342,
	-134, -20, -1000, -1000, -1000, -1000, 759, -1000, -1000, -1000,
	759, 155, 759, 759, 759, 10, 10, 10, 10, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 782, 769, -1000, 759,
	759, 759, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 765, 178, 765, 760, 760, 779, -1000, 11749, -120,
	495, 3603, 908, 3603, 11749, -1000, 72, 11749, -1000, 11749,
	-1000, -1000, 11749, 3603, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 401,
	-1000, -1000, -1000, -1000, 850, 7039, 7039, 4413, 7039, -1000,
	-1000, -1000, 905, -1000, 924, 936, -1000, 869, 868, 6262,
	-1000, -1000, 0, 60, -1000, -1000, 460, -1000, -1000, -1000,
	-1000, 27, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253,
	745, -1000, 1914, -1000, -1000, -1000, -1000, 402, 7553, 7553,
	7553, 973, 1914, 1770, 1007, 1489, -1000, 340, 340, 293,
	293, 293, 293, 293, 653, 653, 541, -1000, -1000, -1000,
	541, 6262, 716, -1000, -1000, 7039, -1000, 541, 590, 590,
	63, 103, 731, -1000, 242, 730, 590, 6262, 353, -1000,
	7039, 541, -1000, 590, 541, 590, 590, 686, 745, -1000,
	725, -1000, 326, 946, 777, 797, 661, -1000, -1000, -1000,
	-1000, 820, -1000, 818, -1000, -1000, -1000, -1000, -1000, 204,
	201, 200, 11507, -1000, 963, 9800, 675, -1000, -1000, 714,
	-73, -45, -1000, -1000, -1000, 48, -1000, -1000, 493, 691,
	2793, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 766, 796,
	146, 156, 241, 211, 475, 11507, -1000, -1000, -1000, 359,
	167, 988, -1000, 142, -1000, 140, 445, -1000, -202, -1000,
	-24, -1000, -1000, 415, 10, 10, 759, 10, -1000, -1000,
	285, 873, 285, 285, 285, 438, 438, -117, -117, -1000,
	-1000, 413, 765, -1000, -1000, -1000, 407, -1000, 11749, 11507,
	3603, -1000, 4143, -1000, -1000, -1000, -1000, -1000, 912, -1000,
	355, 764, 266, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 112, 223, -1000, 3603, -1000, 385,
	11749, 11749, 844, 48, 48, 240, -1000, -1000, 11749, -1000,
	-1000, -1000, -1000, 722, -1000, -1000, -1000, -1000, 3333, 6262,
	-1000, 973, 1914, 1738, -1000, 7553, 7553, -1000, -1000, 590,
	6262, 48, -1000, -1000, -1000, 1064, 395, 1064, 7553, 7553,
	4413, 7553, 7553, -106, 711, 333, -1000, 7039, 53, -1000,
	-1000, -1000, -1000, -1000, 795, 11991, 745, -1000, 8564, 11507,
	943, 11991, 7039, 7039, -1000, -1000, 7039, 762, -1000, 7039,
	-1000, -1000, -1000, 745, 745, 745, 553, -1000, 943, 675,
	-1000, -1000, -1000, -77, -75, -1000, -1000, 3063, -1000, 3063,
	11507, 967, -1000, 463, 459, -1000, 453, -1000, -1000, 147,
	-1000, -1000, -179, -1000, -1000, -1000, -1000, 759, -1000, 745,
	-85, -1000, -1000, -1000, -1000, -1000, -1000, 586, 285, 285,
	10, 285, -1000, 346, -1000, -1000, -1000, 582, -1000, 574,
	-1000, 37, 35, -1000, 687, -1000, 563, 735, 794, -1000,
	669, -1000, 325, 935, 87, -1000, 153, -1000, 11507, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11507, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11749,
	-1000, -1000, -1000, -1000, -1000, 11507, 166, -1000, -1000, 437,
	7039, -1000, -1000, -1000, 4143, -1000, 963, 9800, -1000, -1000,
	541, -1000, 7553, 1914, 1914, -1000, -1000, 541, 759, 759,
	-1000, 759, 760, -1000, -1000, 759, 57, 759, 54, 541,
	-1000, -1000, 541, 1630, 1833, -1000, 1456, 1692, 745, -103,
	-1000, 48, 7039, -1000, 902, 596, 644, -1000, -1000, 6005,
	541, 555, 235, 553, 939, -1000, 48, 48, 48, 11507,
	48, 11507, 11507, 11507, 8322, 11507, 939, -1000, -1000, -1000,
	-1000, 2793, -1000, 546, -1000, 759, 208, 208, -1000, -1000,
	-1000, 136, -1000, 13, -1000, 541, 759, -1000, -1000, -1000,
	285, -1000, -1000, -1000, 10, 421, 10, -27, -31, 390,
	-1000, 389, 11507, 11507, 11749, 4143, 3063, 189, 942, -1000,
	-1000, 11507, -1000, -1000, -1000, 758, -1000, -1000, -1000, -1000,
	904, 11507, -1000, -1000, 48, 960, 657, -1000, 1914, -1000,
	-1000, 149, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 7553, 7553, -1000, 7553, 7553, 7553, 541, 420, 48,
	135, -1000, 745, -1000, -1000, 733, 11507, 11507, -1000, -1000,
	544, -1000, 540, 540, 540, 250, -1000, -1000, 84, 11507,
	-1000, 792, -1000, -1000, 351, 90, 787, 11507, 22, -1000,
	-1000, -1000, 285, -1000, 285, -1000, -1000, 583, 570, 537,
	756, 754, -1000, -1000, 11507, -1000, -1000, -1000, -1000, -1000,
	753, 11507, 745, 173, 949, 944, -1000, -1000, 1679, 1679,
	1679, 1679, 12, -1000, -1000, 982, -1000, 745, -1000, 703,
	232, -1000, 11507, -1000, -1000, -1000, -1000, -1000, 84, -1000,
	451, 323, 410, -143, -1000, 975, -1000, -1000, 971, 751,
	-1000, -1000, -1000, -1000, -1000, 963, 11507, 11507, 580, -1000,
	11507, 532, 111, 134, -1000, 7039, 7039, -1000, -1000, -1000,
	-1000, 541, 108, -149, 11991, 644, 541, 11507, -1000, -1000,
	-1000, 375, -1000, -1000, 11507, 208, 208, 11507, -1000, 515,
	490, 745, 11507, 487, 597, 483, -1000, 11507, 750, 48,
	630, -1000, 841, -113, -152, 601, -1000, -1000, -1000, -1000,
	-1000, -1000, 480, 963, -1000, 7039, -1000, -1000, -120, -1000,
	111, 859, 11507, -1000, 839, -1000, 154, -1000, 74, -1000,
	-1000, 106, 470, -126, 11749, -136, 104, -1000, -150, 748,
	-1000, -190, 745, -156, 11507, 745, 7296, -1000, 467, 7039,
	1679, 541, -1000, 74, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1241, 40, 516, 1240, 1238, 1237, 1235, 1233, 1231,
	1230, 1229, 1222, 1221, 1220, 1219, 1218, 1217, 1216, 1215,
	1213, 1205, 1204, 1201, 327, 1200, 1198, 1197, 66, 1195,
	74, 1194, 1181, 42, 244, 45, 30, 8, 1179, 29,
	65, 60, 1177, 50, 1176, 1175, 78, 1174, 59, 1173,
	1172, 89, 1170, 1168, 16, 3, 1166, 47, 1164, 1162,
	69, 156, 1160, 1159, 1158, 1156, 1155, 1154, 49, 10,
	13, 23, 18, 1153, 33, 12, 1151, 51, 1150, 1148,
	1147, 1146, 31, 1145, 54, 1144, 21, 53, 1142, 5,
	56, 37, 24, 7, 71, 55, 1141, 34, 76, 46,
	1137, 1133, 431, 1132, 1131, 1127, 1126, 1124, 1121, 463,
	445, 1120, 1119, 1118, 48, 0, 301, 81, 67, 1117,
	36, 1115, 1401, 72, 57, 25, 1114, 52, 509, 1113,
	1097, 1096, 28, 1095, 1093, 1090, 1088, 1087, 1086, 1085,
	1084, 1083, 426, 19, 32, 1082, 1081, 1079, 44, 43,
	22, 39, 61, 1075, 1056, 26, 1054, 9, 14, 2,
	58, 1053, 1052, 1051, 1049, 27, 17, 1048, 15, 1046,
	11, 1045, 1044, 1, 1043, 20, 1041, 6, 1035, 4,
	1034, 1033, 1027, 1025, 1024, 1022, 1021, 1452, 1017, 1013,
	1010, 1009, 1007, 80,
}
var yyR1 = [...]int{

	0, 185, 186, 186, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 189,
	189, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	181, 181, 181, 182, 182, 182, 182, 182, 182, 184,
	184, 120, 120, 179, 179, 178, 177, 177, 176, 176,
	175, 16, 162, 163, 163, 163, 163, 152, 134, 134,
	134, 134, 134, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 183, 183, 138, 138, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 137, 137, 137, 137,
	137, 139, 139, 139, 139, 139, 135, 135, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 141, 141, 141,
	141, 141, 141, 141, 141, 151, 151, 142, 142, 149,
	149, 150, 150, 150, 148, 148, 148, 145, 145, 146,
	146, 147, 147, 147, 143, 143, 143, 144, 144, 144,
	154, 154, 171, 171, 170, 170, 170, 170, 161, 161,
	167, 167, 167, 167, 167, 167, 167, 160, 160, 169,
	169, 168, 155, 155, 155, 155, 155, 156, 157, 157,
	157, 157, 158, 158, 159, 159, 164, 164, 164, 165,
	165, 165, 166, 166, 166, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 190, 190,
	191, 191, 191, 191, 191, 191, 191, 174, 172, 172,
	173, 173, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 107, 107, 104, 104, 105, 105,
	106, 106, 106, 108, 108, 108, 131, 131, 131, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	192, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 119, 119, 119, 118, 118, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 126, 126, 125, 125, 125, 124, 124, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 37, 103, 103, 57,
	57, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 67, 67, 67, 67, 67, 67, 58, 58, 58,
	58, 58, 58, 58, 33, 33, 68, 68, 68, 74,
	69, 69, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 193,
	193, 66, 66, 66, 66, 31, 31, 31, 31, 31,
	129, 129, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 133, 133, 133, 133,
	133, 133, 133, 78, 78, 32, 32, 76, 76, 77,
	79, 79, 75, 75, 75, 60, 60, 60, 60, 60,
	60, 60, 60, 62, 62, 62, 80, 80, 81, 81,
	82, 82, 83, 83, 84, 85, 85, 85, 86, 86,
	86, 86, 87, 87, 87, 59, 59, 59, 59, 59,
	59, 88, 88, 88, 88, 92, 92, 70, 70, 72,
	72, 71, 73, 93, 93, 97, 94, 94, 98, 98,
	98, 96, 96, 96, 121, 121, 121, 101, 101, 109,
	109, 110, 110, 102, 102, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 112, 112, 112, 113, 113,
	116, 116, 117, 117, 122, 122, 123, 123, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 187, 188,
	127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 14,
	0, 2, 2, 0, 2, 2, 2, 2, 2, 0,
	5, 0, 1, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 1, 3, 3, 3, 2, 3, 1,
	1, 1, 1, 2, 2, 3, 4, 3, 3, 3,
	3, 4, 3, 5, 5, 2, 3, 2, 3, 2,
	3, 0, 3, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 2, 2, 2,
	2, 1, 3, 3, 2, 1, 1, 1, 4, 4,
	4, 5, 2, 2, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 6, 6, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 3, 0,
	5, 0, 3, 5, 0, 3, 3, 0, 1, 0,
	1, 0, 2, 1, 0, 3, 3, 0, 1, 2,
	5, 4, 1, 2, 2, 3, 2, 3, 0, 1,
	2, 3, 3, 2, 3, 2, 2, 1, 1, 1,
	3, 2, 1, 4, 4, 7, 7, 13, 1, 1,
	2, 2, 0, 1, 1, 3, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 11, 13, 7, 7,
	7, 12, 7, 7, 7, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 3, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 0,
	2, 4, 4, 4, 4, 0, 3, 4, 7, 3,
	1, 1, 2, 3, 3, 1, 2, 2, 1, 1,
	2, 1, 2, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 2, 1, 3, 5, 4,
	6, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -185, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -187, 8, 256,
	52, -186, 275, -82, 15, -26, 5, -24, -192, -24,
	-24, -24, -24, -24, -162, 52, -120, 120, 69, 150,
	248, 117, 132, 118, 133, -102, 120, 122, 118, 118,
	119, 120, 248, 117, 118, -51, -122, 55, -115, 157,
	264, 20, 163, 176, 177, 168, 201, 192, 265, 155,
	189, 193, 235, 274, 64, 166, 244, 126, 138, 187,
	183, 180, 27, 207, 271, 182, 129, 208, 212, 236,
	173, 174, 238, 205, 31, 131, 266, 33, 146, 239,
	210, 204, 200, 203, 172, 199, 37, 214, 213, 215,
	234, 195, 156, 217, 184, 18, 141, 144, 209, 211,
	181, 158, 124, 148, 270, 240, 179, 145, 159, 140,
	243, 154, 167, 237, 175, 246, 36, 221, 170, 171,
	128, 164, 152, 197, 147, 185, 186, 202, 169, 198,
	165, 149, 142, 245, 222, 272, 196, 194, 190, 191,
	153, 120, 150, 151, 227, 228, 229, 230, 267, 268,
	241, 188, 223, 224, 118, 105, 193, 111, 225, 119,
	31, 148, -131, 118, -104, 151, 227, 228, 229, 230,
	55, 237, 236, 231, -122, 165, -127, -127, -127, -127,
	-127, -2, -86, 17, 16, -5, -3, -187, 6, 20,
	21, -30, 38, 39, -25, -36, 96, -37, -122, -56,
	71, -61, 28, 55, -115, 23, -60, -57, -75, -73,
	-74, 105, 106, 94, 95, 102, 72, 107, -65, -63,
	-64, -66, 57, 56, 65, 58, 59, 60, 61, 66,
	67, 68, -116, -71, -187, 42, 43, 257, 258, 259,
	260, 263, 261, 74, 32, 247, 255, 254, 253, 251,
	252, 249, 250, 273, 123, 248, 100, 256, -102, -39,
	-40, -41, -42, -53, -74, -187, -51, 11, -46, -51,
	-94, -130, 165, -98, 237, 236, -117, -96, -116, -114,
	235, 193, 234, 55, -115, 116, 70, 22, 24, 219,
	73, 105, 16, 74, 104, 257, 111, 46, 249, 250,
	247, 259, 260, 248, 225, 28, 10, 25, 136, 21,
	98, 113, 77, 78, 139, 23, 137, 68, 19, 49,
	130, 11, 13, 14, 123, 122, 89, 119, 44, 8,
	107, 26, 86, 40, 134, 42, 87, 17, 251, 252,
	30, 263, 143, 100, 47, 34, 71, 66, 50, 242,
	69, 15, 45, 132, 88, 114, 256, 43, 117, 6,
	262, 29, 135, 41, 118, 226, 76, 121, 67, 5,
	133, 9, 48, 51, 253, 254, 255, 32, 75, 12,
	-163, -152, 55, 119, -51, 256, -116, -110, 123, -110,
	-116, -110, 118, -51, -51, -109, 123, 55, -109, -109,
	-109, -51, 108, -51, 55, 29, 248, 55, 148, 118,
	149, 120, -128, -187, -117, -128, -128, -128, 152, 153,
	-128, -105, 232, 50, -128, -188, 54, -87, 19, 30,
	-37, -122, -83, -84, -37, -82, -2, -24, 34, -28,
	21, 63, 11, -119, 70, 69, 86, 273, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 79, 80, 81, 82, 83, 84, 85, -103,
	-187, -74, -187, 109, 110, -61, -61, -61, -61, -61,
	-61, -61, -187, -2, -69, -37, -187, -187, -187, -187,
	-187, -187, -187, -187, -187, -78, -37, -187, -193, -187,
	-193, -193, -193, -193, -193, -193, -193, 174, -187, -187,
	-187, -187, -52, 26, -51, 29, 53, -47, -49, -48,
	-50, 40, 44, 46, 41, 42, 43, 47, -126, 22,
	-39, -187, -125, 144, -124, 22, -122, 57, -51, -46,
	-189, 53, 11, 51, 53, -94, 165, -95, -99, 238,
	240, 79, -121, -116, 57, 28, 29, 54, 53, -153,
	-134, -138, -135, -140, -139, -141, -136, -137, 192, 265,
	189, 193, 190, 105, 194, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 196, 207, 29, 138, 185,
	186, 187, 188, 208, 209, 210, 211, 212, 213, 214,
	215, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 179, 180, 182, 183, 184, -116, -128, 120, -179,
	51, 55, 71, 55, 50, -51, -51, 242, -128, 121,
	-51, 23, 50, -51, 55, 55, -123, -122, -114, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -107,
	226, 233, -51, 9, 89, 53, 18, 108, 53, -85,
	24, 25, -86, -188, -30, -62, -116, 58, 61, -29,
	41, -51, -37, -37, -67, 66, 71, 67, 68, -133,
	105, 193, 138, 187, 174, 192, 197, -118, 96, -123,
	-117, -114, -61, -68, -71, -74, 62, 89, 87, 88,
	73, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, 55, -60, -60, -116,
	-35, 21, -34, -36, -188, 53, -188, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	75, -75, -188, -34, -35, -34, -34, -90, 144, -51,
	-93, -97, -75, -40, -41, -41, -40, -41, 40, 40,
	40, 45, 40, 45, 40, -48, -122, -188, -54, 48,
	122, 49, -187, -124, -90, 51, -39, -51, -98, -95,
	53, 239, 241, 242, 50, -37, -144, 105, 104, -164,
	-165, -166, -117, 57, 58, -152, -154, -155, -167, -156,
	124, 128, 129, 133, -160, 126, 119, 134, 66, 71,
	28, 50, 219, 124, 134, 133, 64, -147, 276, 216,
	-145, 222, -142, 52, -142, -142, 191, -142, -142, -142,
	-143, 193, -143, -143, -143, 52, 52, -142, -142, -142,
	-149, 52, 181, -149, -149, -150, 52, -150, 50, 51,
	-51, -177, 267, -178, 55, -128, 23, -128, -51, -111,
	116, 113, 114, -174, 112, 219, 193, 64, 28, 15,
	257, 144, 272, 55, 145, -51, -51, -51, -128, -106,
	11, 89, 36, -37, -37, -123, -84, -87, -101, 19,
	11, 32, 32, -34, 66, 67, 68, 191, 108, -187,
	-68, -61, -61, -61, -33, 139, 70, -188, -188, -34,
	53, -37, -188, -188, -188, 53, 51, 22, 53, 11,
	108, 53, 11, -188, -34, -79, -77, 77, -37, -188,
	-188, -188, -188, -188, -59, 29, 32, -2, -187, -187,
	-55, 53, 12, 79, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 119, 119, 119, -91, -116, -55, -39,
	-55, -99, -100, 243, 240, 246, 55, 53, -166, 79,
	52, 50, 134, -160, -160, 55, -160, 55, 55, -158,
	-116, 66, 57, 58, 59, -57, 66, 247, 65, 217,
	9, 134, 134, 57, 277, -146, 223, 58, -143, -143,
	-142, -143, -144, 29, -144, -144, -144, -151, 57, -151,
	-148, 267, 268, -148, 58, -149, 58, -51, -116, -128,
	-176, -175, -117, -181, 22, -127, -120, -191, 150, 125,
	130, 129, 55, 124, 128, 144, -180, 150, 125, 126,
	130, 129, 55, 119, 134, 124, 128, 144, 133, -112,
	-113, 121, 22, 119, 134, 144, 116, -128, -108, 87,
	12, -122, -122, 37, 108, -51, -38, 11, 96, -117,
	-35, -33, 70, -61, -61, -188, -36, -132, 105, 189,
	138, 187, 183, 205, 206, 195, 221, 185, 222, -129,
	55, 57, -132, -61, -61, -117, -61, -61, 264, -82,
	78, -37, 76, -92, 50, -93, -70, -72, -71, -187,
	-2, -88, -116, -91, -82, -97, -37, -37, -37, 52,
	-37, -187, -187, -187, -188, 53, -82, -55, 240, 244,
	245, -165, -166, -169, -168, -116, 10, 9, 55, 55,
	55, 130, -183, 273, -142, -187, 247, 54, -144, -144,
	-143, -144, 55, 105, 54, 53, 54, 185, 185, 53,
	54, 53, 52, 51, 50, 53, 79, -182, 19, 158,
	159, -190, 119, 134, -127, -116, -127, -116, -51, -127,
	-116, 126, -155, 57, -37, -55, -39, -188, -61, -188,
	-142, -142, -142, -150, -142, 174, -142, 174, -188, -188,
	-188, 53, 19, -188, 53, 19, -187, -32, 262, -37,
	27, -92, 53, -188, -188, -188, 53, 108, -188, -86,
	-89, -116, -89, -89, -89, -125, -116, -86, 54, 53,
	-142, -157, 154, 155, 29, 156, -157, 134, 193, -188,
	-142, -144, -143, 57, -143, 224, 224, 58, 58, -89,
	-116, -51, -175, -166, 121, 20, 6, 8, 9, 10,
	-116, 52, 26, -116, -80, 13, -143, 55, -61, -61,
	-61, -61, -61, -188, 57, 134, -72, 32, -2, -187,
	-116, -116, 53, 54, -188, -188, -188, -54, -171, -170,
	51, 131, 64, 267, -168, 50, 66, 157, 50, -158,
	191, -144, -144, 54, 54, 54, 52, 52, -159, -116,
	52, -89, -187, 124, -81, 14, 16, -188, -188, -188,
	-188, -31, 89, 267, 9, -70, -2, 108, -116, -170,
	55, -161, 79, 57, 269, 9, 10, 52, -55, -89,
	-89, 51, 53, -89, 54, -172, -173, 144, 134, -37,
	-69, -188, 265, 47, 270, -93, -188, -116, 58, -116,
	-157, -157, -159, 54, 54, -187, -116, 54, -179, -188,
	53, -116, 52, 37, 266, 271, 54, -55, -37, -177,
	-173, 32, -89, 37, 127, -188, 146, 54, 267, -51,
	-184, 267, 147, 270, 52, 274, -187, 271, -159, -187,
	-61, 143, 54, -37, -188, -188, -188,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 580, 0, 340, 340, 340, 340, 340, 340, 0,
	81, 633, 0, 0, 0, 0, -2, 330, 331, 0,
	333, 334, 870, 870, 870, 870, 870, 0, 33, 34,
	868, 1, 3, 588, 0, 0, 344, 347, 342, 0,
	633, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	631, 631, 0, 631, 82, 0, 0, 634, 0, 629,
	0, 629, 629, 629, 0, 289, 411, 654, 655, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 790, 791, 792, 793,
	794, 795, 796, 797, 798, 799, 800, 801, 802, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 0, 0, 0, 0, 871, 871,
	871, 871, 0, 871, 318, 307, 309, 310, 311, 312,
	871, 327, 328, 317, 329, 332, 335, 336, 337, 338,
	339, 27, 592, 0, 0, 580, 29, 0, 340, 345,
	346, 350, 348, 349, 341, 0, 358, 362, 0, 419,
	0, 424, 427, -2, -2, 0, 462, 463, 464, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 488, 489,
	490, 491, 565, 566, 567, 568, 569, 570, 571, 572,
	429, 430, 562, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 0, 519, 519, 519, 519, 519,
	519, 519, 519, 0, 0, 0, 0, 0, 0, 0,
	369, 371, 372, 373, 392, 0, 394, 0, 0, 41,
	45, 0, 844, 616, -2, -2, 0, 0, 652, 653,
	-2, 765, -2, 650, 651, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	0, 93, 0, 0, 871, 0, 83, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 0, 0, 0, 0,
	0, 288, 0, 290, 871, 871, 871, 871, 871, 871,
	871, 871, 299, 872, 873, 300, 301, 302, 871, 871,
	304, 0, 319, 0, 313, 28, 869, 22, 0, 0,
	589, 0, 581, 582, 585, 588, 27, 347, 0, 352,
	351, 343, 0, 359, 0, 0, 0, 0, 363, 0,
	365, 366, 0, 422, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 447, 448, 449, 450, 451, 452, 453, 425,
	0, 440, 0, 0, 0, 481, 482, 483, 484, 485,
	486, 0, 354, 27, 0, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 350, 0, 554, 0, 510, 0,
	511, 512, 513, 514, 515, 516, 517, 518, 0, 354,
	0, 0, 43, 0, 410, 0, 0, 0, 0, 0,
	0, 399, 0, 0, 402, 0, 0, 0, 0, 393,
	0, 0, 413, 811, 395, 0, 397, 398, -2, 0,
	0, 0, 39, 40, 0, 46, 844, 48, 49, 0,
	0, 0, 197, 624, 625, 626, 622, 236, 0, 97,
	191, 187, 99, 100, 101, 102, 177, 124, 146, 147,
	177, 177, 177, 177, 177, 194, 194, 194, 194, 158,
	159, 160, 161, 162, 163, 164, 0, 0, 141, 177,
	177, 177, 145, 167, 168, 169, 170, 171, 172, 173,
	174, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 179, 179, 179, 181, 181, 0, 64, 0, 86,
	0, 871, 0, 871, 0, 91, 0, 0, 255, 0,
	283, 630, 0, 871, 286, 287, 412, 656, 657, 291,
	292, 293, 294, 295, 296, 297, 298, 303, 306, 320,
	314, 315, 308, 593, 0, 0, 0, 0, 0, 584,
	586, 587, 592, 30, 350, 0, 573, 0, 0, 0,
	353, 25, 420, 421, 423, 441, 0, 443, 445, 426,
	546, 0, 548, 549, 550, 551, 552, 364, 360, 0,
	563, -2, 431, 432, 456, 457, 458, 0, 0, 0,
	0, 454, 436, 0, 467, 468, 469, 470, 471, 472,
	473, 474, 475, 476, 477, 478, 0, 479, 480, 487,
	0, 0, 355, 356, 459, 0, 611, 27, 0, 0,
	0, 0, 0, 562, 0, 0, 0, 0, 560, 557,
	0, 0, 520, 0, 0, 0, 0, 0, 0, 409,
	417, 613, 0, 370, 388, 390, 0, 385, 400, 401,
	403, 0, 405, 0, 407, 408, 374, 375, 376, 0,
	0, 0, 0, 396, 417, 0, 417, 42, 617, 47,
	0, 0, 52, 53, 618, 619, 620, 198, 0, 92,
	237, 239, 242, 243, 244, 94, 95, 96, 0, 222,
	0, 0, 0, 0, 0, 232, 217, 218, 104, 0,
	0, 0, 115, 0, 117, 119, 0, 103, 0, 193,
	189, 188, 123, 0, 194, 194, 177, 194, 152, 153,
	197, 0, 197, 197, 197, 0, 0, 184, 184, 144,
	135, 0, 179, 137, 138, 139, 0, 140, 0, 0,
	871, 66, 0, 84, 85, 67, 632, 68, 70, 870,
	81, 0, 645, 256, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 0, 0, 282, 871, 285, 323,
	0, 0, 0, 590, 591, 0, 583, 23, 0, 627,
	628, 574, 575, 367, 442, 444, 446, 547, 0, 354,
	433, 454, 437, 0, 434, 0, 0, 428, 492, 0,
	0, 461, -2, 495, 496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 580, 0, 558, 0, 0, 509,
	521, 522, 523, 524, 605, 0, 0, -2, 0, 0,
	580, 0, 0, 0, 382, 389, 0, 0, 383, 0,
	384, 404, 406, 0, 0, 0, 0, 380, 580, 417,
	38, 50, 51, 0, 0, 57, 199, 0, 240, 0,
	0, 0, 210, 0, 0, 213, 0, 215, 216, 0,
	233, 105, 121, 107, 108, 109, 110, 177, 112, 0,
	0, 116, 118, 120, 192, 98, 190, 0, 197, 197,
	194, 197, 154, 0, 155, 156, 157, 0, 175, 0,
	142, 0, 0, 143, 0, 136, 0, 0, 0, 65,
	87, 88, 0, 73, 0, 245, 0, 870, 0, 270,
	271, 272, 273, 274, 275, 276, 870, 0, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 0,
	870, 646, 647, 648, 649, 0, 0, 284, 305, 0,
	0, 321, 322, 594, 0, 24, 417, 0, 361, 564,
	0, 435, 0, 455, 438, 493, 357, 0, 177, 177,
	535, 177, 181, 538, 539, 177, 541, 177, 544, 0,
	530, 531, 0, 0, 0, 563, 0, 0, 0, 555,
	508, 561, 0, 31, 0, 605, 595, 607, 609, 0,
	27, 0, 601, 0, 588, 614, 418, 615, 386, 0,
	391, 0, 0, 0, 394, 0, 588, 37, 54, 55,
	56, 238, 241, 0, 219, 177, 0, 0, 211, 212,
	214, 0, 106, 0, 111, 0, 177, 178, 148, 149,
	197, 150, 195, 196, 194, 0, 194, 0, 0, 0,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	72, 0, 268, 269, 249, 0, 250, 252, 253, 254,
	0, 232, 248, 324, 325, 576, 368, 494, 439, 497,
	532, 194, 536, 537, 540, 542, 543, 545, 499, 498,
	500, 0, 0, 503, 0, 0, 0, 0, 0, 559,
	0, 32, 0, 610, -2, 0, 0, 0, 44, 35,
	0, 378, 0, 0, 0, 413, 381, 36, 201, 0,
	221, 223, 228, 229, 0, 0, 224, 232, 0, 113,
	114, 151, 197, 176, 197, 185, 186, 0, 0, 0,
	0, 0, 89, 90, 0, 74, 75, 76, 77, 78,
	0, 0, 0, 233, 578, 0, 533, 534, 0, 0,
	0, 0, 525, 507, 556, 0, 608, 0, -2, 0,
	603, 602, 0, 387, 414, 415, 416, 377, 200, 202,
	0, 208, 0, 0, 220, 0, 230, 231, 0, 0,
	122, 165, 166, 180, 183, 417, 0, 0, 0, 234,
	0, 0, 0, 0, 26, 0, 0, 501, 502, 504,
	505, 0, 0, 0, 0, 598, 27, 0, 379, 203,
	204, 0, 209, 206, 0, 0, 0, 0, 61, 0,
	0, 0, 0, 0, 83, 0, 278, 0, 0, 579,
	577, 506, 0, 0, 0, 606, -2, 604, 205, 207,
	225, 226, 0, 417, 62, 0, 235, 246, 86, 277,
	0, 0, 0, 526, 0, 529, 0, 63, 0, 251,
	279, 0, 0, 527, 0, 79, 0, 247, 0, 0,
	69, 0, 0, 0, 0, 0, 0, 528, 0, 0,
	0, 0, 227, 0, 280, 281, 80,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 276, 3, 277, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:316
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:321
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:322
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:326
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:349
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:357
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:367
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:374
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:380
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:384
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:390
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:394
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:401
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:413
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:425
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:429
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:435
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:441
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:445
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:449
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:455
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:459
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:463
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:468
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:472
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:478
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:482
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:486
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:490
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:496
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:500
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:506
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:520
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:524
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:528
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:532
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:538
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:542
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:548
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:553
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:584
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:599
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:603
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:607
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:615
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:619
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.y:623
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[12].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[14].expr),
			}}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:635
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:652
		{
			yyVAL.expr = nil
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:656
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:661
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:665
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:670
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:674
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:680
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:685
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:696
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:701
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:707
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:713
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:720
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:727
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:732
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:736
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:740
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:746
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:751
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:762
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:773
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:783
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:788
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:793
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:798
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:803
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:808
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:813
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:818
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:823
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:828
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:833
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:838
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:843
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:848
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:853
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:859
		{
			yyVAL.bytes = nil
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:863
		{
			yyVAL.bytes = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:874
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:880
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:896
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:900
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:904
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:908
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:912
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:916
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:982
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:986
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 151:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1008
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1012
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1016
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1020
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1024
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1028
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1032
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1036
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1040
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1048
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1052
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1056
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1060
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1065
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1105
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1110
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1115
		{
			yyVAL.optVal = nil
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1124
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1128
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1136
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1140
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1146
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1154
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1158
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1162
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1167
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1171
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1176
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1180
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1185
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1193
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1198
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 197:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1211
		{
			yyVAL.str = ""
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1215
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1219
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1225
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1229
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1235
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1239
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1245
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1249
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1254
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1258
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1264
		{
			yyVAL.str = ""
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1268
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1274
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1278
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1282
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1286
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1290
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1294
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1298
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1304
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1308
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1318
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1324
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1331
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1337
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1343
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 226:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1349
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 227:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1357
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1369
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1373
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1377
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1381
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1386
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1393
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1397
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1402
		{
			yyVAL.str = ""
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1406
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1410
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1418
		{
			yyVAL.str = yyDollar[1].str
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1422
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1426
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1432
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1436
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1440
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1446
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 246:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1450
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 247:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1464
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 248:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1478
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 249:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1487
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1491
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 251:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1495
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 252:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1508
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 253:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1518
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1523
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1528
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1532
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1564
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1570
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1574
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 280:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1580
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 281:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1584
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1590
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1596
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1604
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 285:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1609
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1617
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1621
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1627
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1631
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1636
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1655
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1659
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1663
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1667
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1671
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1675
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1679
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1683
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1687
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1691
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1695
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1699
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1709
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1713
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1717
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1721
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1725
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1729
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1733
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1749
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1753
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1759
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1763
		{
			yyVAL.str = "extended "
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1769
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1773
		{
			yyVAL.str = "full "
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1779
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1783
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1787
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1793
		{
			yyVAL.showFilter = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1797
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1801
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1807
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1811
		{
			yyVAL.str = SessionStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1815
		{
			yyVAL.str = GlobalStr
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1821
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1825
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1831
		{
			yyVAL.statement = &Begin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1835
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1841
		{
			yyVAL.statement = &Commit{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1847
		{
			yyVAL.statement = &Rollback{}
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1853
		{
			yyVAL.statement = &OtherRead{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1857
		{
			yyVAL.statement = &OtherRead{}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1861
		{
			yyVAL.statement = &OtherRead{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1865
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1869
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1874
		{
			setAllowComments(yylex, true)
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1878
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1884
		{
			yyVAL.bytes2 = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1888
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1894
		{
			yyVAL.str = UnionStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1898
		{
			yyVAL.str = UnionAllStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1902
		{
			yyVAL.str = UnionDistinctStr
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1907
		{
			yyVAL.str = ""
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1911
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1915
		{
			yyVAL.str = SQLCacheStr
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1920
		{
			yyVAL.str = ""
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1924
		{
			yyVAL.str = DistinctStr
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1929
		{
			yyVAL.str = ""
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1933
		{
			yyVAL.str = StraightJoinHint
		}
	case 354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1938
		{
			yyVAL.selectExprs = nil
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1942
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1948
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1952
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1958
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1962
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1966
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1970
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1975
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1979
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1983
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1990
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1995
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1999
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2005
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2009
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2019
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2023
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2027
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2033
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2037
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2043
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2047
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2053
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2057
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2070
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2074
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2078
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2082
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2088
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2090
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2094
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2096
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 390:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2100
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2102
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2105
		{
			yyVAL.empty = struct{}{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2107
		{
			yyVAL.empty = struct{}{}
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2110
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2114
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2118
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2125
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2131
		{
			yyVAL.str = JoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2135
		{
			yyVAL.str = JoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2139
		{
			yyVAL.str = JoinStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2145
		{
			yyVAL.str = StraightJoinStr
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2151
		{
			yyVAL.str = LeftJoinStr
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2155
		{
			yyVAL.str = LeftJoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2159
		{
			yyVAL.str = RightJoinStr
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2163
		{
			yyVAL.str = RightJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2169
		{
			yyVAL.str = NaturalJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2173
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2183
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2187
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2193
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2197
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2202
		{
			yyVAL.indexHints = nil
		}
	case 414:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2206
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 415:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2210
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2214
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 417:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2219
		{
			yyVAL.expr = nil
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2223
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2229
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2233
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2237
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2241
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2245
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2249
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2253
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2257
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2263
		{
			yyVAL.str = ""
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2267
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2273
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2277
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2283
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2287
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 433:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2291
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2295
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2299
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2303
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2307
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2311
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2315
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2319
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2325
		{
			yyVAL.str = IsNullStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2329
		{
			yyVAL.str = IsNotNullStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2333
		{
			yyVAL.str = IsTrueStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2337
		{
			yyVAL.str = IsNotTrueStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2341
		{
			yyVAL.str = IsFalseStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2345
		{
			yyVAL.str = IsNotFalseStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2351
		{
			yyVAL.str = EqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2355
		{
			yyVAL.str = LessThanStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2359
		{
			yyVAL.str = GreaterThanStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2363
		{
			yyVAL.str = LessEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2367
		{
			yyVAL.str = GreaterEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2371
		{
			yyVAL.str = NotEqualStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2375
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2380
		{
			yyVAL.expr = nil
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2384
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2390
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2394
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2398
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2404
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2410
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2414
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2420
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2424
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2428
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2432
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2436
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2440
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2444
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2448
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2452
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2456
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2460
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2464
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2468
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2472
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2476
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2480
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2484
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2488
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2492
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2496
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2500
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2504
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2512
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2526
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2530
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2534
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2552
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2556
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2560
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2570
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2574
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2578
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2582
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2586
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2590
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2594
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2598
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2602
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2606
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2610
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 506:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2614
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2618
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2622
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2626
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2636
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2640
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2648
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2658
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2663
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2668
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2672
		{
			yyVAL.expr = &ConvertExpr{Type: &ConvertType{Type: string(yyDollar[2].bytes)}}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2686
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2690
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2694
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2698
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2704
		{
			yyVAL.str = ""
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2708
		{
			yyVAL.str = BooleanModeStr
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2712
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 528:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2716
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2720
		{
			yyVAL.str = QueryExpansionStr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2726
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2730
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2740
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2744
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2748
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2752
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 537:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2756
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2770
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2774
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2778
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2782
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2786
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2790
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2800
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2808
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2812
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2816
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2820
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2825
		{
			yyVAL.expr = nil
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2829
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2834
		{
			yyVAL.str = string("")
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2838
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2844
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2848
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2854
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2859
		{
			yyVAL.expr = nil
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2863
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2869
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2873
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2877
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2883
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2887
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2891
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2895
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2899
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2903
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2907
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2911
		{
			yyVAL.expr = &NullVal{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2917
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2926
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2930
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2935
		{
			yyVAL.exprs = nil
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2939
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2944
		{
			yyVAL.expr = nil
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2948
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2953
		{
			yyVAL.orderBy = nil
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2957
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2963
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2967
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2973
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2978
		{
			yyVAL.str = AscScr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2982
		{
			yyVAL.str = AscScr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2986
		{
			yyVAL.str = DescScr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2991
		{
			yyVAL.limit = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2995
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2999
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3003
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3008
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3012
		{
			yyVAL.str = ForUpdateStr
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3016
		{
			yyVAL.str = ShareModeStr
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3029
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3033
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3037
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3042
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3046
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3050
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3057
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3061
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3065
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3069
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3074
		{
			yyVAL.updateExprs = nil
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3078
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3084
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3088
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3094
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3098
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3104
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3120
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3124
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3130
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3136
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3140
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3146
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3150
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3154
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3161
		{
			yyVAL.bytes = []byte("charset")
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3168
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3172
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.expr = &Default{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3185
		{
			yyVAL.byt = 0
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3187
		{
			yyVAL.byt = 1
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3190
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3192
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3195
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3197
		{
			yyVAL.str = IgnoreStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3201
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3203
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3207
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3209
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3211
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3213
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3217
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3219
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3236
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3240
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3247
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3253
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3257
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3264
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3500
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3509
		{
			decNesting(yylex)
		}
	case 870:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3514
		{
			forceEOF(yylex)
		}
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3519
		{
			forceEOF(yylex)
		}
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3523
		{
			forceEOF(yylex)
		}
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3527
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
