// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const SPATIAL = 57452
const FULLTEXT = 57453
const FOREIGN = 57454
const KEY_BLOCK_SIZE = 57455
const UNIQUE = 57456
const KEY = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const VARYING = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 278,
	151, 278,
	-2, 268,
	-1, 236,
	108, 597,
	-2, 593,
	-1, 237,
	108, 598,
	-2, 594,
	-1, 306,
	79, 756,
	-2, 58,
	-1, 307,
	79, 717,
	-2, 59,
	-1, 312,
	79, 701,
	-2, 564,
	-1, 314,
	79, 738,
	-2, 566,
	-1, 575,
	51, 41,
	53, 41,
	-2, 43,
	-1, 713,
	108, 600,
	-2, 596,
	-1, 925,
	5, 28,
	-2, 410,
	-1, 950,
	5, 27,
	-2, 539,
	-1, 1193,
	5, 28,
	-2, 540,
	-1, 1238,
	5, 27,
	-2, 542,
	-1, 1298,
	5, 28,
	-2, 543,
}

const yyPrivate = 57344

const yyLast = 10566

var yyAct = [...]int{

	237, 867, 1289, 522, 453, 775, 651, 241, 1249, 266,
	1101, 1129, 793, 1102, 815, 215, 847, 861, 569, 1075,
	567, 1098, 814, 776, 311, 953, 917, 521, 3, 969,
	738, 748, 1021, 66, 745, 87, 1012, 585, 87, 764,
	958, 715, 53, 455, 747, 461, 825, 857, 410, 209,
	267, 47, 467, 584, 811, 556, 571, 305, 475, 224,
	899, 302, 87, 87, 316, 772, 300, 52, 87, 292,
	316, 239, 1320, 884, 1310, 214, 87, 1318, 87, 1296,
	1316, 1199, 291, 868, 87, 1309, 883, 1295, 1093, 1187,
	414, 228, 293, 210, 211, 212, 213, 68, 47, 1133,
	442, 977, 536, 586, 976, 587, 220, 978, 990, 991,
	992, 1123, 297, 888, 806, 435, 995, 993, 450, 243,
	1124, 1125, 882, 1272, 488, 487, 497, 498, 490, 491,
	492, 493, 494, 495, 496, 489, 807, 808, 499, 82,
	78, 79, 80, 680, 1001, 71, 72, 838, 67, 848,
	681, 1176, 1227, 840, 1174, 208, 1317, 57, 1315, 73,
	446, 447, 1290, 1054, 308, 773, 1051, 1235, 998, 987,
	879, 876, 877, 997, 875, 984, 69, 440, 437, 424,
	439, 296, 59, 60, 61, 62, 63, 417, 87, 1153,
	826, 76, 316, 316, 316, 316, 75, 316, 76, 1076,
	886, 889, 1154, 827, 316, 659, 436, 438, 488, 487,
	497, 498, 490, 491, 492, 493, 494, 495, 496, 489,
	794, 796, 499, 650, 968, 967, 1250, 966, 412, 420,
	1078, 316, 1277, 826, 187, 77, 881, 411, 1196, 1252,
	511, 512, 441, 441, 441, 441, 827, 441, 464, 1062,
	81, 933, 1139, 911, 441, 918, 70, 687, 880, 479,
	430, 463, 1080, 1052, 1084, 1050, 1079, 489, 1077, 812,
	499, 47, 499, 684, 1082, 848, 1053, 843, 994, 474,
	1041, 1273, 894, 1081, 1058, 1294, 508, 472, 434, 510,
	1282, 87, 1151, 956, 795, 885, 1083, 1085, 87, 87,
	87, 826, 1140, 474, 316, 1251, 822, 588, 887, 823,
	316, 1095, 765, 824, 827, 765, 520, 940, 524, 525,
	526, 527, 528, 529, 530, 531, 532, 722, 535, 537,
	537, 537, 537, 537, 537, 537, 537, 545, 546, 547,
	548, 720, 721, 719, 1042, 654, 473, 472, 568, 1044,
	1037, 1038, 1045, 1040, 1039, 454, 1047, 1043, 509, 1057,
	895, 473, 472, 474, 989, 582, 576, 1046, 1097, 469,
	443, 444, 445, 1036, 448, 908, 909, 910, 474, 465,
	839, 452, 538, 539, 540, 541, 542, 543, 544, 1031,
	74, 488, 487, 497, 498, 490, 491, 492, 493, 494,
	495, 496, 489, 1300, 308, 499, 930, 492, 493, 494,
	495, 496, 489, 316, 316, 499, 50, 296, 423, 1215,
	87, 87, 316, 416, 87, 1214, 718, 87, 739, 1016,
	740, 87, 1015, 316, 316, 316, 316, 316, 316, 316,
	316, 265, 1280, 1002, 705, 707, 708, 316, 316, 706,
	1283, 290, 87, 473, 472, 668, 1234, 1212, 1032, 1027,
	1028, 1033, 1030, 1029, 441, 73, 1162, 316, 1013, 693,
	474, 87, 441, 999, 1132, 21, 1034, 316, 1131, 692,
	1306, 454, 1026, 441, 441, 441, 441, 441, 441, 441,
	441, 666, 716, 1242, 1303, 418, 419, 441, 441, 426,
	427, 428, 1242, 1302, 713, 310, 1242, 1301, 1242, 1287,
	454, 415, 490, 491, 492, 493, 494, 495, 496, 489,
	316, 988, 499, 1242, 1258, 694, 749, 751, 929, 979,
	928, 219, 1242, 454, 1257, 709, 870, 757, 760, 741,
	711, 665, 767, 766, 1242, 1243, 473, 472, 1208, 1207,
	1256, 87, 752, 664, 87, 87, 87, 87, 87, 655,
	777, 47, 653, 474, 1120, 454, 87, 1195, 454, 87,
	753, 754, 792, 87, 432, 524, 761, 425, 87, 87,
	712, 769, 316, 742, 743, 762, 1146, 1145, 1142, 1143,
	768, 649, 770, 771, 411, 316, 752, 1134, 801, 658,
	1142, 1141, 717, 954, 297, 297, 297, 297, 297, 750,
	669, 670, 671, 672, 673, 674, 675, 676, 1191, 568,
	790, 797, 552, 778, 677, 678, 781, 955, 297, 798,
	849, 850, 851, 310, 310, 310, 310, 804, 310, 803,
	54, 799, 923, 454, 819, 310, 553, 779, 780, 579,
	782, 87, 553, 454, 316, 955, 316, 750, 454, 686,
	87, 23, 23, 87, 316, 863, 595, 594, 553, 553,
	690, 691, 477, 296, 296, 296, 296, 296, 923, 23,
	1065, 830, 308, 234, 948, 1150, 935, 949, 296, 580,
	1144, 578, 859, 860, 685, 816, 954, 296, 1099, 50,
	800, 954, 578, 831, 441, 1237, 441, 50, 50, 1261,
	473, 472, 713, 932, 441, 473, 472, 836, 980, 828,
	805, 923, 923, 581, 829, 50, 221, 474, 934, 716,
	1148, 1147, 474, 688, 900, 1260, 901, 1259, 256, 255,
	258, 259, 260, 261, 907, 310, 920, 257, 262, 1222,
	921, 590, 840, 862, 652, 931, 1114, 925, 926, 927,
	983, 913, 858, 912, 959, 960, 936, 864, 865, 1149,
	853, 942, 50, 943, 944, 945, 946, 833, 852, 65,
	1099, 962, 662, 451, 835, 834, 700, 787, 712, 785,
	965, 922, 788, 789, 786, 562, 563, 964, 316, 784,
	950, 87, 783, 939, 225, 226, 1314, 937, 1308, 1061,
	558, 561, 562, 563, 559, 316, 560, 564, 896, 468,
	1313, 972, 963, 951, 952, 971, 906, 973, 905, 981,
	1008, 871, 466, 873, 456, 593, 433, 1189, 1223, 717,
	872, 892, 661, 974, 566, 457, 222, 223, 468, 904,
	216, 297, 1266, 832, 648, 310, 217, 903, 1003, 1004,
	54, 1006, 1265, 310, 1225, 87, 316, 316, 955, 316,
	985, 986, 470, 1274, 310, 310, 310, 310, 310, 310,
	310, 310, 996, 683, 56, 58, 1025, 1152, 310, 310,
	1014, 577, 316, 51, 1, 87, 87, 1035, 869, 1020,
	878, 1288, 1007, 87, 1009, 1010, 1011, 1248, 696, 1024,
	1128, 821, 316, 813, 409, 816, 64, 441, 477, 1281,
	296, 310, 820, 596, 1023, 230, 1000, 1073, 513, 514,
	515, 516, 517, 518, 519, 837, 602, 600, 601, 598,
	604, 1069, 441, 603, 599, 597, 195, 1068, 303, 565,
	1087, 589, 316, 316, 1100, 1074, 777, 471, 713, 1103,
	1086, 744, 777, 1049, 1048, 874, 1056, 679, 893, 1022,
	449, 758, 758, 197, 1119, 507, 902, 758, 1110, 1105,
	1094, 316, 1108, 316, 316, 975, 309, 1106, 841, 842,
	844, 845, 846, 689, 758, 460, 1109, 1127, 1122, 1264,
	1104, 1224, 47, 1126, 938, 854, 855, 856, 533, 763,
	242, 704, 1067, 254, 1121, 251, 253, 1116, 1117, 1118,
	252, 695, 1137, 310, 947, 481, 240, 316, 232, 295,
	549, 557, 555, 554, 1090, 961, 310, 316, 957, 294,
	1064, 1186, 1271, 699, 1019, 25, 55, 227, 19, 87,
	18, 17, 20, 16, 15, 316, 14, 29, 1135, 1136,
	13, 1138, 12, 316, 11, 10, 87, 9, 8, 1055,
	7, 6, 5, 1166, 4, 1155, 218, 22, 2, 0,
	1168, 816, 0, 816, 0, 1157, 1165, 0, 0, 0,
	1164, 1177, 1178, 1179, 0, 310, 1182, 310, 1172, 1160,
	0, 0, 0, 0, 0, 310, 0, 0, 0, 1192,
	1193, 1194, 0, 1197, 0, 316, 297, 316, 316, 316,
	87, 316, 1190, 0, 0, 1198, 0, 316, 0, 310,
	0, 0, 0, 0, 0, 0, 0, 1206, 1204, 0,
	0, 981, 458, 462, 1185, 0, 0, 0, 316, 316,
	87, 316, 316, 316, 0, 0, 0, 0, 1211, 480,
	1213, 0, 0, 1067, 0, 714, 1220, 0, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 1219, 0, 296, 0, 1226, 0, 0,
	0, 1233, 1210, 523, 0, 0, 316, 316, 1201, 1202,
	1203, 1103, 534, 0, 0, 1236, 1244, 1245, 1246, 316,
	0, 0, 0, 0, 0, 0, 0, 1247, 0, 0,
	1253, 0, 1238, 316, 1005, 0, 0, 816, 0, 1216,
	0, 0, 0, 1267, 1268, 1269, 1270, 0, 0, 970,
	0, 0, 1104, 316, 0, 1239, 0, 1103, 1275, 0,
	0, 1022, 816, 0, 459, 0, 310, 1279, 0, 0,
	316, 316, 316, 0, 0, 0, 1254, 1276, 1255, 0,
	1292, 0, 0, 0, 1263, 0, 1293, 0, 316, 0,
	1297, 1298, 777, 0, 0, 0, 0, 0, 1104, 85,
	47, 316, 207, 1305, 1304, 0, 193, 0, 0, 0,
	0, 0, 0, 0, 1262, 0, 1311, 1018, 310, 1312,
	310, 0, 0, 0, 231, 0, 85, 85, 0, 0,
	203, 0, 85, 0, 0, 0, 1323, 1324, 0, 0,
	85, 0, 85, 310, 0, 0, 0, 0, 85, 0,
	0, 1284, 1285, 1286, 0, 298, 0, 0, 0, 0,
	0, 0, 0, 310, 558, 561, 562, 563, 559, 1184,
	560, 564, 0, 0, 959, 960, 0, 0, 1319, 0,
	188, 0, 0, 0, 0, 310, 190, 0, 0, 0,
	84, 0, 0, 196, 192, 0, 0, 0, 0, 0,
	758, 0, 0, 1107, 970, 0, 758, 0, 702, 703,
	0, 0, 0, 0, 914, 915, 916, 0, 301, 0,
	0, 194, 0, 413, 198, 0, 0, 0, 0, 0,
	0, 421, 310, 422, 310, 1130, 0, 0, 0, 429,
	488, 487, 497, 498, 490, 491, 492, 493, 494, 495,
	496, 489, 85, 189, 499, 0, 1183, 454, 0, 0,
	523, 0, 0, 755, 756, 0, 0, 1169, 1170, 0,
	1171, 0, 0, 1173, 0, 1175, 0, 0, 1156, 0,
	191, 0, 199, 200, 201, 202, 206, 0, 1158, 0,
	0, 205, 204, 488, 487, 497, 498, 490, 491, 492,
	493, 494, 495, 496, 489, 0, 1161, 499, 0, 0,
	0, 0, 0, 0, 310, 0, 0, 0, 0, 0,
	0, 1209, 0, 0, 810, 0, 0, 0, 0, 23,
	24, 48, 26, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 431, 1180, 454, 0, 0, 42, 0,
	0, 0, 28, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 85, 573, 85, 0, 1200, 0, 1200, 1200,
	1200, 37, 1205, 0, 0, 50, 0, 0, 310, 0,
	0, 488, 487, 497, 498, 490, 491, 492, 493, 494,
	495, 496, 489, 0, 0, 499, 0, 0, 0, 1200,
	1217, 0, 310, 310, 1221, 0, 0, 0, 0, 0,
	0, 0, 1071, 1072, 0, 0, 0, 0, 0, 0,
	0, 897, 898, 0, 462, 1088, 1089, 0, 1091, 1092,
	0, 0, 0, 0, 30, 31, 33, 32, 35, 0,
	0, 0, 0, 0, 0, 0, 551, 1240, 1241, 0,
	0, 0, 0, 0, 0, 575, 36, 43, 44, 0,
	1130, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1200, 38, 39, 0, 40, 41,
	0, 0, 0, 0, 85, 85, 924, 0, 85, 0,
	0, 85, 0, 0, 1278, 667, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1200, 1200, 1200, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 758, 1070, 0, 1299,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 1307, 0, 667, 0, 0, 488, 487, 497,
	498, 490, 491, 492, 493, 494, 495, 496, 489, 49,
	0, 499, 0, 0, 1167, 497, 498, 490, 491, 492,
	493, 494, 495, 496, 489, 656, 657, 499, 0, 660,
	0, 0, 663, 0, 0, 231, 0, 0, 0, 0,
	231, 231, 0, 0, 759, 759, 231, 0, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 682, 0, 0,
	231, 231, 231, 231, 0, 85, 0, 759, 85, 85,
	85, 85, 85, 0, 0, 0, 701, 0, 0, 0,
	791, 0, 0, 85, 0, 0, 483, 573, 486, 0,
	0, 0, 85, 85, 500, 501, 502, 503, 504, 505,
	506, 0, 484, 485, 482, 488, 487, 497, 498, 490,
	491, 492, 493, 494, 495, 496, 489, 0, 0, 499,
	0, 0, 0, 0, 1228, 1229, 1096, 1230, 1231, 1232,
	487, 497, 498, 490, 491, 492, 493, 494, 495, 496,
	489, 1111, 1112, 499, 0, 1113, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 572, 0, 0, 0,
	0, 104, 667, 0, 0, 118, 0, 120, 0, 0,
	153, 129, 0, 0, 231, 0, 488, 487, 497, 498,
	490, 491, 492, 493, 494, 495, 496, 489, 0, 86,
	499, 574, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 0, 1163, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 231, 0, 1321, 0, 890, 0, 0, 891, 0,
	0, 0, 0, 0, 0, 0, 0, 231, 0, 0,
	0, 0, 0, 1188, 0, 0, 0, 0, 0, 0,
	523, 0, 0, 0, 176, 0, 0, 0, 142, 0,
	0, 156, 109, 108, 117, 0, 0, 0, 0, 0,
	100, 0, 148, 138, 168, 85, 139, 147, 121, 160,
	143, 167, 177, 178, 158, 175, 89, 157, 166, 98,
	150, 91, 164, 155, 127, 113, 114, 90, 0, 146,
	103, 107, 102, 135, 161, 162, 101, 185, 94, 173,
	174, 93, 95, 172, 134, 159, 165, 128, 125, 92,
	163, 126, 124, 116, 105, 110, 140, 123, 141, 111,
	131, 130, 132, 622, 0, 0, 154, 170, 186, 85,
	0, 179, 180, 181, 182, 0, 0, 0, 133, 96,
	112, 151, 115, 122, 145, 184, 137, 149, 99, 169,
	152, 0, 0, 0, 0, 0, 0, 0, 0, 1059,
	1060, 1181, 0, 0, 0, 0, 0, 85, 88, 0,
	119, 183, 144, 106, 171, 0, 0, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 667, 610,
	0, 1291, 523, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 759, 0, 0, 0, 0, 0, 759,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	623, 0, 488, 487, 497, 498, 490, 491, 492, 493,
	494, 495, 496, 489, 0, 0, 499, 0, 0, 0,
	0, 636, 637, 638, 639, 640, 641, 642, 1063, 643,
	644, 645, 646, 647, 624, 625, 626, 627, 607, 609,
	0, 605, 608, 611, 919, 612, 613, 614, 615, 616,
	617, 618, 619, 620, 621, 628, 629, 630, 631, 632,
	633, 634, 635, 0, 488, 487, 497, 498, 490, 491,
	492, 493, 494, 495, 496, 489, 0, 0, 499, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 136, 350, 0, 341, 319, 347, 320, 339, 362,
	104, 337, 390, 371, 118, 406, 120, 376, 0, 153,
	129, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 315, 0,
	817, 818, 0, 0, 0, 0, 0, 97, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 982, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 1218, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 176, 396, 356, 355, 142, 0, 759,
	156, 109, 108, 117, 399, 365, 391, 340, 348, 100,
	346, 148, 138, 168, 373, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 321, 0, 154, 170, 186, 336, 394,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 88, 0, 119,
	183, 144, 106, 171, 398, 388, 0, 360, 400, 338,
	352, 408, 353, 354, 381, 324, 368, 136, 350, 0,
	341, 319, 347, 320, 339, 362, 104, 337, 390, 371,
	118, 406, 120, 376, 0, 153, 129, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 315, 0, 817, 818, 0, 0,
	0, 0, 0, 97, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 176,
	396, 356, 355, 142, 0, 0, 156, 109, 108, 117,
	399, 365, 391, 340, 348, 100, 346, 148, 138, 168,
	373, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 321,
	0, 154, 170, 186, 336, 394, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 88, 0, 119, 183, 144, 106, 171,
	398, 388, 0, 360, 400, 338, 352, 408, 353, 354,
	381, 324, 368, 136, 350, 0, 341, 319, 347, 320,
	339, 362, 104, 337, 390, 371, 118, 406, 120, 376,
	0, 153, 129, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 1066, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 328, 0, 343, 384,
	0, 317, 387, 393, 358, 176, 396, 356, 355, 142,
	0, 0, 156, 109, 108, 117, 399, 365, 391, 340,
	348, 100, 346, 148, 138, 168, 373, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 321, 0, 154, 170, 186,
	336, 394, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 332, 335, 330, 331, 369, 370, 403, 404,
	405, 385, 327, 0, 333, 334, 0, 389, 372, 88,
	0, 119, 183, 144, 106, 171, 398, 388, 0, 360,
	400, 338, 352, 408, 353, 354, 381, 324, 368, 136,
	350, 0, 341, 319, 347, 320, 339, 362, 104, 337,
	390, 371, 118, 406, 120, 376, 0, 153, 129, 0,
	0, 364, 392, 366, 386, 359, 382, 329, 375, 401,
	351, 379, 402, 50, 0, 0, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 176, 396, 356, 355, 142, 0, 0, 156, 109,
	108, 117, 399, 365, 391, 340, 348, 100, 346, 148,
	138, 168, 373, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 321, 0, 154, 170, 186, 336, 394, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 332, 335,
	330, 331, 369, 370, 403, 404, 405, 385, 327, 0,
	333, 334, 0, 389, 372, 88, 0, 119, 183, 144,
	106, 171, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 136, 350, 0, 341, 319,
	347, 320, 339, 362, 104, 337, 390, 371, 118, 406,
	120, 376, 0, 153, 129, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 236, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 710, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 176, 396, 356,
	355, 142, 0, 0, 156, 109, 108, 117, 399, 365,
	391, 340, 348, 100, 346, 148, 138, 168, 373, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 321, 0, 154,
	170, 186, 336, 394, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 88, 0, 119, 183, 144, 106, 171, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 136, 350, 0, 341, 319, 347, 320, 339, 362,
	104, 337, 390, 371, 118, 406, 120, 376, 0, 153,
	129, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 176, 396, 356, 355, 142, 0, 0,
	156, 109, 108, 117, 399, 365, 391, 340, 348, 100,
	346, 148, 138, 168, 373, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 321, 0, 154, 170, 186, 336, 394,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 88, 0, 119,
	183, 144, 106, 171, 398, 388, 0, 360, 400, 338,
	352, 408, 353, 354, 381, 324, 368, 136, 350, 0,
	341, 319, 347, 320, 339, 362, 104, 337, 390, 371,
	118, 406, 120, 376, 0, 153, 129, 0, 0, 364,
	392, 366, 386, 359, 382, 329, 375, 401, 351, 379,
	402, 0, 0, 0, 236, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 378, 397, 349, 380, 318,
	377, 0, 322, 325, 407, 395, 344, 345, 0, 0,
	0, 0, 0, 0, 0, 363, 367, 383, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 342, 0, 374,
	0, 0, 0, 326, 323, 0, 361, 0, 0, 0,
	328, 0, 343, 384, 0, 317, 387, 393, 358, 176,
	396, 356, 355, 142, 0, 0, 156, 109, 108, 117,
	399, 365, 391, 340, 348, 100, 346, 148, 138, 168,
	373, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 321,
	0, 154, 170, 186, 336, 394, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 332, 335, 330, 331,
	369, 370, 403, 404, 405, 385, 327, 0, 333, 334,
	0, 389, 372, 88, 0, 119, 183, 144, 106, 171,
	398, 388, 0, 360, 400, 338, 352, 408, 353, 354,
	381, 324, 368, 136, 350, 0, 341, 319, 347, 320,
	339, 362, 104, 337, 390, 371, 118, 406, 120, 376,
	0, 153, 129, 0, 0, 364, 392, 366, 386, 359,
	382, 329, 375, 401, 351, 379, 402, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 378, 397, 349, 380, 318, 377, 0, 322, 325,
	407, 395, 344, 345, 0, 0, 0, 0, 0, 0,
	0, 363, 367, 383, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 342, 0, 374, 0, 0, 0, 326,
	323, 0, 361, 0, 0, 0, 328, 0, 343, 384,
	0, 317, 387, 393, 358, 176, 396, 356, 355, 142,
	0, 0, 156, 109, 108, 117, 399, 365, 391, 340,
	348, 100, 346, 148, 138, 168, 373, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 313, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 321, 0, 154, 170, 186,
	336, 394, 179, 180, 181, 182, 0, 0, 0, 314,
	312, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 332, 335, 330, 331, 369, 370, 403, 404,
	405, 385, 327, 0, 333, 334, 0, 389, 372, 88,
	0, 119, 183, 144, 106, 171, 398, 388, 0, 360,
	400, 338, 352, 408, 353, 354, 381, 324, 368, 136,
	350, 0, 341, 319, 347, 320, 339, 362, 104, 337,
	390, 371, 118, 406, 120, 376, 0, 153, 129, 0,
	0, 364, 392, 366, 386, 359, 382, 329, 375, 401,
	351, 379, 402, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 378, 397, 349,
	380, 318, 377, 0, 322, 325, 407, 395, 344, 345,
	0, 0, 0, 0, 0, 0, 0, 363, 367, 383,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 342,
	0, 374, 0, 0, 0, 326, 323, 0, 361, 0,
	0, 0, 328, 0, 343, 384, 0, 317, 387, 393,
	358, 176, 396, 356, 355, 142, 0, 0, 156, 109,
	108, 117, 399, 365, 391, 340, 348, 100, 346, 148,
	138, 168, 373, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 321, 0, 154, 170, 186, 336, 394, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 332, 335,
	330, 331, 369, 370, 403, 404, 405, 385, 327, 0,
	333, 334, 0, 389, 372, 88, 0, 119, 183, 144,
	106, 171, 398, 388, 0, 360, 400, 338, 352, 408,
	353, 354, 381, 324, 368, 136, 350, 0, 341, 319,
	347, 320, 339, 362, 104, 337, 390, 371, 118, 406,
	120, 376, 0, 153, 129, 0, 0, 364, 392, 366,
	386, 359, 382, 329, 375, 401, 351, 379, 402, 0,
	0, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 378, 397, 349, 380, 318, 377, 0,
	322, 325, 407, 395, 344, 345, 0, 0, 0, 0,
	0, 0, 0, 363, 367, 383, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 342, 0, 374, 0, 0,
	0, 326, 323, 0, 361, 0, 0, 0, 328, 0,
	343, 384, 0, 317, 387, 393, 358, 176, 396, 356,
	355, 142, 0, 0, 156, 109, 108, 117, 399, 365,
	391, 340, 348, 100, 346, 148, 138, 168, 373, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 583, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 313, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 321, 0, 154,
	170, 186, 336, 394, 179, 180, 181, 182, 0, 0,
	0, 314, 312, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 332, 335, 330, 331, 369, 370,
	403, 404, 405, 385, 327, 0, 333, 334, 0, 389,
	372, 88, 0, 119, 183, 144, 106, 171, 398, 388,
	0, 360, 400, 338, 352, 408, 353, 354, 381, 324,
	368, 136, 350, 0, 341, 319, 347, 320, 339, 362,
	104, 337, 390, 371, 118, 406, 120, 376, 0, 153,
	129, 0, 0, 364, 392, 366, 386, 359, 382, 329,
	375, 401, 351, 379, 402, 0, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 378,
	397, 349, 380, 318, 377, 0, 322, 325, 407, 395,
	344, 345, 0, 0, 0, 0, 0, 0, 0, 363,
	367, 383, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 374, 0, 0, 0, 326, 323, 0,
	361, 0, 0, 0, 328, 0, 343, 384, 0, 317,
	387, 393, 358, 176, 396, 356, 355, 142, 0, 0,
	156, 109, 108, 117, 399, 365, 391, 340, 348, 100,
	346, 148, 138, 168, 373, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 304, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 313, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 321, 0, 154, 170, 186, 336, 394,
	179, 180, 181, 182, 0, 0, 0, 314, 312, 307,
	306, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	332, 335, 330, 331, 369, 370, 403, 404, 405, 385,
	327, 0, 333, 334, 0, 389, 372, 88, 0, 119,
	183, 144, 106, 171, 136, 0, 0, 746, 0, 238,
	0, 0, 0, 104, 235, 0, 0, 118, 277, 120,
	0, 0, 153, 129, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 236, 256, 255, 258, 259, 260, 261, 0, 0,
	97, 257, 262, 263, 264, 0, 0, 233, 249, 0,
	276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 247, 229, 0, 0, 0, 288, 0, 248, 0,
	0, 244, 245, 250, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 286,
	142, 0, 0, 156, 109, 108, 117, 0, 0, 0,
	0, 0, 100, 0, 148, 138, 168, 0, 139, 147,
	121, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 98, 150, 91, 164, 155, 127, 113, 114, 90,
	0, 146, 103, 107, 102, 135, 161, 162, 101, 185,
	94, 173, 174, 93, 95, 172, 134, 159, 165, 128,
	125, 92, 163, 126, 124, 116, 105, 110, 140, 123,
	141, 111, 131, 130, 132, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	133, 96, 112, 151, 115, 122, 145, 184, 137, 149,
	99, 169, 152, 278, 287, 284, 285, 282, 283, 281,
	280, 279, 289, 270, 271, 272, 273, 275, 0, 274,
	88, 0, 119, 183, 144, 106, 171, 136, 0, 0,
	0, 0, 238, 0, 0, 0, 104, 235, 0, 0,
	118, 277, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 268, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 454, 236, 256, 255, 258, 259, 260,
	261, 0, 0, 97, 257, 262, 263, 264, 0, 0,
	233, 249, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 246, 247, 0, 0, 0, 0, 288,
	0, 248, 0, 0, 244, 245, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 286, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 278, 287, 284, 285,
	282, 283, 281, 280, 279, 289, 270, 271, 272, 273,
	275, 0, 274, 88, 0, 119, 183, 144, 106, 171,
	136, 0, 0, 0, 0, 238, 0, 0, 0, 104,
	235, 0, 0, 118, 277, 120, 0, 0, 153, 129,
	0, 0, 0, 0, 268, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 236, 256, 255,
	258, 259, 260, 261, 0, 0, 97, 257, 262, 263,
	264, 0, 0, 233, 249, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 229, 0,
	0, 0, 288, 0, 248, 0, 0, 244, 245, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 286, 142, 0, 0, 156,
	109, 108, 117, 0, 0, 0, 0, 0, 100, 0,
	148, 138, 168, 0, 139, 147, 121, 160, 143, 167,
	177, 178, 158, 175, 89, 157, 166, 98, 150, 91,
	164, 155, 127, 113, 114, 90, 0, 146, 103, 107,
	102, 135, 161, 162, 101, 185, 94, 173, 174, 93,
	95, 172, 134, 159, 165, 128, 125, 92, 163, 126,
	124, 116, 105, 110, 140, 123, 141, 111, 131, 130,
	132, 0, 0, 0, 154, 170, 186, 0, 0, 179,
	180, 181, 182, 0, 0, 0, 133, 96, 112, 151,
	115, 122, 145, 184, 137, 149, 99, 169, 152, 278,
	287, 284, 285, 282, 283, 281, 280, 279, 289, 270,
	271, 272, 273, 275, 0, 274, 88, 0, 119, 183,
	144, 106, 171, 136, 0, 0, 0, 0, 238, 0,
	0, 0, 104, 235, 0, 0, 118, 277, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 268, 269, 0,
	0, 0, 0, 0, 0, 809, 0, 50, 0, 0,
	236, 256, 255, 258, 259, 260, 261, 0, 0, 97,
	257, 262, 263, 264, 0, 0, 233, 249, 0, 276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 246,
	247, 0, 0, 0, 0, 288, 0, 248, 0, 0,
	244, 245, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 286, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 278, 287, 284, 285, 282, 283, 281, 280,
	279, 289, 270, 271, 272, 273, 275, 23, 274, 88,
	0, 119, 183, 144, 106, 171, 0, 0, 0, 136,
	0, 0, 0, 0, 238, 0, 0, 0, 104, 235,
	0, 0, 118, 277, 120, 0, 0, 153, 129, 0,
	0, 0, 0, 268, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 236, 256, 255, 258,
	259, 260, 261, 0, 0, 97, 257, 262, 263, 264,
	0, 0, 233, 249, 0, 276, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 246, 247, 0, 0, 0,
	0, 288, 0, 248, 0, 0, 244, 245, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 286, 142, 0, 0, 156, 109,
	108, 117, 0, 0, 0, 0, 0, 100, 0, 148,
	138, 168, 0, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 278, 287,
	284, 285, 282, 283, 281, 280, 279, 289, 270, 271,
	272, 273, 275, 0, 274, 88, 0, 119, 183, 144,
	106, 171, 136, 0, 0, 0, 0, 238, 0, 0,
	0, 104, 235, 0, 0, 118, 277, 120, 0, 0,
	153, 129, 0, 0, 0, 0, 268, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 236,
	256, 255, 258, 259, 260, 261, 0, 0, 97, 257,
	262, 263, 264, 0, 0, 233, 249, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 247,
	0, 0, 0, 0, 288, 0, 248, 0, 0, 244,
	245, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 176, 0, 0, 286, 142, 0,
	0, 156, 109, 108, 117, 0, 0, 0, 0, 0,
	100, 0, 148, 138, 168, 0, 139, 147, 121, 160,
	143, 167, 177, 178, 158, 175, 89, 157, 166, 98,
	150, 91, 164, 155, 127, 113, 114, 90, 0, 146,
	103, 107, 102, 135, 161, 162, 101, 185, 94, 173,
	174, 93, 95, 172, 134, 159, 165, 128, 125, 92,
	163, 126, 124, 116, 105, 110, 140, 123, 141, 111,
	131, 130, 132, 0, 0, 0, 154, 170, 186, 0,
	0, 179, 180, 181, 182, 0, 0, 0, 133, 96,
	112, 151, 115, 122, 145, 184, 137, 149, 99, 169,
	152, 278, 287, 284, 285, 282, 283, 281, 280, 279,
	289, 270, 271, 272, 273, 275, 136, 274, 88, 0,
	119, 183, 144, 106, 171, 104, 0, 0, 0, 118,
	277, 120, 0, 0, 153, 129, 0, 0, 0, 0,
	268, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 236, 256, 255, 258, 259, 260, 261,
	0, 0, 97, 257, 262, 263, 264, 0, 0, 0,
	249, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 247, 0, 0, 0, 0, 288, 0,
	248, 0, 0, 244, 245, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 286, 142, 0, 0, 156, 109, 108, 117, 0,
	0, 0, 0, 0, 100, 0, 148, 138, 168, 1322,
	139, 147, 121, 160, 143, 167, 177, 178, 158, 175,
	89, 157, 166, 98, 150, 91, 164, 155, 127, 113,
	114, 90, 0, 146, 103, 107, 102, 135, 161, 162,
	101, 185, 94, 173, 174, 93, 95, 172, 134, 159,
	165, 128, 125, 92, 163, 126, 124, 116, 105, 110,
	140, 123, 141, 111, 131, 130, 132, 0, 0, 0,
	154, 170, 186, 0, 0, 179, 180, 181, 182, 0,
	0, 0, 133, 96, 112, 151, 115, 122, 145, 184,
	137, 149, 99, 169, 152, 278, 287, 284, 285, 282,
	283, 281, 280, 279, 289, 270, 271, 272, 273, 275,
	136, 274, 88, 0, 119, 183, 144, 106, 171, 104,
	0, 0, 0, 118, 277, 120, 0, 0, 153, 129,
	0, 0, 0, 0, 268, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 236, 256, 255,
	258, 259, 260, 261, 0, 0, 97, 257, 262, 263,
	264, 0, 0, 0, 249, 0, 276, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 246, 247, 0, 0,
	0, 0, 288, 0, 248, 0, 0, 244, 245, 250,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 286, 142, 0, 0, 156,
	109, 108, 117, 0, 0, 0, 0, 0, 100, 0,
	148, 138, 168, 0, 139, 147, 121, 160, 143, 167,
	177, 178, 158, 175, 89, 157, 166, 98, 150, 91,
	164, 155, 127, 113, 114, 90, 0, 146, 103, 107,
	102, 135, 161, 162, 101, 185, 94, 173, 174, 93,
	95, 172, 134, 159, 165, 128, 125, 92, 163, 126,
	124, 116, 105, 110, 140, 123, 141, 111, 131, 130,
	132, 0, 0, 0, 154, 170, 186, 0, 0, 179,
	180, 181, 182, 0, 0, 0, 133, 96, 112, 151,
	115, 122, 145, 184, 137, 149, 99, 169, 152, 278,
	287, 284, 285, 282, 283, 281, 280, 279, 289, 270,
	271, 272, 273, 275, 136, 274, 88, 0, 119, 183,
	144, 106, 171, 104, 0, 0, 0, 118, 0, 120,
	0, 0, 153, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 488, 487, 497, 498,
	490, 491, 492, 493, 494, 495, 496, 489, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	142, 0, 0, 156, 109, 108, 117, 0, 0, 0,
	0, 0, 100, 0, 148, 138, 168, 0, 139, 147,
	121, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 98, 150, 91, 164, 155, 127, 113, 114, 90,
	0, 146, 103, 107, 102, 135, 161, 162, 101, 185,
	94, 173, 174, 93, 95, 172, 134, 159, 165, 128,
	125, 92, 163, 126, 124, 116, 105, 110, 140, 123,
	141, 111, 131, 130, 132, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	133, 96, 112, 151, 115, 122, 145, 184, 137, 149,
	99, 169, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 119, 183, 144, 106, 171, 136, 0, 0,
	0, 476, 0, 0, 0, 0, 104, 0, 0, 0,
	118, 0, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 478, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 473, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 88, 0, 119, 183, 144, 106, 171,
	104, 0, 0, 0, 118, 0, 120, 0, 0, 153,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 0, 0, 0, 142, 0, 0,
	156, 109, 108, 117, 0, 0, 0, 0, 0, 100,
	0, 148, 138, 168, 0, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 88, 0, 119,
	183, 144, 106, 171, 104, 0, 0, 0, 118, 0,
	120, 0, 0, 153, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 142, 0, 0, 156, 109, 108, 117, 0, 0,
	0, 0, 0, 100, 0, 148, 138, 168, 0, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 0, 0, 154,
	170, 186, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 88, 0, 119, 183, 144, 106, 171, 104, 0,
	0, 0, 118, 0, 120, 0, 0, 153, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 315, 0, 0, 697,
	0, 0, 698, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 142, 0, 0, 156, 109,
	108, 117, 0, 0, 0, 0, 0, 100, 0, 148,
	138, 168, 0, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 88, 0, 119, 183, 144,
	106, 171, 104, 592, 0, 0, 118, 0, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 591, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 119, 183, 144, 106, 171, 136, 0, 0, 0,
	572, 0, 0, 0, 0, 104, 0, 0, 0, 118,
	0, 120, 0, 0, 153, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 574, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 0,
	0, 0, 142, 0, 0, 156, 109, 108, 117, 0,
	0, 0, 0, 0, 100, 0, 148, 138, 168, 0,
	570, 147, 121, 160, 143, 167, 177, 178, 158, 175,
	89, 157, 166, 98, 150, 91, 164, 155, 127, 113,
	114, 90, 0, 146, 103, 107, 102, 135, 161, 162,
	101, 185, 94, 173, 174, 93, 95, 172, 134, 159,
	165, 128, 125, 92, 163, 126, 124, 116, 105, 110,
	140, 123, 141, 111, 131, 130, 132, 0, 0, 0,
	154, 170, 186, 0, 0, 179, 180, 181, 182, 0,
	0, 0, 133, 96, 112, 151, 115, 122, 145, 184,
	137, 149, 99, 169, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 88, 0, 119, 183, 144, 106, 171, 104,
	0, 0, 0, 118, 0, 120, 0, 0, 153, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 0, 0, 142, 0, 0, 156,
	109, 108, 117, 0, 0, 0, 0, 0, 100, 0,
	148, 138, 168, 0, 139, 147, 121, 160, 143, 167,
	177, 178, 158, 175, 89, 157, 166, 98, 150, 91,
	164, 155, 127, 113, 114, 90, 0, 146, 103, 107,
	102, 135, 161, 162, 101, 185, 94, 173, 174, 93,
	95, 172, 134, 159, 165, 128, 125, 92, 163, 126,
	124, 116, 105, 110, 140, 123, 141, 111, 131, 130,
	132, 0, 0, 0, 154, 170, 186, 0, 0, 179,
	180, 181, 182, 0, 0, 0, 133, 96, 112, 151,
	115, 122, 145, 184, 137, 149, 99, 169, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 88, 0, 119, 183,
	144, 106, 171, 104, 0, 0, 0, 118, 0, 120,
	0, 0, 153, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 574, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 0, 0, 0,
	142, 0, 0, 156, 109, 108, 117, 0, 0, 0,
	0, 0, 100, 0, 148, 138, 168, 0, 139, 147,
	121, 160, 143, 167, 177, 178, 158, 175, 89, 157,
	166, 98, 150, 91, 164, 155, 127, 113, 114, 90,
	0, 146, 103, 107, 102, 135, 161, 162, 101, 185,
	94, 173, 174, 93, 95, 172, 134, 159, 165, 128,
	125, 92, 163, 126, 124, 116, 105, 110, 140, 123,
	141, 111, 131, 130, 132, 0, 0, 0, 154, 170,
	186, 0, 0, 179, 180, 181, 182, 0, 0, 0,
	133, 96, 112, 151, 115, 122, 145, 184, 137, 149,
	99, 169, 152, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	88, 0, 119, 183, 144, 106, 171, 104, 0, 0,
	0, 118, 0, 120, 0, 0, 153, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 315, 0, 478, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 0, 0, 0, 142, 0, 0, 156, 109, 108,
	117, 0, 0, 0, 0, 0, 100, 0, 148, 138,
	168, 0, 139, 147, 121, 160, 143, 167, 177, 178,
	158, 175, 89, 157, 166, 98, 150, 91, 164, 155,
	127, 113, 114, 90, 0, 146, 103, 107, 102, 135,
	161, 162, 101, 185, 94, 173, 174, 93, 95, 172,
	134, 159, 165, 128, 125, 92, 163, 126, 124, 116,
	105, 110, 140, 123, 141, 111, 131, 130, 132, 0,
	0, 0, 154, 170, 186, 0, 0, 179, 180, 181,
	182, 0, 0, 0, 133, 96, 112, 151, 115, 122,
	145, 184, 137, 149, 99, 169, 152, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 88, 0, 119, 183, 144, 106,
	171, 550, 104, 0, 0, 0, 118, 0, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 0, 0, 0, 0, 0, 0, 136, 0, 88,
	0, 119, 183, 144, 106, 171, 104, 0, 0, 0,
	118, 0, 120, 0, 0, 153, 129, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	0, 0, 0, 142, 0, 0, 156, 109, 108, 117,
	0, 0, 0, 0, 0, 100, 0, 148, 138, 168,
	0, 139, 147, 121, 160, 143, 167, 177, 178, 158,
	175, 89, 157, 166, 98, 150, 91, 164, 155, 127,
	113, 114, 90, 0, 146, 103, 107, 102, 135, 161,
	162, 101, 185, 94, 173, 174, 93, 95, 172, 134,
	159, 165, 128, 125, 92, 163, 126, 124, 116, 105,
	110, 140, 123, 141, 111, 131, 130, 132, 0, 0,
	0, 154, 170, 186, 0, 0, 179, 180, 181, 182,
	0, 0, 0, 133, 96, 112, 151, 115, 122, 145,
	184, 137, 149, 99, 169, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 88, 0, 119, 183, 144, 106, 171,
	104, 0, 0, 0, 118, 0, 120, 0, 0, 153,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 176, 0, 0, 0, 142, 0, 0,
	156, 109, 108, 117, 0, 0, 0, 0, 0, 100,
	0, 148, 138, 168, 0, 139, 147, 121, 160, 143,
	167, 177, 178, 158, 175, 89, 157, 166, 98, 150,
	91, 164, 155, 127, 113, 114, 90, 0, 146, 103,
	107, 102, 135, 161, 162, 101, 185, 94, 173, 174,
	93, 95, 172, 134, 159, 165, 128, 125, 92, 163,
	126, 124, 116, 105, 110, 140, 123, 141, 111, 131,
	130, 132, 0, 0, 0, 154, 170, 186, 0, 0,
	179, 180, 181, 182, 0, 0, 0, 133, 96, 112,
	151, 115, 122, 145, 184, 137, 149, 99, 169, 152,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 0, 88, 0, 119,
	183, 144, 106, 171, 104, 0, 0, 0, 118, 0,
	120, 0, 0, 153, 129, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 142, 0, 0, 156, 109, 108, 117, 0, 0,
	0, 0, 0, 100, 0, 148, 138, 168, 0, 139,
	147, 121, 160, 143, 167, 177, 178, 158, 175, 89,
	157, 166, 98, 150, 91, 164, 155, 127, 113, 114,
	90, 0, 146, 103, 107, 102, 135, 161, 162, 101,
	185, 94, 173, 174, 93, 95, 172, 134, 159, 165,
	128, 125, 92, 163, 126, 124, 116, 105, 110, 140,
	123, 141, 111, 131, 130, 132, 0, 0, 0, 154,
	170, 186, 0, 0, 179, 180, 181, 182, 0, 0,
	0, 133, 96, 112, 151, 115, 122, 145, 184, 137,
	149, 99, 169, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 136,
	0, 88, 0, 119, 183, 144, 106, 171, 104, 0,
	0, 0, 118, 0, 120, 0, 0, 153, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 0, 0, 0, 142, 0, 0, 156, 109,
	108, 117, 0, 0, 0, 0, 0, 100, 0, 148,
	138, 168, 0, 139, 147, 121, 160, 143, 167, 177,
	178, 158, 175, 89, 157, 166, 98, 150, 91, 164,
	155, 127, 113, 114, 90, 0, 146, 103, 107, 102,
	135, 161, 162, 101, 185, 94, 173, 174, 93, 95,
	172, 134, 159, 165, 128, 125, 92, 163, 126, 124,
	116, 105, 110, 140, 123, 141, 111, 131, 130, 132,
	0, 0, 0, 154, 170, 186, 0, 0, 179, 180,
	181, 182, 0, 0, 0, 133, 96, 112, 151, 115,
	122, 145, 184, 137, 149, 99, 169, 152, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 0, 88, 0, 119, 183, 144,
	106, 171, 104, 0, 0, 0, 118, 0, 120, 0,
	0, 153, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 0, 0, 0, 142,
	0, 0, 156, 109, 108, 117, 0, 0, 0, 0,
	0, 100, 0, 148, 138, 168, 0, 139, 147, 121,
	160, 143, 167, 177, 178, 158, 175, 89, 157, 166,
	98, 150, 91, 164, 155, 127, 113, 114, 90, 0,
	146, 103, 107, 102, 135, 161, 162, 101, 185, 94,
	173, 174, 93, 95, 172, 134, 159, 165, 128, 125,
	92, 163, 126, 124, 116, 105, 110, 140, 123, 141,
	111, 131, 130, 132, 0, 0, 0, 154, 170, 186,
	0, 0, 179, 180, 181, 182, 0, 0, 0, 133,
	96, 112, 151, 115, 122, 145, 184, 137, 149, 99,
	169, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 119, 183, 144, 106, 171,
}
var yyPact = [...]int{

	1513, -1000, -184, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 845, 879, -1000, -1000, -1000, -1000, -1000, -1000, 727,
	28, 76, 117, 22, 9643, 116, 1265, 10315, -1000, 1,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 656, -1000, -1000,
	-1000, -1000, -1000, 833, 840, 720, 826, 766, -1000, 5562,
	69, 8522, 9419, 4863, -1000, 539, 109, 10315, -146, 9867,
	64, 64, 64, -1000, 111, 10315, -1000, 10315, 56, 522,
	56, 56, 56, 10315, -1000, 152, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10315, 519, 807,
	60, 3141, 3141, 3141, 3141, 10, 3141, -94, 733, -1000,
	-1000, -1000, -1000, 3141, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 456, 815, 6264, 6264, 845, -1000,
	656, -1000, -1000, -1000, 798, -1000, -1000, 306, 861, -1000,
	7169, 151, -1000, 6264, 1755, 647, -1000, -1000, 647, -1000,
	-1000, 131, -1000, -1000, 6712, 6712, 6712, 6712, 6712, 6712,
	6712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 647, -1000, 6031, 647, 647,
	647, 647, 647, 647, 647, 647, 6264, 647, 647, 647,
	647, 647, 647, 647, 647, 647, 647, 647, 647, 647,
	9195, 593, 770, -1000, -1000, -1000, 822, 7617, 8298, 10315,
	638, -1000, 670, 4617, -115, -1000, -1000, -1000, 228, 8065,
	-1000, -1000, -1000, 806, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 613,
	-1000, 2084, 9867, 3141, 103, 703, 507, 274, 504, 10315,
	10315, 3141, 84, 10315, 819, 732, 10315, 498, 486, -1000,
	4371, -1000, 3141, 3141, 3141, 3141, 3141, 3141, 3141, 3141,
	-1000, -1000, -1000, -1000, -1000, -1000, 3141, 3141, -1000, -63,
	-1000, 10315, -1000, -1000, -1000, -1000, 874, 184, 641, 149,
	680, -1000, 646, 833, 456, 766, 7841, 745, -1000, -1000,
	10315, -1000, 6264, 6264, 378, -1000, 8970, -1000, -1000, 3387,
	193, 6712, 364, 254, 6712, 6712, 6712, 6712, 6712, 6712,
	6712, 6712, 6712, 6712, 6712, 6712, 6712, 6712, 6712, 373,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 484, -1000,
	656, 682, 682, 168, 168, 168, 168, 168, 168, 6936,
	5096, 456, 604, 277, 6031, 5562, 5562, 6264, 6264, 10091,
	10091, 5562, 827, 237, 277, 10091, -1000, 456, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 5562, 5562, 5562, 5562, 23,
	10315, -1000, 10091, 8522, 8522, 8522, 8522, 8522, -1000, 762,
	759, -1000, 749, 747, 753, 10315, -1000, 599, 7617, 172,
	647, -1000, 8746, -1000, -1000, 23, 649, 8522, 10315, -1000,
	-1000, 4125, 670, -115, 667, -1000, -105, -85, 5795, 165,
	-1000, -1000, -1000, -1000, 2649, 182, 653, -1000, -56, -1000,
	-1000, -1000, -1000, 700, -1000, -1000, -1000, 700, 101, 700,
	700, 700, -29, -29, -29, -29, -1000, -1000, -1000, -1000,
	-1000, 726, 718, -1000, 700, 700, 700, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 710, 710, 710, 701, 701, 717, -1000,
	10315, -164, 481, 3141, 817, 3141, -1000, 58, -1000, 10315,
	-1000, -1000, 10315, 3141, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 271,
	-1000, -1000, -1000, -1000, 782, 6264, 6264, 3879, 6264, -1000,
	-1000, -1000, 815, -1000, 827, 838, -1000, 796, 794, 5562,
	-1000, -1000, 193, 217, -1000, -1000, 309, -1000, -1000, -1000,
	-1000, 145, 647, -1000, 1866, -1000, -1000, -1000, -1000, 364,
	6712, 6712, 6712, 118, 1866, 2194, 1663, 1779, 168, 311,
	311, 166, 166, 166, 166, 166, 418, 418, -1000, -1000,
	-1000, 456, -1000, -1000, -1000, 456, 5562, 668, -1000, -1000,
	6264, -1000, 456, 589, 589, 477, 384, 702, -1000, 143,
	675, 589, 5562, 240, -1000, 6264, 456, -1000, 589, 456,
	589, 589, 655, 647, -1000, 643, -1000, 214, 770, 714,
	731, 1314, -1000, -1000, -1000, -1000, 757, -1000, 750, -1000,
	-1000, -1000, -1000, -1000, 108, 106, 105, 9867, -1000, 856,
	8522, 615, -1000, -1000, 667, -115, -119, -1000, -1000, -1000,
	277, -1000, 474, 665, 2403, -1000, -1000, -1000, -1000, -1000,
	-1000, 708, 43, 71, 114, 466, -1000, -1000, -1000, 298,
	51, 873, -1000, 41, -1000, 36, 416, -60, -1000, -1000,
	385, -29, -29, 700, -29, -1000, -1000, 165, 801, 165,
	165, 165, 411, 411, -1000, -1000, -1000, -1000, 374, -1000,
	-1000, -1000, 371, -1000, 10315, 9867, 3141, -1000, 3633, -1000,
	-1000, -1000, -1000, -1000, -1000, 334, 225, 144, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21,
	-1000, 3141, -1000, 272, 10315, 10315, 772, 277, 277, 141,
	-1000, -1000, 10315, -1000, -1000, -1000, -1000, 669, -1000, -1000,
	-1000, 2895, 5562, -1000, 118, 1866, 1647, -1000, 6712, 6712,
	-1000, -1000, 589, 5562, 277, -1000, -1000, -1000, 94, 373,
	94, 6712, 6712, 3879, 6712, 6712, -156, 625, 233, -1000,
	6264, 292, -1000, -1000, -1000, -1000, -1000, 730, 10091, 647,
	-1000, 7393, 9867, 845, 10091, 6264, 6264, -1000, -1000, 6264,
	704, -1000, 6264, -1000, -1000, -1000, 647, 647, 647, 511,
	-1000, 845, 615, -1000, -1000, -1000, -109, -104, -1000, -1000,
	2649, -1000, 2649, 9867, -1000, 423, 419, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -128, -1000, -1000, -1000,
	-1000, -1000, 543, 165, 165, -29, 165, -1000, 197, -1000,
	-1000, -1000, 547, -1000, 535, 637, 533, 679, 719, -1000,
	632, -1000, 213, -1000, 70, -1000, 9867, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 9867, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10315, -1000,
	-1000, -1000, -1000, -1000, 9867, -1000, -1000, 409, 6264, -1000,
	-1000, -1000, 3633, -1000, 856, 8522, -1000, -1000, 456, -1000,
	6712, 1866, 1866, -1000, -1000, 456, 700, 700, -1000, 700,
	701, -1000, 700, -8, 700, -11, 456, 456, 1481, 2132,
	-1000, 1393, 1340, 647, -153, -1000, 277, 6264, -1000, 810,
	648, 565, -1000, -1000, 5329, 456, 514, 130, 511, 833,
	-1000, 277, 277, 277, 9867, 277, 9867, 9867, 9867, 1914,
	9867, 833, -1000, -1000, -1000, -1000, 2403, -1000, 495, -1000,
	700, -1000, -1000, -1000, -1000, -1000, -1000, 165, -1000, -1000,
	-1000, -29, 400, -29, 367, -1000, 361, 9867, 9867, 10315,
	3633, 2649, 9867, -1000, -1000, -1000, 697, -1000, -1000, -1000,
	-1000, 812, -1000, 277, 851, 616, -1000, 1866, -1000, -1000,
	97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	6712, 6712, -1000, 6712, 6712, 6712, 456, 399, 277, 35,
	-1000, 647, -1000, -1000, 673, 9867, 9867, -1000, -1000, 491,
	-1000, 479, 479, 479, 172, -1000, -1000, 175, 9867, -1000,
	-1000, 165, -1000, 165, 496, 480, 470, 685, 683, -1000,
	-1000, 657, 9867, 647, 848, 836, -1000, -1000, 301, 301,
	301, 301, 34, -1000, -1000, 864, -1000, 647, -1000, 656,
	124, -1000, 9867, -1000, -1000, -1000, -1000, -1000, 175, -1000,
	387, 211, 393, -1000, -1000, -1000, -1000, -1000, -1000, 9867,
	9867, 9867, 455, 20, -1000, 6264, 6264, -1000, -1000, -1000,
	-1000, 456, 40, -169, 10091, 565, 456, 9867, -1000, -1000,
	-1000, 345, -1000, -1000, 453, 449, 440, 703, 427, -1000,
	9867, 277, 556, -1000, 771, -161, -175, 550, -1000, -1000,
	-1000, -1000, -1000, -1000, -164, -1000, 20, 788, -1000, 769,
	-1000, -1000, -1000, 14, -167, 11, -171, 647, -177, 6488,
	-1000, 301, 456, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1078, 27, 475, 1077, 1076, 1074, 1072, 1071, 1070,
	1068, 1067, 1065, 1064, 1062, 1060, 1057, 1056, 1054, 1053,
	1052, 1051, 1050, 1048, 157, 1047, 1046, 1045, 52, 1043,
	59, 1042, 1041, 26, 44, 34, 31, 925, 1040, 20,
	69, 92, 1039, 40, 1038, 1035, 66, 1033, 55, 1032,
	1031, 1345, 1030, 1029, 12, 25, 1028, 1026, 1025, 1024,
	71, 683, 1021, 1020, 1016, 1015, 1013, 1011, 41, 3,
	10, 9, 13, 1010, 119, 7, 1009, 39, 1008, 1004,
	1001, 999, 42, 995, 45, 993, 15, 43, 987, 81,
	65, 29, 21, 5, 61, 53, 986, 23, 57, 37,
	985, 976, 390, 975, 973, 970, 968, 967, 966, 418,
	423, 965, 964, 963, 24, 0, 441, 100, 58, 957,
	33, 951, 1254, 60, 56, 18, 949, 49, 177, 30,
	948, 946, 19, 945, 944, 943, 940, 939, 938, 937,
	936, 380, 16, 54, 935, 926, 47, 17, 36, 48,
	923, 922, 46, 919, 916, 914, 913, 22, 14, 911,
	11, 910, 8, 907, 901, 2, 900, 32, 899, 1,
	898, 6, 897, 894, 893, 50, 4, 891, 887, 886,
	885, 102,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 177,
	177, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 171, 171, 170, 169, 169, 168, 168, 167, 16,
	154, 155, 155, 155, 149, 133, 133, 133, 133, 133,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 137, 137, 135, 135,
	135, 135, 135, 135, 135, 136, 136, 136, 136, 136,
	138, 138, 138, 138, 138, 134, 134, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 140, 140, 140, 140, 140, 140,
	140, 140, 148, 148, 141, 141, 146, 146, 147, 147,
	147, 144, 144, 145, 145, 142, 142, 142, 143, 143,
	151, 151, 163, 163, 162, 162, 162, 153, 153, 159,
	159, 159, 159, 159, 152, 152, 161, 161, 160, 156,
	156, 156, 157, 157, 157, 158, 158, 158, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 178,
	178, 179, 179, 179, 179, 179, 179, 179, 179, 166,
	164, 164, 165, 165, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 180, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 126, 126, 125, 125, 125, 124,
	124, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 103, 103,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	181, 181, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 129, 129, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 78, 78, 32, 32,
	76, 76, 77, 79, 79, 75, 75, 75, 60, 60,
	60, 60, 60, 60, 60, 60, 62, 62, 62, 80,
	80, 81, 81, 82, 82, 83, 83, 84, 85, 85,
	85, 86, 86, 86, 86, 87, 87, 87, 59, 59,
	59, 59, 59, 59, 88, 88, 88, 88, 92, 92,
	70, 70, 72, 72, 71, 73, 93, 93, 97, 94,
	94, 98, 98, 98, 96, 96, 96, 121, 121, 121,
	101, 101, 109, 109, 110, 110, 102, 102, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 112, 112,
	112, 113, 113, 116, 116, 117, 117, 122, 122, 123,
	123, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 175, 176, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 9, 11, 11, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 2, 3, 1, 1, 1, 1,
	1, 2, 3, 3, 3, 3, 3, 3, 3, 4,
	2, 3, 2, 3, 2, 3, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 1, 1, 4, 4, 4,
	5, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 3, 3, 0, 2,
	5, 4, 1, 2, 2, 3, 2, 0, 1, 2,
	3, 3, 2, 2, 1, 1, 1, 3, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 11,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 0, 1, 0, 2,
	1, 2, 4, 0, 2, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 0,
	3, 0, 2, 0, 3, 1, 3, 2, 0, 1,
	1, 0, 2, 4, 4, 0, 2, 4, 2, 1,
	3, 5, 4, 6, 1, 3, 3, 5, 0, 5,
	1, 3, 1, 2, 3, 1, 1, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 1, 1, 1, 1,
	1, 1, 0, 2, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 140, 115, 133, 48, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -175, 8, 236,
	52, -174, 251, -82, 15, -26, 5, -24, -180, -24,
	-24, -24, -24, -24, -154, 52, -120, 120, 69, 148,
	228, 117, 118, 131, -102, 120, 122, 118, 118, 119,
	120, 228, 117, 118, -51, -122, 55, -115, 244, 152,
	163, 157, 185, 177, 174, 178, 215, 64, 155, 224,
	136, 172, 168, 166, 27, 190, 249, 167, 129, 128,
	191, 195, 216, 161, 162, 218, 189, 130, 31, 246,
	33, 144, 219, 193, 188, 184, 187, 160, 183, 37,
	197, 196, 198, 214, 180, 169, 18, 222, 139, 142,
	192, 194, 124, 146, 248, 220, 165, 143, 138, 223,
	156, 217, 226, 36, 202, 159, 127, 153, 150, 181,
	145, 170, 171, 186, 158, 182, 154, 147, 140, 225,
	203, 250, 179, 175, 176, 151, 120, 148, 149, 207,
	208, 209, 210, 247, 221, 173, 204, 118, 105, 178,
	111, 205, 119, 31, 146, -131, 118, -104, 149, 207,
	208, 209, 210, 55, 217, 216, 211, -122, 154, -127,
	-127, -127, -127, -127, -2, -86, 17, 16, -5, -3,
	-175, 6, 20, 21, -30, 38, 39, -25, -36, 96,
	-37, -122, -56, 71, -61, 28, 55, -115, 23, -60,
	-57, -75, -73, -74, 105, 106, 94, 95, 102, 72,
	107, -65, -63, -64, -66, 57, 56, 65, 58, 59,
	60, 61, 66, 67, 68, -116, -71, -175, 42, 43,
	237, 238, 239, 240, 243, 241, 74, 32, 227, 235,
	234, 233, 231, 232, 229, 230, 123, 228, 100, 236,
	-102, -39, -40, -41, -42, -53, -74, -175, -51, 11,
	-46, -51, -94, -130, 154, -98, 217, 216, -117, -96,
	-116, -114, 215, 178, 214, 55, -115, 116, 70, 22,
	24, 200, 73, 105, 16, 74, 104, 237, 111, 46,
	229, 230, 227, 239, 240, 228, 205, 28, 10, 25,
	134, 21, 98, 113, 77, 78, 137, 23, 135, 68,
	19, 49, 11, 13, 14, 123, 122, 89, 119, 44,
	8, 107, 26, 86, 40, 132, 42, 87, 17, 231,
	232, 30, 243, 141, 100, 47, 34, 71, 66, 50,
	69, 15, 45, 88, 114, 236, 43, 117, 6, 242,
	29, 133, 41, 118, 206, 76, 121, 67, 5, 131,
	9, 48, 51, 233, 234, 235, 32, 75, 12, -155,
	-149, 55, 119, -51, 236, -116, -110, 123, -110, -110,
	118, -51, -51, -109, 123, 55, -109, -109, -109, -51,
	108, -51, 55, 29, 228, 55, 146, 118, 147, 120,
	-128, -175, -117, -128, -128, -128, 150, 151, -128, -105,
	212, 50, -128, -176, 54, -87, 19, 30, -37, -122,
	-83, -84, -37, -82, -2, -24, 34, -28, 21, 63,
	11, -119, 70, 69, 86, -118, 22, -116, 57, 108,
	-37, -58, 89, 71, 87, 88, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 104,
	79, 80, 81, 82, 83, 84, 85, -103, -175, -74,
	-175, 109, 110, -61, -61, -61, -61, -61, -61, -61,
	-175, -2, -69, -37, -175, -175, -175, -175, -175, -175,
	-175, -175, -175, -78, -37, -175, -181, -175, -181, -181,
	-181, -181, -181, -181, -181, -175, -175, -175, -175, -52,
	26, -51, 29, 53, -47, -49, -48, -50, 40, 44,
	46, 41, 42, 43, 47, -126, 22, -39, -175, -125,
	142, -124, 22, -122, 57, -51, -46, -177, 53, 11,
	51, 53, -94, 154, -95, -99, 218, 220, 79, -121,
	-116, 57, 28, 29, 54, 53, -150, -133, -137, -134,
	-139, -138, -140, -135, -136, 177, 245, 174, 178, 175,
	105, 179, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 29, 136, 170, 171, 172, 173, 191, 192,
	193, 194, 195, 196, 197, 198, 157, 158, 159, 160,
	161, 162, 163, 165, 166, 167, 168, 169, -116, -128,
	120, -171, 51, 55, 71, 55, -51, -51, -128, 121,
	-51, 23, 50, -51, 55, 55, -123, -122, -114, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -107,
	206, 213, -51, 9, 89, 53, 18, 108, 53, -85,
	24, 25, -86, -176, -30, -62, -116, 58, 61, -29,
	41, -51, -37, -37, -67, 66, 71, 67, 68, -118,
	96, -123, -117, -114, -61, -68, -71, -74, 62, 89,
	87, 88, 73, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -129, 55,
	57, 55, -60, -60, -116, -35, 21, -34, -36, -176,
	53, -176, -2, -34, -34, -37, -37, -75, -116, -122,
	-75, -34, -28, -76, -77, 75, -75, -176, -34, -35,
	-34, -34, -90, 142, -51, -93, -97, -75, -40, -41,
	-41, -40, -41, 40, 40, 40, 45, 40, 45, 40,
	-48, -122, -176, -54, 48, 122, 49, -175, -124, -90,
	51, -39, -51, -98, -95, 53, 219, 221, 222, 50,
	-37, -143, 104, -156, -157, -158, -117, 57, 58, -149,
	-151, -159, 124, 127, 131, -152, 119, 132, 66, 71,
	28, 50, 200, 124, 132, 131, 64, -144, 203, -141,
	52, -141, -141, 176, -141, -141, -141, -142, 178, -142,
	-142, -142, 52, 52, -141, -141, -141, -146, 52, -146,
	-146, -147, 52, -147, 50, 51, -51, -169, 247, -170,
	55, -128, 23, -128, -111, 116, 113, 114, -166, 112,
	200, 178, 64, 28, 15, 237, 142, 250, 55, 143,
	-51, -51, -128, -106, 11, 89, 36, -37, -37, -123,
	-84, -87, -101, 19, 11, 32, 32, -34, 66, 67,
	68, 108, -175, -68, -61, -61, -61, -33, 137, 70,
	-176, -176, -34, 53, -37, -176, -176, -176, 53, 51,
	22, 53, 11, 108, 53, 11, -176, -34, -79, -77,
	77, -37, -176, -176, -176, -176, -176, -59, 29, 32,
	-2, -175, -175, -55, 53, 12, 79, -44, -43, 50,
	51, -45, 50, -43, 40, 40, 119, 119, 119, -91,
	-116, -55, -39, -55, -99, -100, 223, 220, 226, 55,
	53, -158, 79, 52, 132, -152, -152, 55, 55, 66,
	57, 58, 59, 66, 227, 65, 9, 132, 132, 57,
	-145, 204, 58, -142, -142, -141, -142, -143, 29, -143,
	-143, -143, -148, 57, -148, 58, 58, -51, -116, -128,
	-168, -167, -117, -127, -120, -179, 148, 125, 126, 129,
	128, 55, 124, 127, 142, -172, 148, 125, 126, 129,
	128, 55, 119, 132, 124, 127, 142, 131, -112, -113,
	121, 22, 119, 132, 142, -128, -108, 87, 12, -122,
	-122, 37, 108, -51, -38, 11, 96, -117, -35, -33,
	70, -61, -61, -176, -36, -132, 105, 174, 136, 172,
	168, 189, 180, 202, 170, 203, -129, -132, -61, -61,
	-117, -61, -61, 244, -82, 78, -37, 76, -92, 50,
	-93, -70, -72, -71, -175, -2, -88, -116, -91, -82,
	-97, -37, -37, -37, 52, -37, -175, -175, -175, -176,
	53, -82, -55, 220, 224, 225, -157, -158, -161, -160,
	-116, 55, 55, 227, 54, -143, -143, -142, -143, 55,
	105, 54, 53, 54, 53, 54, 53, 52, 51, 50,
	53, 79, -178, 119, 132, -127, -116, -127, -116, -51,
	-127, -116, 57, -37, -55, -39, -176, -61, -176, -141,
	-141, -141, -147, -141, 162, -141, 162, -176, -176, -176,
	53, 19, -176, 53, 19, -175, -32, 242, -37, 27,
	-92, 53, -176, -176, -176, 53, 108, -176, -86, -89,
	-116, -89, -89, -89, -125, -116, -86, 54, 53, -141,
	-143, -142, 57, -142, 58, 58, -89, -116, -51, -167,
	-158, -116, 52, 26, -80, 13, -142, 55, -61, -61,
	-61, -61, -61, -176, 57, 132, -72, 32, -2, -175,
	-116, -116, 53, 54, -176, -176, -176, -54, -163, -162,
	51, 130, 64, -160, -143, -143, 54, 54, 54, 52,
	52, 52, -89, -175, -81, 14, 16, -176, -176, -176,
	-176, -31, 89, 247, 9, -70, -2, 108, -116, -162,
	55, -153, 79, 57, -89, -89, -89, 54, -164, -165,
	142, -37, -69, -176, 245, 47, 248, -93, -176, -116,
	58, 54, 54, 54, -171, -176, 53, -116, 37, 246,
	249, -169, -165, 32, 37, 144, 247, 145, 248, -175,
	249, -61, 141, -176, -176,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 523, 0, 292, 292, 292, 292, 292, 292, 0,
	69, 576, 0, 0, 0, 0, -2, 282, 283, 0,
	285, 286, 794, 794, 794, 794, 794, 0, 33, 34,
	792, 1, 3, 531, 0, 0, 296, 299, 294, 0,
	576, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	574, 574, 574, 70, 0, 0, 577, 0, 572, 0,
	572, 572, 572, 0, 241, 363, 597, 598, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 0, 0, 0,
	0, 795, 795, 795, 795, 0, 795, 270, 259, 261,
	262, 263, 264, 795, 279, 280, 269, 281, 284, 287,
	288, 289, 290, 291, 27, 535, 0, 0, 523, 29,
	0, 292, 297, 298, 302, 300, 301, 293, 0, 310,
	314, 0, 371, 0, 376, 378, -2, -2, 0, 413,
	414, 415, 416, 417, 0, 0, 0, 0, 0, 0,
	0, 440, 441, 442, 443, 508, 509, 510, 511, 512,
	513, 514, 515, 380, 381, 505, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 496, 0, 470, 470,
	470, 470, 470, 470, 470, 470, 0, 0, 0, 0,
	0, 0, 321, 323, 324, 325, 344, 0, 346, 0,
	0, 41, 45, 0, 771, 559, -2, -2, 0, 0,
	595, 596, -2, 700, -2, 593, 594, 601, 602, 603,
	604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 619, 620, 621, 622, 623,
	624, 625, 626, 627, 628, 629, 630, 631, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 0,
	81, 0, 0, 795, 0, 71, 0, 0, 0, 0,
	0, 795, 0, 0, 0, 0, 0, 0, 0, 240,
	0, 242, 795, 795, 795, 795, 795, 795, 795, 795,
	251, 796, 797, 252, 253, 254, 795, 795, 256, 0,
	271, 0, 265, 28, 793, 22, 0, 0, 532, 0,
	524, 525, 528, 531, 27, 299, 0, 304, 303, 295,
	0, 311, 0, 0, 0, 315, 0, 317, 318, 0,
	374, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 399, 400, 401, 402, 403, 404, 377, 0, 391,
	0, 0, 0, 433, 434, 435, 436, 437, 438, 0,
	306, 27, 0, 411, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 0, 497, 0, 462, 0, 463, 464,
	465, 466, 467, 468, 469, 0, 306, 0, 0, 43,
	0, 362, 0, 0, 0, 0, 0, 0, 351, 0,
	0, 354, 0, 0, 0, 0, 345, 0, 0, 365,
	744, 347, 0, 349, 350, -2, 0, 0, 0, 39,
	40, 0, 46, 771, 48, 49, 0, 0, 0, 168,
	567, 568, 569, 565, 189, 0, 84, 90, 161, 86,
	87, 88, 89, 154, 107, 125, 126, 154, 154, 154,
	154, 154, 165, 165, 165, 165, 137, 138, 139, 140,
	141, 0, 0, 120, 154, 154, 154, 124, 144, 145,
	146, 147, 148, 149, 150, 151, 108, 109, 110, 111,
	112, 113, 114, 156, 156, 156, 158, 158, 0, 64,
	0, 74, 0, 795, 0, 795, 79, 0, 206, 0,
	235, 573, 0, 795, 238, 239, 364, 599, 600, 243,
	244, 245, 246, 247, 248, 249, 250, 255, 258, 272,
	266, 267, 260, 536, 0, 0, 0, 0, 0, 527,
	529, 530, 535, 30, 302, 0, 516, 0, 0, 0,
	305, 25, 372, 373, 375, 392, 0, 394, 396, 316,
	312, 0, 506, -2, 382, 383, 407, 408, 409, 0,
	0, 0, 0, 405, 387, 0, 418, 419, 420, 421,
	422, 423, 424, 425, 426, 427, 428, 429, 432, 481,
	482, 0, 430, 431, 439, 0, 0, 307, 308, 410,
	0, 554, 27, 0, 0, 0, 0, 0, 505, 0,
	0, 0, 0, 503, 500, 0, 0, 471, 0, 0,
	0, 0, 0, 0, 361, 369, 556, 0, 322, 340,
	342, 0, 337, 352, 353, 355, 0, 357, 0, 359,
	360, 326, 327, 328, 0, 0, 0, 0, 348, 369,
	0, 369, 42, 560, 47, 0, 0, 52, 53, 561,
	562, 563, 0, 80, 190, 192, 195, 196, 197, 82,
	83, 0, 0, 0, 0, 0, 184, 185, 91, 0,
	0, 0, 100, 0, 102, 104, 0, 163, 162, 106,
	0, 165, 165, 154, 165, 131, 132, 168, 0, 168,
	168, 168, 0, 0, 121, 122, 123, 115, 0, 116,
	117, 118, 0, 119, 0, 0, 795, 66, 0, 72,
	73, 67, 575, 68, 794, 69, 0, 588, 207, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 0,
	234, 795, 237, 275, 0, 0, 0, 533, 534, 0,
	526, 23, 0, 570, 571, 517, 518, 319, 393, 395,
	397, 0, 306, 384, 405, 388, 0, 385, 0, 0,
	379, 444, 0, 0, 412, -2, 447, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 523, 0, 501,
	0, 0, 461, 472, 473, 474, 475, 548, 0, 0,
	-2, 0, 0, 523, 0, 0, 0, 334, 341, 0,
	0, 335, 0, 336, 356, 358, 0, 0, 0, 0,
	332, 523, 369, 38, 50, 51, 0, 0, 57, 169,
	0, 193, 0, 0, 179, 0, 0, 182, 183, 92,
	93, 94, 95, 96, 97, 98, 0, 101, 103, 105,
	85, 164, 0, 168, 168, 165, 168, 133, 0, 134,
	135, 136, 0, 152, 0, 0, 0, 0, 0, 65,
	75, 76, 0, 198, 0, 794, 0, 221, 222, 223,
	224, 225, 226, 227, 228, 794, 0, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 0, 794,
	589, 590, 591, 592, 0, 236, 257, 0, 0, 273,
	274, 537, 0, 24, 369, 0, 313, 507, 0, 386,
	0, 406, 389, 445, 309, 0, 154, 154, 486, 154,
	158, 489, 154, 491, 154, 494, 0, 0, 0, 0,
	506, 0, 0, 0, 498, 460, 504, 0, 31, 0,
	548, 538, 550, 552, 0, 27, 0, 544, 0, 531,
	557, 370, 558, 338, 0, 343, 0, 0, 0, 346,
	0, 531, 37, 54, 55, 56, 191, 194, 0, 186,
	154, 180, 181, 99, 155, 127, 128, 168, 129, 166,
	167, 165, 0, 165, 0, 159, 0, 0, 0, 0,
	0, 0, 0, 219, 220, 200, 0, 201, 203, 204,
	205, 0, 276, 277, 519, 320, 446, 390, 449, 483,
	165, 487, 488, 490, 492, 493, 495, 451, 450, 452,
	0, 0, 455, 0, 0, 0, 0, 0, 502, 0,
	32, 0, 553, -2, 0, 0, 0, 44, 35, 0,
	330, 0, 0, 0, 365, 333, 36, 171, 0, 188,
	130, 168, 153, 168, 0, 0, 0, 0, 0, 77,
	78, 0, 0, 0, 521, 0, 484, 485, 0, 0,
	0, 0, 476, 459, 499, 0, 551, 0, -2, 0,
	546, 545, 0, 339, 366, 367, 368, 329, 170, 172,
	0, 177, 0, 187, 142, 143, 157, 160, 61, 0,
	0, 0, 0, 0, 26, 0, 0, 453, 454, 456,
	457, 0, 0, 0, 0, 541, 27, 0, 331, 173,
	174, 0, 178, 176, 0, 0, 0, 71, 0, 230,
	0, 522, 520, 458, 0, 0, 0, 549, -2, 547,
	175, 63, 62, 199, 74, 229, 0, 0, 477, 0,
	480, 202, 231, 0, 478, 0, 0, 0, 0, 0,
	479, 0, 0, 232, 233,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:303
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:308
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:309
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:313
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:336
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:344
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:348
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:361
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:367
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:371
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:377
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:381
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:388
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:400
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:412
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:416
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:428
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:441
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:442
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:446
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:450
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:455
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:459
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:465
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:469
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:483
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:487
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:493
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:497
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:501
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:507
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:511
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:525
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:529
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:535
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:540
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:555
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:570
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:584
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:588
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:592
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:600
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:604
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:609
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:613
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:618
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:622
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:628
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:633
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:638
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:644
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:649
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:655
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:661
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:668
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:675
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:680
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:684
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:690
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:695
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:706
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:716
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:721
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:726
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:731
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:736
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:741
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:746
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:751
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:756
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:761
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:766
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:771
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:776
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:781
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:786
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:793
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:798
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:834
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:888
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:892
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:922
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:926
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:930
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:934
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:938
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:942
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:946
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:950
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:954
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:958
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:973
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:981
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:985
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:989
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:993
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1003
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1008
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.optVal = nil
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1034
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1056
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1061
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1078
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.str = ""
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1103
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1107
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1113
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1117
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1160
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1164
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1170
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1180
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1185
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1189
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1193
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1201
		{
			yyVAL.str = yyDollar[1].str
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1205
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1209
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1215
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1219
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1223
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1229
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:1233
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[6].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 202:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1267
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1277
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1282
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1287
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1291
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 229:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1330
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 232:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1340
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 233:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1356
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1364
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1369
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1377
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1387
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1391
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1396
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1402
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1406
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1410
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1427
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1431
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1435
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1443
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1447
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1451
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1455
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1459
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1469
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1473
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1477
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1481
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1489
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1493
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1503
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1509
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1513
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1523
		{
			yyVAL.str = "extended "
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1529
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1533
		{
			yyVAL.str = "full "
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1539
		{
			yyVAL.str = ""
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1543
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1547
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1553
		{
			yyVAL.showFilter = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1557
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1567
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1571
		{
			yyVAL.str = SessionStr
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.str = GlobalStr
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1581
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1591
		{
			yyVAL.statement = &Begin{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1595
		{
			yyVAL.statement = &Begin{}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.statement = &Commit{}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1607
		{
			yyVAL.statement = &Rollback{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1613
		{
			yyVAL.statement = &OtherRead{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1617
		{
			yyVAL.statement = &OtherRead{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1621
		{
			yyVAL.statement = &OtherRead{}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1625
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1634
		{
			setAllowComments(yylex, true)
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1638
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.bytes2 = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1648
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1654
		{
			yyVAL.str = UnionStr
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1658
		{
			yyVAL.str = UnionAllStr
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1662
		{
			yyVAL.str = UnionDistinctStr
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.str = ""
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1671
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1675
		{
			yyVAL.str = SQLCacheStr
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.str = DistinctStr
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1693
		{
			yyVAL.str = StraightJoinHint
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.selectExprs = nil
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1702
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1712
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1718
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1722
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1726
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1730
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1735
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1739
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1743
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1750
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1755
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1765
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1769
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1779
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1783
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1787
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1793
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 329:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1797
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1803
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1807
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1813
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1817
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1830
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1834
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1838
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1842
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1848
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1850
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1854
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1856
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1860
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1862
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1865
		{
			yyVAL.empty = struct{}{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1867
		{
			yyVAL.empty = struct{}{}
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1870
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1874
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1878
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1885
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1891
		{
			yyVAL.str = JoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1895
		{
			yyVAL.str = JoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1899
		{
			yyVAL.str = JoinStr
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1905
		{
			yyVAL.str = StraightJoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1911
		{
			yyVAL.str = LeftJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1915
		{
			yyVAL.str = LeftJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1919
		{
			yyVAL.str = RightJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1923
		{
			yyVAL.str = RightJoinStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1929
		{
			yyVAL.str = NaturalJoinStr
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1933
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1943
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1947
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1953
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1957
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1962
		{
			yyVAL.indexHints = nil
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1966
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 367:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1970
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 368:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1974
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 369:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1979
		{
			yyVAL.expr = nil
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1983
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1989
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1993
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1997
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2001
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2005
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2009
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2013
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2019
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2023
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2029
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2033
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2039
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2043
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2047
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2051
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2055
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2059
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2063
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 389:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2067
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 390:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2071
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2075
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2081
		{
			yyVAL.str = IsNullStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2085
		{
			yyVAL.str = IsNotNullStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2089
		{
			yyVAL.str = IsTrueStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2093
		{
			yyVAL.str = IsNotTrueStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2097
		{
			yyVAL.str = IsFalseStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2101
		{
			yyVAL.str = IsNotFalseStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2107
		{
			yyVAL.str = EqualStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2111
		{
			yyVAL.str = LessThanStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2115
		{
			yyVAL.str = GreaterThanStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2119
		{
			yyVAL.str = LessEqualStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2123
		{
			yyVAL.str = GreaterEqualStr
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2127
		{
			yyVAL.str = NotEqualStr
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2131
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2136
		{
			yyVAL.expr = nil
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2140
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2146
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2150
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2154
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2160
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2166
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2170
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2176
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2180
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2184
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2188
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2192
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2212
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2216
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2220
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2224
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2228
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2232
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2236
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2240
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2244
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2248
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2252
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2256
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2260
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2264
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2272
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2286
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2290
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2294
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 444:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2312
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2316
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2320
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2330
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 448:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2334
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2338
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2342
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2346
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2350
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 453:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2354
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2358
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2362
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 456:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2366
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 457:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:2370
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 458:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:2374
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 459:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:2378
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2382
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2386
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2396
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2400
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2404
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2408
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2413
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2418
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2423
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2428
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2446
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2450
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2454
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2460
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2464
		{
			yyVAL.str = BooleanModeStr
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2468
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 479:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:2472
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2476
		{
			yyVAL.str = QueryExpansionStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2486
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2492
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2496
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2500
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2504
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2508
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2512
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2518
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2522
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2526
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2530
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2534
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2538
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2542
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2547
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2551
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2556
		{
			yyVAL.str = string("")
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2560
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2566
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2570
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2576
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 503:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2581
		{
			yyVAL.expr = nil
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2585
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2591
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2595
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2599
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2605
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2609
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2613
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2617
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2621
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2625
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2629
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2633
		{
			yyVAL.expr = &NullVal{}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2639
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2648
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2652
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2657
		{
			yyVAL.exprs = nil
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2661
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2666
		{
			yyVAL.expr = nil
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2670
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 523:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2675
		{
			yyVAL.orderBy = nil
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2679
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2685
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2689
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2695
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2700
		{
			yyVAL.str = AscScr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2704
		{
			yyVAL.str = AscScr
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2708
		{
			yyVAL.str = DescScr
		}
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2713
		{
			yyVAL.limit = nil
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2717
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2721
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2725
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2730
		{
			yyVAL.str = ""
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2734
		{
			yyVAL.str = ForUpdateStr
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2738
		{
			yyVAL.str = ShareModeStr
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2751
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2755
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2759
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2764
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:2768
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:2772
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2779
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2783
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2787
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2791
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2796
		{
			yyVAL.updateExprs = nil
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:2800
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2806
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2810
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2816
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2820
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2826
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2832
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2842
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2846
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2852
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2858
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2862
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2868
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2872
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2876
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2883
		{
			yyVAL.bytes = []byte("charset")
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2890
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2894
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2898
		{
			yyVAL.expr = &Default{}
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2907
		{
			yyVAL.byt = 0
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:2909
		{
			yyVAL.byt = 1
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2917
		{
			yyVAL.str = ""
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2919
		{
			yyVAL.str = IgnoreStr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2923
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2925
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2927
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2929
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2931
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2933
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2935
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2937
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2939
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2941
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:2944
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2946
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2948
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2952
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2954
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2958
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2962
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2969
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2975
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2979
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2986
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3203
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3212
		{
			decNesting(yylex)
		}
	case 794:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3217
		{
			forceEOF(yylex)
		}
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:3222
		{
			forceEOF(yylex)
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3226
		{
			forceEOF(yylex)
		}
	case 797:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:3230
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
