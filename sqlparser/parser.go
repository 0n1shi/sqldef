// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
	blockStatement       []Statement
	localVariable        *LocalVariable
	localVariables       []*LocalVariable
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const DECLARE = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OFF = 57409
const OR = 57410
const AND = 57411
const NOT = 57412
const BETWEEN = 57413
const CASE = 57414
const WHEN = 57415
const THEN = 57416
const ELSE = 57417
const END = 57418
const LE = 57419
const GE = 57420
const NE = 57421
const NULL_SAFE_EQUAL = 57422
const IS = 57423
const LIKE = 57424
const REGEXP = 57425
const IN = 57426
const SHIFT_LEFT = 57427
const SHIFT_RIGHT = 57428
const DIV = 57429
const MOD = 57430
const UNARY = 57431
const COLLATE = 57432
const BINARY = 57433
const UNDERSCORE_BINARY = 57434
const INTERVAL = 57435
const JSON_EXTRACT_OP = 57436
const JSON_UNQUOTE_EXTRACT_OP = 57437
const CREATE = 57438
const ALTER = 57439
const DROP = 57440
const RENAME = 57441
const ANALYZE = 57442
const ADD = 57443
const SCHEMA = 57444
const TABLE = 57445
const INDEX = 57446
const VIEW = 57447
const TO = 57448
const IGNORE = 57449
const IF = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const REFERENCES = 57454
const SPATIAL = 57455
const FULLTEXT = 57456
const FOREIGN = 57457
const KEY_BLOCK_SIZE = 57458
const POLICY = 57459
const WHILE = 57460
const UNIQUE = 57461
const KEY = 57462
const SHOW = 57463
const DESCRIBE = 57464
const EXPLAIN = 57465
const DATE = 57466
const ESCAPE = 57467
const REPAIR = 57468
const OPTIMIZE = 57469
const TRUNCATE = 57470
const MAXVALUE = 57471
const PARTITION = 57472
const REORGANIZE = 57473
const LESS = 57474
const THAN = 57475
const PROCEDURE = 57476
const TRIGGER = 57477
const VINDEX = 57478
const VINDEXES = 57479
const STATUS = 57480
const VARIABLES = 57481
const RESTRICT = 57482
const CASCADE = 57483
const NO = 57484
const ACTION = 57485
const PERMISSIVE = 57486
const RESTRICTIVE = 57487
const PUBLIC = 57488
const CURRENT_USER = 57489
const SESSION_USER = 57490
const PAD_INDEX = 57491
const FILLFACTOR = 57492
const IGNORE_DUP_KEY = 57493
const STATISTICS_NORECOMPUTE = 57494
const STATISTICS_INCREMENTAL = 57495
const ALLOW_ROW_LOCKS = 57496
const ALLOW_PAGE_LOCKS = 57497
const BEFORE = 57498
const AFTER = 57499
const EACH = 57500
const ROW = 57501
const SCROLL = 57502
const CURSOR = 57503
const OPEN = 57504
const CLOSE = 57505
const FETCH = 57506
const PRIOR = 57507
const FIRST = 57508
const LAST = 57509
const DEALLOCATE = 57510
const BEGIN = 57511
const START = 57512
const TRANSACTION = 57513
const COMMIT = 57514
const ROLLBACK = 57515
const BIT = 57516
const TINYINT = 57517
const SMALLINT = 57518
const SMALLSERIAL = 57519
const MEDIUMINT = 57520
const INT = 57521
const INTEGER = 57522
const SERIAL = 57523
const BIGINT = 57524
const BIGSERIAL = 57525
const INTNUM = 57526
const REAL = 57527
const DOUBLE = 57528
const PRECISION = 57529
const FLOAT_TYPE = 57530
const DECIMAL = 57531
const NUMERIC = 57532
const SMALLMONEY = 57533
const MONEY = 57534
const TIME = 57535
const TIMESTAMP = 57536
const DATETIME = 57537
const YEAR = 57538
const DATETIMEOFFSET = 57539
const DATETIME2 = 57540
const SMALLDATETIME = 57541
const CHAR = 57542
const VARCHAR = 57543
const VARYING = 57544
const BOOL = 57545
const CHARACTER = 57546
const VARBINARY = 57547
const NCHAR = 57548
const NVARCHAR = 57549
const NTEXT = 57550
const UUID = 57551
const TEXT = 57552
const TINYTEXT = 57553
const MEDIUMTEXT = 57554
const LONGTEXT = 57555
const CITEXT = 57556
const BLOB = 57557
const TINYBLOB = 57558
const MEDIUMBLOB = 57559
const LONGBLOB = 57560
const JSON = 57561
const JSONB = 57562
const ENUM = 57563
const GEOMETRY = 57564
const POINT = 57565
const LINESTRING = 57566
const POLYGON = 57567
const GEOMETRYCOLLECTION = 57568
const MULTIPOINT = 57569
const MULTILINESTRING = 57570
const MULTIPOLYGON = 57571
const ARRAY = 57572
const NOW = 57573
const GETDATE = 57574
const BPCHAR = 57575
const NULLX = 57576
const AUTO_INCREMENT = 57577
const APPROXNUM = 57578
const SIGNED = 57579
const UNSIGNED = 57580
const ZEROFILL = 57581
const ZONE = 57582
const AUTOINCREMENT = 57583
const DATABASES = 57584
const TABLES = 57585
const VITESS_KEYSPACES = 57586
const VITESS_SHARDS = 57587
const VITESS_TABLETS = 57588
const VSCHEMA_TABLES = 57589
const EXTENDED = 57590
const FULL = 57591
const PROCESSLIST = 57592
const NAMES = 57593
const CHARSET = 57594
const GLOBAL = 57595
const SESSION = 57596
const ISOLATION = 57597
const LEVEL = 57598
const READ = 57599
const WRITE = 57600
const ONLY = 57601
const REPEATABLE = 57602
const COMMITTED = 57603
const UNCOMMITTED = 57604
const SERIALIZABLE = 57605
const CURRENT_TIMESTAMP = 57606
const DATABASE = 57607
const CURRENT_DATE = 57608
const CURRENT_TIME = 57609
const LOCALTIME = 57610
const LOCALTIMESTAMP = 57611
const UTC_DATE = 57612
const UTC_TIME = 57613
const UTC_TIMESTAMP = 57614
const REPLACE = 57615
const CONVERT = 57616
const CAST = 57617
const SUBSTR = 57618
const SUBSTRING = 57619
const GROUP_CONCAT = 57620
const SEPARATOR = 57621
const INHERIT = 57622
const MATCH = 57623
const AGAINST = 57624
const BOOLEAN = 57625
const LANGUAGE = 57626
const WITH = 57627
const WITHOUT = 57628
const PARSER = 57629
const QUERY = 57630
const EXPANSION = 57631
const UNUSED = 57632
const GENERATED = 57633
const ALWAYS = 57634
const IDENTITY = 57635
const SEQUENCE = 57636
const INCREMENT = 57637
const MINVALUE = 57638
const CACHE = 57639
const CYCLE = 57640
const OWNED = 57641
const NONE = 57642
const CLUSTERED = 57643
const NONCLUSTERED = 57644
const REPLICATION = 57645
const INCLUDE = 57646
const TYPECAST = 57647
const CHECK = 57648

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"DECLARE",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"WHILE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"SCROLL",
	"CURSOR",
	"OPEN",
	"CLOSE",
	"FETCH",
	"PRIOR",
	"FIRST",
	"LAST",
	"DEALLOCATE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	122, 135,
	-2, 125,
	-1, 36,
	155, 447,
	156, 447,
	-2, 437,
	-1, 272,
	110, 780,
	-2, 776,
	-1, 273,
	110, 781,
	-2, 777,
	-1, 343,
	81, 985,
	-2, 81,
	-1, 344,
	81, 936,
	-2, 82,
	-1, 349,
	81, 915,
	-2, 747,
	-1, 351,
	81, 959,
	-2, 749,
	-1, 663,
	52, 41,
	54, 41,
	-2, 43,
	-1, 808,
	110, 783,
	-2, 779,
	-1, 1051,
	5, 28,
	-2, 582,
	-1, 1076,
	5, 27,
	-2, 721,
	-1, 1177,
	5, 27,
	-2, 87,
	-1, 1396,
	5, 28,
	-2, 722,
	-1, 1479,
	5, 27,
	-2, 724,
	-1, 1632,
	5, 28,
	-2, 725,
	-1, 1758,
	5, 27,
	-2, 50,
}

const yyPrivate = 57344

const yyLast = 15521

var yyAct = [...]int{
	273, 21, 1722, 1079, 1723, 1529, 1492, 1569, 1622, 985,
	1292, 522, 740, 872, 1607, 1415, 590, 277, 1168, 520,
	509, 1265, 1110, 251, 302, 1402, 784, 268, 1293, 475,
	890, 1639, 1113, 1266, 657, 89, 1489, 1262, 89, 589,
	3, 1179, 53, 1135, 276, 655, 1141, 993, 920, 980,
	245, 994, 913, 934, 873, 1095, 914, 255, 348, 1238,
	1043, 844, 89, 89, 353, 833, 66, 746, 975, 353,
	1165, 963, 353, 353, 841, 929, 303, 47, 89, 673,
	89, 279, 860, 1084, 345, 473, 89, 250, 810, 528,
	672, 342, 869, 659, 246, 247, 248, 249, 1675, 644,
	691, 534, 1025, 687, 275, 613, 909, 328, 542, 339,
	337, 1149, 950, 947, 260, 329, 52, 1716, 566, 556,
	330, 264, 566, 1318, 47, 559, 560, 561, 562, 563,
	556, 1664, 256, 566, 1421, 1305, 1386, 521, 334, 1306,
	550, 1709, 553, 333, 476, 477, 1428, 1133, 568, 569,
	570, 571, 572, 573, 574, 1766, 551, 552, 549, 555,
	554, 564, 565, 557, 558, 559, 560, 561, 562, 563,
	556, 1573, 1693, 566, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1761, 1630, 566, 1574,
	949, 1169, 1170, 843, 1562, 555, 554, 564, 565, 557,
	558, 559, 560, 561, 562, 563, 556, 1750, 986, 566,
	1668, 1692, 1629, 335, 1383, 521, 557, 558, 559, 560,
	561, 562, 563, 556, 89, 1257, 566, 1702, 353, 353,
	353, 353, 1653, 353, 1390, 486, 1103, 1148, 1287, 1102,
	353, 604, 1104, 1288, 1289, 674, 947, 675, 86, 904,
	905, 903, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 517, 1445, 566, 353, 936, 1145,
	775, 1147, 1146, 952, 1444, 1151, 338, 776, 84, 80,
	81, 82, 943, 1468, 932, 1433, 964, 1520, 864, 1338,
	933, 488, 976, 489, 57, 1432, 531, 530, 1337, 496,
	954, 1435, 1379, 1377, 508, 508, 508, 508, 1708, 508,
	1710, 244, 1764, 1684, 1720, 1602, 508, 476, 477, 59,
	60, 61, 62, 63, 1434, 521, 1531, 1508, 89, 1612,
	748, 749, 1592, 47, 567, 89, 89, 89, 567, 1348,
	1349, 353, 1760, 939, 1748, 935, 944, 353, 576, 567,
	747, 578, 1623, 941, 940, 1216, 577, 513, 514, 870,
	1624, 345, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 1476, 1423, 566, 1654, 588, 1422,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 567,
	603, 605, 605, 605, 605, 605, 605, 605, 605, 1354,
	633, 634, 635, 636, 567, 1563, 1120, 1308, 1418, 1118,
	1213, 656, 930, 1127, 1126, 1355, 333, 1115, 1299, 1732,
	1363, 1553, 1574, 618, 1300, 567, 619, 491, 931, 481,
	77, 1233, 78, 502, 78, 1453, 754, 498, 478, 1094,
	1132, 83, 567, 977, 1093, 891, 893, 664, 964, 301,
	670, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 1092, 1628, 566, 957, 738, 1658, 937,
	1701, 930, 748, 749, 930, 938, 1613, 1614, 1615, 89,
	487, 1660, 567, 223, 79, 1217, 89, 931, 89, 353,
	931, 89, 579, 580, 89, 1754, 1567, 504, 89, 506,
	353, 353, 353, 353, 353, 353, 353, 353, 1214, 1655,
	1212, 1399, 1225, 347, 353, 353, 1059, 1037, 479, 89,
	892, 483, 484, 782, 1215, 945, 546, 946, 503, 505,
	497, 817, 1203, 1332, 353, 1416, 1417, 1419, 89, 1020,
	942, 639, 911, 910, 353, 815, 816, 814, 785, 786,
	663, 788, 532, 521, 787, 779, 763, 606, 607, 608,
	609, 610, 611, 612, 1221, 508, 541, 807, 1585, 540,
	539, 539, 1584, 685, 811, 1583, 508, 508, 508, 508,
	508, 508, 508, 508, 1333, 1582, 541, 541, 353, 1581,
	508, 508, 567, 1580, 540, 539, 1579, 1204, 1577, 1345,
	761, 1082, 1206, 1199, 1200, 808, 1207, 1202, 1201, 845,
	847, 541, 1209, 1205, 676, 853, 856, 1259, 861, 1021,
	1066, 862, 1759, 1208, 861, 863, 1510, 1112, 1506, 1198,
	743, 812, 848, 1507, 1656, 1657, 1659, 1661, 1662, 89,
	1111, 1220, 89, 89, 89, 89, 89, 789, 1112, 806,
	1112, 536, 804, 1640, 89, 47, 76, 89, 874, 501,
	1735, 89, 1112, 480, 1056, 1703, 89, 89, 618, 592,
	353, 619, 1641, 836, 1055, 889, 1054, 347, 347, 347,
	347, 567, 347, 353, 838, 839, 1734, 490, 1123, 347,
	345, 1707, 739, 540, 539, 50, 848, 540, 539, 750,
	1575, 751, 858, 915, 755, 813, 1706, 758, 1704, 866,
	541, 898, 540, 539, 541, 1705, 544, 327, 334, 334,
	334, 334, 334, 333, 333, 333, 333, 333, 1578, 541,
	1642, 1387, 777, 656, 482, 894, 1122, 485, 333, 353,
	1438, 1638, 334, 353, 1152, 353, 89, 333, 89, 1518,
	1447, 796, 887, 89, 895, 89, 896, 875, 89, 353,
	878, 900, 901, 876, 877, 1446, 879, 1314, 1174, 918,
	493, 494, 495, 1172, 965, 966, 967, 968, 1034, 1035,
	1036, 834, 1437, 835, 75, 982, 1152, 849, 850, 781,
	347, 1152, 1475, 857, 1442, 1365, 678, 1166, 1129, 1027,
	1303, 978, 979, 807, 555, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1600, 1771, 566, 508,
	1302, 508, 800, 802, 803, 780, 1301, 865, 801, 867,
	868, 1121, 70, 73, 1105, 508, 988, 540, 539, 811,
	837, 808, 540, 539, 1261, 1483, 1756, 71, 760, 74,
	1412, 1749, 871, 759, 541, 1412, 1715, 1046, 744, 541,
	742, 1047, 1412, 1714, 521, 72, 68, 499, 1051, 1052,
	1053, 1412, 1700, 1026, 1600, 1699, 1080, 1062, 1696, 1695,
	899, 492, 1068, 474, 1038, 1069, 1070, 1071, 1072, 1688,
	521, 1412, 1685, 1595, 1493, 353, 812, 1601, 89, 1600,
	1097, 1594, 1099, 1039, 1483, 1620, 1525, 1495, 1524, 1076,
	1412, 1596, 1483, 1516, 353, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 353, 667, 566, 1483, 521,
	1483, 1484, 1412, 1411, 915, 1519, 353, 1439, 347, 1284,
	521, 1430, 1065, 1098, 1325, 89, 1077, 1078, 846, 347,
	347, 347, 347, 347, 347, 347, 347, 1398, 521, 992,
	1673, 998, 1089, 347, 347, 1128, 1015, 668, 1016, 666,
	1107, 1017, 1341, 1340, 334, 1494, 1335, 1336, 23, 333,
	1335, 1334, 1100, 791, 1049, 521, 1460, 353, 1033, 641,
	521, 1171, 1143, 544, 54, 69, 347, 846, 521, 683,
	682, 1081, 1116, 1117, 1119, 1478, 1228, 1180, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 23, 1263, 1184, 353, 1080,
	1183, 89, 89, 1184, 1177, 50, 1061, 1153, 1154, 89,
	1156, 1157, 1158, 1049, 567, 1081, 1048, 840, 353, 1074,
	640, 1167, 1075, 641, 1058, 1394, 1173, 854, 854, 1049,
	1186, 641, 1063, 854, 897, 1429, 666, 23, 1230, 1449,
	1448, 47, 50, 1570, 641, 1344, 1185, 1187, 1236, 1060,
	1159, 1339, 1161, 1162, 1163, 1164, 1106, 1080, 353, 353,
	1254, 257, 902, 474, 1049, 669, 783, 1057, 1264, 50,
	854, 1762, 874, 1713, 508, 1690, 1598, 270, 874, 1597,
	1267, 1232, 1286, 1589, 50, 1588, 1258, 353, 1550, 353,
	353, 1237, 1517, 1231, 1462, 1283, 1251, 1269, 808, 347,
	954, 1250, 1273, 981, 1324, 1323, 1321, 915, 50, 915,
	1311, 1278, 347, 976, 1272, 1274, 1175, 1176, 1450, 1134,
	1285, 1109, 970, 567, 1491, 969, 953, 65, 930, 1085,
	1086, 1304, 1268, 925, 47, 924, 741, 926, 927, 1290,
	1263, 1088, 757, 928, 931, 1291, 745, 518, 884, 1280,
	1281, 1282, 1309, 885, 882, 1091, 89, 353, 1307, 883,
	1315, 1143, 795, 886, 89, 650, 651, 1090, 983, 881,
	353, 880, 347, 1729, 347, 261, 262, 1727, 1691, 353,
	646, 649, 650, 651, 647, 1310, 648, 652, 347, 1032,
	1224, 89, 646, 649, 650, 651, 647, 353, 648, 652,
	1022, 1319, 1085, 1086, 535, 1031, 353, 1328, 523, 89,
	1160, 1367, 347, 1352, 681, 500, 1351, 533, 1392, 1356,
	524, 1313, 1226, 1721, 785, 786, 1230, 1463, 1358, 990,
	756, 1369, 1455, 1312, 1456, 1457, 1458, 1182, 1371, 984,
	1326, 1327, 1361, 1329, 1330, 1331, 1364, 1454, 654, 535,
	1380, 1381, 1382, 1743, 1368, 1385, 258, 259, 1030, 353,
	1459, 353, 353, 353, 89, 353, 1029, 1347, 1395, 1396,
	1397, 353, 1400, 1375, 1298, 252, 1711, 1401, 1556, 1555,
	253, 54, 1393, 1466, 1081, 334, 1405, 1406, 1407, 1410,
	333, 915, 353, 1420, 995, 996, 997, 1587, 1408, 555,
	554, 564, 565, 557, 558, 559, 560, 561, 562, 563,
	556, 1425, 1681, 566, 1388, 1424, 1316, 1427, 1680, 1436,
	1679, 1137, 1138, 1139, 1096, 353, 353, 1107, 1678, 1142,
	1140, 299, 300, 537, 353, 1297, 1296, 1586, 1564, 1125,
	1431, 1143, 778, 347, 353, 1180, 915, 56, 58, 1044,
	1538, 8, 1535, 7, 1114, 1536, 6, 1188, 581, 582,
	583, 584, 585, 586, 587, 1124, 1451, 1534, 5, 1342,
	1353, 665, 51, 1, 1674, 1605, 1532, 1350, 1611, 353,
	353, 1593, 1452, 1131, 1591, 67, 1441, 1667, 1443, 1474,
	1599, 1317, 1346, 353, 1181, 1197, 987, 1178, 1003, 1267,
	1621, 1635, 1490, 353, 1360, 1485, 1486, 1487, 1477, 922,
	912, 472, 64, 1576, 923, 1440, 347, 1479, 1505, 1488,
	1504, 1503, 1193, 1509, 921, 1467, 1515, 919, 684, 353,
	353, 89, 1521, 1513, 353, 1511, 948, 1150, 951, 1526,
	690, 688, 1542, 353, 689, 1533, 686, 347, 692, 231,
	340, 1268, 653, 677, 1480, 538, 292, 291, 294, 295,
	296, 297, 1211, 1210, 353, 293, 298, 347, 1551, 1557,
	1558, 1559, 1560, 999, 1219, 774, 1019, 1571, 516, 233,
	1565, 575, 1514, 1267, 266, 1028, 1101, 346, 1663, 347,
	1270, 527, 1194, 1190, 1554, 1465, 1195, 1192, 1191, 1064,
	1566, 601, 74, 859, 854, 278, 799, 1271, 1096, 290,
	854, 1144, 1148, 1196, 1542, 287, 289, 1603, 288, 1189,
	1552, 790, 1073, 548, 353, 353, 353, 353, 1522, 567,
	1523, 353, 332, 637, 645, 1268, 347, 47, 347, 1294,
	643, 1619, 642, 1087, 1145, 1083, 1147, 1146, 353, 331,
	1227, 353, 1389, 1626, 1561, 353, 1616, 1618, 1631, 794,
	1636, 1627, 874, 25, 55, 1604, 1632, 263, 19, 353,
	353, 18, 17, 20, 1650, 16, 15, 14, 353, 353,
	1651, 353, 1648, 1649, 1542, 29, 13, 1671, 1665, 1666,
	1652, 12, 353, 1643, 1644, 1645, 1646, 1647, 1542, 11,
	10, 1682, 9, 1541, 353, 1540, 1343, 1539, 1672, 1537,
	526, 4, 254, 1686, 22, 2, 0, 0, 0, 1357,
	0, 1687, 0, 0, 0, 0, 809, 0, 1359, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 1528, 87, 1362, 1712, 243, 0,
	0, 1697, 1698, 0, 353, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 1717, 1542, 1542, 1724, 1718, 0,
	267, 353, 87, 87, 507, 353, 1725, 1726, 0, 0,
	0, 1728, 0, 1731, 0, 0, 0, 0, 87, 0,
	87, 1694, 89, 0, 353, 0, 87, 0, 1740, 0,
	0, 0, 353, 0, 1542, 0, 1542, 1746, 1403, 1746,
	1403, 1403, 1403, 89, 1409, 0, 0, 1733, 0, 1739,
	347, 1753, 0, 0, 0, 0, 1755, 0, 1384, 1738,
	1751, 0, 1741, 0, 0, 353, 0, 525, 529, 0,
	0, 1403, 0, 353, 0, 0, 1542, 1768, 1767, 0,
	1542, 0, 0, 1746, 547, 1763, 0, 1757, 0, 0,
	0, 0, 0, 1758, 0, 0, 0, 0, 0, 1773,
	1774, 0, 0, 0, 347, 347, 0, 0, 0, 0,
	0, 0, 0, 1461, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 1464, 0, 0, 0, 602, 0, 1009,
	47, 555, 554, 564, 565, 557, 558, 559, 560, 561,
	562, 563, 556, 1008, 0, 566, 0, 1765, 0, 0,
	955, 956, 958, 959, 960, 0, 961, 962, 1481, 1482,
	0, 0, 0, 1045, 87, 0, 0, 0, 0, 0,
	1013, 0, 1294, 971, 972, 973, 0, 974, 0, 1007,
	0, 0, 1512, 555, 554, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 0, 0, 566, 1493, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1294, 1527,
	0, 1495, 0, 1530, 0, 0, 0, 257, 0, 48,
	26, 27, 1403, 1040, 1041, 1042, 0, 0, 1004, 1001,
	1002, 1543, 1000, 510, 511, 512, 0, 515, 0, 0,
	0, 28, 0, 1568, 519, 554, 564, 565, 557, 558,
	559, 560, 561, 562, 563, 556, 1752, 0, 566, 0,
	0, 1011, 1014, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 87, 661, 87, 0, 1494,
	0, 0, 555, 554, 564, 565, 557, 558, 559, 560,
	561, 562, 563, 556, 0, 0, 566, 0, 0, 0,
	0, 0, 0, 1606, 1608, 1609, 1610, 0, 0, 0,
	1294, 0, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 0,
	0, 0, 0, 0, 854, 0, 0, 1633, 0, 0,
	1634, 0, 0, 0, 1637, 1006, 1549, 1136, 0, 0,
	0, 0, 1137, 1138, 1139, 0, 1548, 0, 1530, 1294,
	1142, 1140, 299, 300, 797, 798, 0, 1294, 1294, 0,
	1669, 567, 0, 0, 0, 0, 1005, 0, 0, 0,
	0, 1677, 0, 257, 0, 48, 26, 27, 0, 0,
	0, 0, 0, 1689, 0, 0, 0, 1543, 0, 0,
	1544, 1545, 1547, 0, 0, 0, 1546, 28, 0, 0,
	0, 0, 0, 0, 0, 1010, 0, 591, 0, 0,
	851, 852, 0, 567, 1155, 0, 0, 0, 0, 87,
	0, 1012, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 87, 0, 1719, 87, 0, 0, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 1772, 1572, 0,
	1294, 0, 1234, 1235, 1730, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 1252, 1253, 0, 1255, 1256,
	0, 0, 0, 1403, 567, 0, 0, 0, 87, 0,
	0, 1744, 0, 0, 0, 0, 0, 762, 1137, 1138,
	1139, 908, 1549, 753, 0, 0, 1142, 1140, 299, 300,
	0, 49, 1548, 0, 764, 765, 766, 767, 768, 769,
	770, 771, 567, 0, 347, 0, 0, 0, 772, 773,
	0, 0, 1530, 0, 614, 0, 0, 0, 0, 267,
	0, 0, 1144, 1148, 267, 267, 0, 0, 855, 855,
	267, 0, 0, 0, 855, 0, 1544, 1545, 1547, 0,
	0, 0, 1546, 0, 0, 0, 0, 0, 616, 0,
	0, 0, 0, 0, 0, 1145, 0, 1147, 1146, 0,
	0, 0, 0, 0, 267, 267, 267, 267, 0, 87,
	0, 855, 87, 87, 87, 87, 87, 0, 0, 0,
	0, 0, 0, 0, 888, 1023, 1024, 87, 529, 0,
	0, 661, 1320, 1322, 0, 0, 87, 87, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 0, 0,
	0, 0, 23, 24, 48, 26, 27, 0, 0, 617,
	0, 0, 0, 0, 0, 0, 0, 631, 615, 0,
	0, 1370, 42, 0, 620, 0, 28, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 1050, 0, 0, 714, 37, 0, 0, 1239, 50,
	0, 0, 0, 0, 0, 0, 1067, 0, 1144, 1148,
	0, 0, 0, 0, 0, 0, 87, 0, 87, 0,
	0, 0, 0, 87, 0, 87, 1372, 1373, 87, 1374,
	0, 0, 1241, 1376, 0, 1378, 0, 0, 0, 0,
	0, 1145, 0, 1147, 1146, 0, 0, 632, 0, 0,
	0, 0, 0, 762, 0, 0, 0, 0, 0, 30,
	31, 33, 32, 35, 0, 267, 0, 0, 0, 0,
	0, 699, 0, 0, 0, 0, 0, 989, 0, 991,
	0, 1413, 1414, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 1018, 0, 0, 0, 1243, 0, 0,
	0, 1248, 0, 1242, 0, 715, 0, 0, 1240, 0,
	0, 0, 0, 267, 1246, 0, 0, 0, 0, 0,
	0, 1469, 1470, 0, 1471, 1472, 1473, 1244, 1245, 267,
	0, 0, 38, 39, 0, 40, 41, 0, 0, 0,
	0, 1676, 0, 0, 0, 1247, 1249, 0, 0, 0,
	0, 0, 0, 0, 0, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 0, 731, 732, 87, 733,
	734, 735, 737, 736, 716, 717, 718, 722, 720, 719,
	721, 693, 695, 0, 631, 694, 700, 696, 697, 698,
	712, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 713, 723, 724, 725, 726, 727, 728, 729,
	730, 1260, 0, 0, 257, 1130, 48, 26, 27, 0,
	0, 257, 0, 48, 26, 27, 1275, 1276, 1543, 0,
	1277, 0, 0, 1279, 0, 1543, 49, 0, 28, 0,
	0, 0, 0, 0, 0, 28, 0, 0, 0, 0,
	0, 0, 257, 0, 48, 26, 27, 0, 0, 0,
	0, 0, 0, 0, 632, 0, 1543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 28, 0, 0, 229,
	0, 0, 0, 0, 0, 0, 1617, 1617, 1747, 0,
	0, 1222, 1223, 0, 0, 1745, 0, 0, 0, 87,
	0, 0, 0, 239, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 1549, 0, 0, 0, 0, 0, 0,
	1549, 0, 0, 1548, 0, 855, 0, 0, 0, 0,
	1548, 855, 1218, 0, 224, 0, 0, 0, 0, 0,
	226, 0, 0, 0, 0, 714, 1366, 232, 228, 0,
	0, 1549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1548, 0, 0, 0, 0, 0, 1544, 1545, 1547,
	0, 0, 0, 1546, 1544, 1545, 1547, 0, 230, 0,
	1546, 234, 0, 0, 0, 0, 1391, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1544, 1545, 1547, 0, 0,
	0, 1546, 1683, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 87, 1426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 225, 0,
	0, 0, 0, 0, 0, 0, 715, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 87,
	0, 0, 0, 1769, 0, 49, 227, 0, 235, 236,
	237, 238, 242, 0, 0, 0, 0, 241, 240, 0,
	0, 0, 0, 0, 0, 0, 621, 622, 623, 624,
	625, 626, 627, 628, 629, 630, 49, 731, 732, 0,
	733, 734, 735, 737, 736, 716, 717, 718, 722, 720,
	719, 721, 693, 695, 661, 631, 694, 700, 696, 697,
	698, 712, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 713, 723, 724, 725, 726, 727, 728,
	729, 730, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 632, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1625, 591, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 855, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 459,
	449, 0, 414, 461, 385, 403, 469, 405, 406, 438,
	365, 423, 154, 400, 383, 92, 388, 358, 395, 359,
	386, 416, 116, 384, 451, 426, 130, 467, 133, 431,
	0, 176, 142, 0, 0, 418, 453, 421, 445, 413,
	439, 373, 430, 462, 401, 434, 463, 0, 0, 0,
	352, 0, 916, 917, 0, 0, 0, 0, 0, 105,
	0, 433, 458, 397, 471, 437, 357, 432, 0, 363,
	366, 468, 456, 392, 393, 1108, 0, 0, 0, 0,
	0, 0, 417, 422, 442, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 429, 0, 0, 0,
	370, 364, 1737, 415, 0, 0, 0, 372, 0, 390,
	443, 0, 354, 447, 454, 412, 203, 457, 409, 408,
	161, 0, 108, 87, 182, 120, 402, 131, 440, 470,
	460, 419, 452, 387, 396, 110, 394, 168, 155, 194,
	428, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 391,
	446, 448, 377, 436, 367, 398, 441, 399, 420, 382,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 381, 455, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	435, 169, 107, 195, 175, 376, 380, 374, 375, 424,
	425, 464, 465, 466, 444, 371, 0, 378, 379, 0,
	450, 125, 427, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 404, 356, 407, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 170, 411, 0, 104, 459, 449,
	0, 414, 461, 385, 403, 469, 405, 406, 438, 365,
	423, 154, 400, 383, 92, 388, 358, 395, 359, 386,
	416, 116, 384, 451, 426, 130, 467, 133, 431, 0,
	176, 142, 0, 0, 418, 453, 421, 445, 413, 439,
	373, 430, 462, 401, 434, 463, 0, 0, 0, 352,
	0, 916, 917, 0, 0, 0, 0, 0, 105, 0,
	433, 458, 397, 471, 437, 357, 432, 0, 363, 366,
	468, 456, 392, 393, 0, 0, 0, 0, 0, 0,
	0, 417, 422, 442, 410, 0, 0, 0, 0, 0,
	0, 0, 0, 389, 0, 429, 0, 0, 0, 370,
	364, 0, 415, 0, 0, 0, 372, 0, 390, 443,
	0, 354, 447, 454, 412, 203, 457, 409, 408, 161,
	0, 108, 0, 182, 120, 402, 131, 440, 470, 460,
	419, 452, 387, 396, 110, 394, 168, 155, 194, 428,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 391, 446,
	448, 377, 436, 367, 398, 441, 399, 420, 382, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 360, 0, 177, 196, 214,
	215, 361, 381, 455, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 435,
	169, 107, 195, 175, 376, 380, 374, 375, 424, 425,
	464, 465, 466, 444, 371, 0, 378, 379, 0, 450,
	125, 427, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 404, 356, 407, 0, 0, 0, 0, 0, 0,
	0, 368, 369, 170, 411, 0, 104, 459, 449, 0,
	414, 461, 385, 403, 469, 405, 406, 438, 365, 423,
	154, 400, 383, 92, 388, 358, 395, 359, 386, 416,
	116, 384, 451, 426, 130, 467, 133, 431, 0, 176,
	142, 0, 0, 418, 453, 421, 445, 413, 439, 373,
	430, 462, 401, 434, 463, 0, 0, 0, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 433,
	458, 397, 471, 437, 357, 432, 0, 363, 366, 468,
	456, 392, 393, 0, 0, 0, 0, 0, 0, 0,
	417, 422, 442, 410, 0, 0, 0, 0, 0, 0,
	1229, 0, 389, 0, 429, 0, 0, 0, 370, 364,
	0, 415, 0, 0, 0, 372, 0, 390, 443, 0,
	354, 447, 454, 412, 203, 457, 409, 408, 161, 0,
	108, 0, 182, 120, 402, 131, 440, 470, 460, 419,
	452, 387, 396, 110, 394, 168, 155, 194, 428, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 362, 355, 391, 446, 448,
	377, 436, 367, 398, 441, 399, 420, 382, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 381, 455, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 435, 169,
	107, 195, 175, 376, 380, 374, 375, 424, 425, 464,
	465, 466, 444, 371, 0, 378, 379, 0, 450, 125,
	427, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	404, 356, 407, 0, 0, 0, 0, 0, 0, 0,
	368, 369, 170, 411, 0, 104, 459, 449, 0, 414,
	461, 385, 403, 469, 405, 406, 438, 365, 423, 154,
	400, 383, 92, 388, 358, 395, 359, 386, 416, 116,
	384, 451, 426, 130, 467, 133, 431, 0, 176, 142,
	0, 0, 418, 453, 421, 445, 413, 439, 373, 430,
	462, 401, 434, 463, 50, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 433, 458,
	397, 471, 437, 357, 432, 0, 363, 366, 468, 456,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 417,
	422, 442, 410, 0, 0, 0, 0, 0, 0, 0,
	0, 389, 0, 429, 0, 0, 0, 370, 364, 0,
	415, 0, 0, 0, 372, 0, 390, 443, 0, 354,
	447, 454, 412, 203, 457, 409, 408, 161, 0, 108,
	0, 182, 120, 402, 131, 440, 470, 460, 419, 452,
	387, 396, 110, 394, 168, 155, 194, 428, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 391, 446, 448, 377,
	436, 367, 398, 441, 399, 420, 382, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	381, 455, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 435, 169, 107,
	195, 175, 376, 380, 374, 375, 424, 425, 464, 465,
	466, 444, 371, 0, 378, 379, 0, 450, 125, 427,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 404,
	356, 407, 0, 0, 0, 0, 0, 0, 0, 368,
	369, 170, 411, 0, 104, 459, 449, 0, 414, 461,
	385, 403, 469, 405, 406, 438, 365, 423, 154, 400,
	383, 92, 388, 358, 395, 359, 386, 416, 116, 384,
	451, 426, 130, 467, 133, 431, 0, 176, 142, 0,
	0, 418, 453, 421, 445, 413, 439, 373, 430, 462,
	401, 434, 463, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 433, 458, 397,
	471, 437, 357, 432, 0, 363, 366, 468, 456, 392,
	393, 0, 0, 0, 0, 0, 0, 0, 417, 422,
	442, 410, 0, 0, 0, 0, 0, 0, 805, 0,
	389, 0, 429, 0, 0, 0, 370, 364, 0, 415,
	0, 0, 0, 372, 0, 390, 443, 0, 354, 447,
	454, 412, 203, 457, 409, 408, 161, 0, 108, 0,
	182, 120, 402, 131, 440, 470, 460, 419, 452, 387,
	396, 110, 394, 168, 155, 194, 428, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 391, 446, 448, 377, 436,
	367, 398, 441, 399, 420, 382, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 381,
	455, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 435, 169, 107, 195,
	175, 376, 380, 374, 375, 424, 425, 464, 465, 466,
	444, 371, 0, 378, 379, 0, 450, 125, 427, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 404, 356,
	407, 0, 0, 0, 0, 0, 0, 0, 368, 369,
	170, 411, 0, 104, 459, 449, 0, 414, 461, 385,
	403, 469, 405, 406, 438, 365, 423, 154, 400, 383,
	92, 388, 358, 395, 359, 386, 416, 116, 384, 451,
	426, 130, 467, 133, 431, 0, 176, 142, 0, 0,
	418, 453, 421, 445, 413, 439, 373, 430, 462, 401,
	434, 463, 0, 0, 0, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 105, 0, 433, 458, 397, 471,
	437, 357, 432, 0, 363, 366, 468, 456, 392, 393,
	0, 0, 0, 0, 0, 0, 0, 417, 422, 442,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 389,
	0, 429, 0, 0, 0, 370, 364, 0, 415, 0,
	0, 0, 372, 0, 390, 443, 0, 354, 447, 454,
	412, 203, 457, 409, 408, 161, 0, 108, 0, 182,
	120, 402, 131, 440, 470, 460, 419, 452, 387, 396,
	110, 394, 168, 155, 194, 428, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 391, 446, 448, 377, 436, 367,
	398, 441, 399, 420, 382, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 360, 0, 177, 196, 214, 215, 361, 381, 455,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 435, 169, 107, 195, 175,
	376, 380, 374, 375, 424, 425, 464, 465, 466, 444,
	371, 0, 378, 379, 0, 450, 125, 427, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 404, 356, 407,
	0, 0, 0, 0, 0, 0, 0, 368, 369, 170,
	411, 0, 104, 459, 449, 0, 414, 461, 385, 403,
	469, 405, 406, 438, 365, 423, 154, 400, 383, 92,
	388, 358, 395, 359, 386, 416, 116, 384, 451, 426,
	130, 467, 133, 431, 0, 176, 142, 0, 0, 418,
	453, 421, 445, 413, 439, 373, 430, 462, 401, 434,
	463, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 433, 458, 397, 471, 437,
	357, 432, 0, 363, 366, 468, 456, 392, 393, 0,
	0, 0, 0, 0, 0, 0, 417, 422, 442, 410,
	0, 0, 0, 0, 0, 0, 0, 0, 389, 0,
	429, 0, 0, 0, 370, 364, 0, 415, 0, 0,
	0, 372, 0, 390, 443, 0, 354, 447, 454, 412,
	203, 457, 409, 408, 161, 0, 108, 0, 182, 120,
	402, 131, 440, 470, 460, 419, 452, 387, 396, 110,
	394, 168, 155, 194, 428, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 362, 355, 391, 446, 448, 377, 436, 367, 398,
	441, 399, 420, 382, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 381, 455, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 435, 169, 107, 195, 175, 376,
	380, 374, 375, 424, 425, 464, 465, 466, 444, 371,
	0, 378, 379, 0, 450, 125, 427, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 404, 356, 407, 0,
	0, 0, 0, 0, 0, 0, 368, 369, 170, 411,
	0, 104, 459, 449, 0, 414, 461, 385, 403, 469,
	405, 406, 438, 365, 423, 154, 400, 383, 92, 388,
	358, 395, 359, 386, 416, 116, 384, 451, 426, 130,
	467, 133, 431, 0, 176, 142, 0, 0, 418, 453,
	421, 445, 413, 439, 373, 430, 462, 401, 434, 463,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 433, 458, 397, 471, 437, 357,
	432, 0, 363, 366, 468, 456, 392, 393, 0, 0,
	0, 0, 0, 0, 0, 417, 422, 442, 410, 0,
	0, 0, 0, 0, 0, 0, 0, 389, 0, 429,
	0, 0, 0, 370, 364, 0, 415, 0, 0, 0,
	372, 0, 390, 443, 0, 354, 447, 454, 412, 203,
	457, 409, 408, 161, 0, 108, 0, 182, 120, 402,
	131, 440, 470, 460, 419, 452, 387, 396, 110, 394,
	168, 155, 194, 428, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 391, 446, 448, 377, 436, 367, 398, 441,
	399, 420, 382, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 350, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 360,
	0, 177, 196, 214, 215, 361, 381, 455, 206, 207,
	208, 209, 0, 0, 0, 351, 349, 124, 173, 128,
	135, 164, 212, 435, 169, 107, 195, 175, 376, 380,
	374, 375, 424, 425, 464, 465, 466, 444, 371, 0,
	378, 379, 0, 450, 125, 427, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 404, 356, 407, 0, 0,
	0, 0, 0, 0, 0, 368, 369, 170, 411, 0,
	104, 459, 449, 0, 414, 461, 385, 403, 469, 405,
	406, 438, 365, 423, 154, 400, 383, 92, 388, 358,
	395, 359, 386, 416, 116, 384, 451, 426, 130, 467,
	133, 431, 0, 176, 142, 0, 0, 418, 453, 421,
	445, 413, 439, 373, 430, 462, 401, 434, 463, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 433, 458, 397, 471, 437, 357, 432,
	0, 363, 366, 468, 456, 392, 393, 0, 0, 0,
	0, 0, 0, 0, 417, 422, 442, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 389, 0, 429, 0,
	0, 0, 370, 364, 0, 415, 0, 0, 0, 372,
	0, 390, 443, 0, 354, 447, 454, 412, 203, 457,
	409, 408, 161, 0, 108, 0, 182, 120, 402, 131,
	440, 470, 460, 419, 452, 387, 396, 110, 394, 168,
	155, 194, 428, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 362,
	355, 391, 446, 448, 377, 436, 367, 398, 441, 399,
	420, 382, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 381, 455, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 435, 169, 107, 195, 175, 376, 380, 374,
	375, 424, 425, 464, 465, 466, 444, 371, 0, 378,
	379, 0, 450, 125, 427, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 404, 356, 407, 0, 0, 0,
	0, 0, 0, 0, 368, 369, 170, 411, 0, 104,
	459, 449, 0, 414, 461, 385, 403, 469, 405, 406,
	438, 365, 423, 154, 400, 383, 92, 388, 358, 395,
	359, 386, 416, 116, 384, 451, 426, 130, 467, 133,
	431, 0, 176, 142, 0, 0, 418, 453, 421, 445,
	413, 439, 373, 430, 462, 401, 434, 463, 0, 0,
	0, 352, 0, 0, 0, 0, 0, 0, 0, 0,
	105, 0, 433, 458, 397, 471, 437, 357, 432, 0,
	363, 366, 468, 456, 392, 393, 0, 0, 0, 0,
	0, 0, 0, 417, 422, 442, 410, 0, 0, 0,
	0, 0, 0, 0, 0, 389, 0, 429, 0, 0,
	0, 370, 364, 0, 415, 0, 0, 0, 372, 0,
	390, 443, 0, 354, 447, 454, 412, 203, 457, 409,
	408, 161, 0, 108, 0, 182, 120, 402, 131, 440,
	470, 460, 419, 452, 387, 396, 110, 394, 168, 155,
	194, 428, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	391, 446, 448, 377, 436, 367, 398, 441, 399, 420,
	382, 93, 183, 671, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 350, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 360, 0, 177,
	196, 214, 215, 361, 381, 455, 206, 207, 208, 209,
	0, 0, 0, 351, 349, 124, 173, 128, 135, 164,
	212, 435, 169, 107, 195, 175, 376, 380, 374, 375,
	424, 425, 464, 465, 466, 444, 371, 0, 378, 379,
	0, 450, 125, 427, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 404, 356, 407, 0, 0, 0, 0,
	0, 0, 0, 368, 369, 170, 411, 0, 104, 459,
	449, 0, 414, 461, 385, 403, 469, 405, 406, 438,
	365, 423, 154, 400, 383, 92, 388, 358, 395, 359,
	386, 416, 116, 384, 451, 426, 130, 467, 133, 431,
	0, 176, 142, 0, 0, 418, 453, 421, 445, 413,
	439, 373, 430, 462, 401, 434, 463, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 433, 458, 397, 471, 437, 357, 432, 0, 363,
	366, 468, 456, 392, 393, 0, 0, 0, 0, 0,
	0, 0, 417, 422, 442, 410, 0, 0, 0, 0,
	0, 0, 0, 0, 389, 0, 429, 0, 0, 0,
	370, 364, 0, 415, 0, 0, 0, 372, 0, 390,
	443, 0, 354, 447, 454, 412, 203, 457, 409, 408,
	161, 0, 108, 0, 182, 120, 402, 131, 440, 470,
	460, 419, 452, 387, 396, 110, 394, 168, 155, 194,
	428, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 362, 355, 391,
	446, 448, 377, 436, 367, 398, 441, 399, 420, 382,
	93, 183, 341, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 350, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 381, 455, 206, 207, 208, 209, 0,
	0, 0, 351, 349, 344, 343, 128, 135, 164, 212,
	435, 169, 107, 195, 175, 376, 380, 374, 375, 424,
	425, 464, 465, 466, 444, 371, 0, 378, 379, 0,
	450, 125, 427, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 404, 356, 407, 0, 0, 0, 0, 0,
	0, 0, 368, 369, 170, 411, 154, 104, 0, 92,
	0, 0, 274, 0, 0, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 906,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 907, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 92, 842, 170, 274,
	322, 104, 0, 116, 271, 0, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 269, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 265, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 0, 92, 0, 170, 274, 322, 104, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 521, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	92, 0, 170, 274, 322, 104, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 265, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	314, 324, 320, 321, 318, 319, 317, 316, 315, 326,
	306, 307, 308, 309, 311, 0, 125, 310, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	154, 322, 104, 92, 0, 0, 274, 0, 0, 0,
	116, 271, 0, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 269, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 0,
	92, 0, 170, 274, 322, 104, 0, 116, 271, 0,
	0, 130, 313, 133, 0, 0, 176, 142, 0, 0,
	0, 0, 304, 305, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 272, 292, 291, 294, 295,
	296, 297, 0, 0, 105, 293, 298, 299, 300, 0,
	0, 0, 269, 285, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	0, 325, 0, 284, 0, 0, 280, 281, 286, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 203, 0, 0, 323, 161, 0, 108, 0, 182,
	120, 0, 131, 0, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 183, 192, 106, 172,
	96, 190, 179, 181, 140, 126, 127, 174, 94, 95,
	0, 165, 115, 159, 119, 114, 152, 180, 143, 187,
	188, 111, 213, 113, 112, 178, 101, 200, 201, 98,
	102, 199, 148, 153, 151, 198, 185, 191, 141, 138,
	0, 97, 189, 139, 137, 129, 0, 117, 121, 157,
	136, 158, 122, 145, 144, 146, 0, 150, 123, 0,
	0, 0, 0, 177, 196, 214, 215, 0, 0, 0,
	206, 207, 208, 209, 0, 0, 0, 147, 103, 124,
	173, 128, 135, 164, 212, 0, 169, 107, 195, 175,
	314, 324, 320, 321, 318, 319, 317, 316, 315, 326,
	306, 307, 308, 309, 311, 0, 125, 310, 91, 99,
	132, 210, 211, 0, 163, 118, 197, 0, 0, 0,
	154, 0, 0, 92, 0, 0, 0, 0, 0, 170,
	116, 322, 104, 0, 130, 313, 133, 0, 0, 176,
	142, 0, 0, 0, 0, 304, 305, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 272, 292,
	291, 294, 295, 296, 297, 0, 0, 105, 293, 298,
	299, 300, 0, 0, 0, 0, 285, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 282, 283,
	0, 0, 0, 0, 325, 0, 284, 0, 0, 280,
	281, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 0, 0, 323, 161, 0,
	108, 0, 182, 120, 0, 131, 0, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 1770, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 0, 0, 177, 196, 214, 215,
	0, 0, 0, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 0, 169,
	107, 195, 175, 314, 324, 320, 321, 318, 319, 317,
	316, 315, 326, 306, 307, 308, 309, 311, 0, 125,
	310, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	0, 0, 0, 154, 0, 0, 92, 0, 0, 274,
	0, 0, 170, 116, 322, 104, 0, 130, 313, 133,
	0, 0, 176, 142, 0, 0, 0, 0, 304, 305,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 272, 292, 291, 294, 295, 296, 297, 0, 0,
	105, 293, 298, 299, 300, 0, 0, 0, 0, 285,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 282, 283, 0, 0, 0, 0, 325, 0, 284,
	0, 0, 280, 281, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 0,
	323, 161, 0, 108, 0, 182, 120, 0, 131, 0,
	0, 0, 0, 0, 0, 0, 110, 0, 168, 155,
	194, 0, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 183, 192, 106, 172, 96, 190, 179, 181,
	140, 126, 127, 174, 94, 95, 0, 165, 115, 159,
	119, 114, 152, 180, 143, 187, 188, 111, 213, 113,
	112, 178, 101, 200, 201, 98, 102, 199, 148, 153,
	151, 198, 185, 191, 141, 138, 0, 97, 189, 139,
	137, 129, 0, 117, 121, 157, 136, 158, 122, 145,
	144, 146, 0, 150, 123, 0, 0, 0, 0, 177,
	196, 214, 215, 0, 0, 0, 206, 207, 208, 209,
	0, 0, 0, 147, 103, 124, 173, 128, 135, 164,
	212, 0, 169, 107, 195, 175, 314, 324, 320, 321,
	318, 319, 317, 316, 315, 326, 306, 307, 308, 309,
	311, 0, 125, 310, 91, 99, 132, 210, 211, 0,
	163, 118, 197, 0, 0, 0, 154, 0, 0, 92,
	0, 0, 0, 0, 0, 170, 116, 322, 104, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 0, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 168, 155, 194, 0, 156, 166, 134, 186, 162,
	193, 204, 205, 184, 202, 171, 100, 149, 90, 160,
	167, 0, 109, 0, 216, 217, 218, 219, 220, 221,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 154,
	0, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	322, 104, 0, 130, 0, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 554, 564, 565, 557, 558, 559,
	560, 561, 562, 563, 556, 0, 0, 566, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 110, 0, 168, 155, 194, 0, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 154, 0, 0, 92, 0, 543, 0, 0,
	0, 170, 116, 567, 104, 0, 130, 0, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 545, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 540, 539, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 660, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 662, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 792, 0, 0, 793, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 680, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 679, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 660, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 662, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 658, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 1404, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 1736, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 1295, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 662, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 545, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	752, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 154, 0, 0, 92, 0, 0, 0, 0,
	0, 638, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 0, 110, 0, 168, 155, 194,
	0, 156, 166, 134, 186, 162, 193, 204, 205, 184,
	202, 171, 100, 149, 90, 160, 167, 0, 109, 0,
	216, 217, 218, 219, 220, 221, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 336, 163,
	118, 197, 0, 0, 0, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 170, 116, 0, 104, 0, 130,
	0, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 154, 0, 0, 92, 0,
	0, 0, 0, 0, 0, 116, 0, 170, 0, 130,
	104, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
	104,
}

var yyPact = [...]int{
	2306, -1000, -208, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1286, 1362, -1000, -1000, -1000, -1000, -1000, -1000, 1094,
	713, 308, 364, 159, 14327, 363, 2607, 14907, -1000, 123,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1051, -1000, -1000,
	-1000, -1000, -1000, 1278, 1284, 1075, 1255, 1156, -1000, 7619,
	310, 12584, 14037, 6424, -1000, 827, -174, 316, 14617, 304,
	304, 14617, 14617, 304, -1000, -55, 360, 14907, -1000, 14907,
	302, 825, 302, 302, 302, 14907, -1000, 420, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14907, 811, 1205, 377, 4191, 4191, 4191,
	4191, 202, 4191, -2, 1116, -1000, -1000, -1000, -1000, 4191,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	809, 1209, 8219, 8219, 1286, -1000, 1051, -1000, -1000, -1000,
	1202, -1000, -1000, 587, 1342, -1000, 9684, 416, -1000, 8219,
	67, 1036, -1000, -1000, 1036, -1000, -1000, 381, -1000, -1000,
	9098, 9098, 9098, 9098, 9098, 9098, 9098, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1036, -1000, 7922, 1036, 1036, 1036, 1036, 1036, 1036,
	1036, 1036, 8219, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
	1036, 1036, 2107, 1036, 1036, 1036, 1036, 13744, 1010, 1159,
	-1000, -1000, -1000, 1245, 10554, 11424, 14907, 915, -1000, 1031,
	6105, -27, -1000, -1000, -1000, 533, 11134, -1000, -1000, -1000,
	1204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 945, -1000, 2695, 346, -1000, -1000, 14907, 1104,
	804, 557, 802, 1115, 299, 14907, -1000, 13454, 4191, 313,
	14907, 1226, 1111, 14907, 797, 792, -1000, 5786, -1000, 4191,
	4191, 4191, 4191, 4191, 4191, 4191, 4191, -1000, -1000, -1000,
	-1000, -1000, -1000, 4191, 4191, -1000, 10, -1000, 14907, -1000,
	-1000, -1000, -1000, 1353, 464, 771, 413, 1032, -1000, 523,
	1278, 809, 1156, 10844, 1140, -1000, -1000, 14907, -1000, 8219,
	8219, 755, -1000, 13164, -1000, -1000, 4510, 478, 9098, 642,
	456, 9098, 9098, 9098, 9098, 9098, 9098, 9098, 9098, 9098,
	9098, 9098, 9098, 9098, 9098, 9098, 725, 2107, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 784, -1000, 1051, 1419,
	1419, 12, 12, 12, 12, 12, 12, 9391, 7025, 809,
	943, 626, 7922, 7619, 7619, 8219, 8219, 15197, 15197, 7619,
	1247, 547, 626, 15197, -1000, 809, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 69, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7619, 7619, 7619, 7619, 212, 14907, -1000,
	15197, 12584, 12584, 12584, 12584, 12584, -1000, 1150, 1148, -1000,
	1133, 1127, 1142, 14907, -1000, 935, 10554, 396, 1036, -1000,
	12874, -1000, -1000, 212, 1002, 12584, 14907, -1000, -1000, 5467,
	1031, -27, 1028, -1000, -22, -26, 6728, 436, -1000, -1000,
	-1000, -1000, 3553, 1027, 217, -135, 18, -1000, -1000, -1000,
	-1000, 1067, -1000, 1067, 247, 1067, 1067, 1067, -1000, 1067,
	1067, 65, 65, 65, 65, 65, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1092, 1089, -1000, 1067, 1067, 1067, -1000,
	1067, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1080, 239, 1080, 1070, 1070, -1000, -1000, 14617, 1236,
	-94, 780, 4191, 1225, 4191, 14907, 1306, 14907, -1000, -1000,
	-1000, 1804, 14907, -1000, 14907, -1000, -1000, 14907, 4191, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 528, -1000, -1000, -1000, -1000, 1183,
	8219, 8219, 5148, 8219, -1000, -1000, -1000, 1209, -1000, 1247,
	1267, -1000, 1192, 1176, 7619, -1000, -1000, 478, 499, -1000,
	-1000, 711, -1000, -1000, -1000, -1000, 407, 1036, -1000, 1880,
	-1000, -1000, -1000, -1000, 642, 9098, 9098, 9098, 1227, 1880,
	1781, 821, 1842, 12, 27, 27, 16, 16, 16, 16,
	16, 120, 120, -1000, -1000, -1000, -1000, 809, -1000, -1000,
	-1000, 809, 7619, 1030, -1000, -1000, 8219, -1000, 809, 930,
	930, 622, 641, 1033, -1000, 406, 1015, 930, 7619, 541,
	-1000, 8219, 809, -1000, -1000, 930, 809, 930, 930, 1009,
	1036, -1000, 1023, -1000, 520, 1159, 1098, 1110, 1171, -1000,
	-1000, -1000, -1000, 1146, -1000, 1134, -1000, -1000, -1000, -1000,
	-1000, 342, 323, 318, 14617, -1000, 1292, 12584, 989, -1000,
	-1000, 1028, -27, -38, -1000, -1000, -1000, -1000, 626, -1000,
	-1000, 778, 1022, 3234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1088, 589, 14617, 280, 291, 353, 350, 775,
	-1000, -1000, -1000, 669, -1000, 14617, 1350, -1000, -1000, 277,
	-1000, 276, 554, 740, 14907, 131, 1086, 1974, -1000, -215,
	-1000, 19, -1000, -1000, 732, 65, 65, 1067, 65, 65,
	65, -1000, -1000, 436, 1200, 436, 436, 436, 436, 739,
	739, -111, -111, -1000, -1000, -1000, 714, 1080, -1000, -1000,
	-1000, 709, -1000, 1085, 1051, -1000, 4829, -1000, -1000, -1000,
	-1000, -1000, 1234, 969, -1000, -1000, -1000, -1000, 157, -1000,
	1386, 476, 387, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 208, 367, -1000, 4191, -1000, 552,
	14907, 14907, 1172, 626, 626, 402, -1000, -1000, 14907, -1000,
	-1000, -1000, -1000, 995, -1000, -1000, -1000, 3872, 7619, -1000,
	1227, 1880, 359, -1000, 9098, 9098, -1000, -1000, 930, 7619,
	626, -1000, -1000, -1000, 2251, 725, 2251, 9098, 9098, 5148,
	9098, 9098, -74, 979, 537, -1000, 8219, 766, -1000, -1000,
	-1000, -1000, -1000, 1109, 15197, 1036, -1000, 10264, 14617, 1286,
	15197, 8219, 8219, -1000, -1000, 8219, 1078, -1000, 8219, -1000,
	-1000, -1000, 1036, 1036, 1036, 885, -1000, 1286, 989, -1000,
	-1000, -1000, -36, -35, -1000, -1000, 3553, -1000, 3553, 12294,
	-1000, 1346, 1275, 286, 298, -1000, 770, 764, -1000, 744,
	-1000, -1, -1000, -181, 84, -12, -1000, -1000, 1036, -1000,
	1077, 1230, -1000, 1212, 708, -1000, 1283, -199, -1000, -1000,
	-1000, -1000, -1000, -1000, 1036, 1073, 1072, -1000, 1071, -1000,
	-1000, -1000, 889, 436, 436, 65, 436, 436, 436, -1000,
	477, -1000, -1000, -1000, -1000, 926, -1000, 922, -1000, 88,
	79, -1000, 1017, -1000, 918, 14907, 14617, -1000, 1011, -1000,
	518, 1268, 178, 14907, 1306, 1306, -1000, 278, -1000, 14617,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 14617, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	14907, -1000, -1000, -1000, -1000, -1000, 14617, 292, -1000, -1000,
	737, 8219, -1000, -1000, -1000, 4829, -1000, 1292, 12584, -1000,
	-1000, 809, -1000, 9098, 1880, 1880, -1000, -1000, 809, 1067,
	1067, -1000, 1067, 1070, -1000, -1000, 1067, 106, 1067, 105,
	809, 809, 160, 1729, -1000, 82, 712, 1036, -62, -1000,
	626, 8219, -1000, 1210, 965, 991, -1000, -1000, 7322, 809,
	903, 401, 885, 1278, -1000, 626, 626, 626, 11714, 626,
	11714, 11714, 11714, 9974, 14617, 1278, -1000, -1000, -1000, -1000,
	3234, -1000, 878, -1000, 1067, 1067, 378, 378, -186, 242,
	238, -1000, -1000, -1000, -1000, -174, -1000, -1000, 554, -1000,
	8219, 11714, -164, -1000, 1001, 886, 2120, -1000, 74, 809,
	-1000, 727, -1000, 685, 882, -1000, -1000, -1000, 436, -1000,
	-1000, -1000, -1000, -1000, 65, 736, 65, 17, 8, 706,
	-1000, 691, 1007, 1087, 4829, 3553, 312, 1246, -1000, -1000,
	1261, -1000, 963, 14617, -1000, -1000, -1000, 1061, -1000, -1000,
	-1000, -1000, 1220, 14617, -1000, -1000, 626, 1290, 997, -1000,
	1880, -1000, -1000, 227, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9098, 9098, -1000, 9098, 9098, 9098, 809,
	734, 626, 237, -1000, 1036, -1000, -1000, 972, 14617, 14617,
	-1000, -1000, 876, -1000, -1000, 874, 874, 874, 396, -1000,
	-1000, 842, 12294, 1219, -1000, 577, -1000, -1000, 566, 167,
	575, -1000, 14617, -174, -1000, 1036, 498, 858, 1059, 690,
	-1000, 880, 68, -111, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 436, -1000, 436, -1000, -1000, 853, 851, 12294, 14617,
	14907, -1000, -1000, 14617, -1000, -1000, -1000, -1000, -1000, 151,
	1901, 1055, 11714, 1036, 295, 1285, 1282, -1000, -1000, 270,
	270, 270, 270, 103, -1000, -1000, 1349, -1000, 1036, -1000,
	1051, 386, -1000, 14617, -1000, -1000, -1000, -1000, -1000, 1012,
	1836, 118, -1000, 644, 517, 670, 515, 512, 508, 504,
	494, 491, 487, -1000, -1000, -1000, 1348, -1000, -1000, -1000,
	1307, 1052, -1000, 1050, 8219, 173, -1000, -1000, 846, 838,
	-1000, -1000, -1000, -1000, -1000, -1000, 856, 1046, 1043, 845,
	-1000, 139, 1901, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1286, 14617, 14617, 14617, 14617, 294, 8805, 8805,
	12294, 850, 205, 223, -1000, 8219, 8219, -1000, -1000, -1000,
	-1000, 809, 164, -118, 15197, 991, 809, 14617, -1000, -1000,
	14617, -1000, -115, 1836, 14617, -1000, 682, -1000, -1000, 602,
	671, 602, 602, 602, 602, 602, 378, 378, 14617, 12294,
	498, -1000, -65, 322, -1000, -1000, -190, 12294, 12294, -92,
	14617, 8219, 1901, -1000, 1278, 906, 2324, -1000, -1000, -1000,
	-1000, 14617, 1337, 1329, 1327, 1321, 2606, 67, 127, 837,
	1104, 835, -1000, 14617, 1042, 626, 894, -1000, 1160, -90,
	-134, 822, -1000, -1000, 1036, 824, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 554, 554,
	820, 817, -1000, -1000, -1000, 168, 649, 656, 647, 632,
	-5, -1000, 1280, 1292, 1040, 808, 801, -1000, -206, -1000,
	626, -1000, 1209, 14617, 136, -1000, -1000, 1216, -1000, -1000,
	-1000, -1000, -1000, 1901, 1901, -1000, -94, -1000, 205, 1164,
	12294, -1000, 1155, -1000, 14617, -1000, 1836, -1000, -1000, 290,
	842, 627, -1000, 601, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12004, 842, 11714, 1292, 842, 8219, -1000, -1000, 2695,
	1254, 14617, 2575, -1000, 2568, -1000, -1000, 195, 796, -95,
	809, -1000, 14907, 1012, -1000, -1000, -1000, 385, 1012, 791,
	842, -1000, 626, 1051, -1000, -1000, -1000, 543, 192, -1000,
	-119, -1000, 1038, -1000, 4829, -1000, -1000, -1000, -1000, 126,
	1036, -151, 14617, -1000, 1901, 8512, -1000, 762, 2057, 270,
	809, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1635, 39, 1, 1634, 1632, 1631, 1387, 1375, 1372,
	1370, 1629, 1627, 1625, 1623, 1622, 1620, 1619, 1611, 1606,
	1605, 1597, 1596, 1595, 1593, 1592, 1591, 1588, 294, 1587,
	1584, 1583, 101, 1579, 114, 1574, 1572, 60, 193, 74,
	61, 1504, 1570, 45, 115, 120, 1569, 83, 1565, 1563,
	110, 1562, 99, 1560, 1554, 213, 1553, 1552, 30, 3,
	27, 44, 1543, 1542, 104, 1097, 1541, 1538, 1536, 1535,
	1529, 1526, 88, 16, 21, 24, 33, 1525, 81, 17,
	1523, 82, 1521, 1519, 1515, 1514, 42, 1511, 89, 26,
	23, 11, 1510, 25, 1508, 92, 55, 37, 13, 109,
	90, 1507, 54, 91, 79, 1506, 1505, 656, 1501, 1499,
	1498, 1496, 1495, 1494, 687, 663, 1493, 1483, 1482, 58,
	0, 449, 20, 108, 1475, 66, 1473, 1630, 102, 93,
	34, 1472, 50, 1694, 65, 1470, 1469, 59, 105, 98,
	103, 100, 1468, 1466, 1464, 1461, 1460, 1146, 46, 71,
	106, 1458, 1457, 1456, 18, 68, 49, 70, 85, 1448,
	1447, 1444, 48, 1434, 15, 32, 5, 75, 1433, 1432,
	1431, 1430, 52, 56, 1429, 28, 10, 7, 36, 6,
	1422, 1421, 1420, 8, 1418, 41, 1417, 9, 1416, 12,
	1415, 1414, 1412, 1411, 1410, 1407, 1405, 1404, 1403, 1401,
	29, 22, 53, 43, 31, 67, 51, 1398, 47, 1396,
	2, 4, 14, 1395, 1394, 1393, 1392, 76, 19, 1391,
	1390, 1377, 1368, 241,
}

var yyR1 = [...]int{
	0, 215, 216, 216, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 31, 31, 8, 9, 9, 9, 219,
	219, 50, 50, 95, 95, 10, 10, 10, 10, 11,
	11, 213, 213, 212, 214, 214, 12, 12, 12, 12,
	12, 207, 207, 207, 207, 207, 13, 13, 210, 210,
	14, 14, 100, 100, 104, 104, 104, 105, 105, 105,
	105, 135, 135, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 205, 205, 206, 206, 206, 208,
	208, 209, 209, 211, 211, 211, 211, 211, 211, 211,
	211, 211, 191, 191, 191, 192, 192, 192, 192, 192,
	192, 194, 194, 195, 195, 125, 125, 189, 189, 188,
	187, 187, 186, 186, 185, 196, 196, 20, 169, 170,
	170, 170, 170, 170, 158, 139, 139, 139, 139, 139,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 202, 202, 202, 203, 203, 203, 203, 203, 203,
	203, 203, 198, 198, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 148, 148,
	148, 148, 148, 148, 197, 197, 193, 193, 193, 193,
	193, 143, 143, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 142, 142, 142, 142, 142, 142, 142,
	142, 144, 144, 144, 144, 144, 144, 144, 144, 140,
	140, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 146, 146, 146, 146, 146, 146,
	146, 146, 157, 157, 147, 147, 155, 155, 156, 156,
	156, 154, 154, 154, 151, 151, 152, 152, 153, 153,
	153, 149, 149, 149, 150, 150, 150, 160, 178, 178,
	178, 180, 180, 181, 181, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 168, 168, 204, 204,
	177, 177, 177, 174, 174, 174, 174, 174, 174, 174,
	174, 167, 167, 176, 176, 175, 175, 162, 162, 162,
	162, 162, 163, 164, 164, 164, 164, 161, 200, 200,
	200, 201, 201, 165, 165, 166, 166, 171, 171, 171,
	172, 172, 172, 173, 173, 173, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 220,
	220, 221, 221, 221, 221, 221, 221, 221, 184, 182,
	182, 183, 183, 17, 18, 18, 18, 18, 18, 19,
	19, 21, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 112, 112, 109, 109, 110,
	110, 111, 111, 111, 113, 113, 113, 136, 136, 136,
	23, 23, 25, 25, 26, 27, 24, 24, 24, 24,
	24, 222, 28, 29, 29, 30, 30, 30, 34, 34,
	34, 32, 32, 33, 33, 39, 39, 38, 38, 40,
	40, 40, 40, 124, 124, 124, 123, 123, 42, 42,
	43, 43, 44, 44, 45, 45, 45, 57, 57, 93,
	93, 93, 96, 96, 46, 46, 46, 46, 47, 47,
	48, 48, 49, 49, 131, 131, 130, 130, 130, 129,
	129, 51, 51, 51, 53, 52, 52, 52, 52, 54,
	54, 56, 56, 55, 55, 58, 58, 58, 58, 59,
	59, 94, 94, 41, 41, 41, 41, 41, 41, 41,
	108, 108, 61, 61, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 71, 71, 71, 71, 71, 71,
	62, 62, 62, 62, 62, 62, 62, 37, 37, 72,
	72, 72, 78, 73, 73, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 69, 69, 69,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 223, 223, 70, 70, 70, 70,
	35, 35, 35, 35, 35, 134, 134, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 138, 138, 138, 138, 138, 138, 138, 82, 82,
	36, 36, 80, 80, 81, 83, 83, 79, 79, 79,
	64, 64, 64, 64, 64, 64, 64, 64, 66, 66,
	66, 84, 84, 85, 85, 86, 86, 87, 87, 88,
	89, 89, 89, 90, 90, 90, 90, 91, 91, 91,
	63, 63, 63, 63, 63, 63, 92, 92, 92, 92,
	97, 97, 74, 74, 76, 76, 75, 77, 98, 98,
	102, 99, 99, 103, 103, 103, 103, 101, 101, 101,
	126, 126, 126, 106, 106, 114, 114, 115, 115, 107,
	107, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 117, 117, 117, 118, 118, 121, 121, 122, 122,
	127, 127, 128, 128, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 217, 218, 132, 133, 133,
	133,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 2,
	6, 1, 3, 2, 0, 1, 2, 2, 2, 3,
	5, 0, 2, 2, 2, 2, 3, 5, 1, 2,
	5, 9, 1, 3, 3, 2, 2, 2, 2, 2,
	1, 1, 1, 2, 14, 13, 14, 6, 5, 5,
	5, 11, 11, 9, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 0, 2, 2, 0, 2, 2, 2, 2,
	2, 0, 2, 0, 3, 0, 1, 0, 2, 1,
	0, 2, 1, 3, 3, 0, 2, 4, 4, 1,
	3, 3, 3, 3, 2, 3, 1, 1, 1, 1,
	2, 2, 3, 2, 4, 4, 2, 2, 3, 2,
	3, 2, 7, 8, 3, 3, 6, 5, 8, 7,
	4, 2, 4, 6, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 3, 0, 2, 0, 3, 3, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 2, 2, 2, 2, 1,
	1, 1, 3, 3, 2, 1, 2, 1, 1, 1,
	1, 4, 4, 4, 4, 4, 1, 5, 2, 2,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 3, 3, 0, 1, 0, 1, 0, 2,
	1, 0, 3, 3, 0, 1, 2, 6, 0, 1,
	4, 1, 2, 1, 3, 2, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 1, 1,
	0, 2, 5, 2, 3, 3, 2, 3, 2, 3,
	4, 1, 1, 1, 3, 3, 2, 2, 5, 5,
	8, 8, 13, 1, 1, 2, 2, 10, 0, 1,
	1, 0, 3, 0, 1, 1, 3, 0, 1, 3,
	1, 2, 3, 1, 1, 1, 6, 11, 13, 7,
	7, 7, 12, 7, 7, 7, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	3, 3, 3, 3, 4, 3, 6, 4, 2, 4,
	2, 2, 2, 2, 3, 1, 1, 0, 1, 0,
	1, 0, 2, 2, 0, 2, 2, 0, 1, 1,
	2, 1, 1, 2, 1, 1, 2, 2, 2, 2,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 7, 1,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 0, 4, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -215, -1, -2, -6, -7, -8, -9, -10, -15,
	-16, -17, -18, -19, -21, -22, -23, -25, -26, -27,
	-24, -3, -4, 6, 7, -31, 9, 10, 30, -20,
	113, 114, 116, 115, 145, 117, 138, 49, 186, 187,
	189, 190, 26, 139, 140, 143, 144, -217, 8, 290,
	53, -216, 324, -86, 15, -30, 5, -28, -222, -28,
	-28, -28, -28, -28, -169, 53, -125, -196, 153, 282,
	119, 134, 152, 120, 136, 71, -107, 122, 124, 120,
	120, 121, 122, 282, 119, 120, -55, -127, 56, -120,
	160, 299, 21, 186, 199, 200, 191, 232, 220, 300,
	158, 217, 221, 269, 323, 65, 189, 278, 128, 164,
	141, 212, 215, 214, 206, 203, 28, 238, 306, 205,
	131, 239, 243, 249, 270, 297, 196, 197, 272, 236,
	32, 133, 301, 34, 149, 273, 241, 235, 230, 234,
	195, 229, 38, 209, 245, 244, 246, 268, 223, 159,
	248, 225, 207, 224, 18, 144, 147, 240, 242, 204,
	161, 126, 151, 305, 274, 202, 148, 162, 143, 277,
	320, 157, 190, 271, 198, 280, 37, 254, 216, 193,
	208, 194, 130, 187, 155, 227, 150, 210, 211, 233,
	192, 228, 188, 152, 145, 279, 255, 307, 226, 222,
	218, 219, 156, 122, 153, 154, 261, 262, 263, 264,
	302, 303, 275, 213, 256, 257, 166, 167, 168, 169,
	170, 171, 172, 120, 107, 221, 113, 259, 121, 32,
	151, -136, 120, -109, 154, 261, 262, 263, 264, 56,
	271, 270, 265, -127, 188, -132, -132, -132, -132, -132,
	-2, -90, 17, 16, -5, -3, -217, 6, 21, 22,
	-34, 39, 40, -29, -40, 98, -41, -127, -60, 73,
	-65, 29, 56, -120, 24, -64, -61, -79, -77, -78,
	107, 108, 96, 97, 104, 74, 109, -69, -67, -68,
	-70, 58, 57, 66, 59, 60, 61, 62, 67, 68,
	69, -121, -75, -217, 43, 44, 291, 292, 293, 294,
	298, 295, 76, 33, 281, 289, 288, 287, 285, 286,
	283, 284, 322, 125, 282, 102, 290, -107, -43, -44,
	-45, -46, -57, -78, -217, -55, 11, -50, -55, -99,
	-135, 188, -103, 271, 270, -122, -101, -121, -119, 269,
	221, 268, 56, -120, 118, 174, 309, 72, 23, 25,
	252, 258, 173, 75, 107, 16, 76, 180, 318, 319,
	106, 291, 113, 47, 283, 284, 281, 178, 293, 294,
	282, 259, 185, 20, 29, 10, 26, 139, 22, 100,
	115, 175, 79, 80, 142, 24, 140, 69, 181, 183,
	19, 50, 132, 11, 308, 13, 14, 310, 125, 124,
	91, 321, 121, 45, 8, 109, 27, 88, 41, 137,
	184, 43, 89, 17, 285, 286, 31, 298, 146, 102,
	48, 35, 73, 67, 51, 276, 179, 71, 15, 46,
	134, 182, 90, 116, 290, 44, 176, 119, 177, 6,
	296, 30, 138, 42, 120, 260, 78, 123, 68, 5,
	136, 9, 49, 52, 287, 288, 289, 33, 77, 12,
	135, 70, -170, -158, 56, -200, 318, 319, 122, -121,
	-115, 125, -115, -121, -121, -115, 290, 120, -55, -55,
	-114, 125, 56, -114, -114, -114, -55, 110, -55, 56,
	30, 282, 56, 151, 120, 152, 122, -133, -217, -122,
	-133, -133, -133, 155, 156, -133, -110, 266, 51, -133,
	-218, 55, -91, 19, 31, -41, -127, -87, -88, -41,
	-86, -2, -28, 35, -32, 22, 64, 11, -124, 72,
	71, 88, -123, 23, -121, 58, 110, -41, -62, 91,
	73, 89, 90, 75, 93, 92, 103, 96, 97, 98,
	99, 100, 101, 102, 94, 95, 106, 322, 81, 82,
	83, 84, 85, 86, 87, -108, -217, -78, -217, 111,
	112, -65, -65, -65, -65, -65, -65, -65, -217, -2,
	-73, -41, -217, -217, -217, -217, -217, -217, -217, -217,
	-217, -82, -41, -217, -223, -217, -223, -223, -223, -223,
	-223, -223, -223, -138, 107, 221, 141, 212, -141, -140,
	227, 191, 192, 193, 194, 195, 196, 197, 198, 199,
	200, 220, 300, -217, -217, -217, -217, -56, 27, -55,
	30, 54, -51, -53, -52, -54, 41, 45, 47, 42,
	43, 44, 48, -131, 23, -43, -217, -130, 147, -129,
	23, -127, 58, -55, -50, -219, 54, 11, 52, 54,
	-99, 188, -100, -104, 272, 274, 81, -126, -121, 58,
	29, 30, 55, 54, -159, -139, -143, -140, -145, -144,
	-146, -141, -142, 217, 221, 218, 223, 224, 225, 107,
	222, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 226, 238, 30, 141, 210, 211, 212, 215,
	214, 216, 213, 239, 240, 241, 242, 243, 244, 245,
	246, 202, 203, 205, 206, 207, 209, 208, 121, -55,
	-189, 52, 56, 73, 56, 51, -205, 51, 173, 174,
	-55, -55, 276, -133, 123, -55, 24, 51, -55, 56,
	56, -128, -127, -119, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -112, 260, 267, -55, 9, 91,
	54, 18, 110, 54, -89, 25, 26, -90, -218, -34,
	-66, -121, 59, 62, -33, 42, -55, -41, -41, -71,
	67, 73, 68, 69, -123, 98, -128, -122, -119, -65,
	-72, -75, -78, 63, 91, 89, 90, 75, -65, -65,
	-65, -65, -65, -65, -65, -65, -65, -65, -65, -65,
	-65, -65, -65, -134, 56, 58, -138, 56, -64, -64,
	-121, -39, 22, -38, -40, -218, 54, -218, -2, -38,
	-38, -41, -41, -79, -121, -127, -79, -38, -32, -80,
	-81, 77, -79, -218, 219, -38, -39, -38, -38, -95,
	147, -55, -98, -102, -79, -44, -45, -45, -44, -45,
	41, 41, 41, 46, 41, 46, 41, -52, -127, -218,
	-58, 49, 124, 50, -217, -129, -95, 52, -43, -55,
	-103, -100, 54, 273, 275, 276, 51, 70, -41, -150,
	107, 106, -171, -172, -173, -122, 58, 59, -158, -160,
	-162, -161, -174, -163, 128, 126, 130, 131, 136, -167,
	121, 137, 67, 73, -202, 128, 51, 252, 258, 126,
	137, 136, 323, 65, 129, 308, 310, 29, -153, 325,
	247, -151, 255, -147, 53, -147, -147, 219, -147, -147,
	-147, -147, -147, -149, 221, -149, -149, -149, -149, 53,
	53, -147, -147, -147, -147, -155, 53, 204, -155, -155,
	-156, 53, -156, -121, 23, -187, 302, -188, 56, -133,
	24, -133, -55, -208, -206, 8, 9, 10, -55, -116,
	118, 115, 116, -184, 114, 252, 221, 65, 29, 15,
	291, 147, 307, 56, 148, -55, -55, -55, -133, -111,
	11, 91, 37, -41, -41, -128, -88, -91, -106, 19,
	11, 33, 33, -38, 67, 68, 69, 110, -217, -72,
	-65, -65, -65, -37, 142, 72, -218, -218, -38, 54,
	-41, -218, -218, -218, 54, 52, 23, 54, 11, 110,
	54, 11, -218, -38, -83, -81, 79, -41, -218, -218,
	-218, -218, -218, -63, 30, 33, -2, -217, -217, -59,
	54, 12, 81, -48, -47, 51, 52, -49, 51, -47,
	41, 41, 121, 121, 121, -96, -121, -59, -43, -59,
	-104, -105, 277, 274, 280, 56, 54, -173, 81, 53,
	-201, 51, 73, -165, -121, 137, -167, -167, 56, -167,
	56, 56, 67, 19, -121, 9, 137, 137, -201, 58,
	-127, -198, 309, 16, 53, -203, 53, 58, 59, 60,
	67, -148, 66, -61, 248, 281, 284, 283, 249, 326,
	-152, 256, 59, -149, -149, -147, -149, -149, -149, -150,
	30, -150, -150, -150, -150, -157, 58, -157, -154, 302,
	303, -154, 59, -155, 59, 51, 52, -2, -186, -185,
	-122, -191, 23, 51, 54, -205, -132, -125, -221, 153,
	127, 132, 131, 56, 126, 130, 147, -190, 153, 127,
	128, 132, 131, 56, 121, 137, 126, 130, 147, 136,
	-117, -118, 123, 23, 121, 137, 147, 118, -133, -113,
	89, 12, -127, -127, 38, 110, -55, -42, 11, 98,
	-122, -39, -37, 72, -65, -65, -218, -40, -137, 107,
	217, 141, 212, 206, 236, 237, 223, 254, 210, 255,
	-134, -137, -65, -65, -122, -65, -65, 299, -86, 80,
	-41, 78, -97, 51, -98, -74, -76, -75, -217, -2,
	-92, -121, -96, -86, -102, -41, -41, -41, 53, -41,
	-217, -217, -217, -218, 54, -86, -59, 274, 278, 279,
	-172, -173, -176, -175, -121, 137, 10, 9, 19, 132,
	126, 56, 56, 56, -200, 136, 320, -202, 323, -148,
	-217, 53, 23, 29, 59, -203, 53, -193, 322, -217,
	-147, 53, -147, 53, 53, 55, -150, -150, -149, -150,
	-150, -150, 56, 107, 55, 54, 55, 210, 210, 54,
	55, 54, -55, -121, 54, 81, -192, 19, 161, 162,
	-55, -206, -208, -220, 121, 137, -132, -121, -132, -121,
	-55, -132, -121, 128, -162, 58, -41, -59, -43, -218,
	-65, -218, -147, -147, -147, -156, -147, 197, -147, 197,
	-218, -218, -218, 54, 19, -218, 54, 19, -217, -36,
	296, -41, 28, -97, 54, -218, -218, -218, 54, 110,
	-218, -90, -93, -121, 137, -93, -93, -93, -130, -121,
	-90, 55, 54, -147, -147, -164, 157, 158, 30, 159,
	-164, 320, 137, 137, -200, -201, -41, -93, 310, 54,
	55, -203, 221, 211, 250, 227, -218, 55, 55, 55,
	-150, -149, 58, -149, 257, 257, 59, 59, 53, 52,
	51, -185, -173, 123, 21, 6, 8, 9, 10, 19,
	23, -121, 53, 27, -121, -84, 13, -149, 56, -65,
	-65, -65, -65, -65, -218, 58, 137, -76, 33, -2,
	-217, -121, -121, 54, 55, -218, -218, -218, -58, -178,
	-180, 302, -179, 52, 133, 65, 166, 167, 168, 169,
	170, 171, 172, -175, -89, -201, 51, 67, 160, -201,
	51, -165, -121, -200, -217, -218, 55, 53, 59, 55,
	219, -154, -150, -150, 55, 55, -176, -121, -55, -166,
	-121, 175, -209, -211, -7, -9, -8, -11, -10, -12,
	-13, -14, -3, 20, 179, 180, 185, 181, 135, 125,
	53, -93, -217, 126, -85, 14, 16, -218, -218, -218,
	-218, -35, 91, 302, 9, -74, -2, 110, -121, -177,
	51, -179, 302, 53, 304, 56, -168, 81, 58, 81,
	81, 81, 81, 81, 81, 81, 9, 10, 53, 53,
	-41, -197, 159, -199, 55, 55, 55, 53, 53, -194,
	54, 52, 176, -211, -86, -213, -121, -212, -121, -121,
	-121, -207, 35, 182, 183, 184, -60, -65, -60, -176,
	55, -182, -183, 147, 137, -41, -73, -218, 300, 48,
	305, -98, -218, -121, -121, -181, -179, -121, 59, -204,
	51, 70, 59, -204, -204, -204, -204, -204, -164, -164,
	-166, -176, -218, 297, 55, 187, 312, 313, 146, 314,
	159, 315, 316, -94, 321, -176, -176, -195, 302, -121,
	-41, -211, -90, 54, -214, -139, 177, -121, 11, 11,
	11, 11, -211, 186, 186, 55, -189, -218, 54, -121,
	53, 38, 301, 306, -217, 55, 54, -201, -201, 55,
	55, 302, 59, 16, 59, 59, 59, 59, 313, 146,
	315, 16, -59, 53, 55, 55, 323, -91, -212, -121,
	178, 27, -210, -211, -210, -187, -183, 33, -176, 38,
	-121, -179, 129, -178, 59, 59, 317, -127, -178, -93,
	-59, -178, -41, 19, -121, 80, -211, 80, 149, 55,
	302, -218, -55, -177, 110, -177, 55, -178, -2, 79,
	150, 305, 53, -122, 186, -217, 306, -166, -210, -65,
	146, 55, 80, -218, -218,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 705, 0, 461, 461, 461, 461, 461, 461, 0,
	-2, 759, 0, 0, 0, 0, -2, 451, 452, 0,
	454, 455, 1037, 1037, 1037, 1037, 1037, 0, 33, 34,
	1035, 1, 3, 713, 0, 0, 465, 468, 463, 0,
	759, 0, 0, 0, 83, 0, 348, 0, 0, 757,
	757, 0, 0, 757, 126, 0, 0, 0, 760, 0,
	755, 0, 755, 755, 755, 0, 410, 533, 780, 781,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 0, 0, 0, 0, 1038, 1038, 1038,
	1038, 0, 1038, 439, 428, 430, 431, 432, 433, 1038,
	448, 449, 438, 450, 453, 456, 457, 458, 459, 460,
	27, 717, 0, 0, 705, 29, 0, 461, 466, 467,
	471, 469, 470, 462, 0, 479, 483, 0, 543, 0,
	548, 550, -2, -2, 0, 585, 586, 587, 588, 589,
	0, 0, 0, 0, 0, 0, 0, 613, 614, 615,
	616, 690, 691, 692, 693, 694, 695, 696, 697, 552,
	553, 687, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 678, 0, 644, 644, 644, 644, 644, 644,
	644, 644, 0, 0, 0, 0, 0, 0, 0, 490,
	492, 493, 494, 514, 0, 516, 0, 0, 41, 45,
	0, 1004, 741, -2, -2, 0, 0, 778, 779, -2,
	914, -2, 776, 777, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 0, 139, 0, 0, 349, 350, 0, 127,
	0, 0, 0, 0, 0, 0, 136, 0, 1038, 0,
	0, 0, 0, 0, 0, 0, 409, 0, 411, 1038,
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 420, 1039, 1040,
	421, 422, 423, 1038, 1038, 425, 0, 440, 0, 434,
	28, 1036, 22, 0, 0, 714, 0, 706, 707, 710,
	713, 27, 468, 0, 473, 472, 464, 0, 480, 0,
	0, 0, 484, 0, 486, 487, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 570, 571,
	572, 573, 574, 575, 576, 549, 0, 563, 0, 0,
	0, 605, 606, 607, 608, 609, 610, 0, 475, 27,
	0, 583, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 0, 679, 0, 635, 0, 636, 637, 638, 639,
	640, 641, 642, 643, 671, 0, 673, 674, 675, 676,
	677, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 239, 240, 0, 475, 0, 0, 43, 0, 532,
	0, 0, 0, 0, 0, 0, 521, 0, 0, 524,
	0, 0, 0, 0, 515, 0, 0, 535, 968, 517,
	0, 519, 520, -2, 0, 0, 0, 39, 40, 0,
	46, 1004, 48, 72, 0, 0, 0, 294, 750, 751,
	752, 748, 357, 0, 144, 288, 284, 146, 147, 148,
	149, 274, 212, 274, 274, 274, 274, 274, 246, 274,
	274, 291, 291, 291, 291, 291, 255, 256, 257, 258,
	259, 260, 261, 0, 0, 231, 274, 274, 274, 235,
	274, 237, 238, 264, 265, 266, 267, 268, 269, 270,
	271, 276, 276, 276, 278, 278, 229, 230, 0, 0,
	130, 0, 1038, 0, 1038, 0, 0, 0, 94, 95,
	137, 0, 0, 376, 0, 404, 756, 0, 1038, 407,
	408, 534, 782, 783, 412, 413, 414, 415, 416, 417,
	418, 419, 424, 427, 441, 435, 436, 429, 718, 0,
	0, 0, 0, 0, 709, 711, 712, 717, 30, 471,
	0, 698, 0, 0, 0, 474, 25, 544, 545, 547,
	564, 0, 566, 568, 485, 481, 0, 688, -2, 554,
	555, 579, 580, 581, 0, 0, 0, 0, 577, 559,
	0, 590, 591, 592, 593, 594, 595, 596, 597, 598,
	599, 600, 601, 604, 655, 656, 612, 0, 602, 603,
	611, 0, 0, 476, 477, 582, 0, 736, 27, 0,
	0, 0, 0, 0, 687, 0, 0, 0, 0, 685,
	682, 0, 0, 645, 672, 0, 0, 0, 0, 0,
	0, 531, 539, 738, 0, 491, 510, 512, 0, 507,
	522, 523, 525, 0, 527, 0, 529, 530, 495, 496,
	497, 0, 0, 0, 0, 518, 539, 0, 539, 42,
	742, 47, 0, 0, 75, 76, 743, 744, 745, 746,
	295, 0, 138, 358, 360, 363, 364, 365, 140, 141,
	142, 143, 0, 351, 353, 0, 0, 0, 0, 0,
	331, 332, 151, 0, 153, 0, 0, 156, 157, 0,
	159, 161, 351, 0, 0, 0, 0, 0, 150, 0,
	290, 286, 285, 211, 0, 291, 291, 274, 291, 291,
	291, 248, 249, 294, 0, 294, 294, 294, 294, 0,
	0, 281, 281, 234, 236, 223, 0, 276, 225, 226,
	227, 0, 228, 0, 0, 88, 0, 128, 129, 89,
	758, 90, 112, 0, 99, 96, 97, 98, 0, 1037,
	125, 0, 771, 377, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 0, 0, 403, 1038, 406, 444,
	0, 0, 0, 715, 716, 0, 708, 23, 0, 753,
	754, 699, 700, 488, 565, 567, 569, 0, 475, 556,
	577, 560, 0, 557, 0, 0, 551, 617, 0, 0,
	584, -2, 620, 621, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 705, 0, 683, 0, 0, 634, 646,
	647, 648, 649, 730, 0, 0, -2, 0, 0, 705,
	0, 0, 0, 504, 511, 0, 0, 505, 0, 506,
	526, 528, 0, 0, 0, 0, 502, 705, 539, 38,
	73, 74, 0, 0, 80, 296, 0, 361, 0, 0,
	337, 0, 0, 0, 354, 323, 0, 0, 326, 0,
	328, 348, 152, 0, 0, 0, 158, 160, 0, 164,
	165, 0, 182, 0, 0, 171, 0, 206, 175, 176,
	177, 178, 179, 180, 0, 274, 274, 202, 0, 289,
	145, 287, 0, 294, 294, 291, 294, 294, 294, 250,
	0, 251, 252, 253, 254, 0, 272, 0, 232, 0,
	0, 233, 0, 224, 0, 0, 0, -2, 131, 132,
	0, 115, 0, 0, 0, 0, 366, 0, 1037, 0,
	391, 392, 393, 394, 395, 396, 397, 1037, 0, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	0, 1037, 772, 773, 774, 775, 0, 0, 405, 426,
	0, 0, 442, 443, 719, 0, 24, 539, 0, 482,
	689, 0, 558, 0, 578, 561, 618, 478, 0, 274,
	274, 660, 274, 278, 663, 664, 274, 666, 274, 669,
	0, 0, 0, 0, 688, 0, 0, 0, 680, 633,
	686, 0, 31, 0, 730, 720, 732, 734, 0, 27,
	0, 726, 0, 713, 739, 540, 740, 508, 0, 513,
	0, 0, 0, 516, 0, 713, 37, 77, 78, 79,
	359, 362, 0, 333, 274, 274, 0, 0, 0, 0,
	0, 324, 325, 327, 329, 348, 170, 154, 351, 155,
	0, 0, 0, 183, 0, 0, 0, 174, 0, 0,
	198, 0, 200, 0, 0, 275, 241, 242, 294, 243,
	244, 245, 292, 293, 291, 0, 291, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 113, 114,
	0, 100, 0, 0, 389, 390, 370, 0, 371, 373,
	374, 375, 0, 353, 369, 445, 446, 701, 489, 619,
	562, 622, 657, 291, 661, 662, 665, 667, 668, 670,
	624, 623, 625, 0, 0, 628, 0, 0, 0, 0,
	0, 684, 0, 32, 0, 735, -2, 0, 0, 0,
	44, 35, 0, 499, 500, 0, 0, 0, 535, 503,
	36, 298, 0, 710, 336, 351, 343, 344, 0, 0,
	351, 352, 353, 348, 330, 0, 0, 0, 167, 0,
	172, 0, 0, 281, 209, 210, 181, 199, 201, 203,
	247, 294, 273, 294, 282, 283, 0, 0, 0, 0,
	0, 133, 134, 0, 116, 117, 118, 119, 120, 0,
	0, 0, 0, 0, 354, 703, 0, 658, 659, 0,
	0, 0, 0, 650, 632, 681, 0, 733, 0, -2,
	0, 728, 727, 0, 509, 536, 537, 538, 498, 320,
	299, 0, 301, 0, 316, 0, 0, 0, 0, 0,
	0, 0, 0, 334, 335, 338, 0, 345, 346, 339,
	0, 0, 354, 0, 0, 204, 166, 184, 0, 0,
	207, 208, 262, 263, 277, 280, 0, 0, 0, 121,
	355, 0, 93, 101, 103, 104, 105, 106, 107, 108,
	109, 110, 705, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 26, 0, 0, 626, 627, 629,
	630, 0, 0, 0, 0, 723, 27, 0, 501, 297,
	0, 302, 0, 0, 0, 305, 0, 317, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 162, 0, 0, 169, 173, 541, 0, 0, 123,
	0, 0, 0, 102, 713, 49, 54, 51, 56, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 399, 0, 0, 704, 702, 631, 0, 0,
	0, 731, -2, 729, 321, 0, 303, 308, 306, 309,
	318, 319, 310, 311, 312, 313, 314, 315, 351, 351,
	0, 0, 163, 205, 168, 0, 0, 0, 0, 0,
	0, 195, 0, 539, 0, 0, 0, 91, 0, 356,
	122, 92, 717, 0, 0, 53, 55, 59, 62, 63,
	64, 65, 66, 0, 0, 367, 130, 398, 0, 0,
	0, 651, 0, 654, 0, 300, 0, 340, 341, 0,
	298, 0, 186, 0, 188, 189, 190, 191, 192, 193,
	194, 0, 298, 0, 539, 298, 0, 111, 52, 0,
	0, 0, 0, 68, 0, 372, 400, 0, 0, 652,
	0, 304, 0, 320, 185, 187, 196, 0, 320, 0,
	298, 85, 124, 0, 60, 67, 69, 70, 0, 368,
	0, 322, 0, 347, 0, 84, 542, 86, -2, 0,
	0, 0, 0, 197, 0, 0, 653, 0, 0, 0,
	0, 342, 71, 401, 402,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 3, 3, 3, 101, 93, 3,
	53, 55, 98, 96, 54, 97, 110, 99, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 324,
	82, 81, 83, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 103, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 92, 3, 104,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 75,
	76, 77, 78, 79, 80, 84, 85, 86, 87, 88,
	89, 90, 91, 94, 95, 100, 102, 105, 106, 107,
	108, 109, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:355
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:360
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:361
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:365
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:388
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:396
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:400
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:406
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:413
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:419
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:423
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:429
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:433
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:440
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:452
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:464
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:468
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:474
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:484
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:488
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:493
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:494
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:498
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:502
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:507
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:511
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:517
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:521
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:525
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:529
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:535
		{
			yyVAL.statement = &Declare{Type: declareVariable, Variables: yyDollar[2].localVariables}
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:539
		{
			yyVAL.statement = &Declare{
				Type: declareCursor,
				Cursor: &CursorDefinition{
					Name:   yyDollar[2].colIdent,
					Scroll: bool(yyDollar[3].boolVal),
					Select: yyDollar[6].selStmt,
				},
			}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:552
		{
			yyVAL.localVariables = []*LocalVariable{yyDollar[1].localVariable}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:556
		{
			yyVAL.localVariables = append(yyVAL.localVariables, yyDollar[3].localVariable)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:562
		{
			yyVAL.localVariable = &LocalVariable{Name: yyDollar[1].colIdent, DataType: yyDollar[2].columnType}
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:567
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:571
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:577
		{
			yyVAL.statement = &Cursor{
				Action:     OpenStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:584
		{
			yyVAL.statement = &Cursor{
				Action:     CloseStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:591
		{
			yyVAL.statement = &Cursor{
				Action:     DeallocateStr,
				CursorName: yyDollar[2].colIdent,
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:598
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
			}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:606
		{
			yyVAL.statement = &Cursor{
				Action:     FetchStr,
				Fetch:      yyDollar[2].str,
				CursorName: yyDollar[3].colIdent,
				Into:       yyDollar[5].colIdent,
			}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:616
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:620
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:624
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:628
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:632
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:638
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: []Statement{yyDollar[3].statement},
			}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:645
		{
			yyVAL.statement = &While{
				Condition:  yyDollar[2].expr,
				Statements: yyDollar[4].blockStatement,
				Keyword:    string(yyDollar[3].bytes),
			}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:655
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:659
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:665
		{
			yyVAL.statement = &If{
				Condition:    yyDollar[2].expr,
				IfStatements: yyDollar[4].blockStatement,
				Keyword:      string(yyDollar[3].bytes),
			}
		}
	case 71:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:673
		{
			yyVAL.statement = &If{
				Condition:      yyDollar[2].expr,
				IfStatements:   yyDollar[4].blockStatement,
				ElseStatements: yyDollar[8].blockStatement,
				Keyword:        string(yyDollar[3].bytes),
			}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:684
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:688
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:694
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:698
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:702
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:708
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:712
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:716
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:720
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:726
		{
			yyVAL.str = SessionStr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:730
		{
			yyVAL.str = GlobalStr
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:736
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 84:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:741
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 85:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:761
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 86:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:777
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:792
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:800
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:808
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:812
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:816
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:827
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[7].tableName,
				Time:      yyDollar[4].str,
				Event:     yyDollar[5].strs,
				Body:      []Statement{yyDollar[11].statement},
			}}
		}
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:837
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: &Trigger{
				Name:      yyDollar[3].colIdent,
				TableName: yyDollar[5].tableName,
				Time:      yyDollar[6].str,
				Event:     yyDollar[7].strs,
				Body:      yyDollar[9].blockStatement,
			}}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:849
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:853
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:859
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:863
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:867
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:873
		{
			yyVAL.strs = []string{string(yyDollar[1].str)}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:877
		{
			yyVAL.strs = append(yyVAL.strs, string(yyDollar[3].str))
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:883
		{
			yyVAL.blockStatement = []Statement{yyDollar[1].statement}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:887
		{
			yyVAL.blockStatement = append(yyVAL.blockStatement, yyDollar[2].statement)
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:893
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:904
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.statement = sel
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:913
		{
			yyVAL.bytes = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:917
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:921
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:926
		{
			yyVAL.bytes = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:930
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:934
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:938
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:942
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:951
		{
			yyVAL.expr = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:955
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:960
		{
			yyVAL.expr = nil
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:964
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:969
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:973
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:978
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:982
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:988
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:993
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:998
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1004
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1009
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1015
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1020
		{
			yyVAL.bytes = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1024
		{
			yyVAL.bytes = nil
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1030
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1037
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1044
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1049
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1053
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1057
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1061
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1067
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1072
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1083
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1095
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1100
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1105
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1110
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1115
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1120
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1125
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1130
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1135
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1140
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1145
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1150
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 163:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1156
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1161
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1166
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1171
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1177
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 169:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1189
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1195
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1202
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1206
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1210
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1216
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1220
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1224
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1228
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1232
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1236
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1240
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1244
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1254
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1259
		{
			yyVAL.sequence = &Sequence{}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1263
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1268
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1273
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1278
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1283
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1288
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1293
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1298
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1303
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1308
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1313
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1318
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1323
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1330
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1334
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1346
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1350
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1359
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1364
		{
			yyVAL.bytes = nil
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1374
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1379
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1385
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1389
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1393
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1397
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1401
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1405
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1409
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1413
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1417
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1421
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1427
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1433
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1439
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1445
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1451
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1457
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1467
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1473
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1477
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1481
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1507
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1553
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1557
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1565
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1577
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1581
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1589
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1597
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1612
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1646
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1651
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1656
		{
			yyVAL.optVal = nil
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1660
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1665
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1669
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1677
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1681
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1687
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1695
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1699
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1703
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1708
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1712
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1717
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1721
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1726
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1730
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1734
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1739
		{
			yyVAL.str = ""
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1743
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1747
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1752
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1756
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1760
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1766
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1771
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1775
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1779
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1785
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1789
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1795
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1799
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1805
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1809
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1814
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1818
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1822
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1826
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1830
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1834
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1838
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1842
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1846
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1852
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1856
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1862
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1866
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1872
		{
			yyVAL.indexPartition = nil
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1876
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1880
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1886
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1890
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1894
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1898
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1902
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1906
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1910
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1914
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1920
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1924
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1930
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1934
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1940
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1951
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 338:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1956
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1963
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 340:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1970
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 341:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1977
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 342:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1986
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1998
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2002
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2006
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2010
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 347:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:2016
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2027
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2031
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2035
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2041
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2045
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2050
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2057
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2061
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 357:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2066
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2070
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2074
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2082
		{
			yyVAL.str = yyDollar[1].str
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2086
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2090
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2096
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2100
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2110
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 367:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:2114
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 368:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:2128
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 369:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2142
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 370:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2151
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 371:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2155
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:2159
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2172
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 374:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2182
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2187
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2192
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 377:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2196
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 398:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2228
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2234
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2238
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 401:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2244
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 402:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2248
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2254
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2260
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 405:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2268
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2273
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2281
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 408:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2285
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2291
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2295
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2300
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2306
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 413:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2310
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2314
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2319
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2323
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2355
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2363
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2373
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2377
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2381
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2385
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2389
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2393
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2397
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2413
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2417
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2423
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2427
		{
			yyVAL.str = "extended "
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.str = "full "
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2443
		{
			yyVAL.str = ""
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2447
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2451
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2457
		{
			yyVAL.showFilter = nil
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2461
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2465
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2471
		{
			yyVAL.str = ""
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2475
		{
			yyVAL.str = SessionStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2479
		{
			yyVAL.str = GlobalStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2485
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2489
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2495
		{
			yyVAL.statement = &Begin{}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2499
		{
			yyVAL.statement = &Begin{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2505
		{
			yyVAL.statement = &Commit{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2511
		{
			yyVAL.statement = &Rollback{}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2517
		{
			yyVAL.statement = &OtherRead{}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2521
		{
			yyVAL.statement = &OtherRead{}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2525
		{
			yyVAL.statement = &OtherRead{}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2529
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2533
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2538
		{
			setAllowComments(yylex, true)
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2542
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 463:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2548
		{
			yyVAL.bytes2 = nil
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2552
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2558
		{
			yyVAL.str = UnionStr
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2562
		{
			yyVAL.str = UnionAllStr
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2566
		{
			yyVAL.str = UnionDistinctStr
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2571
		{
			yyVAL.str = ""
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2575
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2579
		{
			yyVAL.str = SQLCacheStr
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2584
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2588
		{
			yyVAL.str = DistinctStr
		}
	case 473:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2593
		{
			yyVAL.str = ""
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2597
		{
			yyVAL.str = StraightJoinHint
		}
	case 475:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2602
		{
			yyVAL.selectExprs = nil
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2606
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2612
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2616
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2630
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2634
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2639
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2643
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2647
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2654
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 488:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2659
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2663
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2669
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2673
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2683
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2687
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2691
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2697
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 498:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2701
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2707
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2712
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2716
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2722
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2726
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2739
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2743
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2747
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2751
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2757
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2759
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2763
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2765
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2769
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2774
		{
			yyVAL.empty = struct{}{}
		}
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2776
		{
			yyVAL.empty = struct{}{}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2779
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 517:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2787
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2794
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2800
		{
			yyVAL.str = JoinStr
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2804
		{
			yyVAL.str = JoinStr
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2808
		{
			yyVAL.str = JoinStr
		}
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2814
		{
			yyVAL.str = StraightJoinStr
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2820
		{
			yyVAL.str = LeftJoinStr
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2824
		{
			yyVAL.str = LeftJoinStr
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2828
		{
			yyVAL.str = RightJoinStr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2832
		{
			yyVAL.str = RightJoinStr
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2838
		{
			yyVAL.str = NaturalJoinStr
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2842
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2852
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2856
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2862
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2866
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2871
		{
			yyVAL.indexHints = nil
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2875
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2879
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2883
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2888
		{
			yyVAL.expr = nil
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2892
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2897
		{
			yyVAL.columns = nil
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2901
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2907
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2911
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2915
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2919
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2923
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2927
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2931
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2937
		{
			yyVAL.str = ""
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2941
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2947
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2951
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2957
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2961
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2965
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2969
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2973
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2977
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2981
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 561:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2985
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 562:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2989
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2993
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2999
		{
			yyVAL.str = IsNullStr
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3003
		{
			yyVAL.str = IsNotNullStr
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.str = IsTrueStr
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.str = IsNotTrueStr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3015
		{
			yyVAL.str = IsFalseStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3019
		{
			yyVAL.str = IsNotFalseStr
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3025
		{
			yyVAL.str = EqualStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3029
		{
			yyVAL.str = LessThanStr
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3033
		{
			yyVAL.str = GreaterThanStr
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3037
		{
			yyVAL.str = LessEqualStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3041
		{
			yyVAL.str = GreaterEqualStr
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3045
		{
			yyVAL.str = NotEqualStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3049
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3054
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3058
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3064
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3068
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3072
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3078
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3084
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3088
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3094
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3098
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3102
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3106
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3110
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 590:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3114
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3118
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3122
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3126
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3130
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3134
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3138
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3142
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3146
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3150
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3154
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3158
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3162
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3166
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3170
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3174
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3178
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3182
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3190
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3204
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3208
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3212
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3220
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 617:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3234
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3238
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 619:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3242
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 620:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3252
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 621:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3256
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3260
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 623:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3264
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 624:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3268
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 625:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3272
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 626:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3276
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 627:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 628:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3284
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 629:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3288
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 630:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3292
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 631:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3296
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 632:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3300
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3304
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3308
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3318
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3322
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3326
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3330
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 640:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3340
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3345
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 642:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3350
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3354
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3372
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3376
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3386
		{
			yyVAL.str = ""
		}
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3390
		{
			yyVAL.str = BooleanModeStr
		}
	case 652:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3394
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 653:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3398
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3402
		{
			yyVAL.str = QueryExpansionStr
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3408
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3412
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3418
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3422
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3426
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3430
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3434
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3438
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3444
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3456
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 667:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3460
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3464
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3472
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3494
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3498
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 678:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3507
		{
			yyVAL.expr = nil
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3511
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3516
		{
			yyVAL.str = string("")
		}
	case 681:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3520
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3526
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 683:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3530
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3536
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3541
		{
			yyVAL.expr = nil
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3545
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3551
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3555
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3559
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3565
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3569
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3573
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3577
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3581
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3585
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3589
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3593
		{
			yyVAL.expr = &NullVal{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3599
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3608
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3612
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 701:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3617
		{
			yyVAL.exprs = nil
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3621
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3626
		{
			yyVAL.expr = nil
		}
	case 704:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3630
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3635
		{
			yyVAL.orderBy = nil
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3639
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3645
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3649
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3655
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 710:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3660
		{
			yyVAL.str = AscScr
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3664
		{
			yyVAL.str = AscScr
		}
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3668
		{
			yyVAL.str = DescScr
		}
	case 713:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3673
		{
			yyVAL.limit = nil
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3681
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3685
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 717:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3690
		{
			yyVAL.str = ""
		}
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3694
		{
			yyVAL.str = ForUpdateStr
		}
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3698
		{
			yyVAL.str = ShareModeStr
		}
	case 720:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3711
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 721:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3715
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 722:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3719
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 723:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3724
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 724:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3728
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 725:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3732
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3739
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 727:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3743
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 728:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3747
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 729:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3751
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3756
		{
			yyVAL.updateExprs = nil
		}
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3760
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3766
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3770
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3776
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 735:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3780
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3786
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3792
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3802
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 739:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3806
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3812
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3818
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3822
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3828
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3832
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3836
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 746:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3840
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 748:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3847
		{
			yyVAL.bytes = []byte("charset")
		}
	case 750:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3854
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3858
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3862
		{
			yyVAL.expr = &Default{}
		}
	case 755:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3871
		{
			yyVAL.byt = 0
		}
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3873
		{
			yyVAL.byt = 1
		}
	case 757:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3876
		{
			yyVAL.empty = struct{}{}
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3878
		{
			yyVAL.empty = struct{}{}
		}
	case 759:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3881
		{
			yyVAL.str = ""
		}
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3883
		{
			yyVAL.str = IgnoreStr
		}
	case 761:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3887
		{
			yyVAL.empty = struct{}{}
		}
	case 762:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3889
		{
			yyVAL.empty = struct{}{}
		}
	case 763:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3891
		{
			yyVAL.empty = struct{}{}
		}
	case 764:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3893
		{
			yyVAL.empty = struct{}{}
		}
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3895
		{
			yyVAL.empty = struct{}{}
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3897
		{
			yyVAL.empty = struct{}{}
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3899
		{
			yyVAL.empty = struct{}{}
		}
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3901
		{
			yyVAL.empty = struct{}{}
		}
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3903
		{
			yyVAL.empty = struct{}{}
		}
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3905
		{
			yyVAL.empty = struct{}{}
		}
	case 771:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3908
		{
			yyVAL.empty = struct{}{}
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3910
		{
			yyVAL.empty = struct{}{}
		}
	case 773:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3912
		{
			yyVAL.empty = struct{}{}
		}
	case 774:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3916
		{
			yyVAL.empty = struct{}{}
		}
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3918
		{
			yyVAL.empty = struct{}{}
		}
	case 776:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3922
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3926
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3933
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 780:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3939
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3943
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3950
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4227
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4236
		{
			decNesting(yylex)
		}
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4241
		{
			forceEOF(yylex)
		}
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4246
		{
			forceEOF(yylex)
		}
	case 1039:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4250
		{
			forceEOF(yylex)
		}
	case 1040:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4254
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
