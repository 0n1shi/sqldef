// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const NULLX = 57544
const AUTO_INCREMENT = 57545
const APPROXNUM = 57546
const SIGNED = 57547
const UNSIGNED = 57548
const ZEROFILL = 57549
const ZONE = 57550
const AUTOINCREMENT = 57551
const DATABASES = 57552
const TABLES = 57553
const VITESS_KEYSPACES = 57554
const VITESS_SHARDS = 57555
const VITESS_TABLETS = 57556
const VSCHEMA_TABLES = 57557
const EXTENDED = 57558
const FULL = 57559
const PROCESSLIST = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const INHERIT = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const WITHOUT = 57596
const PARSER = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const TYPECAST = 57601
const CHECK = 57602

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 339,
	153, 339,
	-2, 329,
	-1, 255,
	108, 668,
	-2, 664,
	-1, 256,
	108, 669,
	-2, 665,
	-1, 326,
	79, 844,
	-2, 58,
	-1, 327,
	79, 799,
	-2, 59,
	-1, 332,
	79, 781,
	-2, 635,
	-1, 334,
	79, 821,
	-2, 637,
	-1, 621,
	51, 41,
	53, 41,
	-2, 43,
	-1, 754,
	108, 671,
	-2, 667,
	-1, 984,
	5, 28,
	-2, 471,
	-1, 1009,
	5, 27,
	-2, 610,
	-1, 1094,
	5, 27,
	-2, 64,
	-1, 1290,
	5, 28,
	-2, 611,
	-1, 1358,
	5, 27,
	-2, 613,
	-1, 1445,
	5, 28,
	-2, 614,
}

const yyPrivate = 57344

const yyLast = 12453

var yyAct = [...]int{
	256, 1394, 924, 1435, 478, 818, 690, 1296, 260, 1206,
	1307, 1369, 548, 1179, 1044, 1085, 836, 1096, 547, 3,
	1207, 1012, 1180, 918, 615, 234, 285, 859, 1176, 613,
	318, 902, 819, 865, 53, 88, 228, 1028, 88, 779,
	1152, 976, 66, 262, 249, 858, 787, 1082, 631, 1017,
	259, 806, 331, 790, 913, 480, 486, 630, 434, 756,
	854, 617, 88, 88, 336, 85, 233, 874, 313, 336,
	325, 492, 336, 602, 958, 815, 500, 88, 312, 88,
	229, 230, 231, 232, 258, 88, 243, 571, 576, 577,
	322, 311, 320, 321, 562, 1068, 515, 516, 517, 518,
	519, 520, 521, 514, 52, 316, 524, 446, 891, 447,
	1470, 524, 1217, 247, 1486, 454, 517, 518, 519, 520,
	521, 514, 1467, 508, 524, 511, 1483, 1443, 1420, 1480,
	789, 526, 527, 528, 529, 530, 531, 532, 925, 509,
	510, 507, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 479, 1456, 524, 1408, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	890, 1466, 524, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 1086, 1087, 524, 1280, 479, 1171,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 1425, 1284, 524, 444, 1220, 88, 1202, 1203,
	1201, 336, 336, 336, 336, 514, 336, 475, 524, 850,
	851, 1442, 849, 336, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 1370, 456, 524, 1147,
	632, 1326, 633, 1054, 1055, 1056, 1325, 1277, 479, 1372,
	336, 1059, 1057, 282, 283, 1070, 893, 903, 489, 513,
	512, 522, 523, 515, 516, 517, 518, 519, 520, 521,
	514, 460, 488, 524, 83, 79, 80, 81, 525, 1347,
	483, 487, 1382, 525, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 525, 505, 524, 810,
	1036, 535, 721, 1035, 895, 284, 1037, 1316, 1234, 722,
	1233, 88, 1273, 1271, 1315, 227, 1371, 1377, 88, 88,
	88, 914, 1245, 1246, 336, 1482, 1385, 1478, 525, 1211,
	336, 549, 471, 472, 462, 879, 464, 1436, 1409, 1130,
	560, 597, 816, 1437, 525, 1248, 1355, 875, 1281, 1314,
	621, 894, 1313, 1064, 1063, 1046, 1476, 880, 525, 1310,
	1249, 316, 876, 1257, 461, 463, 1399, 1212, 449, 330,
	440, 887, 1051, 877, 438, 1049, 525, 442, 878, 522,
	523, 515, 516, 517, 518, 519, 520, 521, 514, 77,
	525, 524, 1127, 564, 565, 566, 567, 568, 569, 570,
	1334, 837, 839, 76, 1061, 77, 700, 82, 437, 1027,
	525, 1026, 622, 1025, 628, 436, 445, 903, 206, 513,
	512, 522, 523, 515, 516, 517, 518, 519, 520, 521,
	514, 883, 78, 524, 888, 1058, 875, 336, 88, 875,
	885, 884, 1441, 898, 88, 525, 88, 336, 1131, 88,
	915, 876, 88, 1413, 876, 1373, 88, 1293, 336, 336,
	336, 336, 336, 336, 336, 336, 459, 1139, 689, 992,
	525, 970, 336, 336, 696, 838, 697, 88, 953, 701,
	537, 538, 704, 728, 1308, 1309, 1311, 504, 455, 1128,
	1228, 1126, 336, 725, 734, 499, 88, 856, 855, 731,
	732, 1418, 336, 1242, 1129, 498, 497, 723, 709, 1015,
	57, 1135, 1175, 988, 733, 987, 330, 330, 330, 330,
	634, 330, 499, 1173, 649, 645, 742, 881, 330, 807,
	707, 498, 497, 882, 757, 59, 60, 61, 62, 63,
	1229, 727, 743, 744, 498, 497, 336, 693, 499, 498,
	497, 758, 791, 793, 1376, 502, 954, 754, 1153, 763,
	253, 499, 1053, 525, 799, 802, 499, 497, 809, 794,
	808, 494, 1447, 761, 762, 760, 726, 735, 750, 752,
	807, 439, 999, 499, 886, 1328, 1134, 967, 968, 969,
	75, 1155, 498, 497, 1327, 549, 50, 88, 797, 798,
	88, 88, 88, 88, 88, 525, 759, 820, 1091, 499,
	467, 1089, 88, 782, 780, 88, 781, 1419, 835, 88,
	1071, 1354, 784, 785, 88, 88, 448, 817, 336, 330,
	804, 1323, 1259, 794, 479, 636, 1157, 1416, 1162, 812,
	1156, 336, 1154, 316, 316, 316, 316, 316, 1160, 498,
	497, 310, 441, 844, 443, 845, 1083, 1066, 316, 1158,
	1159, 21, 1430, 1490, 74, 1215, 499, 316, 989, 822,
	823, 1214, 825, 1213, 328, 1161, 1163, 1052, 821, 853,
	841, 824, 795, 796, 833, 1362, 1479, 847, 803, 904,
	905, 906, 907, 336, 1038, 336, 88, 842, 846, 88,
	863, 88, 1430, 1468, 88, 336, 1462, 479, 451, 452,
	453, 920, 70, 72, 927, 498, 497, 238, 746, 748,
	749, 783, 811, 747, 813, 814, 931, 71, 73, 948,
	706, 949, 499, 705, 950, 1362, 1459, 1362, 1454, 916,
	917, 694, 688, 1362, 1453, 68, 1305, 1452, 1362, 1433,
	479, 490, 330, 1362, 1391, 1362, 1386, 1362, 479, 1362,
	1363, 1305, 1304, 330, 330, 330, 330, 330, 330, 330,
	330, 956, 957, 692, 487, 1198, 479, 330, 330, 457,
	1107, 754, 1292, 479, 1237, 1236, 959, 757, 979, 960,
	1231, 1232, 980, 1231, 1230, 982, 479, 737, 625, 984,
	985, 986, 599, 479, 758, 792, 479, 502, 995, 450,
	330, 641, 640, 1001, 435, 1390, 1002, 1003, 1004, 1005,
	972, 1431, 1389, 1430, 539, 540, 541, 542, 543, 544,
	545, 1223, 598, 1177, 1009, 1278, 1013, 983, 626, 1014,
	624, 336, 23, 54, 88, 69, 1013, 792, 1142, 1108,
	1104, 786, 1000, 1109, 1106, 1105, 599, 998, 73, 336,
	1014, 800, 800, 1288, 1030, 1007, 1032, 800, 1008, 1110,
	336, 966, 599, 1031, 1022, 1103, 994, 1241, 1235, 23,
	599, 982, 843, 1039, 624, 848, 1040, 316, 50, 88,
	982, 23, 604, 607, 608, 609, 605, 1033, 606, 610,
	212, 1013, 1018, 1019, 800, 1357, 513, 512, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 993, 981,
	524, 982, 88, 336, 222, 50, 336, 1088, 1072, 1073,
	1060, 1075, 627, 330, 328, 996, 991, 50, 240, 1047,
	1048, 1050, 1094, 1239, 1238, 50, 330, 729, 1484, 1464,
	1423, 336, 1092, 1396, 88, 88, 1393, 1084, 1392, 1381,
	1341, 895, 88, 1076, 919, 1078, 1079, 1080, 1081, 1100,
	1090, 336, 1222, 1192, 207, 914, 1101, 691, 990, 1042,
	209, 1018, 1019, 1024, 50, 909, 1150, 215, 211, 921,
	922, 741, 1140, 908, 65, 1378, 1375, 1240, 330, 1177,
	330, 1043, 1021, 896, 897, 899, 900, 901, 703, 695,
	330, 336, 336, 1178, 476, 1146, 820, 213, 1145, 1023,
	217, 830, 820, 910, 911, 912, 831, 828, 1164, 1183,
	1165, 1172, 829, 1197, 330, 1181, 1151, 827, 826, 1475,
	336, 1465, 336, 336, 1174, 754, 1188, 1187, 435, 1186,
	1138, 955, 832, 1200, 608, 609, 244, 245, 1473, 1189,
	1190, 965, 208, 1191, 964, 1199, 1193, 755, 1077, 1205,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 1204, 481, 604, 607, 608,
	609, 605, 525, 606, 610, 639, 210, 482, 218, 219,
	220, 221, 225, 493, 336, 458, 1226, 224, 223, 1342,
	1221, 1286, 875, 336, 929, 753, 491, 870, 702, 869,
	1099, 871, 872, 923, 612, 88, 873, 876, 241, 242,
	493, 336, 1244, 1224, 1225, 235, 1227, 963, 1402, 1250,
	336, 236, 54, 88, 1401, 962, 1029, 1345, 1252, 1014,
	1263, 1210, 1209, 1421, 495, 1254, 1422, 1265, 1410, 1062,
	724, 56, 1255, 1261, 330, 1258, 58, 1102, 1247, 1274,
	1275, 1276, 1262, 623, 1279, 1045, 51, 1, 1384, 67,
	1260, 1269, 1455, 1429, 1216, 1243, 316, 1289, 1290, 1291,
	1098, 1294, 1111, 336, 926, 336, 336, 336, 88, 336,
	1095, 936, 1298, 1299, 1300, 336, 1434, 1287, 1368, 867,
	857, 433, 64, 1295, 1417, 1336, 868, 1337, 1338, 1339,
	1285, 1312, 1301, 336, 1317, 1303, 1319, 549, 1093, 1335,
	1320, 330, 1040, 866, 864, 642, 889, 1069, 328, 336,
	336, 88, 336, 336, 892, 648, 1329, 646, 336, 647,
	1074, 860, 644, 650, 643, 214, 330, 323, 336, 1332,
	611, 635, 1322, 496, 1324, 1125, 1124, 932, 1133, 720,
	1333, 1331, 952, 474, 216, 533, 330, 961, 1034, 329,
	275, 274, 277, 278, 279, 280, 1184, 1321, 1353, 276,
	281, 730, 485, 336, 336, 1400, 1344, 997, 330, 1346,
	559, 805, 484, 1364, 1365, 1366, 336, 261, 745, 273,
	1358, 1356, 270, 800, 336, 1181, 1185, 1029, 1367, 800,
	272, 271, 973, 974, 975, 736, 1374, 1006, 1379, 506,
	251, 315, 1383, 595, 603, 336, 601, 86, 600, 753,
	226, 1020, 336, 1016, 314, 330, 1141, 330, 1208, 1397,
	1283, 1407, 740, 1403, 1404, 1405, 1406, 25, 55, 246,
	19, 18, 250, 336, 86, 86, 17, 20, 16, 15,
	14, 1411, 286, 47, 29, 13, 12, 11, 1412, 86,
	1415, 86, 336, 1387, 1181, 1388, 10, 86, 9, 8,
	7, 1424, 6, 336, 336, 5, 4, 336, 237, 22,
	1427, 1428, 2, 0, 1432, 0, 0, 0, 0, 1251,
	1218, 0, 1440, 1426, 336, 1439, 1444, 1445, 1253, 820,
	47, 336, 0, 0, 336, 1451, 0, 0, 239, 0,
	0, 336, 1449, 1450, 317, 0, 1256, 336, 0, 1461,
	1460, 0, 0, 0, 0, 330, 1438, 549, 513, 512,
	522, 523, 515, 516, 517, 518, 519, 520, 521, 514,
	0, 0, 524, 1471, 0, 336, 1472, 0, 0, 860,
	0, 0, 1474, 0, 0, 1469, 1458, 88, 942, 0,
	0, 465, 0, 0, 0, 336, 1487, 0, 0, 0,
	0, 941, 0, 1491, 1492, 0, 0, 977, 1297, 0,
	1297, 1297, 1297, 0, 1302, 1266, 1267, 1481, 1268, 86,
	330, 0, 1270, 0, 1272, 1477, 0, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 1297, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 1148, 1149,
	0, 0, 0, 0, 1297, 1330, 0, 330, 330, 0,
	0, 1166, 1167, 1340, 1169, 1170, 0, 0, 0, 0,
	1306, 0, 0, 1343, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 937, 934, 935, 0, 933,
	0, 1144, 0, 466, 466, 466, 466, 0, 466, 0,
	0, 0, 0, 0, 0, 466, 0, 0, 1360, 1361,
	0, 0, 0, 1168, 0, 0, 0, 944, 947, 0,
	0, 1208, 47, 86, 0, 0, 0, 0, 0, 1380,
	86, 619, 86, 0, 0, 0, 0, 534, 0, 0,
	536, 0, 0, 0, 525, 0, 1117, 0, 0, 0,
	1395, 0, 0, 0, 0, 0, 0, 1297, 0, 0,
	860, 0, 860, 0, 0, 0, 939, 546, 0, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 1414, 561,
	563, 563, 563, 563, 563, 563, 563, 563, 0, 591,
	592, 593, 594, 938, 0, 0, 0, 1208, 0, 0,
	614, 0, 0, 468, 469, 470, 0, 473, 1297, 1297,
	1118, 0, 1297, 0, 477, 1120, 1113, 1114, 1264, 1121,
	1116, 1115, 0, 0, 1123, 1119, 800, 0, 0, 1446,
	0, 0, 943, 0, 0, 1122, 1448, 0, 0, 1395,
	0, 1112, 0, 0, 0, 0, 1457, 0, 945, 0,
	86, 0, 1463, 0, 0, 0, 86, 0, 86, 0,
	1144, 86, 0, 0, 86, 0, 0, 0, 708, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1297, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1395, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 0, 466,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	466, 466, 466, 466, 466, 466, 466, 466, 1348, 1349,
	0, 1350, 1351, 1352, 466, 466, 978, 0, 0, 250,
	0, 0, 1097, 860, 250, 250, 0, 0, 801, 801,
	250, 0, 0, 0, 801, 0, 513, 512, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 0, 0,
	524, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 250, 250, 250, 0, 86,
	0, 801, 86, 86, 86, 86, 86, 0, 0, 47,
	0, 0, 0, 0, 834, 0, 0, 86, 0, 0,
	0, 619, 0, 550, 0, 0, 86, 86, 699, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	711, 712, 713, 714, 715, 716, 717, 572, 0, 0,
	0, 0, 0, 718, 719, 513, 512, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 0, 0, 524,
	0, 0, 317, 317, 317, 317, 317, 0, 0, 0,
	574, 0, 0, 0, 0, 0, 0, 614, 0, 840,
	0, 0, 0, 0, 0, 0, 317, 0, 86, 0,
	0, 86, 0, 86, 0, 0, 86, 0, 0, 0,
	579, 580, 581, 582, 583, 584, 585, 586, 587, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 708, 0, 0, 589, 573, 0, 0, 0, 578,
	0, 0, 0, 250, 0, 0, 1488, 0, 0, 0,
	0, 0, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 466, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 525, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 669, 951, 0, 1010, 1011,
	0, 1067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 317, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1136, 1137, 0, 1065,
	0, 654, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 708, 47, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 0, 0, 0, 801, 0, 0, 0,
	0, 0, 0, 466, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 0, 683, 684, 0, 685, 686,
	687, 671, 672, 673, 674, 651, 653, 0, 589, 652,
	655, 0, 667, 656, 657, 658, 659, 660, 661, 662,
	663, 664, 665, 666, 668, 675, 676, 677, 678, 679,
	680, 681, 682, 0, 0, 0, 0, 0, 0, 0,
	0, 1182, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1194, 1195,
	1196, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 86, 0, 147,
	0, 91, 1132, 501, 1219, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 86, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 503, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 499, 0, 0,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 86, 1282, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 1182, 0, 0, 1359, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 1398, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1182, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 422, 412, 0, 382, 424,
	359, 374, 432, 375, 376, 404, 345, 390, 147, 371,
	91, 362, 339, 368, 340, 360, 384, 113, 358, 414,
	393, 126, 430, 129, 398, 0, 168, 138, 0, 86,
	386, 416, 388, 410, 381, 405, 350, 397, 425, 372,
	401, 426, 0, 0, 0, 335, 0, 861, 862, 0,
	0, 0, 0, 0, 104, 0, 400, 421, 370, 403,
	338, 399, 0, 343, 346, 431, 419, 365, 366, 1041,
	0, 0, 0, 0, 0, 0, 385, 389, 407, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	396, 0, 0, 0, 347, 344, 0, 383, 0, 0,
	0, 349, 0, 364, 408, 1485, 337, 411, 417, 380,
	193, 420, 378, 377, 154, 0, 107, 0, 172, 117,
	373, 127, 406, 423, 387, 415, 361, 369, 109, 367,
	161, 148, 184, 395, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	341, 0, 169, 186, 204, 205, 342, 357, 418, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 402, 162, 106, 185, 167, 353,
	356, 351, 352, 391, 392, 427, 428, 429, 409, 348,
	0, 354, 355, 0, 413, 121, 394, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 103, 422, 412,
	0, 382, 424, 359, 374, 432, 375, 376, 404, 345,
	390, 147, 371, 91, 362, 339, 368, 340, 360, 384,
	113, 358, 414, 393, 126, 430, 129, 398, 0, 168,
	138, 0, 0, 386, 416, 388, 410, 381, 405, 350,
	397, 425, 372, 401, 426, 0, 0, 0, 335, 0,
	861, 862, 0, 0, 0, 0, 0, 104, 0, 400,
	421, 370, 403, 338, 399, 0, 343, 346, 431, 419,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 385,
	389, 407, 379, 0, 0, 0, 0, 0, 0, 0,
	0, 363, 0, 396, 0, 0, 0, 347, 344, 0,
	383, 0, 0, 0, 349, 0, 364, 408, 0, 337,
	411, 417, 380, 193, 420, 378, 377, 154, 0, 107,
	0, 172, 117, 373, 127, 406, 423, 387, 415, 361,
	369, 109, 367, 161, 148, 184, 395, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 341, 0, 169, 186, 204, 205, 342,
	357, 418, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 402, 162, 106,
	185, 167, 353, 356, 351, 352, 391, 392, 427, 428,
	429, 409, 348, 0, 354, 355, 0, 413, 121, 394,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	103, 422, 412, 0, 382, 424, 359, 374, 432, 375,
	376, 404, 345, 390, 147, 371, 91, 362, 339, 368,
	340, 360, 384, 113, 358, 414, 393, 126, 430, 129,
	398, 0, 168, 138, 0, 0, 386, 416, 388, 410,
	381, 405, 350, 397, 425, 372, 401, 426, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 400, 421, 370, 403, 338, 399, 0, 343,
	346, 431, 419, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 385, 389, 407, 379, 0, 0, 0, 0,
	0, 0, 1143, 0, 363, 0, 396, 0, 0, 0,
	347, 344, 0, 383, 0, 0, 0, 349, 0, 364,
	408, 0, 337, 411, 417, 380, 193, 420, 378, 377,
	154, 0, 107, 0, 172, 117, 373, 127, 406, 423,
	387, 415, 361, 369, 109, 367, 161, 148, 184, 395,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 341, 0, 169, 186,
	204, 205, 342, 357, 418, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	402, 162, 106, 185, 167, 353, 356, 351, 352, 391,
	392, 427, 428, 429, 409, 348, 0, 354, 355, 0,
	413, 121, 394, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 103, 422, 412, 0, 382, 424, 359,
	374, 432, 375, 376, 404, 345, 390, 147, 371, 91,
	362, 339, 368, 340, 360, 384, 113, 358, 414, 393,
	126, 430, 129, 398, 0, 168, 138, 0, 0, 386,
	416, 388, 410, 381, 405, 350, 397, 425, 372, 401,
	426, 50, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 400, 421, 370, 403, 338,
	399, 0, 343, 346, 431, 419, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 385, 389, 407, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 363, 0, 396,
	0, 0, 0, 347, 344, 0, 383, 0, 0, 0,
	349, 0, 364, 408, 0, 337, 411, 417, 380, 193,
	420, 378, 377, 154, 0, 107, 0, 172, 117, 373,
	127, 406, 423, 387, 415, 361, 369, 109, 367, 161,
	148, 184, 395, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 341,
	0, 169, 186, 204, 205, 342, 357, 418, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 402, 162, 106, 185, 167, 353, 356,
	351, 352, 391, 392, 427, 428, 429, 409, 348, 0,
	354, 355, 0, 413, 121, 394, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 103, 422, 412, 0,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 0, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 751, 0,
	363, 0, 396, 0, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 341, 0, 169, 186, 204, 205, 342, 357,
	418, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 402, 162, 106, 185,
	167, 353, 356, 351, 352, 391, 392, 427, 428, 429,
	409, 348, 0, 354, 355, 0, 413, 121, 394, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 0, 103,
	422, 412, 0, 382, 424, 359, 374, 432, 375, 376,
	404, 345, 390, 147, 371, 91, 362, 339, 368, 340,
	360, 384, 113, 358, 414, 393, 126, 430, 129, 398,
	0, 168, 138, 0, 0, 386, 416, 388, 410, 381,
	405, 350, 397, 425, 372, 401, 426, 0, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 400, 421, 370, 403, 338, 399, 0, 343, 346,
	431, 419, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 385, 389, 407, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 396, 0, 0, 0, 347,
	344, 0, 383, 0, 0, 0, 349, 0, 364, 408,
	0, 337, 411, 417, 380, 193, 420, 378, 377, 154,
	0, 107, 0, 172, 117, 373, 127, 406, 423, 387,
	415, 361, 369, 109, 367, 161, 148, 184, 395, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 341, 0, 169, 186, 204,
	205, 342, 357, 418, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 402,
	162, 106, 185, 167, 353, 356, 351, 352, 391, 392,
	427, 428, 429, 409, 348, 0, 354, 355, 0, 413,
	121, 394, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 103, 422, 412, 0, 382, 424, 359, 374,
	432, 375, 376, 404, 345, 390, 147, 371, 91, 362,
	339, 368, 340, 360, 384, 113, 358, 414, 393, 126,
	430, 129, 398, 0, 168, 138, 0, 0, 386, 416,
	388, 410, 381, 405, 350, 397, 425, 372, 401, 426,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 400, 421, 370, 403, 338, 399,
	0, 343, 346, 431, 419, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 385, 389, 407, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 396, 0,
	0, 0, 347, 344, 0, 383, 0, 0, 0, 349,
	0, 364, 408, 0, 337, 411, 417, 380, 193, 420,
	378, 377, 154, 0, 107, 0, 172, 117, 373, 127,
	406, 423, 387, 415, 361, 369, 109, 367, 161, 148,
	184, 395, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 341, 0,
	169, 186, 204, 205, 342, 357, 418, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 402, 162, 106, 185, 167, 353, 356, 351,
	352, 391, 392, 427, 428, 429, 409, 348, 0, 354,
	355, 0, 413, 121, 394, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 103, 422, 412, 0, 382,
	424, 359, 374, 432, 375, 376, 404, 345, 390, 147,
	371, 91, 362, 339, 368, 340, 360, 384, 113, 358,
	414, 393, 126, 430, 129, 398, 0, 168, 138, 0,
	0, 386, 416, 388, 410, 381, 405, 350, 397, 425,
	372, 401, 426, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 400, 421, 370,
	403, 338, 399, 0, 343, 346, 431, 419, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 385, 389, 407,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 396, 0, 0, 0, 347, 344, 0, 383, 0,
	0, 0, 349, 0, 364, 408, 0, 337, 411, 417,
	380, 193, 420, 378, 377, 154, 0, 107, 0, 172,
	117, 373, 127, 406, 423, 387, 415, 361, 369, 109,
	367, 161, 148, 184, 395, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 333, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 341, 0, 169, 186, 204, 205, 342, 357, 418,
	196, 197, 198, 199, 0, 0, 0, 334, 332, 120,
	165, 124, 131, 157, 202, 402, 162, 106, 185, 167,
	353, 356, 351, 352, 391, 392, 427, 428, 429, 409,
	348, 0, 354, 355, 0, 413, 121, 394, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 103, 422,
	412, 0, 382, 424, 359, 374, 432, 375, 376, 404,
	345, 390, 147, 371, 91, 362, 339, 368, 340, 360,
	384, 113, 358, 414, 393, 126, 430, 129, 398, 0,
	168, 138, 0, 0, 386, 416, 388, 410, 381, 405,
	350, 397, 425, 372, 401, 426, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	400, 421, 370, 403, 338, 399, 0, 343, 346, 431,
	419, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	385, 389, 407, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 396, 0, 0, 0, 347, 344,
	0, 383, 0, 0, 0, 349, 0, 364, 408, 0,
	337, 411, 417, 380, 193, 420, 378, 377, 154, 0,
	107, 0, 172, 117, 373, 127, 406, 423, 387, 415,
	361, 369, 109, 367, 161, 148, 184, 395, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 341, 0, 169, 186, 204, 205,
	342, 357, 418, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 402, 162,
	106, 185, 167, 353, 356, 351, 352, 391, 392, 427,
	428, 429, 409, 348, 0, 354, 355, 0, 413, 121,
	394, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 103, 422, 412, 0, 382, 424, 359, 374, 432,
	375, 376, 404, 345, 390, 147, 371, 91, 362, 339,
	368, 340, 360, 384, 113, 358, 414, 393, 126, 430,
	129, 398, 0, 168, 138, 0, 0, 386, 416, 388,
	410, 381, 405, 350, 397, 425, 372, 401, 426, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 400, 421, 370, 403, 338, 399, 0,
	343, 346, 431, 419, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 385, 389, 407, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 396, 0, 0,
	0, 347, 344, 0, 383, 0, 0, 0, 349, 0,
	364, 408, 0, 337, 411, 417, 380, 193, 420, 378,
	377, 154, 0, 107, 0, 172, 117, 373, 127, 406,
	423, 387, 415, 361, 369, 109, 367, 161, 148, 184,
	395, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 629, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	333, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 341, 0, 169,
	186, 204, 205, 342, 357, 418, 196, 197, 198, 199,
	0, 0, 0, 334, 332, 120, 165, 124, 131, 157,
	202, 402, 162, 106, 185, 167, 353, 356, 351, 352,
	391, 392, 427, 428, 429, 409, 348, 0, 354, 355,
	0, 413, 121, 394, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 103, 422, 412, 0, 382, 424,
	359, 374, 432, 375, 376, 404, 345, 390, 147, 371,
	91, 362, 339, 368, 340, 360, 384, 113, 358, 414,
	393, 126, 430, 129, 398, 0, 168, 138, 0, 0,
	386, 416, 388, 410, 381, 405, 350, 397, 425, 372,
	401, 426, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 400, 421, 370, 403,
	338, 399, 0, 343, 346, 431, 419, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 385, 389, 407, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	396, 0, 0, 0, 347, 344, 0, 383, 0, 0,
	0, 349, 0, 364, 408, 0, 337, 411, 417, 380,
	193, 420, 378, 377, 154, 0, 107, 0, 172, 117,
	373, 127, 406, 423, 387, 415, 361, 369, 109, 367,
	161, 148, 184, 395, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 324, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 333, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	341, 0, 169, 186, 204, 205, 342, 357, 418, 196,
	197, 198, 199, 0, 0, 0, 334, 332, 327, 326,
	124, 131, 157, 202, 402, 162, 106, 185, 167, 353,
	356, 351, 352, 391, 392, 427, 428, 429, 409, 348,
	0, 354, 355, 0, 413, 121, 394, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 103, 91, 788,
	0, 257, 0, 0, 0, 113, 254, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 252,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 248, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 305, 103, 147, 0, 91, 0,
	0, 257, 0, 0, 0, 113, 254, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 479, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 252,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 305, 103, 147, 0, 91, 0,
	0, 257, 0, 0, 0, 113, 254, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 252,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 248, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 305, 103, 147, 0, 91, 0,
	0, 257, 0, 0, 0, 113, 254, 0, 0, 126,
	296, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	287, 288, 0, 0, 0, 0, 0, 0, 852, 0,
	50, 0, 0, 255, 275, 274, 277, 278, 279, 280,
	0, 0, 104, 276, 281, 282, 283, 0, 0, 252,
	268, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 265, 266, 0, 0, 0, 0, 308, 0,
	267, 0, 0, 263, 264, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 306, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 297, 307, 303,
	304, 301, 302, 300, 299, 298, 309, 289, 290, 291,
	292, 294, 0, 121, 293, 90, 98, 128, 200, 201,
	23, 156, 115, 187, 305, 103, 0, 0, 0, 0,
	0, 0, 147, 0, 91, 0, 0, 257, 0, 0,
	0, 113, 254, 0, 0, 126, 296, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 255,
	275, 274, 277, 278, 279, 280, 0, 0, 104, 276,
	281, 282, 283, 0, 0, 252, 268, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	0, 0, 0, 0, 308, 0, 267, 0, 0, 263,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 306, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	305, 103, 147, 0, 91, 0, 0, 257, 0, 0,
	0, 113, 254, 0, 0, 126, 296, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 255,
	275, 274, 277, 278, 279, 280, 0, 0, 104, 276,
	281, 282, 283, 0, 0, 252, 268, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	0, 0, 0, 0, 308, 0, 267, 0, 0, 263,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 306, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	305, 103, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 296, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 255,
	275, 274, 277, 278, 279, 280, 0, 0, 104, 276,
	281, 282, 283, 0, 0, 0, 268, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	0, 0, 0, 0, 308, 0, 267, 0, 0, 263,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 306, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 1489, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	305, 103, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 296, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 255,
	275, 274, 277, 278, 279, 280, 0, 0, 104, 276,
	281, 282, 283, 0, 0, 0, 268, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	0, 0, 0, 0, 308, 0, 267, 0, 0, 263,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 306, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	305, 103, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 0, 0, 524, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	525, 103, 147, 0, 91, 0, 618, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 620, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 23, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 103, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 738, 0, 0, 739,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 103, 91, 0, 0, 0,
	0, 0, 0, 113, 638, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 637, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 618, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 620, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 616, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 620, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 103, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 503, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 103, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	698, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 0, 0, 0, 0,
	596, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 319, 156, 115, 187,
	0, 103, 0, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 103, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	103, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	23, 24, 48, 26, 27, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 42,
	156, 115, 187, 28, 103, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 0, 0, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 30, 31, 33, 32, 35,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 36,
	43, 44, 0, 0, 45, 46, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 39, 0,
	40, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49,
}

var yyPact = [...]int{
	12194, -1000, -174, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1127, 1156, -1000, -1000, -1000, -1000, -1000, -1000, 942,
	595, 283, 314, 157, 11173, 300, 869, 11689, -1000, 150,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 885, -1000, -1000,
	-1000, -1000, -1000, 1118, 1125, 932, 1108, 1018, -1000, 6248,
	267, 9622, 10915, 5470, -1000, 759, 296, 288, 11431, 247,
	247, 11431, 247, -1000, -53, 298, 11689, -1000, 11689, 245,
	754, 245, 245, 245, 11689, -1000, 380, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11689, 724, 1076, 216,
	3559, 3559, 3559, 3559, 180, 3559, -17, 964, -1000, -1000,
	-1000, -1000, 3559, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 696, 1067, 7034, 7034, 1127, -1000, 885,
	-1000, -1000, -1000, 1082, -1000, -1000, 508, 1143, -1000, 2411,
	379, -1000, 7034, 52, 893, -1000, -1000, 893, -1000, -1000,
	371, -1000, -1000, 7554, 7554, 7554, 7554, 7554, 7554, 7554,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 893, -1000, 6774, 893, 893, 893,
	893, 893, 893, 893, 893, 7034, 893, 893, 893, 893,
	893, 893, 893, 893, 893, 1842, 893, 893, 893, 893,
	10654, 803, 1047, -1000, -1000, -1000, 1102, 8590, 9364, 11689,
	787, -1000, 879, 5197, 0, -1000, -1000, -1000, 441, 9106,
	-1000, -1000, -1000, 1066, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 758, -1000, 2156, 11431, 11689, 926, 718,
	476, 686, 959, 11689, -1000, 10396, 3559, 285, 11689, 1095,
	958, 11689, 678, 675, -1000, 4924, -1000, 3559, 3559, 3559,
	3559, 3559, 3559, 3559, 3559, -1000, -1000, -1000, -1000, -1000,
	-1000, 3559, 3559, -1000, 74, -1000, 11689, -1000, -1000, -1000,
	-1000, 1151, 404, 523, 375, 894, -1000, 475, 1118, 696,
	1018, 8848, 950, -1000, -1000, 11689, -1000, 7034, 7034, 652,
	-1000, 10138, -1000, -1000, 3832, 409, 7554, 544, 486, 7554,
	7554, 7554, 7554, 7554, 7554, 7554, 7554, 7554, 7554, 7554,
	7554, 7554, 7554, 7554, 559, 1842, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 666, -1000, 885, 1224, 1224, 7,
	7, 7, 7, 7, 7, 7814, 5728, 696, 752, 480,
	6774, 6248, 6248, 7034, 7034, 11947, 11947, 6248, 1109, 454,
	480, 11947, -1000, 696, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 108, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6248, 6248, 6248, 6248, 198, 11689, -1000, 11947, 9622,
	9622, 9622, 9622, 9622, -1000, 998, 997, -1000, 987, 981,
	1012, 11689, -1000, 749, 8590, 353, 893, -1000, 9880, -1000,
	-1000, 198, 831, 9622, 11689, -1000, -1000, 4651, 879, 0,
	832, -1000, -19, -24, 6508, 393, -1000, -1000, -1000, -1000,
	3013, 993, 307, -109, 33, -1000, -1000, -1000, -1000, 909,
	-1000, 909, 252, 909, 909, 909, 64, 64, 64, 64,
	64, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 941, 933,
	-1000, 909, 909, 909, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 923, 269, 923, 912, 912, 939, 1101,
	-132, 659, 3559, 1091, 3559, 11689, -1000, 1463, 11689, -1000,
	11689, -1000, -1000, 11689, 3559, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	467, -1000, -1000, -1000, -1000, 1015, 7034, 7034, 4378, 7034,
	-1000, -1000, -1000, 1067, -1000, 1109, 1126, -1000, 1032, 1029,
	6248, -1000, -1000, 409, 497, -1000, -1000, 521, -1000, -1000,
	-1000, -1000, 363, 893, -1000, 1865, -1000, -1000, -1000, -1000,
	544, 7554, 7554, 7554, 1358, 1865, 1776, 287, 82, 7,
	20, 20, 114, 114, 114, 114, 114, 2, 2, -1000,
	-1000, -1000, -1000, 696, -1000, -1000, -1000, 696, 6248, 868,
	-1000, -1000, 7034, -1000, 696, 742, 742, 462, 646, 925,
	-1000, 361, 865, 742, 6248, 505, -1000, 7034, 696, -1000,
	-1000, 742, 696, 742, 742, 836, 893, -1000, 848, -1000,
	430, 1047, 931, 952, 852, -1000, -1000, -1000, -1000, 979,
	-1000, 943, -1000, -1000, -1000, -1000, -1000, 294, 292, 290,
	11431, -1000, 1137, 9622, 827, -1000, -1000, 832, 0, 58,
	-1000, -1000, -1000, 480, -1000, -1000, 639, 830, 2740, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 927, 951, 11431,
	221, 228, 320, 317, 622, -1000, -1000, -1000, 496, 186,
	1150, -1000, -1000, 220, -1000, 219, 893, 600, 11689, -1000,
	-185, -1000, 31, -1000, -1000, 562, 64, 64, 909, 64,
	-1000, -1000, 393, 1039, 393, 393, 393, 393, 599, 599,
	-86, -86, -1000, -1000, 553, 923, -1000, -1000, -1000, 550,
	-1000, 11689, 11431, 885, -1000, 4105, -1000, -1000, -1000, -1000,
	-1000, 1098, -1000, 725, 1581, 370, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 195, 332, -1000,
	3559, -1000, 499, 11689, 11689, 1013, 480, 480, 359, -1000,
	-1000, 11689, -1000, -1000, -1000, -1000, 837, -1000, -1000, -1000,
	3286, 6248, -1000, 1358, 1865, 169, -1000, 7554, 7554, -1000,
	-1000, 742, 6248, 480, -1000, -1000, -1000, 453, 559, 453,
	7554, 7554, 4378, 7554, 7554, -78, 828, 445, -1000, 7034,
	436, -1000, -1000, -1000, -1000, -1000, 949, 11947, 893, -1000,
	8332, 11431, 1127, 11947, 7034, 7034, -1000, -1000, 7034, 921,
	-1000, 7034, -1000, -1000, -1000, 893, 893, 893, 722, -1000,
	1127, 827, -1000, -1000, -1000, -32, -38, -1000, -1000, 3013,
	-1000, 3013, 11431, 1142, 199, 243, -1000, 618, 616, -1000,
	610, -1000, -1000, -1000, -164, -1000, -1000, -1000, 909, -1000,
	-1000, 893, -43, -1000, -1000, 7034, -1000, 920, -1000, -1000,
	-1000, 777, 393, 393, 64, 393, -1000, 435, -1000, -1000,
	-1000, -1000, 740, -1000, 737, -1000, 125, 123, -1000, 825,
	-1000, 731, 892, 947, -1000, 824, -1000, 424, 1113, 164,
	-1000, 226, -1000, 11431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11431, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11689, -1000, -1000, -1000, -1000, -1000,
	11431, 237, -1000, -1000, 575, 7034, -1000, -1000, -1000, 4105,
	-1000, 1137, 9622, -1000, -1000, 696, -1000, 7554, 1865, 1865,
	-1000, -1000, 696, 909, 909, -1000, 909, 912, -1000, -1000,
	909, 139, 909, 138, 696, 696, 194, 816, -1000, 134,
	329, 893, -61, -1000, 480, 7034, -1000, 1084, 783, 810,
	-1000, -1000, 5988, 696, 729, 349, 722, 1118, -1000, 480,
	480, 480, 11431, 480, 11431, 11431, 11431, 8074, 11431, 1118,
	-1000, -1000, -1000, -1000, 2740, -1000, 708, -1000, 909, 330,
	330, 218, 215, -1000, -1000, -1000, -1000, 121, -1000, 696,
	909, 580, 11431, -1000, -1000, -1000, 393, -1000, -1000, -1000,
	64, 574, 64, 21, 16, 536, -1000, 527, 11431, 11431,
	11689, 4105, 3013, 279, 1209, -1000, -1000, 11431, -1000, -1000,
	-1000, 908, -1000, -1000, -1000, -1000, 1083, 11431, -1000, -1000,
	480, 1134, 819, -1000, 1865, -1000, -1000, 224, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7554, 7554, -1000,
	7554, 7554, 7554, 696, 564, 480, 212, -1000, 893, -1000,
	-1000, 873, 11431, 11431, -1000, -1000, 706, -1000, 704, 704,
	704, 353, -1000, -1000, 185, 11431, -1000, 946, -1000, -1000,
	488, 160, 945, 11431, 907, 91, -86, -1000, -1000, 170,
	702, -1000, 393, -1000, 393, -1000, -1000, 768, 761, 700,
	906, 904, -1000, -1000, 11431, -1000, -1000, -1000, -1000, -1000,
	901, 11431, 893, 242, 1130, 1122, -1000, -1000, 100, 100,
	100, 100, 68, -1000, -1000, 1149, -1000, 893, -1000, 885,
	345, -1000, 11431, -1000, -1000, -1000, -1000, -1000, 185, -1000,
	582, 422, 560, -144, -1000, 1144, -1000, -1000, 1146, 898,
	-1000, 11431, -1000, -1000, -1000, -63, -1000, -1000, -1000, -1000,
	-1000, 1137, 11431, 11431, 770, -1000, 11431, 695, 193, 209,
	-1000, 7034, 7034, -1000, -1000, -1000, -1000, 696, 174, -146,
	11947, 810, 696, 11431, -1000, -1000, -1000, 514, -1000, -1000,
	11431, 330, 330, 11431, 693, -1000, -1000, 690, 684, -115,
	11431, 7034, 682, 926, 653, -1000, 11431, 897, 480, 794,
	-1000, 1004, -98, -152, 793, -1000, -1000, -1000, -1000, -1000,
	-1000, 649, -1000, 1137, -1000, -1000, -167, -1000, 480, -1000,
	-132, -1000, 193, 1026, 11431, -1000, 1002, -1000, 229, -1000,
	7034, -1000, -1000, 181, 632, -141, 11689, 480, 178, -1000,
	-147, 896, 893, -160, 11431, 7294, -1000, 609, 100, 696,
	-1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1402, 18, 661, 1399, 1398, 1396, 1395, 1392, 1390,
	1389, 1388, 1386, 1377, 1376, 1375, 1374, 1370, 1369, 1368,
	1367, 1366, 1361, 1360, 510, 1359, 1358, 1357, 71, 1352,
	86, 1351, 1350, 41, 130, 46, 53, 44, 1346, 29,
	78, 68, 1344, 49, 1343, 1341, 92, 1338, 73, 1336,
	1334, 30, 1333, 1331, 16, 21, 1330, 50, 1329, 1327,
	84, 560, 1325, 1321, 1320, 1312, 1309, 1308, 59, 12,
	13, 26, 22, 1307, 43, 8, 1301, 51, 1300, 1297,
	1296, 1295, 34, 1292, 56, 1291, 25, 55, 1286, 7,
	75, 37, 28, 5, 90, 57, 1279, 32, 70, 48,
	1278, 1277, 590, 1275, 1274, 1273, 1272, 1269, 1268, 626,
	581, 1267, 1266, 1265, 52, 0, 305, 610, 76, 1263,
	42, 1261, 1302, 74, 61, 24, 1260, 36, 1481, 39,
	1257, 1255, 40, 87, 1254, 89, 88, 1253, 1252, 1249,
	1247, 1245, 351, 31, 60, 1244, 1237, 1236, 15, 54,
	23, 47, 58, 1235, 1234, 1233, 33, 1216, 10, 14,
	1, 67, 1214, 1212, 1211, 1210, 45, 27, 1209, 20,
	9, 11, 1208, 1206, 3, 1201, 17, 1200, 2, 1194,
	6, 1192, 1190, 1185, 1184, 1183, 1182, 1179, 1178, 1177,
	1176, 1372, 4, 1173, 1168, 1167, 1166, 94,
}

var yyR1 = [...]int{
	0, 189, 190, 190, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 193,
	193, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 182,
	182, 182, 183, 183, 183, 183, 183, 183, 185, 185,
	186, 186, 120, 120, 180, 180, 179, 178, 178, 177,
	177, 176, 187, 187, 16, 163, 164, 164, 164, 164,
	164, 152, 134, 134, 134, 134, 134, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 188,
	188, 184, 184, 184, 138, 138, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 139, 139, 139, 139, 139, 135, 135, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 151, 151, 142,
	142, 149, 149, 150, 150, 150, 148, 148, 148, 145,
	145, 146, 146, 147, 147, 147, 143, 143, 143, 144,
	144, 144, 154, 154, 172, 172, 171, 171, 171, 171,
	162, 162, 168, 168, 168, 168, 168, 168, 168, 161,
	161, 170, 170, 169, 156, 156, 156, 156, 156, 157,
	158, 158, 158, 158, 155, 159, 159, 160, 160, 165,
	165, 165, 166, 166, 166, 167, 167, 167, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 194, 194, 195, 195, 195, 195, 195, 195, 195,
	175, 173, 173, 174, 174, 13, 14, 14, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 107, 107, 104,
	104, 105, 105, 106, 106, 106, 108, 108, 108, 131,
	131, 131, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 196, 24, 25, 25, 26, 26, 26,
	30, 30, 30, 28, 28, 29, 29, 35, 35, 34,
	34, 36, 36, 36, 36, 119, 119, 119, 118, 118,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 53,
	53, 89, 89, 91, 91, 42, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 126, 126, 125, 125, 125,
	124, 124, 47, 47, 47, 49, 48, 48, 48, 48,
	50, 50, 52, 52, 51, 51, 54, 54, 54, 54,
	55, 55, 37, 37, 37, 37, 37, 37, 37, 103,
	103, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 33, 33, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 197, 197, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 129, 129, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	133, 133, 133, 133, 133, 133, 133, 78, 78, 32,
	32, 76, 76, 77, 79, 79, 75, 75, 75, 60,
	60, 60, 60, 60, 60, 60, 60, 62, 62, 62,
	80, 80, 81, 81, 82, 82, 83, 83, 84, 85,
	85, 85, 86, 86, 86, 86, 87, 87, 87, 59,
	59, 59, 59, 59, 59, 88, 88, 88, 88, 92,
	92, 70, 70, 72, 72, 71, 73, 93, 93, 97,
	94, 94, 98, 98, 98, 96, 96, 96, 121, 121,
	121, 101, 101, 109, 109, 110, 110, 102, 102, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 112, 113, 113, 116, 116, 117, 117, 122, 122,
	123, 123, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 191, 192, 127, 128, 128,
	128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 4, 3, 5, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 0,
	2, 0, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 3, 3, 2, 1, 1, 1, 4,
	4, 4, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 5, 4, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 1, 4, 4, 7, 7, 13,
	1, 1, 2, 2, 7, 0, 1, 1, 3, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 11,
	13, 7, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 1, 2, 1, 2, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -189, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -191, 8, 258,
	52, -190, 278, -82, 15, -26, 5, -24, -196, -24,
	-24, -24, -24, -24, -163, 52, -120, -187, 150, 250,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 250, 117, 118, -51, -122, 55, -115, 157,
	267, 20, 163, 176, 177, 168, 202, 192, 268, 155,
	189, 193, 237, 277, 64, 166, 246, 126, 161, 138,
	187, 183, 180, 27, 208, 274, 182, 129, 209, 213,
	238, 265, 173, 174, 240, 206, 31, 131, 269, 33,
	146, 241, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 236, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 273, 242, 179, 145,
	159, 140, 245, 154, 167, 239, 175, 248, 36, 222,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 247, 223, 275, 196, 194,
	190, 191, 153, 120, 150, 151, 229, 230, 231, 232,
	270, 271, 243, 188, 224, 225, 118, 105, 193, 111,
	227, 119, 31, 148, -131, 118, -104, 151, 229, 230,
	231, 232, 55, 239, 238, 233, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -191,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -191, 42, 43, 259,
	260, 261, 262, 266, 263, 74, 32, 249, 257, 256,
	255, 253, 254, 251, 252, 276, 123, 250, 100, 258,
	-102, -39, -40, -41, -42, -53, -74, -191, -51, 11,
	-46, -51, -94, -130, 165, -98, 239, 238, -117, -96,
	-116, -114, 237, 193, 236, 55, -115, 116, 70, 22,
	24, 220, 226, 73, 105, 16, 74, 104, 259, 111,
	46, 251, 252, 249, 261, 262, 250, 227, 28, 10,
	25, 136, 21, 98, 113, 77, 78, 139, 23, 137,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 134, 42, 87,
	17, 253, 254, 30, 266, 143, 100, 47, 34, 71,
	66, 50, 244, 69, 15, 45, 132, 88, 114, 258,
	43, 117, 6, 264, 29, 135, 41, 118, 228, 76,
	121, 67, 5, 133, 9, 48, 51, 255, 256, 257,
	32, 75, 12, -164, -152, 55, 119, 120, -116, -110,
	123, -110, -116, -110, 258, 118, -51, -51, -109, 123,
	55, -109, -109, -109, -51, 108, -51, 55, 29, 250,
	55, 148, 118, 149, 120, -128, -191, -117, -128, -128,
	-128, 152, 153, -128, -105, 234, 50, -128, -192, 54,
	-87, 19, 30, -37, -122, -83, -84, -37, -82, -2,
	-24, 34, -28, 21, 63, 11, -119, 70, 69, 86,
	-118, 22, -116, 57, 108, -37, -58, 89, 71, 87,
	88, 73, 91, 90, 101, 94, 95, 96, 97, 98,
	99, 100, 92, 93, 104, 276, 79, 80, 81, 82,
	83, 84, 85, -103, -191, -74, -191, 109, 110, -61,
	-61, -61, -61, -61, -61, -61, -191, -2, -69, -37,
	-191, -191, -191, -191, -191, -191, -191, -191, -191, -78,
	-37, -191, -197, -191, -197, -197, -197, -197, -197, -197,
	-197, -133, 105, 193, 138, 187, -136, -135, 197, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 192,
	268, -191, -191, -191, -191, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -191, -125, 144, -124, 22, -122,
	57, -51, -46, -193, 53, 11, 51, 53, -94, 165,
	-95, -99, 240, 242, 79, -121, -116, 57, 28, 29,
	54, 53, -153, -134, -138, -135, -140, -139, -141, -136,
	-137, 189, 193, 190, 105, 194, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 196, 208, 29,
	138, 185, 186, 187, 188, 209, 210, 211, 212, 213,
	214, 215, 216, 179, 180, 182, 183, 184, -116, -51,
	-180, 51, 55, 71, 55, 50, -51, -51, 244, -128,
	121, -51, 23, 50, -51, 55, 55, -123, -122, -114,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-107, 228, 235, -51, 9, 89, 53, 18, 108, 53,
	-85, 24, 25, -86, -192, -30, -62, -116, 58, 61,
	-29, 41, -51, -37, -37, -67, 66, 71, 67, 68,
	-118, 96, -123, -117, -114, -61, -68, -71, -74, 62,
	89, 87, 88, 73, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -129,
	55, 57, -133, 55, -60, -60, -116, -35, 21, -34,
	-36, -192, 53, -192, -2, -34, -34, -37, -37, -75,
	-116, -122, -75, -34, -28, -76, -77, 75, -75, -192,
	191, -34, -35, -34, -34, -90, 144, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 40, 40, 40, 45,
	40, 45, 40, -48, -122, -192, -54, 48, 122, 49,
	-191, -124, -90, 51, -39, -51, -98, -95, 53, 241,
	243, 244, 50, -37, -144, 105, 104, -165, -166, -167,
	-117, 57, 58, -152, -154, -156, -155, -168, -157, 126,
	124, 128, 129, 133, -161, 119, 134, 66, 71, 28,
	50, 220, 226, 124, 134, 133, 277, 64, 127, -147,
	279, 217, -145, 223, -142, 52, -142, -142, 191, -142,
	-142, -142, -143, 193, -143, -143, -143, -143, 52, 52,
	-142, -142, -142, -149, 52, 181, -149, -149, -150, 52,
	-150, 50, 51, 22, -178, 270, -179, 55, -128, 23,
	-128, -51, -111, 116, 113, 114, -175, 112, 220, 193,
	64, 28, 15, 259, 144, 275, 55, 145, -51, -51,
	-51, -128, -106, 11, 89, 36, -37, -37, -123, -84,
	-87, -101, 19, 11, 32, 32, -34, 66, 67, 68,
	108, -191, -68, -61, -61, -61, -33, 139, 70, -192,
	-192, -34, 53, -37, -192, -192, -192, 53, 51, 22,
	53, 11, 108, 53, 11, -192, -34, -79, -77, 77,
	-37, -192, -192, -192, -192, -192, -59, 29, 32, -2,
	-191, -191, -55, 53, 12, 79, -44, -43, 50, 51,
	-45, 50, -43, 40, 40, 119, 119, 119, -91, -116,
	-55, -39, -55, -99, -100, 245, 242, 248, 55, 53,
	-167, 79, 52, 50, -159, -116, 134, -161, -161, 55,
	-161, 55, 55, 66, 57, 58, 59, 66, 249, 65,
	-57, 218, 9, 134, 134, -191, 57, -122, 280, -146,
	224, 58, -143, -143, -142, -143, -144, 29, -144, -144,
	-144, -144, -151, 57, -151, -148, 270, 271, -148, 58,
	-149, 58, -51, -116, -2, -177, -176, -117, -182, 22,
	-127, -120, -195, 150, 125, 130, 129, 55, 124, 128,
	144, -181, 150, 125, 126, 130, 129, 55, 119, 134,
	124, 128, 144, 133, -112, -113, 121, 22, 119, 134,
	144, 116, -128, -108, 87, 12, -122, -122, 37, 108,
	-51, -38, 11, 96, -117, -35, -33, 70, -61, -61,
	-192, -36, -132, 105, 189, 138, 187, 183, 206, 207,
	195, 222, 185, 223, -129, -132, -61, -61, -117, -61,
	-61, 267, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -191, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -191, -191, -191, -192, 53, -82,
	-55, 242, 246, 247, -166, -167, -170, -169, -116, 10,
	9, 130, 124, 55, 55, 55, -184, 276, -142, -191,
	249, -37, 52, 54, -144, -144, -143, -144, 55, 105,
	54, 53, 54, 185, 185, 53, 54, 53, 52, 51,
	50, 53, 79, -183, 19, 158, 159, -194, 119, 134,
	-127, -116, -127, -116, -51, -127, -116, 126, -156, 57,
	-37, -55, -39, -192, -61, -192, -142, -142, -142, -150,
	-142, 174, -142, 174, -192, -192, -192, 53, 19, -192,
	53, 19, -191, -32, 264, -37, 27, -92, 53, -192,
	-192, -192, 53, 108, -192, -86, -89, -116, -89, -89,
	-89, -125, -116, -86, 54, 53, -142, -158, 154, 155,
	29, 156, -158, 134, 134, 193, 186, -192, -142, -192,
	-89, -144, -143, 57, -143, 225, 225, 58, 58, -89,
	-116, -51, -176, -167, 121, 20, 6, 8, 9, 10,
	-116, 52, 26, -116, -80, 13, -143, 55, -61, -61,
	-61, -61, -61, -192, 57, 134, -72, 32, -2, -191,
	-116, -116, 53, 54, -192, -192, -192, -54, -172, -171,
	51, 131, 64, 270, -169, 50, 66, 157, 50, -159,
	-116, 52, 191, -148, -188, 156, 54, -144, -144, 54,
	54, 54, 52, 52, -160, -116, 52, -89, -191, 124,
	-81, 14, 16, -192, -192, -192, -192, -31, 89, 270,
	9, -70, -2, 108, -116, -171, 55, -162, 79, 57,
	272, 9, 10, 52, -170, 265, -55, -89, -89, -185,
	53, 51, -89, 54, -173, -174, 144, 134, -37, -69,
	-192, 268, 47, 273, -93, -192, -116, 58, -116, -158,
	-158, -160, 54, 54, 54, -186, 270, -116, -37, 54,
	-180, -192, 53, -116, 52, 37, 269, 274, 54, -55,
	277, -178, -174, 32, -89, 37, 127, -37, 146, 54,
	270, -51, 147, 273, 52, -191, 274, -160, -61, 143,
	54, -192, -192,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 594, 0, 353, 353, 353, 353, 353, 353, 0,
	-2, 647, 0, 0, 0, 0, -2, 343, 344, 0,
	346, 347, 887, 887, 887, 887, 887, 0, 33, 34,
	885, 1, 3, 602, 0, 0, 357, 360, 355, 0,
	647, 0, 0, 0, 60, 0, 0, 0, 0, 645,
	645, 0, 645, 83, 0, 0, 0, 648, 0, 643,
	0, 643, 643, 643, 0, 302, 424, 668, 669, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 0, 0, 0, 0,
	888, 888, 888, 888, 0, 888, 331, 320, 322, 323,
	324, 325, 888, 340, 341, 330, 342, 345, 348, 349,
	350, 351, 352, 27, 606, 0, 0, 594, 29, 0,
	353, 358, 359, 363, 361, 362, 354, 0, 371, 375,
	0, 432, 0, 437, 439, -2, -2, 0, 474, 475,
	476, 477, 478, 0, 0, 0, 0, 0, 0, 0,
	502, 503, 504, 505, 579, 580, 581, 582, 583, 584,
	585, 586, 441, 442, 576, 626, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 567, 0, 533, 533, 533,
	533, 533, 533, 533, 533, 0, 0, 0, 0, 0,
	0, 0, 382, 384, 385, 386, 405, 0, 407, 0,
	0, 41, 45, 0, 861, 630, -2, -2, 0, 0,
	666, 667, -2, 780, -2, 664, 665, 672, 673, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 691, 692, 693, 694,
	695, 696, 697, 698, 699, 700, 701, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 0, 96, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 93, 0, 888, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 303, 888, 888, 888,
	888, 888, 888, 888, 888, 312, 889, 890, 313, 314,
	315, 888, 888, 317, 0, 332, 0, 326, 28, 886,
	22, 0, 0, 603, 0, 595, 596, 599, 602, 27,
	360, 0, 365, 364, 356, 0, 372, 0, 0, 0,
	376, 0, 378, 379, 0, 435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 459, 460, 461, 462,
	463, 464, 465, 438, 0, 452, 0, 0, 0, 494,
	495, 496, 497, 498, 499, 0, 367, 27, 0, 472,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	568, 0, 524, 0, 525, 526, 527, 528, 529, 530,
	531, 532, 560, 0, 562, 563, 564, 565, 566, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 157,
	158, 0, 367, 0, 0, 43, 0, 423, 0, 0,
	0, 0, 0, 0, 412, 0, 0, 415, 0, 0,
	0, 0, 406, 0, 0, 426, 828, 408, 0, 410,
	411, -2, 0, 0, 0, 39, 40, 0, 46, 861,
	48, 49, 0, 0, 0, 209, 638, 639, 640, 636,
	249, 0, 101, 203, 199, 103, 104, 105, 106, 189,
	135, 189, 189, 189, 189, 189, 206, 206, 206, 206,
	206, 170, 171, 172, 173, 174, 175, 176, 0, 0,
	152, 189, 189, 189, 156, 179, 180, 181, 182, 183,
	184, 185, 186, 191, 191, 191, 193, 193, 0, 0,
	87, 0, 888, 0, 888, 0, 94, 0, 0, 268,
	0, 296, 644, 0, 888, 299, 300, 425, 670, 671,
	304, 305, 306, 307, 308, 309, 310, 311, 316, 319,
	333, 327, 328, 321, 607, 0, 0, 0, 0, 0,
	598, 600, 601, 606, 30, 363, 0, 587, 0, 0,
	0, 366, 25, 433, 434, 436, 453, 0, 455, 457,
	377, 373, 0, 577, -2, 443, 444, 468, 469, 470,
	0, 0, 0, 0, 466, 448, 0, 479, 480, 481,
	482, 483, 484, 485, 486, 487, 488, 489, 490, 493,
	544, 545, 501, 0, 491, 492, 500, 0, 0, 368,
	369, 471, 0, 625, 27, 0, 0, 0, 0, 0,
	576, 0, 0, 0, 0, 574, 571, 0, 0, 534,
	561, 0, 0, 0, 0, 0, 0, 422, 430, 627,
	0, 383, 401, 403, 0, 398, 413, 414, 416, 0,
	418, 0, 420, 421, 387, 388, 389, 0, 0, 0,
	0, 409, 430, 0, 430, 42, 631, 47, 0, 0,
	52, 53, 632, 633, 634, 210, 0, 95, 250, 252,
	255, 256, 257, 97, 98, 99, 100, 0, 234, 245,
	0, 0, 0, 0, 0, 229, 230, 108, 0, 0,
	0, 117, 118, 0, 120, 122, 0, 0, 0, 107,
	0, 205, 201, 200, 134, 0, 206, 206, 189, 206,
	163, 164, 209, 0, 209, 209, 209, 209, 0, 0,
	196, 196, 155, 146, 0, 191, 148, 149, 150, 0,
	151, 0, 0, 0, 65, 0, 85, 86, 66, 646,
	67, 69, 887, 82, 0, 659, 269, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 0, 0, 295,
	888, 298, 336, 0, 0, 0, 604, 605, 0, 597,
	23, 0, 641, 642, 588, 589, 380, 454, 456, 458,
	0, 367, 445, 466, 449, 0, 446, 0, 0, 440,
	506, 0, 0, 473, -2, 509, 510, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 594, 0, 572, 0,
	0, 523, 535, 536, 537, 538, 619, 0, 0, -2,
	0, 0, 594, 0, 0, 0, 395, 402, 0, 0,
	396, 0, 397, 417, 419, 0, 0, 0, 0, 393,
	594, 430, 38, 50, 51, 0, 0, 57, 211, 0,
	253, 0, 0, 0, 0, 246, 222, 0, 0, 225,
	0, 227, 228, 109, 131, 111, 112, 113, 189, 115,
	125, 0, 0, 119, 121, 0, 124, 127, 204, 102,
	202, 0, 209, 209, 206, 209, 165, 0, 166, 167,
	168, 169, 0, 187, 0, 153, 0, 0, 154, 0,
	147, 0, 0, 0, -2, 88, 89, 0, 72, 0,
	258, 0, 887, 0, 283, 284, 285, 286, 287, 288,
	289, 887, 0, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 0, 887, 660, 661, 662, 663,
	0, 0, 297, 318, 0, 0, 334, 335, 608, 0,
	24, 430, 0, 374, 578, 0, 447, 0, 467, 450,
	507, 370, 0, 189, 189, 549, 189, 193, 552, 553,
	189, 555, 189, 558, 0, 0, 0, 0, 577, 0,
	0, 0, 569, 522, 575, 0, 31, 0, 619, 609,
	621, 623, 0, 27, 0, 615, 0, 602, 628, 431,
	629, 399, 0, 404, 0, 0, 0, 407, 0, 602,
	37, 54, 55, 56, 251, 254, 0, 231, 189, 0,
	0, 0, 0, 223, 224, 226, 110, 0, 114, 0,
	189, 0, 0, 190, 159, 160, 209, 161, 207, 208,
	206, 0, 206, 0, 0, 0, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 71, 0, 281, 282,
	262, 0, 263, 265, 266, 267, 0, 245, 261, 337,
	338, 590, 381, 508, 451, 511, 546, 206, 550, 551,
	554, 556, 557, 559, 513, 512, 514, 0, 0, 517,
	0, 0, 0, 0, 0, 573, 0, 32, 0, 624,
	-2, 0, 0, 0, 44, 35, 0, 391, 0, 0,
	0, 426, 394, 36, 213, 0, 233, 235, 240, 241,
	0, 0, 236, 245, 0, 0, 196, 126, 116, 129,
	0, 162, 209, 188, 209, 197, 198, 0, 0, 0,
	0, 0, 90, 91, 0, 73, 74, 75, 76, 77,
	0, 0, 0, 246, 592, 0, 547, 548, 0, 0,
	0, 0, 539, 521, 570, 0, 622, 0, -2, 0,
	617, 616, 0, 400, 427, 428, 429, 390, 212, 214,
	0, 220, 0, 0, 232, 0, 242, 243, 0, 0,
	246, 0, 132, 133, 123, 0, 128, 177, 178, 192,
	195, 430, 0, 0, 78, 247, 0, 0, 0, 0,
	26, 0, 0, 515, 516, 518, 519, 0, 0, 0,
	0, 612, 27, 0, 392, 215, 216, 0, 221, 218,
	0, 0, 0, 0, 0, 130, 61, 0, 0, 80,
	0, 0, 0, 84, 0, 291, 0, 0, 593, 591,
	520, 0, 0, 0, 620, -2, 618, 217, 219, 237,
	238, 0, 244, 430, 62, 68, 0, 248, 79, 259,
	87, 290, 0, 0, 0, 540, 0, 543, 0, 63,
	0, 264, 292, 0, 0, 541, 0, 81, 0, 260,
	0, 0, 0, 0, 0, 0, 542, 0, 0, 0,
	239, 293, 294,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 278,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 279, 3, 280, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:319
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:324
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:325
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:329
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:352
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:360
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:364
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:370
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:404
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:416
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:438
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:458
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:462
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:466
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:471
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:475
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:499
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:503
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:541
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:545
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:551
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:572
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:622
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:638
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:651
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:676
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:680
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:685
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:689
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:703
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:718
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:740
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:745
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:755
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:762
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:769
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:774
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:782
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:819
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:834
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:839
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:844
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:849
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:859
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:864
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:884
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:894
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:900
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:905
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:910
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:915
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:920
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:936
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:944
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1184
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1189
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1194
		{
			yyVAL.optVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1198
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1203
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1207
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1215
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1219
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1225
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1233
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1237
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1241
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1246
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1250
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1255
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1259
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1268
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1272
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1277
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1281
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1285
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1290
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1294
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1298
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1304
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1308
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1318
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1324
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1328
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1333
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1337
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1343
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1347
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1353
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1357
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1361
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1365
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1369
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1373
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1377
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1387
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1393
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1397
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1403
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1410
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1416
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1422
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1428
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 239:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1436
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1448
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1452
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1456
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1460
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1466
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true},
				Columns: yyDollar[6].indexColumns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1474
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1481
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1485
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1490
		{
			yyVAL.str = ""
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1494
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1506
		{
			yyVAL.str = yyDollar[1].str
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1510
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1514
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1534
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1538
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 260:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1552
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1579
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1583
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1596
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1606
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1611
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1616
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1620
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1652
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1658
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1662
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1668
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1672
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1678
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1684
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1692
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1697
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1705
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1709
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1715
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1719
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1724
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1759
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1763
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1771
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1775
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1779
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1783
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1787
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1797
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1801
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1805
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1809
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1813
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1831
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1847
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.str = "extended "
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1857
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1861
		{
			yyVAL.str = "full "
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1867
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1871
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1875
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1881
		{
			yyVAL.showFilter = nil
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1885
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1889
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1895
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1899
		{
			yyVAL.str = SessionStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1903
		{
			yyVAL.str = GlobalStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1909
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1919
		{
			yyVAL.statement = &Begin{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1923
		{
			yyVAL.statement = &Begin{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.statement = &Commit{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1935
		{
			yyVAL.statement = &Rollback{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1941
		{
			yyVAL.statement = &OtherRead{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1945
		{
			yyVAL.statement = &OtherRead{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1949
		{
			yyVAL.statement = &OtherRead{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1953
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1957
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1962
		{
			setAllowComments(yylex, true)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1966
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1972
		{
			yyVAL.bytes2 = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1976
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.str = UnionStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.str = UnionAllStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1990
		{
			yyVAL.str = UnionDistinctStr
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1995
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2003
		{
			yyVAL.str = SQLCacheStr
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2008
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2012
		{
			yyVAL.str = DistinctStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2017
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2021
		{
			yyVAL.str = StraightJoinHint
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.selectExprs = nil
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2036
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2040
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2046
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2050
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2054
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2058
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2063
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2067
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2071
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2078
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2087
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2097
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2107
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2111
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2115
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2125
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2131
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2135
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2141
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2145
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2158
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2162
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2166
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2170
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2176
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 400:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2178
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 401:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2182
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2184
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2188
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2190
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2193
		{
			yyVAL.empty = struct{}{}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2195
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2198
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2202
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2206
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2213
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2219
		{
			yyVAL.str = JoinStr
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2223
		{
			yyVAL.str = JoinStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2227
		{
			yyVAL.str = JoinStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2233
		{
			yyVAL.str = StraightJoinStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2239
		{
			yyVAL.str = LeftJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2243
		{
			yyVAL.str = LeftJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2247
		{
			yyVAL.str = RightJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2251
		{
			yyVAL.str = RightJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2257
		{
			yyVAL.str = NaturalJoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2261
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2271
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2275
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2281
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2285
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2290
		{
			yyVAL.indexHints = nil
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2294
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2298
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2302
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2307
		{
			yyVAL.expr = nil
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2311
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2317
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2321
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2325
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2329
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2333
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2337
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2341
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2347
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2351
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2357
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2361
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2383
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2395
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2399
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2403
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2409
		{
			yyVAL.str = IsNullStr
		}
	case 454:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2413
		{
			yyVAL.str = IsNotNullStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2417
		{
			yyVAL.str = IsTrueStr
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2421
		{
			yyVAL.str = IsNotTrueStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2425
		{
			yyVAL.str = IsFalseStr
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2429
		{
			yyVAL.str = IsNotFalseStr
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2435
		{
			yyVAL.str = EqualStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2439
		{
			yyVAL.str = LessThanStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2443
		{
			yyVAL.str = GreaterThanStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2447
		{
			yyVAL.str = LessEqualStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2451
		{
			yyVAL.str = GreaterEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2455
		{
			yyVAL.str = NotEqualStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2459
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2464
		{
			yyVAL.expr = nil
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2468
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2474
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2478
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2482
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2488
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2494
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2498
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2504
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2508
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2512
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2516
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2520
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2524
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2528
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2532
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2536
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2540
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2544
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2548
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2552
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2556
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2560
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2564
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2568
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2572
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2576
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2580
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2588
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2592
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2600
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2614
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2618
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2622
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2630
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2648
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2652
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2666
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2670
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2674
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2678
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2682
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 515:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2686
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2690
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2694
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 518:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2698
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2702
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 520:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2706
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 521:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2710
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2714
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2718
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2728
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2732
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2736
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2740
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2764
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2786
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2790
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2796
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2800
		{
			yyVAL.str = BooleanModeStr
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2804
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 542:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2808
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2812
		{
			yyVAL.str = QueryExpansionStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2818
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2822
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2828
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2832
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2836
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2840
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2844
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2848
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2854
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2858
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2862
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2866
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2870
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2874
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2878
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2882
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2888
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2892
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2896
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2900
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2904
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2908
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2912
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2917
		{
			yyVAL.expr = nil
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2921
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2926
		{
			yyVAL.str = string("")
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2930
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2936
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2940
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2946
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2951
		{
			yyVAL.expr = nil
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2955
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2961
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2965
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2969
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2975
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2979
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2983
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2987
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2991
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2995
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2999
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3003
		{
			yyVAL.expr = &NullVal{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3009
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3018
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3022
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3027
		{
			yyVAL.exprs = nil
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3031
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3036
		{
			yyVAL.expr = nil
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3040
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3045
		{
			yyVAL.orderBy = nil
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3049
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3055
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3059
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3065
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3070
		{
			yyVAL.str = AscScr
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3074
		{
			yyVAL.str = AscScr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3078
		{
			yyVAL.str = DescScr
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3083
		{
			yyVAL.limit = nil
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3087
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3091
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3095
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3100
		{
			yyVAL.str = ""
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3104
		{
			yyVAL.str = ForUpdateStr
		}
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3108
		{
			yyVAL.str = ShareModeStr
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3121
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3129
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3134
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3138
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 614:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3142
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3149
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3153
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3157
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3161
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3166
		{
			yyVAL.updateExprs = nil
		}
	case 620:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3170
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3176
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3180
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3186
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3190
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3196
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3202
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3212
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3216
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3222
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3228
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3232
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3238
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3242
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3246
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3253
		{
			yyVAL.bytes = []byte("charset")
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3260
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3264
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3268
		{
			yyVAL.expr = &Default{}
		}
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3277
		{
			yyVAL.byt = 0
		}
	case 644:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3279
		{
			yyVAL.byt = 1
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3282
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3284
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3287
		{
			yyVAL.str = ""
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3289
		{
			yyVAL.str = IgnoreStr
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3293
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3295
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3297
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3299
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3301
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3303
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3305
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3307
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3309
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3311
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3318
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3322
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3324
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3328
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3332
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3339
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3345
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3349
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3356
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3595
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3604
		{
			decNesting(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3609
		{
			forceEOF(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3614
		{
			forceEOF(yylex)
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3618
		{
			forceEOF(yylex)
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3622
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
