// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const NULLX = 57544
const AUTO_INCREMENT = 57545
const APPROXNUM = 57546
const SIGNED = 57547
const UNSIGNED = 57548
const ZEROFILL = 57549
const ZONE = 57550
const AUTOINCREMENT = 57551
const DATABASES = 57552
const TABLES = 57553
const VITESS_KEYSPACES = 57554
const VITESS_SHARDS = 57555
const VITESS_TABLETS = 57556
const VSCHEMA_TABLES = 57557
const EXTENDED = 57558
const FULL = 57559
const PROCESSLIST = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const INHERIT = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const WITHOUT = 57596
const PARSER = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const TYPECAST = 57601
const CHECK = 57602

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 339,
	153, 339,
	-2, 329,
	-1, 255,
	108, 669,
	-2, 665,
	-1, 256,
	108, 670,
	-2, 666,
	-1, 326,
	79, 845,
	-2, 58,
	-1, 327,
	79, 800,
	-2, 59,
	-1, 332,
	79, 782,
	-2, 636,
	-1, 334,
	79, 822,
	-2, 638,
	-1, 621,
	51, 41,
	53, 41,
	-2, 43,
	-1, 754,
	108, 672,
	-2, 668,
	-1, 984,
	5, 28,
	-2, 472,
	-1, 1009,
	5, 27,
	-2, 611,
	-1, 1094,
	5, 27,
	-2, 64,
	-1, 1290,
	5, 28,
	-2, 612,
	-1, 1359,
	5, 27,
	-2, 614,
	-1, 1446,
	5, 28,
	-2, 615,
}

const yyPrivate = 57344

const yyLast = 12868

var yyAct = [...]int{
	256, 1395, 690, 1436, 1308, 818, 924, 260, 548, 1206,
	1370, 547, 3, 1296, 1044, 1085, 1179, 836, 1207, 285,
	1012, 1180, 859, 615, 1096, 234, 865, 1176, 858, 918,
	262, 613, 53, 854, 819, 88, 1152, 1028, 88, 66,
	790, 779, 228, 976, 331, 318, 787, 1082, 259, 631,
	806, 1017, 480, 756, 486, 434, 630, 874, 815, 233,
	325, 602, 88, 88, 336, 617, 902, 958, 492, 336,
	258, 500, 336, 313, 243, 576, 312, 88, 322, 88,
	85, 571, 562, 320, 577, 88, 229, 230, 231, 232,
	913, 1068, 316, 311, 514, 52, 1471, 524, 1217, 1487,
	247, 1468, 1484, 1444, 478, 1421, 1086, 1087, 321, 1481,
	891, 524, 925, 1457, 1467, 1171, 1426, 1284, 444, 1443,
	465, 1281, 446, 1036, 447, 1220, 1035, 850, 851, 1037,
	454, 1201, 515, 516, 517, 518, 519, 520, 521, 514,
	1327, 508, 524, 511, 467, 1202, 1203, 849, 475, 526,
	527, 528, 529, 530, 531, 532, 789, 509, 510, 507,
	513, 512, 522, 523, 515, 516, 517, 518, 519, 520,
	521, 514, 890, 632, 524, 633, 1409, 513, 512, 522,
	523, 515, 516, 517, 518, 519, 520, 521, 514, 1280,
	479, 524, 513, 512, 522, 523, 515, 516, 517, 518,
	519, 520, 521, 514, 1326, 1070, 524, 88, 328, 893,
	903, 336, 336, 336, 336, 721, 336, 1277, 479, 1383,
	810, 1348, 722, 336, 1234, 895, 513, 512, 522, 523,
	515, 516, 517, 518, 519, 520, 521, 514, 1317, 1233,
	524, 914, 1273, 1271, 227, 1316, 83, 79, 80, 81,
	336, 489, 456, 479, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 1245, 1246, 524, 525,
	488, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 525, 1311, 524, 1483, 1378, 535, 513,
	512, 522, 523, 515, 516, 517, 518, 519, 520, 521,
	514, 879, 1386, 524, 1479, 284, 471, 472, 1438, 1437,
	1356, 88, 1371, 1130, 525, 816, 1248, 1315, 88, 88,
	88, 1314, 1064, 880, 336, 1373, 875, 74, 1063, 1127,
	336, 1249, 468, 469, 470, 1046, 473, 887, 1211, 877,
	1442, 876, 1278, 477, 878, 1477, 525, 1257, 316, 1400,
	517, 518, 519, 520, 521, 514, 597, 1410, 524, 903,
	1212, 449, 440, 525, 898, 621, 76, 77, 77, 330,
	915, 1051, 1049, 1335, 438, 70, 72, 442, 525, 82,
	700, 564, 565, 566, 567, 568, 569, 570, 437, 1027,
	71, 73, 1372, 837, 839, 1026, 1025, 883, 436, 445,
	888, 894, 628, 622, 206, 57, 885, 884, 68, 1309,
	1310, 1312, 525, 513, 512, 522, 523, 515, 516, 517,
	518, 519, 520, 521, 514, 1131, 1128, 524, 1126, 78,
	59, 60, 61, 62, 63, 875, 875, 336, 88, 1414,
	525, 1129, 537, 538, 88, 1293, 88, 336, 1139, 88,
	876, 876, 88, 1228, 992, 970, 88, 525, 336, 336,
	336, 336, 336, 336, 336, 336, 728, 838, 328, 504,
	253, 455, 336, 336, 953, 525, 725, 88, 856, 855,
	499, 498, 497, 689, 498, 497, 1419, 1242, 1175, 696,
	763, 697, 336, 881, 701, 460, 88, 704, 499, 882,
	709, 499, 336, 1229, 761, 762, 760, 1015, 69, 634,
	1173, 649, 807, 693, 733, 1135, 330, 330, 330, 330,
	645, 330, 723, 707, 1054, 1055, 1056, 757, 330, 479,
	525, 1374, 1059, 1057, 282, 283, 494, 807, 758, 999,
	497, 742, 1377, 439, 498, 497, 336, 1053, 1448, 754,
	886, 1329, 954, 1328, 1091, 502, 499, 75, 462, 1089,
	464, 499, 794, 799, 802, 735, 780, 699, 781, 808,
	1071, 1420, 752, 750, 1355, 731, 732, 1324, 710, 711,
	712, 713, 714, 715, 716, 717, 50, 435, 461, 463,
	1134, 21, 718, 719, 734, 1259, 759, 88, 1083, 525,
	88, 88, 88, 88, 88, 1066, 820, 782, 784, 785,
	1431, 1491, 88, 1417, 441, 88, 443, 1215, 310, 88,
	498, 497, 1363, 1480, 88, 88, 794, 804, 336, 330,
	316, 316, 316, 316, 316, 636, 1214, 499, 1213, 812,
	1052, 336, 817, 1431, 1469, 316, 490, 238, 448, 753,
	1038, 875, 791, 793, 316, 844, 870, 927, 869, 989,
	871, 872, 746, 748, 749, 873, 876, 747, 809, 783,
	845, 625, 833, 706, 822, 823, 821, 825, 705, 824,
	842, 967, 968, 969, 841, 1061, 847, 694, 846, 692,
	459, 1463, 479, 336, 457, 336, 88, 863, 450, 88,
	435, 88, 1363, 1460, 88, 336, 498, 497, 795, 796,
	988, 626, 987, 624, 803, 479, 1058, 920, 835, 1363,
	1455, 1153, 1391, 499, 904, 905, 906, 907, 498, 497,
	451, 452, 453, 1390, 539, 540, 541, 542, 543, 544,
	545, 931, 688, 1223, 948, 499, 949, 1013, 811, 950,
	813, 814, 330, 792, 1155, 1363, 1454, 691, 1288, 1107,
	1306, 1453, 54, 330, 330, 330, 330, 330, 330, 330,
	330, 1177, 328, 754, 1013, 916, 917, 330, 330, 599,
	757, 1363, 1434, 1014, 959, 860, 960, 1363, 1392, 1363,
	1387, 758, 1363, 479, 1363, 1364, 1432, 737, 1431, 1157,
	982, 1162, 1014, 1156, 843, 1154, 624, 502, 1306, 1305,
	330, 1160, 1241, 928, 972, 930, 1142, 727, 1198, 479,
	1292, 479, 1158, 1159, 599, 951, 1235, 1009, 1108, 1104,
	1237, 1236, 1109, 1106, 1105, 1231, 1232, 73, 1161, 1163,
	994, 336, 249, 1013, 88, 1231, 1230, 23, 1110, 982,
	479, 786, 726, 991, 1103, 598, 998, 23, 982, 336,
	1039, 800, 800, 1030, 23, 1032, 848, 800, 498, 497,
	336, 599, 479, 753, 316, 1031, 1022, 792, 479, 599,
	1007, 1040, 993, 1008, 982, 499, 641, 640, 979, 88,
	1358, 627, 980, 50, 1379, 990, 729, 966, 1033, 984,
	985, 986, 240, 50, 800, 1239, 1238, 50, 995, 1485,
	50, 1465, 1424, 1001, 1397, 1394, 1002, 1003, 1004, 1005,
	1393, 1382, 88, 336, 1342, 895, 336, 1088, 1060, 1047,
	1048, 1050, 919, 330, 1222, 1094, 1076, 1192, 1078, 1079,
	1080, 1081, 914, 1042, 909, 981, 330, 908, 50, 1018,
	1019, 336, 921, 922, 88, 88, 65, 1084, 1376, 1240,
	1177, 996, 88, 1072, 1073, 1043, 1075, 1092, 1021, 703,
	695, 336, 476, 1101, 830, 1100, 741, 755, 1024, 831,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 1023, 828, 827, 330, 826,
	330, 829, 832, 860, 608, 609, 1090, 1140, 244, 245,
	330, 336, 336, 1178, 1476, 820, 1466, 1146, 1145, 1117,
	1138, 820, 1183, 1151, 955, 493, 1165, 1474, 1181, 1172,
	1164, 965, 964, 481, 330, 1077, 639, 754, 491, 458,
	336, 1343, 336, 336, 482, 1187, 1286, 929, 1188, 1186,
	702, 1099, 1200, 896, 897, 899, 900, 901, 1337, 923,
	1338, 1339, 1340, 1199, 1205, 612, 241, 242, 1204, 493,
	1097, 1132, 1336, 910, 911, 912, 963, 1244, 483, 487,
	235, 1402, 1403, 1118, 962, 236, 1150, 54, 1120, 1113,
	1114, 1346, 1121, 1116, 1115, 505, 1014, 1123, 1119, 1210,
	1209, 1422, 495, 1423, 336, 1411, 1224, 1225, 1122, 1227,
	1062, 724, 56, 336, 1112, 1144, 58, 275, 274, 277,
	278, 279, 280, 1102, 1247, 88, 276, 281, 623, 549,
	51, 336, 1, 1197, 1385, 67, 1456, 1168, 560, 1430,
	336, 1226, 1216, 88, 1243, 1250, 1029, 1098, 1111, 604,
	607, 608, 609, 605, 1252, 606, 610, 926, 1258, 1018,
	1019, 1095, 1261, 936, 330, 1435, 1369, 867, 1255, 857,
	1254, 433, 64, 316, 1262, 1045, 604, 607, 608, 609,
	605, 1418, 606, 610, 860, 868, 860, 1269, 866, 864,
	642, 889, 1069, 336, 892, 336, 336, 336, 88, 336,
	648, 646, 647, 644, 650, 336, 1287, 643, 1299, 1300,
	1301, 214, 323, 1295, 611, 1313, 635, 496, 1125, 1124,
	932, 1302, 1133, 336, 720, 1304, 952, 1040, 1093, 474,
	216, 330, 973, 974, 975, 533, 1321, 961, 1034, 336,
	336, 88, 336, 336, 329, 1184, 730, 485, 336, 1401,
	1263, 1345, 1330, 997, 559, 805, 330, 1265, 336, 261,
	1322, 745, 273, 270, 272, 1334, 1333, 271, 736, 1274,
	1275, 1276, 1006, 506, 1279, 251, 330, 315, 595, 603,
	601, 600, 1020, 1016, 1144, 314, 1332, 1289, 1290, 1291,
	1141, 1294, 1283, 336, 336, 1408, 740, 1323, 330, 1325,
	1074, 25, 55, 1359, 246, 19, 18, 336, 1181, 17,
	1357, 20, 16, 800, 15, 336, 1185, 1029, 14, 800,
	1368, 29, 13, 12, 1318, 1375, 1320, 11, 10, 1380,
	9, 8, 7, 1384, 1347, 6, 336, 5, 4, 237,
	743, 744, 22, 336, 2, 330, 0, 330, 1208, 860,
	0, 0, 0, 0, 0, 0, 1398, 1388, 0, 1389,
	0, 0, 0, 0, 336, 0, 0, 0, 0, 0,
	0, 0, 1413, 286, 47, 1412, 0, 0, 1181, 0,
	1416, 0, 0, 336, 0, 0, 1097, 860, 1354, 0,
	0, 0, 1425, 549, 336, 336, 797, 798, 336, 0,
	0, 0, 0, 0, 1365, 1366, 1367, 1428, 1429, 1251,
	0, 1433, 1440, 1427, 0, 336, 0, 1445, 1253, 820,
	0, 47, 336, 0, 0, 336, 1452, 1450, 1451, 239,
	0, 0, 336, 0, 0, 317, 1256, 1461, 336, 0,
	0, 0, 0, 0, 0, 330, 0, 0, 1148, 1149,
	0, 0, 0, 0, 1404, 1405, 1406, 1407, 0, 0,
	1218, 1166, 1167, 0, 1169, 1170, 336, 1473, 1472, 0,
	0, 0, 0, 0, 0, 1470, 0, 853, 88, 1475,
	0, 0, 0, 0, 0, 0, 336, 1488, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	1297, 1297, 1297, 0, 1303, 0, 0, 0, 0, 0,
	330, 0, 0, 1441, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 1482, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1462, 0, 0, 0, 1297, 1331, 0, 330, 330, 0,
	0, 0, 0, 1341, 0, 1266, 1267, 0, 1268, 0,
	0, 0, 1270, 1344, 1272, 0, 0, 484, 0, 956,
	957, 0, 487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 466, 466, 466, 0, 466,
	0, 0, 0, 0, 1492, 1493, 466, 0, 1361, 1362,
	0, 0, 86, 0, 0, 226, 0, 0, 0, 0,
	1307, 0, 1208, 47, 0, 0, 0, 0, 1264, 0,
	1381, 0, 1319, 0, 0, 0, 0, 250, 534, 86,
	86, 536, 0, 0, 0, 983, 0, 0, 0, 0,
	0, 1396, 0, 0, 86, 0, 86, 0, 1297, 0,
	1000, 0, 86, 0, 0, 0, 0, 0, 546, 0,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 1415,
	561, 563, 563, 563, 563, 563, 563, 563, 563, 0,
	591, 592, 593, 594, 1147, 0, 0, 0, 1208, 0,
	0, 614, 0, 0, 0, 0, 0, 0, 0, 1297,
	1297, 0, 0, 1297, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 0, 800, 524, 0,
	1447, 0, 0, 0, 0, 0, 942, 1449, 0, 0,
	1396, 0, 0, 0, 0, 0, 0, 1458, 0, 941,
	0, 0, 0, 1464, 0, 0, 0, 0, 1349, 1350,
	0, 1351, 1352, 1353, 513, 512, 522, 523, 515, 516,
	517, 518, 519, 520, 521, 514, 946, 0, 524, 0,
	0, 1297, 0, 0, 86, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 1396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 977, 0, 513, 512, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 0, 0, 524,
	466, 0, 0, 937, 934, 935, 0, 933, 0, 0,
	0, 466, 466, 466, 466, 466, 466, 466, 466, 0,
	0, 0, 1174, 0, 0, 466, 466, 0, 0, 0,
	0, 572, 0, 0, 0, 944, 947, 1189, 1190, 0,
	0, 1191, 0, 0, 1193, 0, 512, 522, 523, 515,
	516, 517, 518, 519, 520, 521, 514, 0, 86, 524,
	0, 0, 0, 0, 574, 86, 619, 86, 0, 0,
	525, 522, 523, 515, 516, 517, 518, 519, 520, 521,
	514, 0, 0, 524, 939, 0, 0, 0, 1221, 0,
	47, 0, 0, 0, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 550, 23, 24, 48, 26, 27,
	0, 938, 0, 575, 0, 0, 0, 0, 589, 573,
	525, 0, 0, 578, 42, 0, 0, 0, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 37, 0, 0,
	943, 50, 0, 317, 317, 317, 317, 317, 1260, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 614, 0,
	840, 525, 0, 0, 0, 0, 0, 317, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 86, 0, 86, 590, 0, 86, 0, 1285, 86,
	0, 0, 212, 708, 0, 549, 0, 0, 0, 0,
	30, 31, 33, 32, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 222, 0, 0, 0,
	0, 525, 0, 0, 36, 43, 44, 0, 0, 45,
	46, 34, 0, 86, 0, 0, 466, 0, 466, 0,
	0, 0, 708, 0, 0, 525, 0, 0, 466, 0,
	0, 0, 38, 39, 0, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 209, 0, 0, 0, 0, 0, 0, 215,
	211, 0, 0, 0, 250, 0, 0, 0, 0, 250,
	250, 0, 0, 801, 801, 250, 0, 971, 0, 801,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	250, 250, 250, 0, 86, 0, 801, 86, 86, 86,
	86, 86, 0, 0, 0, 0, 0, 49, 0, 834,
	0, 0, 86, 0, 208, 0, 619, 0, 0, 1010,
	1011, 86, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 317, 210, 0,
	218, 219, 220, 221, 225, 0, 0, 0, 0, 224,
	223, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1439, 549, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1065, 0, 0, 86, 0, 0, 86, 0, 86, 0,
	0, 86, 0, 0, 0, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 47, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 1478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 466, 0, 0, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1182, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1194,
	1195, 1196, 0, 654, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1219, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 0, 683, 684, 0,
	685, 686, 687, 671, 672, 673, 674, 651, 653, 86,
	589, 652, 655, 0, 667, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 668, 675, 676, 677,
	678, 679, 680, 681, 682, 0, 317, 0, 0, 0,
	0, 1136, 1137, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 250,
	0, 0, 0, 0, 0, 1282, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1182, 0, 0, 1360, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1182, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 422, 412, 0, 382, 424, 359, 374, 432,
	375, 376, 404, 345, 390, 147, 371, 91, 362, 339,
	368, 340, 360, 384, 113, 358, 414, 393, 126, 430,
	129, 398, 0, 168, 138, 0, 0, 386, 416, 388,
	410, 381, 405, 350, 397, 425, 372, 401, 426, 0,
	0, 0, 335, 0, 861, 862, 0, 0, 0, 0,
	0, 104, 0, 400, 421, 370, 403, 338, 399, 0,
	343, 346, 431, 419, 365, 366, 1041, 0, 0, 0,
	0, 0, 0, 385, 389, 407, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 396, 0, 0,
	0, 347, 344, 0, 383, 0, 0, 0, 349, 801,
	364, 408, 0, 337, 411, 417, 380, 193, 420, 378,
	377, 154, 0, 107, 0, 172, 117, 373, 127, 406,
	423, 387, 415, 361, 369, 109, 367, 161, 148, 184,
	395, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 86, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 341, 0, 169,
	186, 204, 205, 342, 357, 418, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 402, 162, 106, 185, 167, 353, 356, 351, 352,
	391, 392, 427, 428, 429, 409, 348, 0, 354, 355,
	0, 413, 121, 394, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 103, 422, 412, 0, 382, 424,
	359, 374, 432, 375, 376, 404, 345, 390, 147, 371,
	91, 362, 339, 368, 340, 360, 384, 113, 358, 414,
	393, 126, 430, 129, 398, 0, 168, 138, 0, 0,
	386, 416, 388, 410, 381, 405, 350, 397, 425, 372,
	401, 426, 0, 0, 0, 335, 0, 861, 862, 0,
	0, 0, 0, 0, 104, 0, 400, 421, 370, 403,
	338, 399, 0, 343, 346, 431, 419, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 385, 389, 407, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	396, 0, 0, 0, 347, 344, 0, 383, 0, 0,
	0, 349, 0, 364, 408, 0, 337, 411, 417, 380,
	193, 420, 378, 377, 154, 0, 107, 0, 172, 117,
	373, 127, 406, 423, 387, 415, 361, 369, 109, 367,
	161, 148, 184, 395, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	341, 0, 169, 186, 204, 205, 342, 357, 418, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 402, 162, 106, 185, 167, 353,
	356, 351, 352, 391, 392, 427, 428, 429, 409, 348,
	0, 354, 355, 0, 413, 121, 394, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 103, 422, 412,
	0, 382, 424, 359, 374, 432, 375, 376, 404, 345,
	390, 147, 371, 91, 362, 339, 368, 340, 360, 384,
	113, 358, 414, 393, 126, 430, 129, 398, 0, 168,
	138, 0, 0, 386, 416, 388, 410, 381, 405, 350,
	397, 425, 372, 401, 426, 0, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 400,
	421, 370, 403, 338, 399, 0, 343, 346, 431, 419,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 385,
	389, 407, 379, 0, 0, 0, 0, 0, 0, 1143,
	0, 363, 0, 396, 0, 0, 0, 347, 344, 0,
	383, 0, 0, 0, 349, 0, 364, 408, 0, 337,
	411, 417, 380, 193, 420, 378, 377, 154, 0, 107,
	0, 172, 117, 373, 127, 406, 423, 387, 415, 361,
	369, 109, 367, 161, 148, 184, 395, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 341, 0, 169, 186, 204, 205, 342,
	357, 418, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 402, 162, 106,
	185, 167, 353, 356, 351, 352, 391, 392, 427, 428,
	429, 409, 348, 0, 354, 355, 0, 413, 121, 394,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	103, 422, 412, 0, 382, 424, 359, 374, 432, 375,
	376, 404, 345, 390, 147, 371, 91, 362, 339, 368,
	340, 360, 384, 113, 358, 414, 393, 126, 430, 129,
	398, 0, 168, 138, 0, 0, 386, 416, 388, 410,
	381, 405, 350, 397, 425, 372, 401, 426, 50, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 400, 421, 370, 403, 338, 399, 0, 343,
	346, 431, 419, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 385, 389, 407, 379, 0, 0, 0, 0,
	0, 0, 0, 0, 363, 0, 396, 0, 0, 0,
	347, 344, 0, 383, 0, 0, 0, 349, 0, 364,
	408, 0, 337, 411, 417, 380, 193, 420, 378, 377,
	154, 0, 107, 0, 172, 117, 373, 127, 406, 423,
	387, 415, 361, 369, 109, 367, 161, 148, 184, 395,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 341, 0, 169, 186,
	204, 205, 342, 357, 418, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	402, 162, 106, 185, 167, 353, 356, 351, 352, 391,
	392, 427, 428, 429, 409, 348, 0, 354, 355, 0,
	413, 121, 394, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 103, 422, 412, 0, 382, 424, 359,
	374, 432, 375, 376, 404, 345, 390, 147, 371, 91,
	362, 339, 368, 340, 360, 384, 113, 358, 414, 393,
	126, 430, 129, 398, 0, 168, 138, 0, 0, 386,
	416, 388, 410, 381, 405, 350, 397, 425, 372, 401,
	426, 0, 0, 0, 255, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 400, 421, 370, 403, 338,
	399, 0, 343, 346, 431, 419, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 385, 389, 407, 379, 0,
	0, 0, 0, 0, 0, 751, 0, 363, 0, 396,
	0, 0, 0, 347, 344, 0, 383, 0, 0, 0,
	349, 0, 364, 408, 0, 337, 411, 417, 380, 193,
	420, 378, 377, 154, 0, 107, 0, 172, 117, 373,
	127, 406, 423, 387, 415, 361, 369, 109, 367, 161,
	148, 184, 395, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 341,
	0, 169, 186, 204, 205, 342, 357, 418, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 402, 162, 106, 185, 167, 353, 356,
	351, 352, 391, 392, 427, 428, 429, 409, 348, 0,
	354, 355, 0, 413, 121, 394, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 0, 103, 422, 412, 0,
	382, 424, 359, 374, 432, 375, 376, 404, 345, 390,
	147, 371, 91, 362, 339, 368, 340, 360, 384, 113,
	358, 414, 393, 126, 430, 129, 398, 0, 168, 138,
	0, 0, 386, 416, 388, 410, 381, 405, 350, 397,
	425, 372, 401, 426, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 400, 421,
	370, 403, 338, 399, 0, 343, 346, 431, 419, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 385, 389,
	407, 379, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 0, 396, 0, 0, 0, 347, 344, 0, 383,
	0, 0, 0, 349, 0, 364, 408, 0, 337, 411,
	417, 380, 193, 420, 378, 377, 154, 0, 107, 0,
	172, 117, 373, 127, 406, 423, 387, 415, 361, 369,
	109, 367, 161, 148, 184, 395, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 341, 0, 169, 186, 204, 205, 342, 357,
	418, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 402, 162, 106, 185,
	167, 353, 356, 351, 352, 391, 392, 427, 428, 429,
	409, 348, 0, 354, 355, 0, 413, 121, 394, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 0, 103,
	422, 412, 0, 382, 424, 359, 374, 432, 375, 376,
	404, 345, 390, 147, 371, 91, 362, 339, 368, 340,
	360, 384, 113, 358, 414, 393, 126, 430, 129, 398,
	0, 168, 138, 0, 0, 386, 416, 388, 410, 381,
	405, 350, 397, 425, 372, 401, 426, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 400, 421, 370, 403, 338, 399, 0, 343, 346,
	431, 419, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 385, 389, 407, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 363, 0, 396, 0, 0, 0, 347,
	344, 0, 383, 0, 0, 0, 349, 0, 364, 408,
	0, 337, 411, 417, 380, 193, 420, 378, 377, 154,
	0, 107, 0, 172, 117, 373, 127, 406, 423, 387,
	415, 361, 369, 109, 367, 161, 148, 184, 395, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 341, 0, 169, 186, 204,
	205, 342, 357, 418, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 402,
	162, 106, 185, 167, 353, 356, 351, 352, 391, 392,
	427, 428, 429, 409, 348, 0, 354, 355, 0, 413,
	121, 394, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 103, 422, 412, 0, 382, 424, 359, 374,
	432, 375, 376, 404, 345, 390, 147, 371, 91, 362,
	339, 368, 340, 360, 384, 113, 358, 414, 393, 126,
	430, 129, 398, 0, 168, 138, 0, 0, 386, 416,
	388, 410, 381, 405, 350, 397, 425, 372, 401, 426,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 400, 421, 370, 403, 338, 399,
	0, 343, 346, 431, 419, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 385, 389, 407, 379, 0, 0,
	0, 0, 0, 0, 0, 0, 363, 0, 396, 0,
	0, 0, 347, 344, 0, 383, 0, 0, 0, 349,
	0, 364, 408, 0, 337, 411, 417, 380, 193, 420,
	378, 377, 154, 0, 107, 0, 172, 117, 373, 127,
	406, 423, 387, 415, 361, 369, 109, 367, 161, 148,
	184, 395, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 333, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 341, 0,
	169, 186, 204, 205, 342, 357, 418, 196, 197, 198,
	199, 0, 0, 0, 334, 332, 120, 165, 124, 131,
	157, 202, 402, 162, 106, 185, 167, 353, 356, 351,
	352, 391, 392, 427, 428, 429, 409, 348, 0, 354,
	355, 0, 413, 121, 394, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 0, 103, 422, 412, 0, 382,
	424, 359, 374, 432, 375, 376, 404, 345, 390, 147,
	371, 91, 362, 339, 368, 340, 360, 384, 113, 358,
	414, 393, 126, 430, 129, 398, 0, 168, 138, 0,
	0, 386, 416, 388, 410, 381, 405, 350, 397, 425,
	372, 401, 426, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 400, 421, 370,
	403, 338, 399, 0, 343, 346, 431, 419, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 385, 389, 407,
	379, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 396, 0, 0, 0, 347, 344, 0, 383, 0,
	0, 0, 349, 0, 364, 408, 0, 337, 411, 417,
	380, 193, 420, 378, 377, 154, 0, 107, 0, 172,
	117, 373, 127, 406, 423, 387, 415, 361, 369, 109,
	367, 161, 148, 184, 395, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 341, 0, 169, 186, 204, 205, 342, 357, 418,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 402, 162, 106, 185, 167,
	353, 356, 351, 352, 391, 392, 427, 428, 429, 409,
	348, 0, 354, 355, 0, 413, 121, 394, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 0, 103, 422,
	412, 0, 382, 424, 359, 374, 432, 375, 376, 404,
	345, 390, 147, 371, 91, 362, 339, 368, 340, 360,
	384, 113, 358, 414, 393, 126, 430, 129, 398, 0,
	168, 138, 0, 0, 386, 416, 388, 410, 381, 405,
	350, 397, 425, 372, 401, 426, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	400, 421, 370, 403, 338, 399, 0, 343, 346, 431,
	419, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	385, 389, 407, 379, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 0, 396, 0, 0, 0, 347, 344,
	0, 383, 0, 0, 0, 349, 0, 364, 408, 0,
	337, 411, 417, 380, 193, 420, 378, 377, 154, 0,
	107, 0, 172, 117, 373, 127, 406, 423, 387, 415,
	361, 369, 109, 367, 161, 148, 184, 395, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 629,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 333, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 341, 0, 169, 186, 204, 205,
	342, 357, 418, 196, 197, 198, 199, 0, 0, 0,
	334, 332, 120, 165, 124, 131, 157, 202, 402, 162,
	106, 185, 167, 353, 356, 351, 352, 391, 392, 427,
	428, 429, 409, 348, 0, 354, 355, 0, 413, 121,
	394, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 103, 422, 412, 0, 382, 424, 359, 374, 432,
	375, 376, 404, 345, 390, 147, 371, 91, 362, 339,
	368, 340, 360, 384, 113, 358, 414, 393, 126, 430,
	129, 398, 0, 168, 138, 0, 0, 386, 416, 388,
	410, 381, 405, 350, 397, 425, 372, 401, 426, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 400, 421, 370, 403, 338, 399, 0,
	343, 346, 431, 419, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 385, 389, 407, 379, 0, 0, 0,
	0, 0, 0, 0, 0, 363, 0, 396, 0, 0,
	0, 347, 344, 0, 383, 0, 0, 0, 349, 0,
	364, 408, 0, 337, 411, 417, 380, 193, 420, 378,
	377, 154, 0, 107, 0, 172, 117, 373, 127, 406,
	423, 387, 415, 361, 369, 109, 367, 161, 148, 184,
	395, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 324, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	333, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 341, 0, 169,
	186, 204, 205, 342, 357, 418, 196, 197, 198, 199,
	0, 0, 0, 334, 332, 327, 326, 124, 131, 157,
	202, 402, 162, 106, 185, 167, 353, 356, 351, 352,
	391, 392, 427, 428, 429, 409, 348, 0, 354, 355,
	0, 413, 121, 394, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 103, 91, 788, 0, 257, 0,
	0, 0, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 248, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 297, 307, 303, 304, 301, 302,
	300, 299, 298, 309, 289, 290, 291, 292, 294, 0,
	121, 293, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 305, 103, 147, 0, 91, 0, 0, 257, 0,
	0, 0, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 479,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 297, 307, 303, 304, 301, 302,
	300, 299, 298, 309, 289, 290, 291, 292, 294, 0,
	121, 293, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 305, 103, 147, 0, 91, 0, 0, 257, 0,
	0, 0, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 248, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 297, 307, 303, 304, 301, 302,
	300, 299, 298, 309, 289, 290, 291, 292, 294, 0,
	121, 293, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 305, 103, 147, 0, 91, 0, 0, 257, 0,
	0, 0, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 852, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 297, 307, 303, 304, 301, 302,
	300, 299, 298, 309, 289, 290, 291, 292, 294, 0,
	121, 293, 90, 98, 128, 200, 201, 23, 156, 115,
	187, 305, 103, 0, 0, 0, 0, 0, 0, 147,
	0, 91, 0, 0, 257, 0, 0, 0, 113, 254,
	0, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 252, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	297, 307, 303, 304, 301, 302, 300, 299, 298, 309,
	289, 290, 291, 292, 294, 0, 121, 293, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 305, 103, 147,
	0, 91, 0, 0, 257, 0, 0, 0, 113, 254,
	0, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 252, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	297, 307, 303, 304, 301, 302, 300, 299, 298, 309,
	289, 290, 291, 292, 294, 0, 121, 293, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 305, 103, 147,
	0, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 0, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 1490, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	297, 307, 303, 304, 301, 302, 300, 299, 298, 309,
	289, 290, 291, 292, 294, 0, 121, 293, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 305, 103, 147,
	0, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 0, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	297, 307, 303, 304, 301, 302, 300, 299, 298, 309,
	289, 290, 291, 292, 294, 0, 121, 293, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 305, 103, 147,
	0, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 513, 512, 522, 523, 515, 516, 517, 518, 519,
	520, 521, 514, 0, 0, 524, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 525, 103, 147,
	0, 91, 0, 501, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 503, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	498, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	0, 618, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 620, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 23, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 23, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 103, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 103, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 738, 0, 0, 739, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	103, 91, 0, 0, 0, 0, 0, 0, 113, 638,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 637, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	0, 618, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 620, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 616, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 1298, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 103, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 103, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	620, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	103, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	0, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 503, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 103, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 0, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 698, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 103, 91, 0, 0,
	0, 0, 0, 596, 113, 0, 0, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 319,
	156, 115, 187, 0, 103, 0, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 0, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 103, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 103, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 103, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 103,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 103,
}

var yyPact = [...]int{
	1919, -1000, -183, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1072, 1107, -1000, -1000, -1000, -1000, -1000, -1000, 904,
	258, 246, 311, 129, 11816, 286, 1991, 12332, -1000, 79,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 841, -1000, -1000,
	-1000, -1000, -1000, 1063, 1069, 896, 1046, 970, -1000, 6375,
	245, 10265, 11558, 5597, -1000, 645, 279, 268, 12074, 239,
	239, 12074, 239, -1000, -140, 281, 12332, -1000, 12332, 238,
	643, 238, 238, 238, 12332, -1000, 363, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12332, 639, 1010, 440,
	3686, 3686, 3686, 3686, 154, 3686, -86, 922, -1000, -1000,
	-1000, -1000, 3686, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 661, 1014, 7161, 7161, 1072, -1000, 841,
	-1000, -1000, -1000, 1004, -1000, -1000, 473, 1091, -1000, 8201,
	361, -1000, 7161, 70, 855, -1000, -1000, 855, -1000, -1000,
	333, -1000, -1000, 7681, 7681, 7681, 7681, 7681, 7681, 7681,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 855, -1000, 6901, 855, 855, 855,
	855, 855, 855, 855, 855, 7161, 855, 855, 855, 855,
	855, 855, 855, 855, 855, 1746, 855, 855, 855, 855,
	11297, 826, 1136, -1000, -1000, -1000, 1043, 8975, 9749, 12332,
	660, -1000, 838, 5324, -67, -1000, -1000, -1000, 430, 9491,
	-1000, -1000, -1000, 1007, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 833, -1000, 2298, 12074, 12332, 706, 634,
	442, 632, 920, 12332, -1000, 11039, 3686, 259, 12332, 1027,
	919, 12332, 623, 618, -1000, 5051, -1000, 3686, 3686, 3686,
	3686, 3686, 3686, 3686, 3686, -1000, -1000, -1000, -1000, -1000,
	-1000, 3686, 3686, -1000, -13, -1000, 12332, -1000, -1000, -1000,
	-1000, 1102, 387, 799, 358, 843, -1000, 551, 1063, 661,
	970, 9233, 935, -1000, -1000, 12332, -1000, 7161, 7161, 596,
	-1000, 10781, -1000, -1000, 3959, 394, 7681, 534, 417, 7681,
	7681, 7681, 7681, 7681, 7681, 7681, 7681, 7681, 7681, 7681,
	7681, 7681, 7681, 7681, 511, 1746, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 614, -1000, 841, 1061, 1061, 7,
	7, 7, 7, 7, 7, 7941, 5855, 661, 824, 415,
	6901, 6375, 6375, 7161, 7161, 12590, 12590, 6375, 1048, 437,
	415, 12590, -1000, 661, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6375, 6375, 6375, 6375, 171, 12332, -1000, 12590, 10265,
	10265, 10265, 10265, 10265, -1000, 959, 957, -1000, 956, 934,
	962, 12332, -1000, 818, 8975, 345, 855, -1000, 10523, -1000,
	-1000, 171, 753, 10265, 12332, -1000, -1000, 4778, 838, -67,
	813, -1000, -94, -116, 6635, 374, -1000, -1000, -1000, -1000,
	3140, 532, 273, -107, -14, -1000, -1000, -1000, -1000, 873,
	-1000, 873, 173, 873, 873, 873, 17, 17, 17, 17,
	17, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 895, 892,
	-1000, 873, 873, 873, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 890, 189, 890, 880, 880, 902, 1037,
	-158, 602, 3686, 1024, 3686, 12332, -1000, 1711, 12332, -1000,
	12332, -1000, -1000, 12332, 3686, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	463, -1000, -1000, -1000, -1000, 988, 7161, 7161, 4505, 7161,
	-1000, -1000, -1000, 1014, -1000, 1048, 1065, -1000, 1000, 999,
	6375, -1000, -1000, 394, 470, -1000, -1000, 615, -1000, -1000,
	-1000, -1000, 347, 855, -1000, 181, -1000, -1000, -1000, -1000,
	534, 7681, 7681, 7681, 1664, 181, 1715, 1799, 1775, 7,
	254, 254, -7, -7, -7, -7, -7, 38, 38, -1000,
	-1000, -1000, -1000, 661, -1000, -1000, -1000, 661, 6375, 831,
	-1000, -1000, 7161, -1000, 661, 796, 796, 659, 637, 842,
	-1000, 346, 829, 796, 6375, 462, -1000, 7161, 661, -1000,
	-1000, 796, 661, 796, 796, 851, 855, -1000, 790, -1000,
	428, 1136, 899, 918, 1109, -1000, -1000, -1000, -1000, 955,
	-1000, 938, -1000, -1000, -1000, -1000, -1000, 277, 276, 270,
	12074, -1000, 1084, 10265, 771, -1000, -1000, 813, -67, -119,
	-1000, -1000, -1000, 415, -1000, -1000, 595, 807, 2867, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 891, 915, 12074,
	201, 207, 317, 316, 585, -1000, -1000, -1000, 481, 467,
	1101, -1000, -1000, 194, -1000, 188, 855, 548, 12332, -1000,
	-189, -1000, -19, -1000, -1000, 512, 17, 17, 873, 17,
	-1000, -1000, 374, 1006, 374, 374, 374, 374, 541, 541,
	-164, -164, -1000, -1000, 501, 890, -1000, -1000, -1000, 496,
	-1000, 12332, 12074, 841, -1000, 4232, -1000, -1000, -1000, -1000,
	-1000, 1029, -1000, 704, 964, 307, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 169, 309, -1000,
	3686, -1000, 503, 12332, 12332, 983, 415, 415, 340, -1000,
	-1000, 12332, -1000, -1000, -1000, -1000, 805, -1000, -1000, -1000,
	3413, 6375, -1000, 1664, 181, 1614, -1000, 7681, 7681, -1000,
	-1000, 796, 6375, 415, -1000, -1000, -1000, 616, 511, 616,
	7681, 7681, 4505, 7681, 7681, -152, 747, 432, -1000, 7161,
	412, -1000, -1000, -1000, -1000, -1000, 910, 12590, 855, -1000,
	8717, 12074, 1072, 12590, 7161, 7161, -1000, -1000, 7161, 885,
	-1000, 7161, -1000, -1000, -1000, 855, 855, 855, 765, -1000,
	1072, 771, -1000, -1000, -1000, -111, -101, -1000, -1000, 3140,
	-1000, 3140, 12074, 1090, 208, 236, -1000, 583, 581, -1000,
	562, -1000, -1000, -1000, -178, -1000, -1000, -1000, 873, -1000,
	-1000, 855, -124, -1000, -1000, 7161, -1000, 882, -1000, -1000,
	-1000, 689, 374, 374, 17, 374, -1000, 398, -1000, -1000,
	-1000, -1000, 792, -1000, 782, -1000, 54, 39, -1000, 773,
	-1000, 777, 854, 909, -1000, 759, -1000, 408, 1058, 108,
	-1000, 197, -1000, 12074, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12074, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 12332, -1000, -1000, -1000, -1000, -1000,
	12074, 221, -1000, -1000, 538, 7161, -1000, -1000, -1000, 4232,
	-1000, 1084, 10265, -1000, -1000, 661, -1000, 7681, 181, 181,
	-1000, -1000, 661, 873, 873, -1000, 873, 880, -1000, -1000,
	873, 69, 873, 68, 661, 661, 164, 323, -1000, 136,
	102, 855, -147, -1000, 415, 7161, -1000, 1019, 721, 705,
	-1000, -1000, 6115, 661, 767, 337, 765, 1063, -1000, 415,
	415, 415, 10007, 415, 10007, 10007, 10007, 8459, 12074, 1063,
	-1000, -1000, -1000, -1000, 2867, -1000, 755, -1000, 873, 255,
	255, 187, 183, -1000, -1000, -1000, -1000, 52, -1000, 661,
	873, 475, 10007, -1000, -1000, -1000, 374, -1000, -1000, -1000,
	17, 520, 17, -21, -85, 495, -1000, 493, 10007, 12074,
	12332, 4232, 3140, 252, 1052, -1000, -1000, 12074, -1000, -1000,
	-1000, 872, -1000, -1000, -1000, -1000, 1015, 12074, -1000, -1000,
	415, 1078, 726, -1000, 181, -1000, -1000, 166, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7681, 7681, -1000,
	7681, 7681, 7681, 661, 517, 415, 176, -1000, 855, -1000,
	-1000, 858, 12074, 12074, -1000, -1000, 741, -1000, -1000, 739,
	739, 739, 345, -1000, -1000, 261, 12074, -1000, 908, -1000,
	-1000, 476, 130, 844, 12074, 869, 28, -164, -1000, -1000,
	146, 736, -1000, 374, -1000, 374, -1000, -1000, 679, 668,
	734, 868, 863, -1000, -1000, 12074, -1000, -1000, -1000, -1000,
	-1000, 862, 10007, 855, 225, 1067, 1066, -1000, -1000, 199,
	199, 199, 199, 87, -1000, -1000, 1096, -1000, 855, -1000,
	841, 331, -1000, 12074, -1000, -1000, -1000, -1000, -1000, 261,
	-1000, 558, 407, 514, -167, -1000, 1092, -1000, -1000, 1093,
	860, -1000, 12074, -1000, -1000, -1000, -149, -1000, -1000, -1000,
	-1000, -1000, 1084, 10007, 10007, 745, -1000, 10007, 728, 165,
	174, -1000, 7161, 7161, -1000, -1000, -1000, -1000, 661, 72,
	-170, 12590, 705, 661, 12074, -1000, -1000, -1000, 490, -1000,
	-1000, 12074, 255, 255, 12074, 707, -1000, -1000, 702, 666,
	-157, 12074, 7161, 649, 706, 638, -1000, 12074, 859, 415,
	700, -1000, 979, -155, -173, 694, -1000, -1000, -1000, -1000,
	-1000, -1000, 590, -1000, 1084, -1000, -1000, -181, -1000, 415,
	-1000, -158, -1000, 165, 995, 10007, -1000, 977, -1000, 218,
	-1000, 7161, -1000, -1000, 158, 569, -161, 12332, 415, 139,
	-1000, -171, 857, 855, -175, 12074, 7421, -1000, 557, 199,
	661, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1344, 11, 591, 1342, 1339, 1338, 1337, 1335, 1332,
	1331, 1330, 1328, 1327, 1323, 1322, 1321, 1318, 1314, 1312,
	1311, 1309, 1306, 1305, 405, 1304, 1302, 1301, 68, 1296,
	74, 1295, 1292, 43, 156, 46, 40, 842, 1290, 31,
	76, 73, 1285, 51, 1283, 1282, 83, 1281, 61, 1280,
	1279, 45, 1278, 1277, 17, 20, 1275, 48, 1273, 1272,
	70, 470, 1268, 1267, 1264, 1263, 1262, 1261, 53, 8,
	16, 19, 21, 1259, 30, 7, 1255, 50, 1254, 1253,
	1251, 1249, 32, 1247, 54, 1246, 25, 52, 1245, 13,
	58, 37, 27, 5, 78, 56, 1244, 34, 60, 49,
	1238, 1237, 557, 1235, 1230, 1229, 1226, 1224, 1222, 648,
	543, 1220, 1219, 1218, 44, 0, 305, 144, 71, 1217,
	39, 1216, 1567, 67, 65, 23, 1214, 42, 120, 41,
	1212, 1211, 36, 81, 1207, 84, 75, 1204, 1203, 1202,
	1201, 1200, 401, 66, 33, 1194, 1192, 1191, 15, 90,
	29, 47, 55, 1190, 1189, 1188, 26, 1185, 4, 14,
	1, 57, 1181, 1172, 1171, 1169, 28, 22, 1167, 18,
	9, 10, 1166, 1165, 3, 1163, 24, 1161, 6, 1157,
	2, 1148, 1147, 1144, 1142, 1139, 1136, 1135, 1134, 1132,
	1130, 1373, 104, 1128, 1124, 1123, 1116, 82,
}

var yyR1 = [...]int{
	0, 189, 190, 190, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 193,
	193, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 182,
	182, 182, 183, 183, 183, 183, 183, 183, 185, 185,
	186, 186, 120, 120, 180, 180, 179, 178, 178, 177,
	177, 176, 187, 187, 16, 163, 164, 164, 164, 164,
	164, 152, 134, 134, 134, 134, 134, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 188,
	188, 184, 184, 184, 138, 138, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 139, 139, 139, 139, 139, 135, 135, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 151, 151, 142,
	142, 149, 149, 150, 150, 150, 148, 148, 148, 145,
	145, 146, 146, 147, 147, 147, 143, 143, 143, 144,
	144, 144, 154, 154, 172, 172, 171, 171, 171, 171,
	162, 162, 168, 168, 168, 168, 168, 168, 168, 161,
	161, 170, 170, 169, 156, 156, 156, 156, 156, 157,
	158, 158, 158, 158, 155, 159, 159, 160, 160, 165,
	165, 165, 166, 166, 166, 167, 167, 167, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	181, 181, 181, 181, 181, 181, 181, 181, 181, 181,
	181, 194, 194, 195, 195, 195, 195, 195, 195, 195,
	175, 173, 173, 174, 174, 13, 14, 14, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 107, 107, 104,
	104, 105, 105, 106, 106, 106, 108, 108, 108, 131,
	131, 131, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 196, 24, 25, 25, 26, 26, 26,
	30, 30, 30, 28, 28, 29, 29, 35, 35, 34,
	34, 36, 36, 36, 36, 119, 119, 119, 118, 118,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 53,
	53, 89, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 126, 126, 125, 125,
	125, 124, 124, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 197, 197, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 129, 129, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 133, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	97, 94, 94, 98, 98, 98, 96, 96, 96, 121,
	121, 121, 101, 101, 109, 109, 110, 110, 102, 102,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 113, 113, 116, 116, 117, 117, 122,
	122, 123, 123, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 191, 192, 127, 128,
	128, 128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 4, 3, 5, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 0,
	2, 0, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 3, 3, 2, 1, 1, 1, 4,
	4, 4, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 5, 4, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 1, 4, 4, 7, 7, 13,
	1, 1, 2, 2, 7, 0, 1, 1, 3, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 11,
	13, 7, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}

var yyChk = [...]int{
	-1000, -189, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -191, 8, 258,
	52, -190, 278, -82, 15, -26, 5, -24, -196, -24,
	-24, -24, -24, -24, -163, 52, -120, -187, 150, 250,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 250, 117, 118, -51, -122, 55, -115, 157,
	267, 20, 163, 176, 177, 168, 202, 192, 268, 155,
	189, 193, 237, 277, 64, 166, 246, 126, 161, 138,
	187, 183, 180, 27, 208, 274, 182, 129, 209, 213,
	238, 265, 173, 174, 240, 206, 31, 131, 269, 33,
	146, 241, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 236, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 273, 242, 179, 145,
	159, 140, 245, 154, 167, 239, 175, 248, 36, 222,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 247, 223, 275, 196, 194,
	190, 191, 153, 120, 150, 151, 229, 230, 231, 232,
	270, 271, 243, 188, 224, 225, 118, 105, 193, 111,
	227, 119, 31, 148, -131, 118, -104, 151, 229, 230,
	231, 232, 55, 239, 238, 233, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -191,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -191, 42, 43, 259,
	260, 261, 262, 266, 263, 74, 32, 249, 257, 256,
	255, 253, 254, 251, 252, 276, 123, 250, 100, 258,
	-102, -39, -40, -41, -42, -53, -74, -191, -51, 11,
	-46, -51, -94, -130, 165, -98, 239, 238, -117, -96,
	-116, -114, 237, 193, 236, 55, -115, 116, 70, 22,
	24, 220, 226, 73, 105, 16, 74, 104, 259, 111,
	46, 251, 252, 249, 261, 262, 250, 227, 28, 10,
	25, 136, 21, 98, 113, 77, 78, 139, 23, 137,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 134, 42, 87,
	17, 253, 254, 30, 266, 143, 100, 47, 34, 71,
	66, 50, 244, 69, 15, 45, 132, 88, 114, 258,
	43, 117, 6, 264, 29, 135, 41, 118, 228, 76,
	121, 67, 5, 133, 9, 48, 51, 255, 256, 257,
	32, 75, 12, -164, -152, 55, 119, 120, -116, -110,
	123, -110, -116, -110, 258, 118, -51, -51, -109, 123,
	55, -109, -109, -109, -51, 108, -51, 55, 29, 250,
	55, 148, 118, 149, 120, -128, -191, -117, -128, -128,
	-128, 152, 153, -128, -105, 234, 50, -128, -192, 54,
	-87, 19, 30, -37, -122, -83, -84, -37, -82, -2,
	-24, 34, -28, 21, 63, 11, -119, 70, 69, 86,
	-118, 22, -116, 57, 108, -37, -58, 89, 71, 87,
	88, 73, 91, 90, 101, 94, 95, 96, 97, 98,
	99, 100, 92, 93, 104, 276, 79, 80, 81, 82,
	83, 84, 85, -103, -191, -74, -191, 109, 110, -61,
	-61, -61, -61, -61, -61, -61, -191, -2, -69, -37,
	-191, -191, -191, -191, -191, -191, -191, -191, -191, -78,
	-37, -191, -197, -191, -197, -197, -197, -197, -197, -197,
	-197, -133, 105, 193, 138, 187, -136, -135, 197, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 192,
	268, -191, -191, -191, -191, -52, 26, -51, 29, 53,
	-47, -49, -48, -50, 40, 44, 46, 41, 42, 43,
	47, -126, 22, -39, -191, -125, 144, -124, 22, -122,
	57, -51, -46, -193, 53, 11, 51, 53, -94, 165,
	-95, -99, 240, 242, 79, -121, -116, 57, 28, 29,
	54, 53, -153, -134, -138, -135, -140, -139, -141, -136,
	-137, 189, 193, 190, 105, 194, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 196, 208, 29,
	138, 185, 186, 187, 188, 209, 210, 211, 212, 213,
	214, 215, 216, 179, 180, 182, 183, 184, -116, -51,
	-180, 51, 55, 71, 55, 50, -51, -51, 244, -128,
	121, -51, 23, 50, -51, 55, 55, -123, -122, -114,
	-128, -128, -128, -128, -128, -128, -128, -128, -128, -128,
	-107, 228, 235, -51, 9, 89, 53, 18, 108, 53,
	-85, 24, 25, -86, -192, -30, -62, -116, 58, 61,
	-29, 41, -51, -37, -37, -67, 66, 71, 67, 68,
	-118, 96, -123, -117, -114, -61, -68, -71, -74, 62,
	89, 87, 88, 73, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -129,
	55, 57, -133, 55, -60, -60, -116, -35, 21, -34,
	-36, -192, 53, -192, -2, -34, -34, -37, -37, -75,
	-116, -122, -75, -34, -28, -76, -77, 75, -75, -192,
	191, -34, -35, -34, -34, -90, 144, -51, -93, -97,
	-75, -40, -41, -41, -40, -41, 40, 40, 40, 45,
	40, 45, 40, -48, -122, -192, -54, 48, 122, 49,
	-191, -124, -90, 51, -39, -51, -98, -95, 53, 241,
	243, 244, 50, -37, -144, 105, 104, -165, -166, -167,
	-117, 57, 58, -152, -154, -156, -155, -168, -157, 126,
	124, 128, 129, 133, -161, 119, 134, 66, 71, 28,
	50, 220, 226, 124, 134, 133, 277, 64, 127, -147,
	279, 217, -145, 223, -142, 52, -142, -142, 191, -142,
	-142, -142, -143, 193, -143, -143, -143, -143, 52, 52,
	-142, -142, -142, -149, 52, 181, -149, -149, -150, 52,
	-150, 50, 51, 22, -178, 270, -179, 55, -128, 23,
	-128, -51, -111, 116, 113, 114, -175, 112, 220, 193,
	64, 28, 15, 259, 144, 275, 55, 145, -51, -51,
	-51, -128, -106, 11, 89, 36, -37, -37, -123, -84,
	-87, -101, 19, 11, 32, 32, -34, 66, 67, 68,
	108, -191, -68, -61, -61, -61, -33, 139, 70, -192,
	-192, -34, 53, -37, -192, -192, -192, 53, 51, 22,
	53, 11, 108, 53, 11, -192, -34, -79, -77, 77,
	-37, -192, -192, -192, -192, -192, -59, 29, 32, -2,
	-191, -191, -55, 53, 12, 79, -44, -43, 50, 51,
	-45, 50, -43, 40, 40, 119, 119, 119, -91, -116,
	-55, -39, -55, -99, -100, 245, 242, 248, 55, 53,
	-167, 79, 52, 50, -159, -116, 134, -161, -161, 55,
	-161, 55, 55, 66, 57, 58, 59, 66, 249, 65,
	-57, 218, 9, 134, 134, -191, 57, -122, 280, -146,
	224, 58, -143, -143, -142, -143, -144, 29, -144, -144,
	-144, -144, -151, 57, -151, -148, 270, 271, -148, 58,
	-149, 58, -51, -116, -2, -177, -176, -117, -182, 22,
	-127, -120, -195, 150, 125, 130, 129, 55, 124, 128,
	144, -181, 150, 125, 126, 130, 129, 55, 119, 134,
	124, 128, 144, 133, -112, -113, 121, 22, 119, 134,
	144, 116, -128, -108, 87, 12, -122, -122, 37, 108,
	-51, -38, 11, 96, -117, -35, -33, 70, -61, -61,
	-192, -36, -132, 105, 189, 138, 187, 183, 206, 207,
	195, 222, 185, 223, -129, -132, -61, -61, -117, -61,
	-61, 267, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -191, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -191, -191, -191, -192, 53, -82,
	-55, 242, 246, 247, -166, -167, -170, -169, -116, 10,
	9, 130, 124, 55, 55, 55, -184, 276, -142, -191,
	249, -37, 52, 54, -144, -144, -143, -144, 55, 105,
	54, 53, 54, 185, 185, 53, 54, 53, 52, 51,
	50, 53, 79, -183, 19, 158, 159, -194, 119, 134,
	-127, -116, -127, -116, -51, -127, -116, 126, -156, 57,
	-37, -55, -39, -192, -61, -192, -142, -142, -142, -150,
	-142, 174, -142, 174, -192, -192, -192, 53, 19, -192,
	53, 19, -191, -32, 264, -37, 27, -92, 53, -192,
	-192, -192, 53, 108, -192, -86, -89, -116, 134, -89,
	-89, -89, -125, -116, -86, 54, 53, -142, -158, 154,
	155, 29, 156, -158, 134, 134, 193, 186, -192, -142,
	-192, -89, -144, -143, 57, -143, 225, 225, 58, 58,
	-89, -116, -51, -176, -167, 121, 20, 6, 8, 9,
	10, -116, 52, 26, -116, -80, 13, -143, 55, -61,
	-61, -61, -61, -61, -192, 57, 134, -72, 32, -2,
	-191, -116, -116, 53, 54, -192, -192, -192, -54, -172,
	-171, 51, 131, 64, 270, -169, 50, 66, 157, 50,
	-159, -116, 52, 191, -148, -188, 156, 54, -144, -144,
	54, 54, 54, 52, 52, -160, -116, 52, -89, -191,
	124, -81, 14, 16, -192, -192, -192, -192, -31, 89,
	270, 9, -70, -2, 108, -116, -171, 55, -162, 79,
	57, 272, 9, 10, 52, -170, 265, -55, -89, -89,
	-185, 53, 51, -89, 54, -173, -174, 144, 134, -37,
	-69, -192, 268, 47, 273, -93, -192, -116, 58, -116,
	-158, -158, -160, 54, 54, 54, -186, 270, -116, -37,
	54, -180, -192, 53, -116, 52, 37, 269, 274, 54,
	-55, 277, -178, -174, 32, -89, 37, 127, -37, 146,
	54, 270, -51, 147, 273, 52, -191, 274, -160, -61,
	143, 54, -192, -192,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 595, 0, 353, 353, 353, 353, 353, 353, 0,
	-2, 648, 0, 0, 0, 0, -2, 343, 344, 0,
	346, 347, 888, 888, 888, 888, 888, 0, 33, 34,
	886, 1, 3, 603, 0, 0, 357, 360, 355, 0,
	648, 0, 0, 0, 60, 0, 0, 0, 0, 646,
	646, 0, 646, 83, 0, 0, 0, 649, 0, 644,
	0, 644, 644, 644, 0, 302, 425, 669, 670, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 0, 0, 0, 0,
	889, 889, 889, 889, 0, 889, 331, 320, 322, 323,
	324, 325, 889, 340, 341, 330, 342, 345, 348, 349,
	350, 351, 352, 27, 607, 0, 0, 595, 29, 0,
	353, 358, 359, 363, 361, 362, 354, 0, 371, 375,
	0, 433, 0, 438, 440, -2, -2, 0, 475, 476,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	503, 504, 505, 506, 580, 581, 582, 583, 584, 585,
	586, 587, 442, 443, 577, 627, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 534, 534, 534,
	534, 534, 534, 534, 534, 0, 0, 0, 0, 0,
	0, 0, 382, 384, 385, 386, 406, 0, 408, 0,
	0, 41, 45, 0, 862, 631, -2, -2, 0, 0,
	667, 668, -2, 781, -2, 665, 666, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 0, 96, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 93, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 303, 889, 889, 889,
	889, 889, 889, 889, 889, 312, 890, 891, 313, 314,
	315, 889, 889, 317, 0, 332, 0, 326, 28, 887,
	22, 0, 0, 604, 0, 596, 597, 600, 603, 27,
	360, 0, 365, 364, 356, 0, 372, 0, 0, 0,
	376, 0, 378, 379, 0, 436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 460, 461, 462, 463,
	464, 465, 466, 439, 0, 453, 0, 0, 0, 495,
	496, 497, 498, 499, 500, 0, 367, 27, 0, 473,
	0, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	569, 0, 525, 0, 526, 527, 528, 529, 530, 531,
	532, 533, 561, 0, 563, 564, 565, 566, 567, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 157,
	158, 0, 367, 0, 0, 43, 0, 424, 0, 0,
	0, 0, 0, 0, 413, 0, 0, 416, 0, 0,
	0, 0, 407, 0, 0, 427, 829, 409, 0, 411,
	412, -2, 0, 0, 0, 39, 40, 0, 46, 862,
	48, 49, 0, 0, 0, 209, 639, 640, 641, 637,
	249, 0, 101, 203, 199, 103, 104, 105, 106, 189,
	135, 189, 189, 189, 189, 189, 206, 206, 206, 206,
	206, 170, 171, 172, 173, 174, 175, 176, 0, 0,
	152, 189, 189, 189, 156, 179, 180, 181, 182, 183,
	184, 185, 186, 191, 191, 191, 193, 193, 0, 0,
	87, 0, 889, 0, 889, 0, 94, 0, 0, 268,
	0, 296, 645, 0, 889, 299, 300, 426, 671, 672,
	304, 305, 306, 307, 308, 309, 310, 311, 316, 319,
	333, 327, 328, 321, 608, 0, 0, 0, 0, 0,
	599, 601, 602, 607, 30, 363, 0, 588, 0, 0,
	0, 366, 25, 434, 435, 437, 454, 0, 456, 458,
	377, 373, 0, 578, -2, 444, 445, 469, 470, 471,
	0, 0, 0, 0, 467, 449, 0, 480, 481, 482,
	483, 484, 485, 486, 487, 488, 489, 490, 491, 494,
	545, 546, 502, 0, 492, 493, 501, 0, 0, 368,
	369, 472, 0, 626, 27, 0, 0, 0, 0, 0,
	577, 0, 0, 0, 0, 575, 572, 0, 0, 535,
	562, 0, 0, 0, 0, 0, 0, 423, 431, 628,
	0, 383, 402, 404, 0, 399, 414, 415, 417, 0,
	419, 0, 421, 422, 387, 388, 389, 0, 0, 0,
	0, 410, 431, 0, 431, 42, 632, 47, 0, 0,
	52, 53, 633, 634, 635, 210, 0, 95, 250, 252,
	255, 256, 257, 97, 98, 99, 100, 0, 234, 245,
	0, 0, 0, 0, 0, 229, 230, 108, 0, 0,
	0, 117, 118, 0, 120, 122, 0, 0, 0, 107,
	0, 205, 201, 200, 134, 0, 206, 206, 189, 206,
	163, 164, 209, 0, 209, 209, 209, 209, 0, 0,
	196, 196, 155, 146, 0, 191, 148, 149, 150, 0,
	151, 0, 0, 0, 65, 0, 85, 86, 66, 647,
	67, 69, 888, 82, 0, 660, 269, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 0, 0, 295,
	889, 298, 336, 0, 0, 0, 605, 606, 0, 598,
	23, 0, 642, 643, 589, 590, 380, 455, 457, 459,
	0, 367, 446, 467, 450, 0, 447, 0, 0, 441,
	507, 0, 0, 474, -2, 510, 511, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 573, 0,
	0, 524, 536, 537, 538, 539, 620, 0, 0, -2,
	0, 0, 595, 0, 0, 0, 396, 403, 0, 0,
	397, 0, 398, 418, 420, 0, 0, 0, 0, 394,
	595, 431, 38, 50, 51, 0, 0, 57, 211, 0,
	253, 0, 0, 0, 0, 246, 222, 0, 0, 225,
	0, 227, 228, 109, 131, 111, 112, 113, 189, 115,
	125, 0, 0, 119, 121, 0, 124, 127, 204, 102,
	202, 0, 209, 209, 206, 209, 165, 0, 166, 167,
	168, 169, 0, 187, 0, 153, 0, 0, 154, 0,
	147, 0, 0, 0, -2, 88, 89, 0, 72, 0,
	258, 0, 888, 0, 283, 284, 285, 286, 287, 288,
	289, 888, 0, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 0, 888, 661, 662, 663, 664,
	0, 0, 297, 318, 0, 0, 334, 335, 609, 0,
	24, 431, 0, 374, 579, 0, 448, 0, 468, 451,
	508, 370, 0, 189, 189, 550, 189, 193, 553, 554,
	189, 556, 189, 559, 0, 0, 0, 0, 578, 0,
	0, 0, 570, 523, 576, 0, 31, 0, 620, 610,
	622, 624, 0, 27, 0, 616, 0, 603, 629, 432,
	630, 400, 0, 405, 0, 0, 0, 408, 0, 603,
	37, 54, 55, 56, 251, 254, 0, 231, 189, 0,
	0, 0, 0, 223, 224, 226, 110, 0, 114, 0,
	189, 0, 0, 190, 159, 160, 209, 161, 207, 208,
	206, 0, 206, 0, 0, 0, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 71, 0, 281, 282,
	262, 0, 263, 265, 266, 267, 0, 245, 261, 337,
	338, 591, 381, 509, 452, 512, 547, 206, 551, 552,
	555, 557, 558, 560, 514, 513, 515, 0, 0, 518,
	0, 0, 0, 0, 0, 574, 0, 32, 0, 625,
	-2, 0, 0, 0, 44, 35, 0, 391, 392, 0,
	0, 0, 427, 395, 36, 213, 0, 233, 235, 240,
	241, 0, 0, 236, 245, 0, 0, 196, 126, 116,
	129, 0, 162, 209, 188, 209, 197, 198, 0, 0,
	0, 0, 0, 90, 91, 0, 73, 74, 75, 76,
	77, 0, 0, 0, 246, 593, 0, 548, 549, 0,
	0, 0, 0, 540, 522, 571, 0, 623, 0, -2,
	0, 618, 617, 0, 401, 428, 429, 430, 390, 212,
	214, 0, 220, 0, 0, 232, 0, 242, 243, 0,
	0, 246, 0, 132, 133, 123, 0, 128, 177, 178,
	192, 195, 431, 0, 0, 78, 247, 0, 0, 0,
	0, 26, 0, 0, 516, 517, 519, 520, 0, 0,
	0, 0, 613, 27, 0, 393, 215, 216, 0, 221,
	218, 0, 0, 0, 0, 0, 130, 61, 0, 0,
	80, 0, 0, 0, 84, 0, 291, 0, 0, 594,
	592, 521, 0, 0, 0, 621, -2, 619, 217, 219,
	237, 238, 0, 244, 431, 62, 68, 0, 248, 79,
	259, 87, 290, 0, 0, 0, 541, 0, 544, 0,
	63, 0, 264, 292, 0, 0, 542, 0, 81, 0,
	260, 0, 0, 0, 0, 0, 0, 543, 0, 0,
	0, 239, 293, 294,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 278,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 279, 3, 280, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:319
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:324
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:325
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:329
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:352
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:360
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:364
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:370
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:383
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:387
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:393
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:397
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:404
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:416
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:428
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:438
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:448
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:458
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:462
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:466
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:471
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:475
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:499
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:503
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:513
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:517
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:541
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:545
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:551
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:556
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:572
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:587
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:622
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:638
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:642
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:646
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:651
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:676
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:680
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:685
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:689
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:694
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:698
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:703
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:707
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:713
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:718
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:729
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:734
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:740
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:745
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:749
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:755
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:762
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:769
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:774
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:778
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:782
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:792
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:797
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:819
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:824
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:829
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:834
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:839
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:844
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:849
		{
			yyDollar[1].columnType.Default = NewValArgWithOpt(yyDollar[3].bytes, yyDollar[4].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:859
		{
			yyDollar[1].columnType.OnUpdate = NewValArgWithOpt(yyDollar[4].bytes, yyDollar[5].optVal)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:864
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:869
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:884
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:894
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:900
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:905
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:910
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:915
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:920
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:931
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:936
		{
			yyVAL.bytes = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:944
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:997
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1009
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1027
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1035
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1039
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1043
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1047
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1051
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1057
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1061
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1067
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1071
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1075
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1079
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1083
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1087
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1091
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1095
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1099
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1103
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1107
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1111
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1115
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1123
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1127
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1131
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1135
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1139
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1166
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1184
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1189
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1194
		{
			yyVAL.optVal = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1198
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1203
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1207
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1215
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1219
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1225
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1233
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1237
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1241
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1246
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1250
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 201:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1255
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1259
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1264
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1268
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1272
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1277
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1281
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1285
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1290
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1294
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1298
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1304
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1308
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1314
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1318
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1324
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1328
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1333
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1337
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1343
		{
			yyVAL.str = ""
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1347
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1353
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1357
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1361
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1365
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1369
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1373
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1377
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1387
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1393
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1397
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1403
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1410
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1416
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 237:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1422
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1428
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 239:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1436
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1448
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1452
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1456
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1460
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1466
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true},
				Columns: yyDollar[6].indexColumns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1474
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1481
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1485
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1490
		{
			yyVAL.str = ""
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1494
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1506
		{
			yyVAL.str = yyDollar[1].str
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1510
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1514
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1520
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1528
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1534
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1538
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 260:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1552
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1566
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1575
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1579
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 264:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1583
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1596
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 266:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1606
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1611
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1616
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1620
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1652
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1658
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1662
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1668
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 294:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1672
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 295:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1678
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1684
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1692
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1697
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1705
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1709
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1715
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1719
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1724
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1743
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1747
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1751
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1755
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1759
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1763
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1767
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1771
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1775
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1779
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1783
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 318:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1787
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1797
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1801
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1805
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1809
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1813
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1817
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1821
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1831
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1837
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1841
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1847
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1851
		{
			yyVAL.str = "extended "
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1857
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1861
		{
			yyVAL.str = "full "
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1867
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1871
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1875
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1881
		{
			yyVAL.showFilter = nil
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1885
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1889
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1895
		{
			yyVAL.str = ""
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1899
		{
			yyVAL.str = SessionStr
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1903
		{
			yyVAL.str = GlobalStr
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1909
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1913
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1919
		{
			yyVAL.statement = &Begin{}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1923
		{
			yyVAL.statement = &Begin{}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1929
		{
			yyVAL.statement = &Commit{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1935
		{
			yyVAL.statement = &Rollback{}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1941
		{
			yyVAL.statement = &OtherRead{}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1945
		{
			yyVAL.statement = &OtherRead{}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1949
		{
			yyVAL.statement = &OtherRead{}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1953
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1957
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1962
		{
			setAllowComments(yylex, true)
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1966
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1972
		{
			yyVAL.bytes2 = nil
		}
	case 356:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1976
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1982
		{
			yyVAL.str = UnionStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.str = UnionAllStr
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1990
		{
			yyVAL.str = UnionDistinctStr
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1995
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1999
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2003
		{
			yyVAL.str = SQLCacheStr
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2008
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2012
		{
			yyVAL.str = DistinctStr
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2017
		{
			yyVAL.str = ""
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2021
		{
			yyVAL.str = StraightJoinHint
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2026
		{
			yyVAL.selectExprs = nil
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2036
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2040
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2046
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2050
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2054
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 374:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2058
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2063
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2067
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2071
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2078
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2087
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2097
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2107
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2111
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2115
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2121
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 390:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2125
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2131
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2136
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2140
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2146
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2150
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2163
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2167
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2171
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2175
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2181
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2183
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2187
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2189
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2193
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2195
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2198
		{
			yyVAL.empty = struct{}{}
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2200
		{
			yyVAL.empty = struct{}{}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2203
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2207
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2211
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2218
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2224
		{
			yyVAL.str = JoinStr
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2228
		{
			yyVAL.str = JoinStr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2232
		{
			yyVAL.str = JoinStr
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2238
		{
			yyVAL.str = StraightJoinStr
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2244
		{
			yyVAL.str = LeftJoinStr
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2248
		{
			yyVAL.str = LeftJoinStr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2252
		{
			yyVAL.str = RightJoinStr
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2256
		{
			yyVAL.str = RightJoinStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2262
		{
			yyVAL.str = NaturalJoinStr
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2266
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2276
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2280
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2286
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2290
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2295
		{
			yyVAL.indexHints = nil
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2299
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2303
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2307
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2312
		{
			yyVAL.expr = nil
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2316
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2322
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2326
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2330
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2334
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2338
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2342
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2346
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 440:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2352
		{
			yyVAL.str = ""
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2356
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2362
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2366
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2372
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2376
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2380
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 447:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2384
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2388
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2392
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2396
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2400
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 452:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2404
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2408
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2414
		{
			yyVAL.str = IsNullStr
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2418
		{
			yyVAL.str = IsNotNullStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2422
		{
			yyVAL.str = IsTrueStr
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2426
		{
			yyVAL.str = IsNotTrueStr
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2430
		{
			yyVAL.str = IsFalseStr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2434
		{
			yyVAL.str = IsNotFalseStr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2440
		{
			yyVAL.str = EqualStr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2444
		{
			yyVAL.str = LessThanStr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2448
		{
			yyVAL.str = GreaterThanStr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2452
		{
			yyVAL.str = LessEqualStr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2456
		{
			yyVAL.str = GreaterEqualStr
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2460
		{
			yyVAL.str = NotEqualStr
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2464
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 467:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2469
		{
			yyVAL.expr = nil
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2473
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2479
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2483
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2487
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2493
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2499
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2503
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2517
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2521
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2525
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2529
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2533
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2537
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2541
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2545
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2549
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2553
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2557
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 488:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2561
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2565
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2569
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2573
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2577
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2581
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2585
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2589
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2593
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2597
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2605
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2619
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2623
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2627
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2635
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 508:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2653
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 509:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2657
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 510:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2671
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 512:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2675
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 513:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2679
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 514:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2683
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 515:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2687
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 516:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2691
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2695
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 518:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2699
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2703
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2707
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 521:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2711
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 522:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2715
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 523:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2719
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2723
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2750
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2755
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2765
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2769
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2783
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2787
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2791
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2795
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2801
		{
			yyVAL.str = ""
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2805
		{
			yyVAL.str = BooleanModeStr
		}
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2809
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 543:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2813
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2817
		{
			yyVAL.str = QueryExpansionStr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2823
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2833
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2837
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2841
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2845
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2849
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2853
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2859
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2863
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2867
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2871
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2875
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2879
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2883
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2887
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2893
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2897
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2901
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2905
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2909
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2913
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2917
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 568:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2922
		{
			yyVAL.expr = nil
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2926
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2931
		{
			yyVAL.str = string("")
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2935
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2941
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2945
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2951
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2956
		{
			yyVAL.expr = nil
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2960
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2966
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2970
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 579:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2974
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2980
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2984
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2988
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2992
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2996
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3000
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3004
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3008
		{
			yyVAL.expr = &NullVal{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3014
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3023
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3027
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3032
		{
			yyVAL.exprs = nil
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3036
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3041
		{
			yyVAL.expr = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3045
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3050
		{
			yyVAL.orderBy = nil
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3054
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3060
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3064
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3070
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3075
		{
			yyVAL.str = AscScr
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3079
		{
			yyVAL.str = AscScr
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3083
		{
			yyVAL.str = DescScr
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3088
		{
			yyVAL.limit = nil
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3092
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3096
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3100
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3105
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3109
		{
			yyVAL.str = ForUpdateStr
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3113
		{
			yyVAL.str = ShareModeStr
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3126
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3130
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3134
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3139
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3143
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 615:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3147
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3154
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3158
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3162
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 619:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3166
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3171
		{
			yyVAL.updateExprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3175
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3181
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3185
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3191
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3195
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3201
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3207
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3217
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3221
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3227
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3233
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3237
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3243
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3247
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3251
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3258
		{
			yyVAL.bytes = []byte("charset")
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3265
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3269
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3273
		{
			yyVAL.expr = &Default{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3282
		{
			yyVAL.byt = 0
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3284
		{
			yyVAL.byt = 1
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3289
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3292
		{
			yyVAL.str = ""
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3294
		{
			yyVAL.str = IgnoreStr
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3298
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3300
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3302
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3304
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3306
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3308
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3310
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3312
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3314
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3316
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3319
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3321
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3323
		{
			yyVAL.empty = struct{}{}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3327
		{
			yyVAL.empty = struct{}{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3329
		{
			yyVAL.empty = struct{}{}
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3333
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3337
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3344
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3350
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3354
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3361
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3600
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3609
		{
			decNesting(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3614
		{
			forceEOF(yylex)
		}
	case 889:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3619
		{
			forceEOF(yylex)
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3623
		{
			forceEOF(yylex)
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3627
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
