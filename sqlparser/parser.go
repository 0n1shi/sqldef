// Code generated by goyacc -o sqlparser/parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexPartition       *IndexPartition
	indexColumn          IndexColumn
	indexColumns         []IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OFF = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const REFERENCES = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const POLICY = 57458
const UNIQUE = 57459
const KEY = 57460
const SHOW = 57461
const DESCRIBE = 57462
const EXPLAIN = 57463
const DATE = 57464
const ESCAPE = 57465
const REPAIR = 57466
const OPTIMIZE = 57467
const TRUNCATE = 57468
const MAXVALUE = 57469
const PARTITION = 57470
const REORGANIZE = 57471
const LESS = 57472
const THAN = 57473
const PROCEDURE = 57474
const TRIGGER = 57475
const VINDEX = 57476
const VINDEXES = 57477
const STATUS = 57478
const VARIABLES = 57479
const RESTRICT = 57480
const CASCADE = 57481
const NO = 57482
const ACTION = 57483
const PERMISSIVE = 57484
const RESTRICTIVE = 57485
const PUBLIC = 57486
const CURRENT_USER = 57487
const SESSION_USER = 57488
const PAD_INDEX = 57489
const FILLFACTOR = 57490
const IGNORE_DUP_KEY = 57491
const STATISTICS_NORECOMPUTE = 57492
const STATISTICS_INCREMENTAL = 57493
const ALLOW_ROW_LOCKS = 57494
const ALLOW_PAGE_LOCKS = 57495
const BEFORE = 57496
const AFTER = 57497
const EACH = 57498
const ROW = 57499
const BEGIN = 57500
const START = 57501
const TRANSACTION = 57502
const COMMIT = 57503
const ROLLBACK = 57504
const BIT = 57505
const TINYINT = 57506
const SMALLINT = 57507
const SMALLSERIAL = 57508
const MEDIUMINT = 57509
const INT = 57510
const INTEGER = 57511
const SERIAL = 57512
const BIGINT = 57513
const BIGSERIAL = 57514
const INTNUM = 57515
const REAL = 57516
const DOUBLE = 57517
const PRECISION = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const SMALLMONEY = 57522
const MONEY = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const DATETIMEOFFSET = 57528
const DATETIME2 = 57529
const SMALLDATETIME = 57530
const CHAR = 57531
const VARCHAR = 57532
const VARYING = 57533
const BOOL = 57534
const CHARACTER = 57535
const VARBINARY = 57536
const NCHAR = 57537
const NVARCHAR = 57538
const NTEXT = 57539
const UUID = 57540
const TEXT = 57541
const TINYTEXT = 57542
const MEDIUMTEXT = 57543
const LONGTEXT = 57544
const CITEXT = 57545
const BLOB = 57546
const TINYBLOB = 57547
const MEDIUMBLOB = 57548
const LONGBLOB = 57549
const JSON = 57550
const JSONB = 57551
const ENUM = 57552
const GEOMETRY = 57553
const POINT = 57554
const LINESTRING = 57555
const POLYGON = 57556
const GEOMETRYCOLLECTION = 57557
const MULTIPOINT = 57558
const MULTILINESTRING = 57559
const MULTIPOLYGON = 57560
const ARRAY = 57561
const NOW = 57562
const GETDATE = 57563
const BPCHAR = 57564
const NULLX = 57565
const AUTO_INCREMENT = 57566
const APPROXNUM = 57567
const SIGNED = 57568
const UNSIGNED = 57569
const ZEROFILL = 57570
const ZONE = 57571
const AUTOINCREMENT = 57572
const DATABASES = 57573
const TABLES = 57574
const VITESS_KEYSPACES = 57575
const VITESS_SHARDS = 57576
const VITESS_TABLETS = 57577
const VSCHEMA_TABLES = 57578
const EXTENDED = 57579
const FULL = 57580
const PROCESSLIST = 57581
const NAMES = 57582
const CHARSET = 57583
const GLOBAL = 57584
const SESSION = 57585
const ISOLATION = 57586
const LEVEL = 57587
const READ = 57588
const WRITE = 57589
const ONLY = 57590
const REPEATABLE = 57591
const COMMITTED = 57592
const UNCOMMITTED = 57593
const SERIALIZABLE = 57594
const CURRENT_TIMESTAMP = 57595
const DATABASE = 57596
const CURRENT_DATE = 57597
const CURRENT_TIME = 57598
const LOCALTIME = 57599
const LOCALTIMESTAMP = 57600
const UTC_DATE = 57601
const UTC_TIME = 57602
const UTC_TIMESTAMP = 57603
const REPLACE = 57604
const CONVERT = 57605
const CAST = 57606
const SUBSTR = 57607
const SUBSTRING = 57608
const GROUP_CONCAT = 57609
const SEPARATOR = 57610
const INHERIT = 57611
const MATCH = 57612
const AGAINST = 57613
const BOOLEAN = 57614
const LANGUAGE = 57615
const WITH = 57616
const WITHOUT = 57617
const PARSER = 57618
const QUERY = 57619
const EXPANSION = 57620
const UNUSED = 57621
const GENERATED = 57622
const ALWAYS = 57623
const IDENTITY = 57624
const SEQUENCE = 57625
const INCREMENT = 57626
const MINVALUE = 57627
const CACHE = 57628
const CYCLE = 57629
const OWNED = 57630
const NONE = 57631
const CLUSTERED = 57632
const NONCLUSTERED = 57633
const REPLICATION = 57634
const INCLUDE = 57635
const TYPECAST = 57636
const CHECK = 57637

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"PAD_INDEX",
	"FILLFACTOR",
	"IGNORE_DUP_KEY",
	"STATISTICS_NORECOMPUTE",
	"STATISTICS_INCREMENTAL",
	"ALLOW_ROW_LOCKS",
	"ALLOW_PAGE_LOCKS",
	"BEFORE",
	"AFTER",
	"EACH",
	"ROW",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"SMALLMONEY",
	"MONEY",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"DATETIMEOFFSET",
	"DATETIME2",
	"SMALLDATETIME",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"NVARCHAR",
	"NTEXT",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"GETDATE",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"REPLICATION",
	"INCLUDE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	121, 101,
	-2, 91,
	-1, 36,
	153, 413,
	154, 413,
	-2, 403,
	-1, 272,
	109, 746,
	-2, 742,
	-1, 273,
	109, 747,
	-2, 743,
	-1, 343,
	80, 940,
	-2, 58,
	-1, 344,
	80, 891,
	-2, 59,
	-1, 349,
	80, 870,
	-2, 713,
	-1, 351,
	80, 914,
	-2, 715,
	-1, 652,
	51, 41,
	53, 41,
	-2, 43,
	-1, 796,
	109, 749,
	-2, 745,
	-1, 1037,
	5, 28,
	-2, 548,
	-1, 1062,
	5, 27,
	-2, 687,
	-1, 1163,
	5, 27,
	-2, 64,
	-1, 1378,
	5, 28,
	-2, 688,
	-1, 1460,
	5, 27,
	-2, 690,
	-1, 1579,
	5, 28,
	-2, 691,
}

const yyPrivate = 57344

const yyLast = 14794

var yyAct = [...]int{
	273, 1532, 1510, 1569, 579, 878, 1470, 1384, 1473, 973,
	729, 7, 498, 6, 1065, 5, 860, 578, 3, 1096,
	1586, 1154, 1276, 1249, 302, 1099, 1277, 772, 1165, 464,
	251, 277, 902, 276, 1121, 89, 1397, 897, 89, 1250,
	270, 646, 1246, 968, 908, 901, 1127, 53, 922, 644,
	861, 245, 821, 1081, 832, 1029, 917, 1222, 829, 1151,
	662, 848, 89, 89, 353, 250, 348, 279, 66, 353,
	798, 1070, 353, 353, 511, 517, 345, 661, 89, 648,
	89, 462, 633, 963, 857, 342, 89, 602, 330, 523,
	531, 260, 266, 1011, 607, 246, 247, 248, 249, 951,
	275, 608, 329, 339, 337, 593, 1135, 52, 938, 935,
	545, 328, 1653, 555, 264, 548, 549, 550, 551, 552,
	545, 1302, 539, 555, 542, 555, 1611, 831, 1403, 333,
	557, 558, 559, 560, 561, 562, 563, 1290, 540, 541,
	538, 544, 543, 553, 554, 546, 547, 548, 549, 550,
	551, 552, 545, 1368, 510, 555, 1525, 544, 543, 553,
	554, 546, 547, 548, 549, 550, 551, 552, 545, 465,
	466, 555, 1646, 1410, 1687, 1289, 1630, 1683, 1577, 1536,
	1537, 935, 1155, 1156, 1119, 335, 937, 1674, 974, 1615,
	1629, 544, 543, 553, 554, 546, 547, 548, 549, 550,
	551, 552, 545, 924, 1639, 555, 1241, 1576, 1600, 1372,
	475, 1134, 1365, 510, 48, 26, 27, 931, 1369, 920,
	86, 1272, 1273, 1271, 89, 921, 892, 893, 353, 353,
	353, 353, 1089, 353, 891, 1088, 506, 663, 1090, 664,
	353, 1427, 763, 1131, 1426, 1133, 1132, 1137, 338, 764,
	544, 543, 553, 554, 546, 547, 548, 549, 550, 551,
	552, 545, 952, 477, 555, 478, 940, 353, 1501, 852,
	1322, 485, 1321, 1449, 520, 1361, 1359, 1565, 927, 244,
	923, 932, 1512, 942, 1489, 496, 1555, 929, 928, 1682,
	544, 543, 553, 554, 546, 547, 548, 549, 550, 551,
	552, 545, 519, 1672, 555, 964, 1570, 301, 553, 554,
	546, 547, 548, 549, 550, 551, 552, 545, 1200, 556,
	555, 570, 571, 572, 573, 574, 575, 576, 89, 556,
	1645, 556, 1647, 736, 737, 89, 89, 89, 1332, 1333,
	491, 353, 566, 1336, 510, 514, 518, 353, 465, 466,
	75, 502, 503, 345, 858, 1571, 1457, 1526, 1337, 918,
	1405, 556, 536, 546, 547, 548, 549, 550, 551, 552,
	545, 347, 1404, 555, 919, 1113, 468, 556, 1112, 472,
	473, 544, 543, 553, 554, 546, 547, 548, 549, 550,
	551, 552, 545, 1292, 925, 555, 580, 1101, 70, 73,
	926, 1283, 333, 1400, 493, 591, 495, 1197, 1106, 487,
	1661, 556, 1516, 71, 74, 84, 80, 81, 82, 1345,
	1537, 595, 596, 597, 598, 599, 600, 601, 952, 1284,
	72, 68, 1415, 1217, 492, 494, 480, 1638, 1601, 945,
	470, 653, 1414, 77, 659, 78, 965, 78, 1417, 1575,
	933, 1435, 934, 544, 543, 553, 554, 546, 547, 548,
	549, 550, 551, 552, 545, 930, 1118, 555, 89, 1104,
	556, 1416, 57, 918, 742, 89, 467, 89, 353, 1080,
	89, 1079, 476, 89, 1078, 49, 727, 89, 919, 353,
	353, 353, 353, 353, 353, 353, 353, 59, 60, 61,
	62, 63, 223, 353, 353, 1198, 79, 1196, 89, 1201,
	556, 568, 569, 628, 499, 500, 501, 1678, 504, 1530,
	1199, 1381, 652, 353, 1209, 508, 556, 89, 1605, 1398,
	1399, 1401, 1045, 353, 918, 347, 347, 347, 347, 1023,
	347, 1607, 879, 881, 770, 535, 486, 347, 795, 919,
	775, 69, 1316, 751, 899, 898, 490, 805, 680, 1006,
	1602, 767, 1042, 799, 530, 676, 1548, 1547, 83, 1205,
	1546, 803, 804, 802, 533, 1545, 1544, 353, 797, 556,
	749, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 528, 529, 528, 836,
	1543, 556, 796, 1317, 1245, 1243, 800, 849, 1542, 510,
	529, 528, 530, 777, 530, 1540, 1329, 880, 841, 844,
	469, 785, 786, 792, 850, 529, 528, 530, 89, 794,
	1068, 89, 89, 89, 89, 89, 665, 849, 1007, 1052,
	529, 528, 530, 89, 824, 1204, 89, 1041, 347, 1040,
	89, 1098, 732, 728, 667, 89, 89, 530, 1491, 353,
	738, 862, 739, 836, 1488, 743, 529, 528, 746, 826,
	827, 345, 353, 556, 580, 1487, 1587, 839, 840, 846,
	1098, 1097, 854, 530, 903, 1603, 1604, 1606, 1608, 1609,
	463, 471, 1109, 765, 474, 1588, 525, 1098, 333, 333,
	333, 333, 333, 1098, 886, 1020, 1021, 1022, 50, 1664,
	837, 838, 784, 333, 1640, 1420, 845, 1541, 801, 1138,
	864, 865, 333, 867, 875, 788, 790, 791, 353, 883,
	521, 789, 353, 863, 353, 89, 866, 884, 889, 1108,
	1663, 89, 1366, 89, 888, 1419, 89, 353, 76, 1138,
	853, 479, 855, 856, 906, 918, 1641, 1644, 896, 1643,
	913, 1642, 912, 741, 914, 915, 1589, 1585, 970, 916,
	919, 1499, 1429, 1428, 752, 753, 754, 755, 756, 757,
	758, 759, 1298, 795, 509, 347, 773, 774, 760, 761,
	1160, 953, 954, 955, 956, 1158, 347, 347, 347, 347,
	347, 347, 347, 347, 1138, 966, 967, 769, 1456, 327,
	347, 347, 1424, 859, 544, 543, 553, 554, 546, 547,
	548, 549, 550, 551, 552, 545, 1347, 799, 555, 822,
	779, 823, 529, 528, 482, 483, 484, 796, 1152, 1115,
	533, 887, 768, 347, 1026, 1027, 1028, 1012, 21, 530,
	1013, 1563, 1691, 1464, 1680, 1394, 1673, 1394, 1652, 529,
	528, 1009, 1010, 1538, 518, 1394, 1651, 50, 1287, 1177,
	800, 1394, 1637, 1025, 1286, 1062, 530, 1563, 1636, 1633,
	1632, 1625, 510, 353, 828, 1285, 89, 292, 291, 294,
	295, 296, 297, 1107, 842, 842, 293, 298, 1091, 1083,
	842, 1085, 353, 976, 255, 1394, 1622, 1464, 1567, 1051,
	1019, 1394, 1559, 353, 903, 1464, 1497, 1464, 510, 510,
	980, 1464, 1465, 1558, 353, 825, 1001, 1036, 1002, 1394,
	1393, 1003, 748, 89, 1093, 1084, 747, 842, 1075, 1178,
	1174, 733, 1053, 1179, 1176, 1175, 1268, 510, 74, 731,
	1114, 1086, 488, 333, 1380, 510, 1325, 1324, 1034, 1180,
	1319, 1320, 1319, 1318, 1557, 1173, 347, 1035, 510, 1129,
	481, 1102, 1103, 1105, 1049, 353, 630, 510, 1506, 347,
	834, 510, 1157, 672, 671, 1505, 656, 1166, 463, 1145,
	1163, 1147, 1148, 1149, 1150, 1564, 1500, 1563, 1212, 635,
	638, 639, 640, 636, 353, 637, 641, 89, 89, 1071,
	1072, 1421, 1123, 1124, 1125, 89, 23, 977, 1153, 979,
	1128, 1126, 299, 300, 353, 1412, 657, 23, 655, 54,
	1247, 1309, 1004, 1066, 556, 971, 1214, 1170, 1067, 347,
	1035, 347, 1459, 1139, 1140, 629, 1142, 1143, 1144, 1159,
	1060, 1066, 834, 1061, 347, 1171, 1376, 885, 1238, 655,
	1067, 1047, 50, 23, 353, 353, 1044, 1035, 630, 630,
	941, 1218, 1219, 50, 1431, 1430, 1684, 1248, 347, 630,
	1411, 1253, 1216, 1215, 1236, 1237, 1251, 1239, 1240, 1328,
	1221, 1323, 862, 353, 1234, 353, 353, 1242, 862, 1270,
	1235, 1066, 1092, 1046, 890, 903, 1035, 903, 1043, 50,
	730, 658, 796, 1257, 771, 1650, 1627, 1258, 1256, 257,
	1561, 1474, 635, 638, 639, 640, 636, 1275, 637, 641,
	1560, 1269, 1552, 1551, 1476, 1474, 1533, 1288, 1274, 1513,
	1498, 1443, 942, 969, 1308, 1244, 1307, 1305, 1476, 1295,
	1262, 1161, 1162, 783, 964, 1120, 1129, 1299, 1293, 1291,
	1259, 1260, 89, 353, 1261, 50, 1095, 1263, 1071, 1072,
	89, 958, 957, 65, 353, 1432, 1247, 1310, 1311, 1169,
	1313, 1314, 1315, 353, 1074, 745, 734, 507, 1077, 872,
	1082, 870, 1130, 1134, 873, 89, 871, 1076, 869, 868,
	1210, 353, 1475, 874, 1658, 639, 640, 261, 262, 347,
	353, 1628, 1208, 89, 1008, 1656, 1475, 524, 1018, 1017,
	1100, 512, 1214, 1146, 1338, 1131, 1349, 1133, 1132, 670,
	522, 1110, 513, 1340, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1312, 489, 1297, 1374, 1444, 1346, 1343, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 773, 774, 978, 1352, 744,
	1296, 1168, 1350, 353, 972, 353, 353, 353, 89, 353,
	643, 1357, 1387, 1388, 1389, 353, 258, 259, 524, 1441,
	333, 1437, 347, 1438, 1439, 1440, 1331, 903, 1383, 1202,
	1282, 1375, 1648, 1016, 252, 1436, 353, 1519, 1348, 253,
	1392, 1015, 54, 1409, 1518, 776, 1447, 1093, 1067, 1390,
	526, 347, 1407, 982, 983, 984, 1281, 1280, 1402, 1406,
	1550, 1549, 1527, 1111, 766, 56, 58, 1172, 1335, 353,
	353, 347, 654, 51, 1129, 1413, 353, 1, 1373, 1618,
	981, 1166, 903, 735, 1556, 580, 353, 1326, 1117, 1554,
	1422, 67, 1614, 347, 1562, 1334, 1301, 1433, 1330, 1167,
	1181, 1472, 1434, 833, 835, 975, 1164, 989, 842, 1568,
	1582, 1255, 1082, 1471, 842, 1535, 910, 900, 461, 851,
	1342, 353, 353, 64, 1539, 911, 909, 1408, 907, 673,
	936, 1136, 939, 679, 677, 353, 1469, 1460, 678, 675,
	347, 1251, 347, 1278, 681, 353, 1450, 1451, 674, 1452,
	1453, 1454, 231, 340, 642, 666, 1458, 1486, 1423, 527,
	1425, 1484, 1490, 1485, 1195, 1194, 985, 1203, 762, 877,
	1492, 353, 353, 89, 1300, 1494, 353, 1502, 1005, 1123,
	1124, 1125, 505, 233, 353, 564, 1014, 1128, 1126, 299,
	300, 1514, 1087, 1507, 346, 1448, 1610, 1254, 516, 1517,
	1446, 1503, 1050, 1504, 590, 353, 847, 278, 787, 290,
	1327, 287, 289, 288, 778, 1059, 537, 303, 47, 1529,
	1534, 1339, 268, 1528, 1251, 332, 626, 634, 632, 631,
	1341, 544, 543, 553, 554, 546, 547, 548, 549, 550,
	551, 552, 545, 1073, 1069, 555, 331, 1211, 1344, 1371,
	1524, 782, 25, 55, 353, 263, 19, 347, 18, 17,
	20, 16, 15, 14, 1573, 47, 29, 13, 12, 11,
	10, 353, 9, 256, 353, 8, 1566, 4, 353, 334,
	1030, 254, 22, 2, 1578, 1583, 0, 0, 0, 0,
	0, 0, 353, 353, 1597, 0, 0, 0, 0, 862,
	0, 353, 353, 0, 353, 1590, 1591, 1592, 1593, 1594,
	1385, 353, 1385, 1385, 1385, 1598, 1391, 1620, 1623, 1621,
	0, 1619, 347, 1612, 1613, 0, 1595, 1596, 1553, 0,
	544, 543, 553, 554, 546, 547, 548, 549, 550, 551,
	552, 545, 0, 1385, 555, 0, 0, 0, 0, 0,
	1032, 1572, 580, 0, 1033, 1634, 1635, 0, 1509, 1130,
	1134, 1037, 1038, 1039, 0, 1649, 0, 0, 353, 1655,
	1048, 0, 353, 1654, 0, 1054, 347, 347, 1055, 1056,
	1057, 1058, 1660, 1442, 1662, 0, 0, 0, 0, 89,
	1657, 353, 1131, 1445, 1133, 1132, 1667, 1617, 1668, 1670,
	0, 0, 89, 0, 1677, 0, 1669, 1122, 0, 1679,
	0, 0, 1123, 1124, 1125, 0, 1681, 0, 0, 353,
	1128, 1126, 299, 300, 0, 353, 0, 1688, 1462, 1463,
	0, 1685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1278, 0, 0, 497, 497, 497, 497, 0,
	497, 556, 1493, 0, 0, 0, 0, 497, 995, 0,
	0, 0, 0, 0, 0, 0, 0, 1689, 0, 0,
	0, 994, 0, 0, 47, 0, 0, 0, 1278, 1508,
	0, 0, 0, 1511, 0, 0, 1671, 0, 0, 565,
	0, 1385, 567, 943, 944, 946, 947, 948, 999, 949,
	950, 0, 0, 0, 0, 0, 0, 993, 0, 0,
	0, 0, 1531, 0, 0, 0, 959, 960, 961, 577,
	962, 581, 582, 583, 584, 585, 586, 587, 588, 589,
	0, 592, 594, 594, 594, 594, 594, 594, 594, 594,
	0, 622, 623, 624, 625, 0, 0, 0, 0, 0,
	556, 0, 645, 0, 0, 0, 990, 987, 988, 1220,
	986, 1278, 0, 543, 553, 554, 546, 547, 548, 549,
	550, 551, 552, 545, 0, 842, 555, 0, 1580, 0,
	0, 1581, 0, 0, 0, 1584, 603, 1676, 997, 1000,
	0, 0, 1130, 1134, 515, 0, 0, 0, 0, 1511,
	1278, 0, 0, 0, 0, 0, 1267, 0, 1278, 1278,
	0, 1616, 0, 1031, 0, 0, 0, 0, 1626, 605,
	0, 0, 0, 0, 0, 1131, 0, 1133, 1132, 87,
	0, 0, 243, 544, 543, 553, 554, 546, 547, 548,
	549, 550, 551, 552, 545, 0, 0, 555, 0, 0,
	0, 0, 0, 992, 267, 0, 87, 87, 0, 0,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	0, 0, 87, 0, 87, 1278, 0, 0, 0, 1659,
	87, 606, 0, 0, 991, 0, 0, 0, 0, 620,
	604, 0, 0, 0, 0, 497, 609, 0, 1385, 0,
	1223, 0, 0, 0, 0, 0, 497, 497, 497, 497,
	497, 497, 497, 497, 0, 0, 0, 0, 0, 0,
	497, 497, 0, 996, 0, 0, 347, 0, 0, 0,
	0, 0, 1511, 1225, 0, 0, 0, 1187, 0, 998,
	1351, 0, 0, 0, 0, 0, 0, 1353, 23, 24,
	48, 26, 27, 0, 0, 0, 1141, 0, 0, 1362,
	1363, 1364, 0, 0, 1367, 0, 0, 42, 0, 621,
	0, 28, 0, 0, 0, 0, 0, 1377, 1378, 1379,
	0, 1382, 556, 0, 0, 47, 229, 0, 0, 1227,
	37, 0, 0, 1232, 50, 1226, 0, 0, 0, 581,
	1224, 0, 1188, 0, 0, 0, 1230, 1190, 1183, 1184,
	239, 1191, 1186, 1185, 0, 0, 1193, 1189, 87, 1228,
	1229, 0, 0, 0, 0, 0, 0, 1192, 1418, 0,
	0, 0, 0, 1182, 0, 0, 0, 1231, 1233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 334, 334,
	334, 334, 334, 556, 30, 31, 33, 32, 35, 0,
	0, 224, 0, 645, 0, 882, 0, 226, 0, 0,
	0, 0, 334, 0, 232, 228, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1455, 0, 0, 0,
	0, 0, 0, 0, 230, 0, 0, 234, 0, 0,
	0, 0, 1466, 1467, 1468, 0, 0, 38, 39, 0,
	40, 41, 87, 0, 0, 0, 0, 0, 0, 87,
	650, 87, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 1306, 0, 0, 0, 0, 0, 497,
	0, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 497, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1520, 1521, 1522, 1523, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 235, 236, 237, 238, 242,
	0, 0, 0, 1024, 241, 240, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 1355, 0, 1356, 0, 0,
	0, 1358, 0, 1360, 0, 0, 0, 0, 0, 1574,
	0, 0, 0, 0, 1579, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 87,
	0, 87, 0, 0, 87, 1063, 1064, 87, 1599, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 1395,
	1396, 0, 0, 1624, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 334, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 0, 0, 0, 0, 267, 267, 0,
	0, 843, 843, 267, 1675, 0, 0, 843, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1692, 1693, 703, 267, 267, 267,
	267, 497, 87, 0, 843, 87, 87, 87, 87, 87,
	0, 0, 0, 0, 0, 0, 0, 876, 0, 0,
	87, 0, 0, 0, 650, 0, 0, 0, 0, 87,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1252,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 0, 0, 1264, 1265, 1266, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 0, 0, 87,
	0, 0, 1294, 0, 0, 87, 0, 87, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 1303, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 267, 720, 721,
	0, 722, 723, 724, 726, 725, 705, 706, 707, 711,
	709, 708, 710, 682, 684, 0, 620, 683, 689, 685,
	686, 687, 701, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 702, 712, 713, 714, 715, 716,
	717, 718, 719, 0, 0, 267, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1370,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1252, 0, 0, 1461, 0, 0,
	0, 1206, 1207, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 267,
	0, 0, 0, 0, 0, 1495, 0, 0, 0, 0,
	267, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	750, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 843, 0, 0, 0, 0,
	0, 843, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1252, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1631,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 650, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1686, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 439, 0,
	408, 451, 381, 397, 459, 399, 400, 430, 365, 416,
	154, 394, 92, 384, 358, 391, 359, 382, 410, 116,
	380, 441, 419, 130, 457, 133, 424, 0, 176, 142,
	0, 0, 412, 443, 414, 436, 407, 431, 372, 423,
	452, 395, 427, 453, 0, 0, 0, 352, 0, 904,
	905, 0, 0, 0, 0, 0, 105, 0, 426, 448,
	393, 460, 429, 357, 425, 0, 363, 366, 458, 446,
	388, 389, 1094, 0, 0, 0, 0, 0, 0, 411,
	415, 433, 404, 0, 0, 0, 0, 87, 0, 0,
	0, 385, 0, 422, 0, 0, 0, 369, 364, 0,
	409, 0, 0, 0, 371, 0, 386, 434, 0, 354,
	438, 444, 406, 203, 447, 403, 402, 161, 0, 108,
	0, 182, 120, 396, 131, 432, 450, 413, 442, 383,
	392, 110, 390, 168, 155, 194, 421, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 362, 355, 387, 437, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 843, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 360, 0, 177, 196, 214, 215, 361,
	379, 445, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 428, 169, 107,
	195, 175, 375, 378, 373, 374, 417, 418, 454, 455,
	456, 435, 370, 0, 376, 377, 0, 440, 125, 420,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 398,
	356, 401, 0, 0, 0, 0, 0, 0, 0, 367,
	368, 170, 405, 1666, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 449, 439, 87, 408, 451, 381,
	397, 459, 399, 400, 430, 365, 416, 154, 394, 92,
	384, 358, 391, 359, 382, 410, 116, 380, 441, 419,
	130, 457, 133, 424, 0, 176, 142, 0, 0, 412,
	443, 414, 436, 407, 431, 372, 423, 452, 395, 427,
	453, 0, 0, 0, 352, 0, 904, 905, 0, 0,
	0, 0, 0, 105, 0, 426, 448, 393, 460, 429,
	357, 425, 0, 363, 366, 458, 446, 388, 389, 0,
	0, 0, 0, 0, 0, 0, 411, 415, 433, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 0,
	422, 0, 0, 0, 369, 364, 0, 409, 0, 0,
	0, 371, 0, 386, 434, 0, 354, 438, 444, 406,
	203, 447, 403, 402, 161, 0, 108, 0, 182, 120,
	396, 131, 432, 450, 413, 442, 383, 392, 110, 390,
	168, 155, 194, 421, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 387, 437, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 379, 445, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 428, 169, 107, 195, 175, 375,
	378, 373, 374, 417, 418, 454, 455, 456, 435, 370,
	0, 376, 377, 0, 440, 125, 420, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 398, 356, 401, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 170, 405,
	0, 104, 449, 439, 0, 408, 451, 381, 397, 459,
	399, 400, 430, 365, 416, 154, 394, 92, 384, 358,
	391, 359, 382, 410, 116, 380, 441, 419, 130, 457,
	133, 424, 0, 176, 142, 0, 0, 412, 443, 414,
	436, 407, 431, 372, 423, 452, 395, 427, 453, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 426, 448, 393, 460, 429, 357, 425,
	0, 363, 366, 458, 446, 388, 389, 0, 0, 0,
	0, 0, 0, 0, 411, 415, 433, 404, 0, 0,
	0, 0, 0, 0, 1213, 0, 385, 0, 422, 0,
	0, 0, 369, 364, 0, 409, 0, 0, 0, 371,
	0, 386, 434, 0, 354, 438, 444, 406, 203, 447,
	403, 402, 161, 0, 108, 0, 182, 120, 396, 131,
	432, 450, 413, 442, 383, 392, 110, 390, 168, 155,
	194, 421, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	387, 437, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 102, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 379, 445, 206, 207, 208,
	209, 0, 0, 0, 147, 103, 124, 173, 128, 135,
	164, 212, 428, 169, 107, 195, 175, 375, 378, 373,
	374, 417, 418, 454, 455, 456, 435, 370, 0, 376,
	377, 0, 440, 125, 420, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 398, 356, 401, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 170, 405, 0, 104,
	449, 439, 0, 408, 451, 381, 397, 459, 399, 400,
	430, 365, 416, 154, 394, 92, 384, 358, 391, 359,
	382, 410, 116, 380, 441, 419, 130, 457, 133, 424,
	0, 176, 142, 0, 0, 412, 443, 414, 436, 407,
	431, 372, 423, 452, 395, 427, 453, 50, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 426, 448, 393, 460, 429, 357, 425, 0, 363,
	366, 458, 446, 388, 389, 0, 0, 0, 0, 0,
	0, 0, 411, 415, 433, 404, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 422, 0, 0, 0,
	369, 364, 0, 409, 0, 0, 0, 371, 0, 386,
	434, 0, 354, 438, 444, 406, 203, 447, 403, 402,
	161, 0, 108, 0, 182, 120, 396, 131, 432, 450,
	413, 442, 383, 392, 110, 390, 168, 155, 194, 421,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 387, 437,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 379, 445, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	428, 169, 107, 195, 175, 375, 378, 373, 374, 417,
	418, 454, 455, 456, 435, 370, 0, 376, 377, 0,
	440, 125, 420, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 398, 356, 401, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 170, 405, 0, 104, 449, 439,
	0, 408, 451, 381, 397, 459, 399, 400, 430, 365,
	416, 154, 394, 92, 384, 358, 391, 359, 382, 410,
	116, 380, 441, 419, 130, 457, 133, 424, 0, 176,
	142, 0, 0, 412, 443, 414, 436, 407, 431, 372,
	423, 452, 395, 427, 453, 0, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 426,
	448, 393, 460, 429, 357, 425, 0, 363, 366, 458,
	446, 388, 389, 0, 0, 0, 0, 0, 0, 0,
	411, 415, 433, 404, 0, 0, 0, 0, 0, 0,
	793, 0, 385, 0, 422, 0, 0, 0, 369, 364,
	0, 409, 0, 0, 0, 371, 0, 386, 434, 0,
	354, 438, 444, 406, 203, 447, 403, 402, 161, 0,
	108, 0, 182, 120, 396, 131, 432, 450, 413, 442,
	383, 392, 110, 390, 168, 155, 194, 421, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 387, 437, 93, 183,
	192, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 102, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 379, 445, 206, 207, 208, 209, 0, 0, 0,
	147, 103, 124, 173, 128, 135, 164, 212, 428, 169,
	107, 195, 175, 375, 378, 373, 374, 417, 418, 454,
	455, 456, 435, 370, 0, 376, 377, 0, 440, 125,
	420, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	398, 356, 401, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 170, 405, 0, 104, 449, 439, 0, 408,
	451, 381, 397, 459, 399, 400, 430, 365, 416, 154,
	394, 92, 384, 358, 391, 359, 382, 410, 116, 380,
	441, 419, 130, 457, 133, 424, 0, 176, 142, 0,
	0, 412, 443, 414, 436, 407, 431, 372, 423, 452,
	395, 427, 453, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 426, 448, 393,
	460, 429, 357, 425, 0, 363, 366, 458, 446, 388,
	389, 0, 0, 0, 0, 0, 0, 0, 411, 415,
	433, 404, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 0, 422, 0, 0, 0, 369, 364, 0, 409,
	0, 0, 0, 371, 0, 386, 434, 0, 354, 438,
	444, 406, 203, 447, 403, 402, 161, 0, 108, 0,
	182, 120, 396, 131, 432, 450, 413, 442, 383, 392,
	110, 390, 168, 155, 194, 421, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 387, 437, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 379,
	445, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 428, 169, 107, 195,
	175, 375, 378, 373, 374, 417, 418, 454, 455, 456,
	435, 370, 0, 376, 377, 0, 440, 125, 420, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 398, 356,
	401, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	170, 405, 0, 104, 449, 439, 0, 408, 451, 381,
	397, 459, 399, 400, 430, 365, 416, 154, 394, 92,
	384, 358, 391, 359, 382, 410, 116, 380, 441, 419,
	130, 457, 133, 424, 0, 176, 142, 0, 0, 412,
	443, 414, 436, 407, 431, 372, 423, 452, 395, 427,
	453, 0, 0, 0, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 0, 426, 448, 393, 460, 429,
	357, 425, 0, 363, 366, 458, 446, 388, 389, 0,
	0, 0, 0, 0, 0, 0, 411, 415, 433, 404,
	0, 0, 0, 0, 0, 0, 0, 0, 385, 0,
	422, 0, 0, 0, 369, 364, 0, 409, 0, 0,
	0, 371, 0, 386, 434, 0, 354, 438, 444, 406,
	203, 447, 403, 402, 161, 0, 108, 0, 182, 120,
	396, 131, 432, 450, 413, 442, 383, 392, 110, 390,
	168, 155, 194, 421, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	362, 355, 387, 437, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	360, 0, 177, 196, 214, 215, 361, 379, 445, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 428, 169, 107, 195, 175, 375,
	378, 373, 374, 417, 418, 454, 455, 456, 435, 370,
	0, 376, 377, 0, 440, 125, 420, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 398, 356, 401, 0,
	0, 0, 0, 0, 0, 0, 367, 368, 170, 405,
	0, 104, 449, 439, 0, 408, 451, 381, 397, 459,
	399, 400, 430, 365, 416, 154, 394, 92, 384, 358,
	391, 359, 382, 410, 116, 380, 441, 419, 130, 457,
	133, 424, 0, 176, 142, 0, 0, 412, 443, 414,
	436, 407, 431, 372, 423, 452, 395, 427, 453, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 426, 448, 393, 460, 429, 357, 425,
	0, 363, 366, 458, 446, 388, 389, 0, 0, 0,
	0, 0, 0, 0, 411, 415, 433, 404, 0, 0,
	0, 0, 0, 0, 0, 0, 385, 0, 422, 0,
	0, 0, 369, 364, 0, 409, 0, 0, 0, 371,
	0, 386, 434, 0, 354, 438, 444, 406, 203, 447,
	403, 402, 161, 0, 108, 0, 182, 120, 396, 131,
	432, 450, 413, 442, 383, 392, 110, 390, 168, 155,
	194, 421, 156, 166, 134, 186, 162, 193, 204, 205,
	184, 202, 171, 100, 149, 90, 160, 167, 0, 109,
	0, 216, 217, 218, 219, 220, 221, 222, 362, 355,
	387, 437, 93, 183, 192, 106, 172, 96, 190, 179,
	181, 140, 126, 127, 174, 94, 95, 0, 165, 115,
	159, 119, 114, 152, 180, 143, 187, 188, 111, 213,
	113, 112, 178, 101, 200, 201, 98, 350, 199, 148,
	153, 151, 198, 185, 191, 141, 138, 0, 97, 189,
	139, 137, 129, 0, 117, 121, 157, 136, 158, 122,
	145, 144, 146, 0, 150, 123, 0, 0, 360, 0,
	177, 196, 214, 215, 361, 379, 445, 206, 207, 208,
	209, 0, 0, 0, 351, 349, 124, 173, 128, 135,
	164, 212, 428, 169, 107, 195, 175, 375, 378, 373,
	374, 417, 418, 454, 455, 456, 435, 370, 0, 376,
	377, 0, 440, 125, 420, 91, 99, 132, 210, 211,
	0, 163, 118, 197, 398, 356, 401, 0, 0, 0,
	0, 0, 0, 0, 367, 368, 170, 405, 0, 104,
	449, 439, 0, 408, 451, 381, 397, 459, 399, 400,
	430, 365, 416, 154, 394, 92, 384, 358, 391, 359,
	382, 410, 116, 380, 441, 419, 130, 457, 133, 424,
	0, 176, 142, 0, 0, 412, 443, 414, 436, 407,
	431, 372, 423, 452, 395, 427, 453, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 426, 448, 393, 460, 429, 357, 425, 0, 363,
	366, 458, 446, 388, 389, 0, 0, 0, 0, 0,
	0, 0, 411, 415, 433, 404, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 422, 0, 0, 0,
	369, 364, 0, 409, 0, 0, 0, 371, 0, 386,
	434, 0, 354, 438, 444, 406, 203, 447, 403, 402,
	161, 0, 108, 0, 182, 120, 396, 131, 432, 450,
	413, 442, 383, 392, 110, 390, 168, 155, 194, 421,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 362, 355, 387, 437,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 360, 0, 177, 196,
	214, 215, 361, 379, 445, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	428, 169, 107, 195, 175, 375, 378, 373, 374, 417,
	418, 454, 455, 456, 435, 370, 0, 376, 377, 0,
	440, 125, 420, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 398, 356, 401, 0, 0, 0, 0, 0,
	0, 0, 367, 368, 170, 405, 0, 104, 449, 439,
	0, 408, 451, 381, 397, 459, 399, 400, 430, 365,
	416, 154, 394, 92, 384, 358, 391, 359, 382, 410,
	116, 380, 441, 419, 130, 457, 133, 424, 0, 176,
	142, 0, 0, 412, 443, 414, 436, 407, 431, 372,
	423, 452, 395, 427, 453, 0, 0, 0, 352, 0,
	0, 0, 0, 0, 0, 0, 0, 105, 0, 426,
	448, 393, 460, 429, 357, 425, 0, 363, 366, 458,
	446, 388, 389, 0, 0, 0, 0, 0, 0, 0,
	411, 415, 433, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 385, 0, 422, 0, 0, 0, 369, 364,
	0, 409, 0, 0, 0, 371, 0, 386, 434, 0,
	354, 438, 444, 406, 203, 447, 403, 402, 161, 0,
	108, 0, 182, 120, 396, 131, 432, 450, 413, 442,
	383, 392, 110, 390, 168, 155, 194, 421, 156, 166,
	134, 186, 162, 193, 204, 205, 184, 202, 171, 100,
	149, 90, 160, 167, 0, 109, 0, 216, 217, 218,
	219, 220, 221, 222, 362, 355, 387, 437, 93, 183,
	660, 106, 172, 96, 190, 179, 181, 140, 126, 127,
	174, 94, 95, 0, 165, 115, 159, 119, 114, 152,
	180, 143, 187, 188, 111, 213, 113, 112, 178, 101,
	200, 201, 98, 350, 199, 148, 153, 151, 198, 185,
	191, 141, 138, 0, 97, 189, 139, 137, 129, 0,
	117, 121, 157, 136, 158, 122, 145, 144, 146, 0,
	150, 123, 0, 0, 360, 0, 177, 196, 214, 215,
	361, 379, 445, 206, 207, 208, 209, 0, 0, 0,
	351, 349, 124, 173, 128, 135, 164, 212, 428, 169,
	107, 195, 175, 375, 378, 373, 374, 417, 418, 454,
	455, 456, 435, 370, 0, 376, 377, 0, 440, 125,
	420, 91, 99, 132, 210, 211, 0, 163, 118, 197,
	398, 356, 401, 0, 0, 0, 0, 0, 0, 0,
	367, 368, 170, 405, 0, 104, 449, 439, 0, 408,
	451, 381, 397, 459, 399, 400, 430, 365, 416, 154,
	394, 92, 384, 358, 391, 359, 382, 410, 116, 380,
	441, 419, 130, 457, 133, 424, 0, 176, 142, 0,
	0, 412, 443, 414, 436, 407, 431, 372, 423, 452,
	395, 427, 453, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 426, 448, 393,
	460, 429, 357, 425, 0, 363, 366, 458, 446, 388,
	389, 0, 0, 0, 0, 0, 0, 0, 411, 415,
	433, 404, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 0, 422, 0, 0, 0, 369, 364, 0, 409,
	0, 0, 0, 371, 0, 386, 434, 0, 354, 438,
	444, 406, 203, 447, 403, 402, 161, 0, 108, 0,
	182, 120, 396, 131, 432, 450, 413, 442, 383, 392,
	110, 390, 168, 155, 194, 421, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 362, 355, 387, 437, 93, 183, 341, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 350, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 360, 0, 177, 196, 214, 215, 361, 379,
	445, 206, 207, 208, 209, 0, 0, 0, 351, 349,
	344, 343, 128, 135, 164, 212, 428, 169, 107, 195,
	175, 375, 378, 373, 374, 417, 418, 454, 455, 456,
	435, 370, 0, 376, 377, 0, 440, 125, 420, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 398, 356,
	401, 0, 0, 0, 0, 0, 0, 0, 367, 368,
	170, 405, 154, 104, 92, 0, 0, 274, 0, 0,
	0, 116, 271, 0, 0, 130, 313, 133, 0, 0,
	176, 142, 0, 0, 0, 0, 304, 305, 0, 0,
	0, 0, 0, 0, 894, 0, 50, 0, 0, 272,
	292, 291, 294, 295, 296, 297, 0, 0, 105, 293,
	298, 299, 300, 895, 0, 0, 269, 285, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	283, 0, 0, 0, 0, 325, 0, 284, 0, 0,
	280, 281, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 323, 161,
	0, 108, 0, 182, 120, 0, 131, 0, 0, 0,
	0, 0, 0, 110, 0, 168, 155, 194, 0, 156,
	166, 134, 186, 162, 193, 204, 205, 184, 202, 171,
	100, 149, 90, 160, 167, 0, 109, 0, 216, 217,
	218, 219, 220, 221, 222, 0, 0, 0, 0, 93,
	183, 192, 106, 172, 96, 190, 179, 181, 140, 126,
	127, 174, 94, 95, 0, 165, 115, 159, 119, 114,
	152, 180, 143, 187, 188, 111, 213, 113, 112, 178,
	101, 200, 201, 98, 102, 199, 148, 153, 151, 198,
	185, 191, 141, 138, 0, 97, 189, 139, 137, 129,
	0, 117, 121, 157, 136, 158, 122, 145, 144, 146,
	0, 150, 123, 0, 0, 0, 0, 177, 196, 214,
	215, 0, 0, 0, 206, 207, 208, 209, 0, 0,
	0, 147, 103, 124, 173, 128, 135, 164, 212, 0,
	169, 107, 195, 175, 314, 324, 320, 321, 318, 319,
	317, 316, 315, 326, 306, 307, 308, 309, 311, 0,
	125, 310, 91, 99, 132, 210, 211, 0, 163, 118,
	197, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 92, 830, 170, 274, 322, 104, 0, 116, 271,
	0, 0, 130, 313, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 304, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 272, 292, 291, 294,
	295, 296, 297, 0, 0, 105, 293, 298, 299, 300,
	0, 0, 0, 269, 285, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 282, 283, 265, 0,
	0, 0, 325, 0, 284, 0, 0, 280, 281, 286,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 323, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 314, 324, 320, 321, 318, 319, 317, 316, 315,
	326, 306, 307, 308, 309, 311, 0, 125, 310, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 92, 0,
	170, 274, 322, 104, 0, 116, 271, 0, 0, 130,
	313, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	304, 305, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 510, 272, 292, 291, 294, 295, 296, 297,
	0, 0, 105, 293, 298, 299, 300, 0, 0, 0,
	269, 285, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 282, 283, 0, 0, 0, 0, 325,
	0, 284, 0, 0, 280, 281, 286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 323, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 314, 324,
	320, 321, 318, 319, 317, 316, 315, 326, 306, 307,
	308, 309, 311, 0, 125, 310, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 92, 0, 170, 274, 322,
	104, 0, 116, 271, 0, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 269, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 265, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 23, 163,
	118, 197, 0, 0, 0, 0, 0, 0, 0, 0,
	154, 0, 92, 0, 170, 274, 322, 104, 0, 116,
	271, 0, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 269, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 0, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 0, 0, 0, 0, 154, 0, 92,
	0, 170, 274, 322, 104, 0, 116, 271, 0, 0,
	130, 313, 133, 0, 0, 176, 142, 0, 0, 0,
	0, 304, 305, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 272, 292, 291, 294, 295, 296,
	297, 0, 0, 105, 293, 298, 299, 300, 0, 0,
	0, 269, 285, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 282, 283, 0, 0, 0, 0,
	325, 0, 284, 0, 0, 280, 281, 286, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 0, 323, 161, 0, 108, 0, 182, 120,
	0, 131, 0, 0, 0, 0, 0, 0, 110, 0,
	168, 155, 194, 0, 156, 166, 134, 186, 162, 193,
	204, 205, 184, 202, 171, 100, 149, 90, 160, 167,
	0, 109, 0, 216, 217, 218, 219, 220, 221, 222,
	0, 0, 0, 0, 93, 183, 192, 106, 172, 96,
	190, 179, 181, 140, 126, 127, 174, 94, 95, 0,
	165, 115, 159, 119, 114, 152, 180, 143, 187, 188,
	111, 213, 113, 112, 178, 101, 200, 201, 98, 102,
	199, 148, 153, 151, 198, 185, 191, 141, 138, 0,
	97, 189, 139, 137, 129, 0, 117, 121, 157, 136,
	158, 122, 145, 144, 146, 0, 150, 123, 0, 0,
	0, 0, 177, 196, 214, 215, 0, 0, 0, 206,
	207, 208, 209, 0, 0, 0, 147, 103, 124, 173,
	128, 135, 164, 212, 0, 169, 107, 195, 175, 314,
	324, 320, 321, 318, 319, 317, 316, 315, 326, 306,
	307, 308, 309, 311, 0, 125, 310, 91, 99, 132,
	210, 211, 0, 163, 118, 197, 0, 0, 0, 0,
	154, 0, 92, 0, 0, 0, 0, 0, 170, 116,
	322, 104, 0, 130, 313, 133, 0, 0, 176, 142,
	0, 0, 0, 0, 304, 305, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 272, 292, 291,
	294, 295, 296, 297, 0, 0, 105, 293, 298, 299,
	300, 0, 0, 0, 0, 285, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 283, 0,
	0, 0, 0, 325, 0, 284, 0, 0, 280, 281,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 323, 161, 0, 108,
	0, 182, 120, 0, 131, 0, 0, 0, 0, 0,
	0, 110, 0, 168, 155, 194, 1690, 156, 166, 134,
	186, 162, 193, 204, 205, 184, 202, 171, 100, 149,
	90, 160, 167, 0, 109, 0, 216, 217, 218, 219,
	220, 221, 222, 0, 0, 0, 0, 93, 183, 192,
	106, 172, 96, 190, 179, 181, 140, 126, 127, 174,
	94, 95, 0, 165, 115, 159, 119, 114, 152, 180,
	143, 187, 188, 111, 213, 113, 112, 178, 101, 200,
	201, 98, 102, 199, 148, 153, 151, 198, 185, 191,
	141, 138, 0, 97, 189, 139, 137, 129, 0, 117,
	121, 157, 136, 158, 122, 145, 144, 146, 0, 150,
	123, 0, 0, 0, 0, 177, 196, 214, 215, 0,
	0, 0, 206, 207, 208, 209, 0, 0, 0, 147,
	103, 124, 173, 128, 135, 164, 212, 0, 169, 107,
	195, 175, 314, 324, 320, 321, 318, 319, 317, 316,
	315, 326, 306, 307, 308, 309, 311, 0, 125, 310,
	91, 99, 132, 210, 211, 0, 163, 118, 197, 0,
	0, 0, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 170, 116, 322, 104, 0, 130, 313, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 304, 305, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	272, 292, 291, 294, 295, 296, 297, 0, 0, 105,
	293, 298, 299, 300, 0, 0, 0, 0, 285, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	282, 283, 0, 0, 0, 0, 325, 0, 284, 0,
	0, 280, 281, 286, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 323,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 314, 324, 320, 321, 318,
	319, 317, 316, 315, 326, 306, 307, 308, 309, 311,
	0, 125, 310, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 0, 0, 0, 154, 0, 92, 0,
	0, 0, 0, 0, 170, 116, 322, 104, 0, 130,
	0, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	543, 553, 554, 546, 547, 548, 549, 550, 551, 552,
	545, 0, 0, 555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 0, 163, 118, 197, 0, 0, 0, 0, 154,
	0, 92, 0, 532, 0, 0, 0, 170, 116, 556,
	104, 0, 130, 0, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 534, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 529, 528, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 154,
	0, 92, 0, 649, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 651, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 23, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 92, 0,
	170, 0, 0, 104, 0, 116, 0, 0, 0, 130,
	0, 133, 0, 0, 176, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 161, 0, 108, 0, 182, 120, 0,
	131, 0, 0, 0, 0, 0, 0, 110, 0, 168,
	155, 194, 0, 156, 166, 134, 186, 162, 193, 204,
	205, 184, 202, 171, 100, 149, 90, 160, 167, 0,
	109, 0, 216, 217, 218, 219, 220, 221, 222, 0,
	0, 0, 0, 93, 183, 192, 106, 172, 96, 190,
	179, 181, 140, 126, 127, 174, 94, 95, 0, 165,
	115, 159, 119, 114, 152, 180, 143, 187, 188, 111,
	213, 113, 112, 178, 101, 200, 201, 98, 102, 199,
	148, 153, 151, 198, 185, 191, 141, 138, 0, 97,
	189, 139, 137, 129, 0, 117, 121, 157, 136, 158,
	122, 145, 144, 146, 0, 150, 123, 0, 0, 0,
	0, 177, 196, 214, 215, 0, 0, 0, 206, 207,
	208, 209, 0, 0, 0, 147, 103, 124, 173, 128,
	135, 164, 212, 0, 169, 107, 195, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 91, 99, 132, 210,
	211, 23, 163, 118, 197, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 92, 0, 170, 0, 0,
	104, 0, 116, 0, 0, 0, 130, 0, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 780, 0, 0, 781, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 669, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 668, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 649, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 651, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	647, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	1386, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 1665, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	1279, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 651, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	352, 0, 534, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 0, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	740, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 0, 154, 0, 92, 0, 0, 0, 0,
	0, 627, 116, 0, 170, 0, 130, 104, 133, 0,
	0, 176, 142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 203, 0, 0, 0,
	161, 0, 108, 0, 182, 120, 0, 131, 0, 0,
	0, 0, 0, 0, 110, 0, 168, 155, 194, 0,
	156, 166, 134, 186, 162, 193, 204, 205, 184, 202,
	171, 100, 149, 90, 160, 167, 0, 109, 0, 216,
	217, 218, 219, 220, 221, 222, 0, 0, 0, 0,
	93, 183, 192, 106, 172, 96, 190, 179, 181, 140,
	126, 127, 174, 94, 95, 0, 165, 115, 159, 119,
	114, 152, 180, 143, 187, 188, 111, 213, 113, 112,
	178, 101, 200, 201, 98, 102, 199, 148, 153, 151,
	198, 185, 191, 141, 138, 0, 97, 189, 139, 137,
	129, 0, 117, 121, 157, 136, 158, 122, 145, 144,
	146, 0, 150, 123, 0, 0, 0, 0, 177, 196,
	214, 215, 0, 0, 0, 206, 207, 208, 209, 0,
	0, 0, 147, 103, 124, 173, 128, 135, 164, 212,
	0, 169, 107, 195, 175, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 91, 99, 132, 210, 211, 0, 163,
	118, 197, 336, 0, 0, 0, 0, 0, 0, 154,
	0, 92, 0, 0, 170, 0, 0, 104, 116, 0,
	0, 0, 130, 0, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 154,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 154,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 154,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 154,
	0, 92, 0, 0, 0, 0, 0, 0, 116, 0,
	170, 0, 130, 104, 133, 0, 0, 176, 142, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 203, 0, 0, 0, 161, 0, 108, 0,
	182, 120, 0, 131, 0, 0, 0, 0, 0, 0,
	110, 0, 168, 155, 194, 0, 156, 166, 134, 186,
	162, 193, 204, 205, 184, 202, 171, 100, 149, 90,
	160, 167, 0, 109, 0, 216, 217, 218, 219, 220,
	221, 222, 0, 0, 0, 0, 93, 183, 192, 106,
	172, 96, 190, 179, 181, 140, 126, 127, 174, 94,
	95, 0, 165, 115, 159, 119, 114, 152, 180, 143,
	187, 188, 111, 213, 113, 112, 178, 101, 200, 201,
	98, 102, 199, 148, 153, 151, 198, 185, 191, 141,
	138, 0, 97, 189, 139, 137, 129, 0, 117, 121,
	157, 136, 158, 122, 145, 144, 146, 0, 150, 123,
	0, 0, 0, 0, 177, 196, 214, 215, 0, 0,
	0, 206, 207, 208, 209, 0, 0, 0, 147, 103,
	124, 173, 128, 135, 164, 212, 0, 169, 107, 195,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 125, 0, 91,
	99, 132, 210, 211, 0, 163, 118, 197, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	170, 0, 0, 104,
}

var yyPact = [...]int{
	2002, -1000, -206, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1287, 1320, -1000, -1000, -1000, -1000, -1000, -1000, 1121,
	280, 322, 387, 297, 13641, 383, 2015, 14201, -1000, 102,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1057, -1000, -1000,
	-1000, -1000, -1000, 1277, 1283, 1113, 1256, 1169, -1000, 7435,
	324, 11955, 13361, 6281, -1000, 933, -138, 355, 13921, 316,
	316, 13921, 13921, 316, -1000, -69, 363, 14201, -1000, 14201,
	312, 915, 312, 312, 312, 14201, -1000, 437, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14201, 897, 1213, 285, 4125, 4125, 4125,
	4125, 198, 4125, -19, 1137, -1000, -1000, -1000, -1000, 4125,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	865, 1202, 8009, 8009, 1287, -1000, 1057, -1000, -1000, -1000,
	1196, -1000, -1000, 633, 1299, -1000, 9141, 436, -1000, 8009,
	50, 815, -1000, -1000, 815, -1000, -1000, 401, -1000, -1000,
	8575, 8575, 8575, 8575, 8575, 8575, 8575, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 815, -1000, 7722, 815, 815, 815, 815, 815, 815,
	815, 815, 8009, 815, 815, 815, 815, 815, 815, 815,
	815, 815, 1740, 815, 815, 815, 815, 13075, 1016, 1082,
	-1000, -1000, -1000, 1248, 9995, 10835, 14201, 975, -1000, 1058,
	5973, -24, -1000, -1000, -1000, 556, 10555, -1000, -1000, -1000,
	1200, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 930, -1000, 2447, 366, -1000, -1000, 14201, 1059, 894,
	580, 886, 1136, 162, 14201, -1000, 12795, 4125, 352, 14201,
	1236, 1135, 14201, 881, 877, -1000, 5665, -1000, 4125, 4125,
	4125, 4125, 4125, 4125, 4125, 4125, -1000, -1000, -1000, -1000,
	-1000, -1000, 4125, 4125, -1000, -7, -1000, 14201, -1000, -1000,
	-1000, -1000, 1315, 471, 789, 435, 1061, -1000, 762, 1277,
	865, 1169, 10275, 1112, -1000, -1000, 14201, -1000, 8009, 8009,
	659, -1000, 12515, -1000, -1000, 4433, 477, 8575, 656, 483,
	8575, 8575, 8575, 8575, 8575, 8575, 8575, 8575, 8575, 8575,
	8575, 8575, 8575, 8575, 8575, 774, 1740, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 870, -1000, 1057, 831, 831,
	20, 20, 20, 20, 20, 20, 8858, 6861, 865, 927,
	570, 7722, 7435, 7435, 8009, 8009, 14481, 14481, 7435, 1257,
	531, 570, 14481, -1000, 865, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 61, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 7435, 7435, 7435, 7435, 209, 14201, -1000, 14481,
	11955, 11955, 11955, 11955, 11955, -1000, 1159, 1158, -1000, 1151,
	1149, 1163, 14201, -1000, 923, 9995, 494, 815, -1000, 12235,
	-1000, -1000, 209, 1006, 11955, 14201, -1000, -1000, 5357, 1058,
	-24, 1051, -1000, -28, -38, 6574, 449, -1000, -1000, -1000,
	-1000, 3509, 635, 153, -128, 22, -1000, -1000, -1000, -1000,
	1090, -1000, 1090, 231, 1090, 1090, 1090, -1000, 1090, 1090,
	52, 52, 52, 52, 52, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1120, 1119, -1000, 1090, 1090, 1090, -1000, 1090,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1102, 253, 1102, 1091, 1091, -1000, -1000, 13921, 1242, -103,
	848, 4125, 1234, 4125, 14201, 1305, -1000, -1000, -1000, 1703,
	14201, -1000, 14201, -1000, -1000, 14201, 4125, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 548, -1000, -1000, -1000, -1000, 1178, 8009, 8009,
	5049, 8009, -1000, -1000, -1000, 1202, -1000, 1257, 1282, -1000,
	1187, 1186, 7435, -1000, -1000, 477, 525, -1000, -1000, 639,
	-1000, -1000, -1000, -1000, 430, 815, -1000, 1499, -1000, -1000,
	-1000, -1000, 656, 8575, 8575, 8575, 1400, 1499, 1802, 215,
	1731, 20, 18, 18, 8, 8, 8, 8, 8, 268,
	268, -1000, -1000, -1000, -1000, 865, -1000, -1000, -1000, 865,
	7435, 1053, -1000, -1000, 8009, -1000, 865, 914, 914, 596,
	540, 1055, -1000, 423, 1050, 914, 7435, 561, -1000, 8009,
	865, -1000, -1000, 914, 865, 914, 914, 1021, 815, -1000,
	1048, -1000, 550, 1082, 1118, 1134, 959, -1000, -1000, -1000,
	-1000, 1157, -1000, 1148, -1000, -1000, -1000, -1000, -1000, 364,
	361, 359, 13921, -1000, 1296, 11955, 1026, -1000, -1000, 1051,
	-24, -31, -1000, -1000, -1000, -1000, 570, -1000, -1000, 843,
	1049, 3192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1114, 631, 13921, 262, 239, 414, 353, 838, -1000, -1000,
	-1000, 673, -1000, 13921, 1314, -1000, -1000, 243, -1000, 240,
	579, 782, 14201, 168, 1103, 1615, -1000, -209, -1000, 2,
	-1000, -1000, 746, 52, 52, 1090, 52, 52, 52, -1000,
	-1000, 449, 1194, 449, 449, 449, 449, 781, 781, -109,
	-109, -1000, -1000, -1000, 737, 1102, -1000, -1000, -1000, 732,
	-1000, 1101, 1057, -1000, 4741, -1000, -1000, -1000, -1000, -1000,
	1239, 1129, -1000, -1000, -1000, -1000, 814, 1942, 385, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	173, 392, -1000, 4125, -1000, 557, 14201, 14201, 1175, 570,
	570, 415, -1000, -1000, 14201, -1000, -1000, -1000, -1000, 987,
	-1000, -1000, -1000, 3817, 7435, -1000, 1400, 1499, 362, -1000,
	8575, 8575, -1000, -1000, 914, 7435, 570, -1000, -1000, -1000,
	1854, 774, 1854, 8575, 8575, 5049, 8575, 8575, -82, 1014,
	526, -1000, 8009, 527, -1000, -1000, -1000, -1000, -1000, 1126,
	14481, 815, -1000, 9708, 13921, 1287, 14481, 8009, 8009, -1000,
	-1000, 8009, 1098, -1000, 8009, -1000, -1000, -1000, 815, 815,
	815, 893, -1000, 1287, 1026, -1000, -1000, -1000, -40, -46,
	-1000, -1000, 3509, -1000, 3509, 11675, -1000, 1307, 1271, 270,
	304, -1000, 830, 819, -1000, 813, -1000, 41, -1000, -172,
	81, -27, -1000, -1000, 815, -1000, 1097, 1238, -1000, 1215,
	724, -1000, 1382, -190, -1000, -1000, -1000, -1000, -1000, -1000,
	815, 1095, 1094, -1000, 1092, -1000, -1000, -1000, 977, 449,
	449, 52, 449, 449, 449, -1000, 497, -1000, -1000, -1000,
	-1000, 909, -1000, 907, -1000, 73, 71, -1000, 1038, -1000,
	903, 14201, 13921, -1000, 1036, -1000, 536, 1267, 179, 14201,
	-1000, 223, -1000, 13921, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13921, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14201, -1000, -1000, -1000, -1000, -1000,
	13921, 292, -1000, -1000, 769, 8009, -1000, -1000, -1000, 4741,
	-1000, 1296, 11955, -1000, -1000, 865, -1000, 8575, 1499, 1499,
	-1000, -1000, 865, 1090, 1090, -1000, 1090, 1091, -1000, -1000,
	1090, 90, 1090, 89, 865, 865, 159, 723, -1000, 100,
	199, 815, -76, -1000, 570, 8009, -1000, 1217, 980, 1003,
	-1000, -1000, 7148, 865, 901, 412, 893, 1277, -1000, 570,
	570, 570, 11115, 570, 11115, 11115, 11115, 9421, 13921, 1277,
	-1000, -1000, -1000, -1000, 3192, -1000, 876, -1000, 1090, 1090,
	374, 374, -181, 237, 225, -1000, -1000, -1000, -1000, -138,
	-1000, -1000, 579, -1000, 8009, 11115, -126, -1000, 1027, 971,
	955, -1000, 232, 865, -1000, 691, -1000, 661, 957, -1000,
	-1000, -1000, 449, -1000, -1000, -1000, -1000, -1000, 52, 755,
	52, -2, -5, 715, -1000, 714, 1023, 1125, 4741, 3509,
	329, 1275, -1000, -1000, 1260, 13921, -1000, -1000, -1000, 1089,
	-1000, -1000, -1000, -1000, 1219, 13921, -1000, -1000, 570, 1293,
	1015, -1000, 1499, -1000, -1000, 218, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 8575, 8575, -1000, 8575, 8575,
	8575, 865, 751, 570, 221, -1000, 815, -1000, -1000, 1010,
	13921, 13921, -1000, -1000, 868, -1000, -1000, 864, 864, 864,
	494, -1000, -1000, 1070, 11675, 1231, -1000, 625, -1000, -1000,
	598, 126, 608, -1000, 13921, -138, -1000, 815, 555, 862,
	1088, 713, -1000, 942, 60, -109, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 449, -1000, 449, -1000, -1000, 931, 924,
	11675, 13921, 14201, -1000, -1000, 13921, -1000, -1000, -1000, -1000,
	-1000, 109, 1087, 11115, 815, 287, 1290, 1281, -1000, -1000,
	290, 290, 290, 290, 66, -1000, -1000, 1313, -1000, 815,
	-1000, 1057, 410, -1000, 13921, -1000, -1000, -1000, -1000, -1000,
	1086, 1084, 127, -1000, 808, 535, 660, 528, 520, 496,
	495, 490, 487, 486, -1000, -1000, -1000, 1312, -1000, -1000,
	-1000, 1310, 1081, -1000, 1080, 8009, 129, -1000, -1000, 910,
	869, -1000, -1000, -1000, -1000, -1000, -1000, 858, 1078, 1068,
	944, -1000, 103, 11675, 854, 161, 220, -1000, 8009, 8009,
	-1000, -1000, -1000, -1000, 865, 160, -116, 14481, 1003, 865,
	13921, -1000, -1000, 13921, -1000, -113, 1084, 13921, -1000, 709,
	-1000, -1000, 626, 708, 626, 626, 626, 626, 626, 374,
	374, 13921, 11675, 555, -1000, -78, 384, -1000, -1000, -184,
	11675, 11675, -102, 13921, 8009, 206, 852, 1059, 828, -1000,
	13921, 1064, 570, 999, -1000, 1174, -100, -119, 998, -1000,
	-1000, 815, 826, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 579, 579, 824, 818, -1000,
	-1000, -1000, 146, 698, 703, 701, 699, 28, -1000, 1276,
	1296, 1063, 812, 804, -1000, -200, -1000, 570, -1000, -1000,
	-1000, -1000, -1000, -103, -1000, 161, 1183, 11675, -1000, 1167,
	-1000, 13921, -1000, 1084, -1000, -1000, 282, 1070, 682, -1000,
	651, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11395, 1070,
	11115, 1296, 1070, 8009, -1000, -1000, 156, 802, -104, 865,
	-1000, 14201, 1086, -1000, -1000, -1000, 408, 1086, 800, 1070,
	-1000, 570, 141, -1000, -117, -1000, 1024, -1000, 4741, -1000,
	-1000, -1000, 815, -121, 13921, -1000, 8292, -1000, 798, 290,
	865, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1543, 17, 848, 1542, 1541, 1537, 15, 13, 11,
	1535, 1532, 1530, 1529, 1528, 1527, 1526, 1523, 1522, 1521,
	1520, 1519, 1518, 1516, 472, 1515, 1513, 1512, 89, 1511,
	91, 1510, 1509, 55, 127, 58, 54, 92, 1507, 49,
	102, 88, 1506, 71, 1504, 1503, 104, 1489, 82, 1488,
	1487, 185, 1486, 1485, 5, 14, 1482, 33, 1476, 1475,
	100, 40, 1474, 1473, 1472, 1471, 1469, 1468, 70, 4,
	23, 24, 39, 1467, 67, 31, 1466, 61, 1464, 1462,
	1460, 1459, 47, 1458, 75, 27, 30, 74, 1457, 7,
	1456, 84, 53, 42, 16, 103, 77, 1454, 50, 85,
	60, 1452, 1446, 748, 1445, 1443, 1442, 1438, 1428, 1427,
	751, 620, 1426, 1425, 1424, 66, 0, 307, 12, 90,
	1419, 68, 1415, 1854, 93, 79, 41, 1414, 51, 285,
	52, 1413, 1412, 57, 87, 1408, 101, 94, 1404, 1399,
	1398, 1394, 1393, 1070, 46, 99, 37, 1392, 1391, 1390,
	21, 83, 43, 59, 81, 1389, 1388, 1386, 44, 1385,
	36, 25, 2, 56, 1384, 1383, 1378, 1377, 45, 32,
	1376, 26, 22, 1, 6, 8, 1373, 1370, 1369, 3,
	1367, 28, 1366, 9, 1365, 10, 1360, 1359, 1358, 1356,
	1354, 1352, 1351, 1349, 1348, 1344, 29, 19, 48, 34,
	20, 1343, 1340, 1339, 1337, 1333, 1477, 784, 1332, 1328,
	1327, 1326, 105,
}

var yyR1 = [...]int{
	0, 204, 205, 205, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 208,
	208, 46, 46, 91, 91, 10, 10, 10, 10, 96,
	96, 100, 100, 100, 101, 101, 101, 101, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	201, 201, 202, 202, 202, 203, 203, 203, 187, 187,
	187, 188, 188, 188, 188, 188, 188, 190, 190, 191,
	191, 121, 121, 185, 185, 184, 183, 183, 182, 182,
	181, 192, 192, 16, 165, 166, 166, 166, 166, 166,
	154, 135, 135, 135, 135, 135, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 198, 198, 198,
	199, 199, 199, 199, 199, 199, 199, 199, 194, 194,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 144, 144, 144, 144, 144, 144,
	193, 193, 189, 189, 189, 189, 189, 139, 139, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 140, 140, 140,
	140, 140, 140, 140, 140, 136, 136, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	142, 142, 142, 142, 142, 142, 142, 142, 153, 153,
	143, 143, 151, 151, 152, 152, 152, 150, 150, 150,
	147, 147, 148, 148, 149, 149, 149, 145, 145, 145,
	146, 146, 146, 156, 174, 174, 174, 176, 176, 177,
	177, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 164, 164, 200, 200, 173, 173, 173, 170,
	170, 170, 170, 170, 170, 170, 170, 163, 163, 172,
	172, 171, 171, 158, 158, 158, 158, 158, 159, 160,
	160, 160, 160, 157, 196, 196, 196, 197, 197, 161,
	161, 162, 162, 167, 167, 167, 168, 168, 168, 169,
	169, 169, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 209, 209, 210, 210, 210,
	210, 210, 210, 210, 180, 178, 178, 179, 179, 13,
	14, 14, 14, 14, 14, 15, 15, 17, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 108, 108, 105, 105, 106, 106, 107, 107, 107,
	109, 109, 109, 132, 132, 132, 19, 19, 21, 21,
	22, 23, 20, 20, 20, 20, 20, 211, 24, 25,
	25, 26, 26, 26, 30, 30, 30, 28, 28, 29,
	29, 35, 35, 34, 34, 36, 36, 36, 36, 120,
	120, 120, 119, 119, 38, 38, 39, 39, 40, 40,
	41, 41, 41, 53, 53, 89, 89, 89, 92, 92,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	127, 127, 126, 126, 126, 125, 125, 47, 47, 47,
	49, 48, 48, 48, 48, 50, 50, 52, 52, 51,
	51, 54, 54, 54, 54, 55, 55, 90, 90, 37,
	37, 37, 37, 37, 37, 37, 104, 104, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 65, 65, 65, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	212, 212, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 130, 130, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 134, 134, 134,
	134, 134, 134, 134, 78, 78, 32, 32, 76, 76,
	77, 79, 79, 75, 75, 75, 60, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 93, 93, 70, 70,
	72, 72, 71, 73, 94, 94, 98, 95, 95, 99,
	99, 99, 99, 97, 97, 97, 122, 122, 122, 102,
	102, 110, 110, 111, 111, 103, 103, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
	114, 114, 117, 117, 118, 118, 123, 123, 124, 124,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	206, 207, 128, 129, 129, 129,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 14, 13, 14, 6, 5, 5, 5, 11, 11,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 2, 2, 2, 0, 2, 0,
	3, 0, 1, 0, 2, 1, 0, 2, 1, 3,
	3, 0, 2, 4, 4, 1, 3, 3, 3, 3,
	2, 3, 1, 1, 1, 1, 2, 2, 3, 2,
	4, 4, 2, 2, 3, 2, 3, 2, 7, 8,
	3, 3, 6, 5, 8, 7, 4, 2, 4, 6,
	2, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	0, 4, 3, 4, 3, 3, 3, 3, 3, 3,
	3, 2, 4, 6, 2, 3, 2, 3, 1, 3,
	0, 2, 0, 3, 3, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 1, 1, 3, 3,
	2, 1, 2, 1, 1, 1, 1, 4, 4, 4,
	4, 4, 1, 5, 2, 2, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 3, 3,
	0, 1, 0, 1, 0, 2, 1, 0, 3, 3,
	0, 1, 2, 6, 0, 1, 4, 1, 2, 1,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 2, 5, 2,
	3, 3, 2, 3, 2, 3, 4, 1, 1, 1,
	3, 3, 2, 2, 5, 5, 8, 8, 13, 1,
	1, 2, 2, 10, 0, 1, 1, 0, 3, 0,
	1, 1, 3, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 11, 13, 7, 7, 7, 12, 7,
	7, 7, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	4, 4, 4, 4, 4, 4, 3, 3, 3, 3,
	4, 3, 6, 4, 2, 4, 2, 2, 2, 2,
	3, 1, 1, 0, 1, 0, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 0, 2, 0,
	2, 1, 2, 2, 0, 1, 1, 0, 1, 0,
	1, 0, 1, 1, 3, 1, 2, 3, 5, 0,
	1, 2, 1, 1, 0, 2, 1, 3, 1, 1,
	1, 3, 3, 3, 7, 1, 1, 3, 1, 3,
	4, 4, 4, 3, 2, 4, 0, 1, 0, 2,
	0, 1, 0, 1, 2, 1, 1, 1, 2, 2,
	1, 2, 3, 2, 3, 2, 2, 2, 1, 1,
	3, 0, 5, 5, 5, 0, 2, 0, 4, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 6, 8, 8, 6, 8, 8, 9, 7, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -204, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	112, 113, 115, 114, 143, 116, 136, 48, 175, 176,
	178, 179, 25, 137, 138, 141, 142, -206, 8, 279,
	52, -205, 313, -82, 15, -26, 5, -24, -211, -24,
	-24, -24, -24, -24, -165, 52, -121, -192, 151, 271,
	118, 133, 150, 119, 134, 70, -103, 121, 123, 119,
	119, 120, 121, 271, 118, 119, -51, -123, 55, -116,
	158, 288, 20, 175, 188, 189, 180, 221, 209, 289,
	156, 206, 210, 258, 312, 64, 178, 267, 127, 162,
	139, 201, 204, 203, 195, 192, 27, 227, 295, 194,
	130, 228, 232, 238, 259, 286, 185, 186, 261, 225,
	31, 132, 290, 33, 147, 262, 230, 224, 219, 223,
	184, 218, 37, 198, 234, 233, 235, 257, 212, 157,
	237, 214, 196, 213, 18, 142, 145, 229, 231, 193,
	159, 125, 149, 294, 263, 191, 146, 160, 141, 266,
	309, 155, 179, 260, 187, 269, 36, 243, 205, 182,
	197, 183, 129, 176, 153, 216, 148, 199, 200, 222,
	181, 217, 177, 150, 143, 268, 244, 296, 215, 211,
	207, 208, 154, 121, 151, 152, 250, 251, 252, 253,
	291, 292, 264, 202, 245, 246, 164, 165, 166, 167,
	168, 169, 170, 119, 106, 210, 112, 248, 120, 31,
	149, -132, 119, -105, 152, 250, 251, 252, 253, 55,
	260, 259, 254, -123, 177, -128, -128, -128, -128, -128,
	-2, -86, 17, 16, -5, -3, -206, 6, 20, 21,
	-30, 38, 39, -25, -36, 97, -37, -123, -56, 72,
	-61, 28, 55, -116, 23, -60, -57, -75, -73, -74,
	106, 107, 95, 96, 103, 73, 108, -65, -63, -64,
	-66, 57, 56, 65, 58, 59, 60, 61, 66, 67,
	68, -117, -71, -206, 42, 43, 280, 281, 282, 283,
	287, 284, 75, 32, 270, 278, 277, 276, 274, 275,
	272, 273, 311, 124, 271, 101, 279, -103, -39, -40,
	-41, -42, -53, -74, -206, -51, 11, -46, -51, -95,
	-131, 177, -99, 260, 259, -118, -97, -117, -115, 258,
	210, 257, 55, -116, 117, 172, 298, 71, 22, 24,
	241, 247, 171, 74, 106, 16, 75, 307, 308, 105,
	280, 112, 46, 272, 273, 270, 282, 283, 271, 248,
	28, 10, 25, 137, 21, 99, 114, 173, 78, 79,
	140, 23, 138, 68, 19, 49, 131, 11, 297, 13,
	14, 299, 124, 123, 90, 310, 120, 44, 8, 108,
	26, 87, 40, 135, 42, 88, 17, 274, 275, 30,
	287, 144, 101, 47, 34, 72, 66, 50, 265, 70,
	15, 45, 133, 89, 115, 279, 43, 174, 118, 6,
	285, 29, 136, 41, 119, 249, 77, 122, 67, 5,
	134, 9, 48, 51, 276, 277, 278, 32, 76, 12,
	69, -166, -154, 55, -196, 307, 308, 121, -117, -111,
	124, -111, -117, -117, -111, 279, 119, -51, -51, -110,
	124, 55, -110, -110, -110, -51, 109, -51, 55, 29,
	271, 55, 149, 119, 150, 121, -129, -206, -118, -129,
	-129, -129, 153, 154, -129, -106, 255, 50, -129, -207,
	54, -87, 19, 30, -37, -123, -83, -84, -37, -82,
	-2, -24, 34, -28, 21, 63, 11, -120, 71, 70,
	87, -119, 22, -117, 57, 109, -37, -58, 90, 72,
	88, 89, 74, 92, 91, 102, 95, 96, 97, 98,
	99, 100, 101, 93, 94, 105, 311, 80, 81, 82,
	83, 84, 85, 86, -104, -206, -74, -206, 110, 111,
	-61, -61, -61, -61, -61, -61, -61, -206, -2, -69,
	-37, -206, -206, -206, -206, -206, -206, -206, -206, -206,
	-78, -37, -206, -212, -206, -212, -212, -212, -212, -212,
	-212, -212, -134, 106, 210, 139, 201, -137, -136, 216,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	209, 289, -206, -206, -206, -206, -52, 26, -51, 29,
	53, -47, -49, -48, -50, 40, 44, 46, 41, 42,
	43, 47, -127, 22, -39, -206, -126, 145, -125, 22,
	-123, 57, -51, -46, -208, 53, 11, 51, 53, -95,
	177, -96, -100, 261, 263, 80, -122, -117, 57, 28,
	29, 54, 53, -155, -135, -139, -136, -141, -140, -142,
	-137, -138, 206, 210, 207, 212, 213, 214, 106, 211,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 215, 227, 29, 139, 199, 200, 201, 204, 203,
	205, 202, 228, 229, 230, 231, 232, 233, 234, 235,
	191, 192, 194, 195, 196, 198, 197, 120, -51, -185,
	51, 55, 72, 55, 50, -201, 171, 172, -51, -51,
	265, -129, 122, -51, 23, 50, -51, 55, 55, -124,
	-123, -115, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -108, 249, 256, -51, 9, 90, 53, 18,
	109, 53, -85, 24, 25, -86, -207, -30, -62, -117,
	58, 61, -29, 41, -51, -37, -37, -67, 66, 72,
	67, 68, -119, 97, -124, -118, -115, -61, -68, -71,
	-74, 62, 90, 88, 89, 74, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -130, 55, 57, -134, 55, -60, -60, -117, -35,
	21, -34, -36, -207, 53, -207, -2, -34, -34, -37,
	-37, -75, -117, -123, -75, -34, -28, -76, -77, 76,
	-75, -207, 208, -34, -35, -34, -34, -91, 145, -51,
	-94, -98, -75, -40, -41, -41, -40, -41, 40, 40,
	40, 45, 40, 45, 40, -48, -123, -207, -54, 48,
	123, 49, -206, -125, -91, 51, -39, -51, -99, -96,
	53, 262, 264, 265, 50, 69, -37, -146, 106, 105,
	-167, -168, -169, -118, 57, 58, -154, -156, -158, -157,
	-170, -159, 127, 125, 129, 130, 134, -163, 120, 135,
	66, 72, -198, 127, 50, 241, 247, 125, 135, 134,
	312, 64, 128, 297, 299, 28, -149, 314, 236, -147,
	244, -143, 52, -143, -143, 208, -143, -143, -143, -143,
	-143, -145, 210, -145, -145, -145, -145, 52, 52, -143,
	-143, -143, -143, -151, 52, 193, -151, -151, -152, 52,
	-152, -117, 22, -183, 291, -184, 55, -129, 23, -129,
	-51, -202, 8, 9, 10, -112, 117, 114, 115, -180,
	113, 241, 210, 64, 28, 15, 280, 145, 296, 55,
	146, -51, -51, -51, -129, -107, 11, 90, 36, -37,
	-37, -124, -84, -87, -102, 19, 11, 32, 32, -34,
	66, 67, 68, 109, -206, -68, -61, -61, -61, -33,
	140, 71, -207, -207, -34, 53, -37, -207, -207, -207,
	53, 51, 22, 53, 11, 109, 53, 11, -207, -34,
	-79, -77, 78, -37, -207, -207, -207, -207, -207, -59,
	29, 32, -2, -206, -206, -55, 53, 12, 80, -44,
	-43, 50, 51, -45, 50, -43, 40, 40, 120, 120,
	120, -92, -117, -55, -39, -55, -100, -101, 266, 263,
	269, 55, 53, -169, 80, 52, -197, 50, 72, -161,
	-117, 135, -163, -163, 55, -163, 55, 55, 66, 19,
	-117, 9, 135, 135, -197, 57, -123, -194, 298, 16,
	52, -199, 52, 57, 58, 59, 66, -144, 65, -57,
	237, 270, 273, 272, 238, 315, -148, 245, 58, -145,
	-145, -143, -145, -145, -145, -146, 29, -146, -146, -146,
	-146, -153, 57, -153, -150, 291, 292, -150, 58, -151,
	58, 50, 51, -2, -182, -181, -118, -187, 22, 50,
	-128, -121, -210, 151, 126, 131, 130, 55, 125, 129,
	145, -186, 151, 126, 127, 131, 130, 55, 120, 135,
	125, 129, 145, 134, -113, -114, 122, 22, 120, 135,
	145, 117, -129, -109, 88, 12, -123, -123, 37, 109,
	-51, -38, 11, 97, -118, -35, -33, 71, -61, -61,
	-207, -36, -133, 106, 206, 139, 201, 195, 225, 226,
	212, 243, 199, 244, -130, -133, -61, -61, -118, -61,
	-61, 288, -82, 79, -37, 77, -93, 50, -94, -70,
	-72, -71, -206, -2, -88, -117, -92, -82, -98, -37,
	-37, -37, 52, -37, -206, -206, -206, -207, 53, -82,
	-55, 263, 267, 268, -168, -169, -172, -171, -117, 135,
	10, 9, 19, 131, 125, 55, 55, 55, -196, 134,
	309, -198, 312, -144, -206, 52, 22, 28, 58, -199,
	52, -189, 311, -206, -143, 52, -143, 52, 52, 54,
	-146, -146, -145, -146, -146, -146, 55, 106, 54, 53,
	54, 199, 199, 53, 54, 53, -51, -117, 53, 80,
	-188, 19, 159, 160, -51, -209, 120, 135, -128, -117,
	-128, -117, -51, -128, -117, 127, -158, 57, -37, -55,
	-39, -207, -61, -207, -143, -143, -143, -152, -143, 186,
	-143, 186, -207, -207, -207, 53, 19, -207, 53, 19,
	-206, -32, 285, -37, 27, -93, 53, -207, -207, -207,
	53, 109, -207, -86, -89, -117, 135, -89, -89, -89,
	-126, -117, -86, 54, 53, -143, -143, -160, 155, 156,
	29, 157, -160, 309, 135, 135, -196, -197, -37, -89,
	299, 53, 54, -199, 210, 200, 239, 216, -207, 54,
	54, 54, -146, -145, 57, -145, 246, 246, 58, 58,
	52, 51, 50, -181, -169, 122, 20, 6, 8, 9,
	10, 19, -117, 52, 26, -117, -80, 13, -145, 55,
	-61, -61, -61, -61, -61, -207, 57, 135, -72, 32,
	-2, -206, -117, -117, 53, 54, -207, -207, -207, -54,
	-174, -176, 291, -175, 51, 132, 64, 164, 165, 166,
	167, 168, 169, 170, -171, -85, -197, 50, 66, 158,
	-197, 50, -161, -117, -196, -206, -207, 54, 52, 58,
	54, 208, -150, -146, -146, 54, 54, -172, -117, -51,
	-162, -117, 173, 52, -89, -206, 125, -81, 14, 16,
	-207, -207, -207, -207, -31, 90, 291, 9, -70, -2,
	109, -117, -173, 50, -175, 291, 52, 293, 55, -164,
	80, 57, 80, 80, 80, 80, 80, 80, 80, 9,
	10, 52, 52, -37, -193, 157, -195, 54, 54, 54,
	52, 52, -190, 53, 51, 174, -172, 54, -178, -179,
	145, 135, -37, -69, -207, 289, 47, 294, -94, -207,
	-117, -117, -177, -175, -117, 58, -200, 50, 69, 58,
	-200, -200, -200, -200, -200, -160, -160, -162, -172, -207,
	286, 54, 176, 301, 302, 144, 303, 157, 304, 305,
	-90, 310, -172, -172, -191, 291, -117, -37, -203, -7,
	-9, -8, 54, -185, -207, 53, -117, 52, 37, 290,
	295, -206, 54, 53, -197, -197, 54, 54, 291, 58,
	16, 58, 58, 58, 58, 302, 144, 304, 16, -55,
	52, 54, 54, 312, -183, -179, 32, -172, 37, -117,
	-175, 128, -174, 58, 58, 306, -123, -174, -89, -55,
	-174, -37, 147, 54, 291, -207, -51, -173, 109, -173,
	54, -174, 148, 294, 52, -118, -206, 295, -162, -61,
	144, 54, -207, -207,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 671, 0, 427, 427, 427, 427, 427, 427, 0,
	-2, 725, 0, 0, 0, 0, -2, 417, 418, 0,
	420, 421, 992, 992, 992, 992, 992, 0, 33, 34,
	990, 1, 3, 679, 0, 0, 431, 434, 429, 0,
	725, 0, 0, 0, 60, 0, 314, 0, 0, 723,
	723, 0, 0, 723, 92, 0, 0, 0, 726, 0,
	721, 0, 721, 721, 721, 0, 376, 499, 746, 747,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 0, 0, 0, 0, 993, 993, 993,
	993, 0, 993, 405, 394, 396, 397, 398, 399, 993,
	414, 415, 404, 416, 419, 422, 423, 424, 425, 426,
	27, 683, 0, 0, 671, 29, 0, 427, 432, 433,
	437, 435, 436, 428, 0, 445, 449, 0, 509, 0,
	514, 516, -2, -2, 0, 551, 552, 553, 554, 555,
	0, 0, 0, 0, 0, 0, 0, 579, 580, 581,
	582, 656, 657, 658, 659, 660, 661, 662, 663, 518,
	519, 653, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 0, 610, 610, 610, 610, 610, 610,
	610, 610, 0, 0, 0, 0, 0, 0, 0, 456,
	458, 459, 460, 480, 0, 482, 0, 0, 41, 45,
	0, 959, 707, -2, -2, 0, 0, 744, 745, -2,
	869, -2, 742, 743, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 793, 794, 795,
	796, 797, 798, 799, 800, 801, 802, 803, 804, 805,
	806, 807, 808, 809, 810, 811, 812, 813, 814, 815,
	816, 817, 818, 819, 820, 821, 822, 823, 824, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 0, 105, 0, 0, 315, 316, 0, 93, 0,
	0, 0, 0, 0, 0, 102, 0, 993, 0, 0,
	0, 0, 0, 0, 0, 375, 0, 377, 993, 993,
	993, 993, 993, 993, 993, 993, 386, 994, 995, 387,
	388, 389, 993, 993, 391, 0, 406, 0, 400, 28,
	991, 22, 0, 0, 680, 0, 672, 673, 676, 679,
	27, 434, 0, 439, 438, 430, 0, 446, 0, 0,
	0, 450, 0, 452, 453, 0, 512, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 536, 537, 538,
	539, 540, 541, 542, 515, 0, 529, 0, 0, 0,
	571, 572, 573, 574, 575, 576, 0, 441, 27, 0,
	549, 0, 0, 0, 0, 0, 0, 0, 0, 437,
	0, 645, 0, 601, 0, 602, 603, 604, 605, 606,
	607, 608, 609, 637, 0, 639, 640, 641, 642, 643,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	205, 206, 0, 441, 0, 0, 43, 0, 498, 0,
	0, 0, 0, 0, 0, 487, 0, 0, 490, 0,
	0, 0, 0, 481, 0, 0, 501, 923, 483, 0,
	485, 486, -2, 0, 0, 0, 39, 40, 0, 46,
	959, 48, 49, 0, 0, 0, 260, 716, 717, 718,
	714, 323, 0, 110, 254, 250, 112, 113, 114, 115,
	240, 178, 240, 240, 240, 240, 240, 212, 240, 240,
	257, 257, 257, 257, 257, 221, 222, 223, 224, 225,
	226, 227, 0, 0, 197, 240, 240, 240, 201, 240,
	203, 204, 230, 231, 232, 233, 234, 235, 236, 237,
	242, 242, 242, 244, 244, 195, 196, 0, 0, 96,
	0, 993, 0, 993, 0, 0, 70, 71, 103, 0,
	0, 342, 0, 370, 722, 0, 993, 373, 374, 500,
	748, 749, 378, 379, 380, 381, 382, 383, 384, 385,
	390, 393, 407, 401, 402, 395, 684, 0, 0, 0,
	0, 0, 675, 677, 678, 683, 30, 437, 0, 664,
	0, 0, 0, 440, 25, 510, 511, 513, 530, 0,
	532, 534, 451, 447, 0, 654, -2, 520, 521, 545,
	546, 547, 0, 0, 0, 0, 543, 525, 0, 556,
	557, 558, 559, 560, 561, 562, 563, 564, 565, 566,
	567, 570, 621, 622, 578, 0, 568, 569, 577, 0,
	0, 442, 443, 548, 0, 702, 27, 0, 0, 0,
	0, 0, 653, 0, 0, 0, 0, 651, 648, 0,
	0, 611, 638, 0, 0, 0, 0, 0, 0, 497,
	505, 704, 0, 457, 476, 478, 0, 473, 488, 489,
	491, 0, 493, 0, 495, 496, 461, 462, 463, 0,
	0, 0, 0, 484, 505, 0, 505, 42, 708, 47,
	0, 0, 52, 53, 709, 710, 711, 712, 261, 0,
	104, 324, 326, 329, 330, 331, 106, 107, 108, 109,
	0, 317, 319, 0, 0, 0, 0, 0, 297, 298,
	117, 0, 119, 0, 0, 122, 123, 0, 125, 127,
	317, 0, 0, 0, 0, 0, 116, 0, 256, 252,
	251, 177, 0, 257, 257, 240, 257, 257, 257, 214,
	215, 260, 0, 260, 260, 260, 260, 0, 0, 247,
	247, 200, 202, 189, 0, 242, 191, 192, 193, 0,
	194, 0, 0, 65, 0, 94, 95, 66, 724, 67,
	78, 0, 72, 73, 74, 992, 91, 0, 737, 343,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	0, 0, 369, 993, 372, 410, 0, 0, 0, 681,
	682, 0, 674, 23, 0, 719, 720, 665, 666, 454,
	531, 533, 535, 0, 441, 522, 543, 526, 0, 523,
	0, 0, 517, 583, 0, 0, 550, -2, 586, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 671,
	0, 649, 0, 0, 600, 612, 613, 614, 615, 696,
	0, 0, -2, 0, 0, 671, 0, 0, 0, 470,
	477, 0, 0, 471, 0, 472, 492, 494, 0, 0,
	0, 0, 468, 671, 505, 38, 50, 51, 0, 0,
	57, 262, 0, 327, 0, 0, 303, 0, 0, 0,
	320, 289, 0, 0, 292, 0, 294, 314, 118, 0,
	0, 0, 124, 126, 0, 130, 131, 0, 148, 0,
	0, 137, 0, 172, 141, 142, 143, 144, 145, 146,
	0, 240, 240, 168, 0, 255, 111, 253, 0, 260,
	260, 257, 260, 260, 260, 216, 0, 217, 218, 219,
	220, 0, 238, 0, 198, 0, 0, 199, 0, 190,
	0, 0, 0, -2, 97, 98, 0, 81, 0, 0,
	332, 0, 992, 0, 357, 358, 359, 360, 361, 362,
	363, 992, 0, 344, 345, 346, 347, 348, 349, 350,
	351, 352, 353, 354, 0, 992, 738, 739, 740, 741,
	0, 0, 371, 392, 0, 0, 408, 409, 685, 0,
	24, 505, 0, 448, 655, 0, 524, 0, 544, 527,
	584, 444, 0, 240, 240, 626, 240, 244, 629, 630,
	240, 632, 240, 635, 0, 0, 0, 0, 654, 0,
	0, 0, 646, 599, 652, 0, 31, 0, 696, 686,
	698, 700, 0, 27, 0, 692, 0, 679, 705, 506,
	706, 474, 0, 479, 0, 0, 0, 482, 0, 679,
	37, 54, 55, 56, 325, 328, 0, 299, 240, 240,
	0, 0, 0, 0, 0, 290, 291, 293, 295, 314,
	136, 120, 317, 121, 0, 0, 0, 149, 0, 0,
	0, 140, 0, 0, 164, 0, 166, 0, 0, 241,
	207, 208, 260, 209, 210, 211, 258, 259, 257, 0,
	257, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 79, 80, 0, 0, 355, 356, 336, 0,
	337, 339, 340, 341, 0, 319, 335, 411, 412, 667,
	455, 585, 528, 588, 623, 257, 627, 628, 631, 633,
	634, 636, 590, 589, 591, 0, 0, 594, 0, 0,
	0, 0, 0, 650, 0, 32, 0, 701, -2, 0,
	0, 0, 44, 35, 0, 465, 466, 0, 0, 0,
	501, 469, 36, 264, 0, 676, 302, 317, 309, 310,
	0, 0, 317, 318, 319, 314, 296, 0, 0, 0,
	133, 0, 138, 0, 0, 247, 175, 176, 147, 165,
	167, 169, 213, 260, 239, 260, 248, 249, 0, 0,
	0, 0, 0, 99, 100, 0, 82, 83, 84, 85,
	86, 0, 0, 0, 0, 320, 669, 0, 624, 625,
	0, 0, 0, 0, 616, 598, 647, 0, 699, 0,
	-2, 0, 694, 693, 0, 475, 502, 503, 504, 464,
	286, 265, 0, 267, 0, 282, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 301, 304, 0, 311, 312,
	305, 0, 0, 320, 0, 0, 170, 132, 150, 0,
	0, 173, 174, 228, 229, 243, 246, 0, 0, 0,
	87, 321, 0, 0, 0, 0, 0, 26, 0, 0,
	592, 593, 595, 596, 0, 0, 0, 0, 689, 27,
	0, 467, 263, 0, 268, 0, 0, 0, 271, 0,
	283, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 135, 139, 507,
	0, 0, 89, 0, 0, 0, 0, 93, 0, 365,
	0, 0, 670, 668, 597, 0, 0, 0, 697, -2,
	695, 287, 0, 269, 274, 272, 275, 284, 285, 276,
	277, 278, 279, 280, 281, 317, 317, 0, 0, 129,
	171, 134, 0, 0, 0, 0, 0, 0, 161, 0,
	505, 0, 0, 0, 68, 0, 322, 88, 69, 75,
	76, 77, 333, 96, 364, 0, 0, 0, 617, 0,
	620, 0, 266, 0, 306, 307, 0, 264, 0, 152,
	0, 154, 155, 156, 157, 158, 159, 160, 0, 264,
	0, 505, 264, 0, 338, 366, 0, 0, 618, 0,
	270, 0, 286, 151, 153, 162, 0, 286, 0, 264,
	62, 90, 0, 334, 0, 288, 0, 313, 0, 61,
	508, 63, 0, 0, 0, 163, 0, 619, 0, 0,
	0, 308, 367, 368,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	52, 54, 97, 95, 53, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 313,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 314, 3, 315, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:347
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:352
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:353
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:357
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:380
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:388
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:392
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:398
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:405
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:411
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:415
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:421
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:425
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:432
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:444
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:456
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:460
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:466
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:472
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:476
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:480
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:485
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:486
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:490
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:494
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:499
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:503
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:509
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:513
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:517
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:521
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:527
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:531
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:537
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:541
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:545
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:551
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:555
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:559
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:563
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:569
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:573
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:579
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:584
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:      yyDollar[5].colIdent,
					Type:      NewColIdent(""),
					Unique:    bool(yyDollar[2].boolVal),
					Clustered: bool(yyDollar[3].boolVal),
					Included:  yyDollar[11].columns,
					Where:     NewWhere(WhereStr, yyDollar[12].expr),
					Options:   yyDollar[13].indexOptions,
					Partition: yyDollar[14].indexPartition,
				},
				IndexCols: yyDollar[9].indexColumns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:604
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[9].tableName,
				NewName: yyDollar[9].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[5].colIdent,
					Type:    yyDollar[7].colIdent,
					Unique:  bool(yyDollar[2].boolVal),
					Options: yyDollar[13].indexOptions,
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-14 : yypt+1]
//line sqlparser/parser.y:620
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[5].colIdent,
					Type:   yyDollar[9].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[13].expr),
				},
				IndexCols: yyDollar[11].indexColumns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:635
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:643
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:651
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:655
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:659
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:670
		{
			yyVAL.statement = &DDL{Action: CreateTriggerStr, Trigger: yyDollar[3].colIdent}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:680
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:686
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:690
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:694
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:700
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:707
		{
			yyVAL.bytes = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:711
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:715
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 81:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:720
		{
			yyVAL.bytes = nil
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:724
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:728
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:732
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:736
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:740
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:745
		{
			yyVAL.expr = nil
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:749
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:754
		{
			yyVAL.expr = nil
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:758
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:763
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:767
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:772
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:776
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:782
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:787
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:792
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:798
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:803
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:809
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:814
		{
			yyVAL.bytes = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:818
		{
			yyVAL.bytes = nil
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:824
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:831
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:838
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:843
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:847
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:851
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:855
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:861
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:866
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:877
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:889
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:894
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:899
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{Value: yyDollar[2].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:904
		{
			yyDollar[1].columnType.Default = &DefaultDefinition{ConstraintName: yyDollar[3].colIdent, Value: yyDollar[4].optVal}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:909
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:914
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:919
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:924
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:929
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:934
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:939
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:944
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[5].expr), NotForReplication: bool(yyDollar[3].boolVal)}
			yyDollar[1].columnType.CheckNoInherit = yyDollar[7].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:950
		{
			yyDollar[1].columnType.Check = &CheckDefinition{Where: *NewWhere(WhereStr, yyDollar[7].expr), ConstraintName: yyDollar[3].colIdent, NotForReplication: bool(yyDollar[5].boolVal)}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:955
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:960
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:965
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:971
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 134:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:983
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}, NotForReplication: false}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:989
		{
			yyDollar[1].columnType.Identity.NotForReplication = true
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:996
		{
			yyVAL.optVal = yyDollar[2].optVal
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1000
		{
			yyVAL.optVal = yyDollar[3].optVal
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1004
		{
			yyVAL.optVal = yyDollar[4].optVal
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1010
		{
			yyVAL.optVal = NewStrVal(yyDollar[1].bytes)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1014
		{
			yyVAL.optVal = NewIntVal(yyDollar[1].bytes)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1018
		{
			yyVAL.optVal = NewFloatVal(yyDollar[1].bytes)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1022
		{
			yyVAL.optVal = NewValArg(yyDollar[1].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1026
		{
			yyVAL.optVal = yyDollar[1].optVal
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1030
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1034
		{
			yyVAL.optVal = NewBoolSQLVal(bool(yyDollar[1].boolVal))
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1038
		{
			yyVAL.optVal = NewBitVal(yyDollar[1].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1044
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1048
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1053
		{
			yyVAL.sequence = &Sequence{}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1057
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1062
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1067
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1072
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1077
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1082
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1087
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1092
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1097
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1102
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1107
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1112
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 163:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1117
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1124
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1128
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1132
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1136
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1140
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1144
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1149
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1153
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1158
		{
			yyVAL.bytes = nil
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1168
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1173
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1179
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1183
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1187
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1191
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1195
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1199
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1203
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1207
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1211
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1215
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1221
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1227
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1233
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1239
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1245
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1251
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1257
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1267
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1271
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1275
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1283
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1287
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1291
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1295
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1311
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1315
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1323
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1327
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1331
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1335
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1339
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1343
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1347
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1351
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1355
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1359
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1363
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1367
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1371
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1375
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1379
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1383
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1387
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1391
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1395
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1400
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1406
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1410
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1414
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1418
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1422
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1426
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1430
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1434
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1440
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1445
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1450
		{
			yyVAL.optVal = nil
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1454
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1459
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1463
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 244:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1471
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1475
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1481
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1489
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1493
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1497
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1502
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1506
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1511
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1515
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1520
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1524
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1528
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 257:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1533
		{
			yyVAL.str = ""
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1537
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1541
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1546
		{
			yyVAL.str = ""
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1550
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1554
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1560
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions, Partition: yyDollar[6].indexPartition}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1565
		{
			yyVAL.indexOptions = []*IndexOption{}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1569
		{
			yyVAL.indexOptions = yyDollar[1].indexOptions
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1573
		{
			yyVAL.indexOptions = yyDollar[3].indexOptions
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1579
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1583
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1589
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1593
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[3].indexOption)
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1599
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1603
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1608
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1612
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1616
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1620
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1624
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1628
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1632
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1636
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1640
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: yyDollar[3].optVal}
		}
	case 282:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1646
		{
			yyVAL.str = ""
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1650
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1656
		{
			yyVAL.optVal = NewBoolSQLVal(true)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1660
		{
			yyVAL.optVal = NewBoolSQLVal(false)
		}
	case 286:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1666
		{
			yyVAL.indexPartition = nil
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1670
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String()}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1674
		{
			yyVAL.indexPartition = &IndexPartition{Name: yyDollar[2].colIdent.String(), Column: yyDollar[4].colIdent.String()}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1680
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1684
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1688
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1692
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1696
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1700
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1704
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false, Clustered: yyDollar[3].boolVal}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1708
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true, Clustered: yyDollar[4].boolVal}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1714
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1718
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1724
		{
			yyVAL.indexColumns = []IndexColumn{yyDollar[1].indexColumn}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1728
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1734
		{
			yyVAL.indexColumn = IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal, Direction: yyDollar[3].str}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1739
		{
			yyVAL.indexColumn = IndexColumn{Column: NewColIdent(string(yyDollar[1].bytes)), Length: yyDollar[2].optVal}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1745
		{
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[2].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1750
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 305:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1757
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[5].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 306:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1764
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 307:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1771
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.NotForReplication = bool(yyDollar[8].boolVal)
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 308:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1780
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1792
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1796
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1800
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1804
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 313:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:1810
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:      &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: yyDollar[2].colIdent, Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns:   yyDollar[7].indexColumns,
				Options:   yyDollar[9].indexOptions,
				Partition: yyDollar[10].indexPartition,
			}
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1821
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1825
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1829
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1835
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1839
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1844
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1851
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1855
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1860
		{
			yyVAL.str = ""
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1864
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1868
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1876
		{
			yyVAL.str = yyDollar[1].str
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1880
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1884
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1890
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1894
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1898
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 332:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1904
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 333:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1908
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].indexColumns,
			}
		}
	case 334:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1922
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].indexColumns,
			}
		}
	case 335:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1936
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 336:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1949
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 338:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1953
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1966
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 340:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1976
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 341:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1981
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1986
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1990
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 364:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2022
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2028
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2032
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 367:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2038
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 368:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2042
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 369:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2048
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 370:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2054
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2062
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2067
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2075
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2079
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2085
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2089
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2094
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2100
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2104
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2108
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2113
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2117
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2121
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2125
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2129
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2133
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 387:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2137
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2141
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2145
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2149
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2153
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 392:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2157
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2167
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2171
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2175
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2179
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2183
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2187
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2191
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2201
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2207
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2211
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2217
		{
			yyVAL.str = ""
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2221
		{
			yyVAL.str = "extended "
		}
	case 405:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2227
		{
			yyVAL.str = ""
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2231
		{
			yyVAL.str = "full "
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2237
		{
			yyVAL.str = ""
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2241
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2245
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2251
		{
			yyVAL.showFilter = nil
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2255
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2259
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2265
		{
			yyVAL.str = ""
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2269
		{
			yyVAL.str = SessionStr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2273
		{
			yyVAL.str = GlobalStr
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2279
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2283
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2289
		{
			yyVAL.statement = &Begin{}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2293
		{
			yyVAL.statement = &Begin{}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2299
		{
			yyVAL.statement = &Commit{}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2305
		{
			yyVAL.statement = &Rollback{}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2311
		{
			yyVAL.statement = &OtherRead{}
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2315
		{
			yyVAL.statement = &OtherRead{}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2319
		{
			yyVAL.statement = &OtherRead{}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2323
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2327
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2332
		{
			setAllowComments(yylex, true)
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2336
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2342
		{
			yyVAL.bytes2 = nil
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2346
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2352
		{
			yyVAL.str = UnionStr
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2356
		{
			yyVAL.str = UnionAllStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2360
		{
			yyVAL.str = UnionDistinctStr
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2365
		{
			yyVAL.str = ""
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2369
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2373
		{
			yyVAL.str = SQLCacheStr
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2378
		{
			yyVAL.str = ""
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2382
		{
			yyVAL.str = DistinctStr
		}
	case 439:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2387
		{
			yyVAL.str = ""
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2391
		{
			yyVAL.str = StraightJoinHint
		}
	case 441:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2396
		{
			yyVAL.selectExprs = nil
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2400
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2406
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2410
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2416
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2420
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2433
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2437
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2441
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2448
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 454:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2453
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2457
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2463
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2467
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2477
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2481
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2485
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2491
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 464:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2495
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2501
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2506
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2516
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2520
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2533
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2537
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2541
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2545
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2551
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2553
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 476:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2557
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 477:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2559
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 478:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2563
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2565
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2568
		{
			yyVAL.empty = struct{}{}
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2570
		{
			yyVAL.empty = struct{}{}
		}
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2573
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2577
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2581
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2588
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2594
		{
			yyVAL.str = JoinStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2598
		{
			yyVAL.str = JoinStr
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2602
		{
			yyVAL.str = JoinStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2608
		{
			yyVAL.str = StraightJoinStr
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2614
		{
			yyVAL.str = LeftJoinStr
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2618
		{
			yyVAL.str = LeftJoinStr
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2622
		{
			yyVAL.str = RightJoinStr
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2626
		{
			yyVAL.str = RightJoinStr
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2632
		{
			yyVAL.str = NaturalJoinStr
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2636
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2646
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2650
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2656
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2660
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2665
		{
			yyVAL.indexHints = nil
		}
	case 502:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2669
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2673
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2677
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2682
		{
			yyVAL.expr = nil
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2686
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2691
		{
			yyVAL.columns = nil
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2695
		{
			yyVAL.columns = yyDollar[3].columns
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2701
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2705
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2713
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2717
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2725
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2731
		{
			yyVAL.str = ""
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2735
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2745
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2751
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2755
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2759
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2763
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 524:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2767
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2775
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2779
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 528:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2787
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2793
		{
			yyVAL.str = IsNullStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2797
		{
			yyVAL.str = IsNotNullStr
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2801
		{
			yyVAL.str = IsTrueStr
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.str = IsNotTrueStr
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2809
		{
			yyVAL.str = IsFalseStr
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2813
		{
			yyVAL.str = IsNotFalseStr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2819
		{
			yyVAL.str = EqualStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2823
		{
			yyVAL.str = LessThanStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2827
		{
			yyVAL.str = GreaterThanStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2831
		{
			yyVAL.str = LessEqualStr
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2835
		{
			yyVAL.str = GreaterEqualStr
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2839
		{
			yyVAL.str = NotEqualStr
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2843
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 543:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2848
		{
			yyVAL.expr = nil
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2852
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2858
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2862
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2866
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2872
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2878
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2882
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2888
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2892
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2896
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2900
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2904
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2908
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2912
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2916
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2920
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2924
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2928
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2932
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2936
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2940
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 565:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2944
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 566:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2948
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2952
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2956
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2960
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2964
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2968
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2972
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2976
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2984
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2998
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3002
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3006
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3014
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 583:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3028
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 584:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3032
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 585:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3036
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3046
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3050
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 588:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3054
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 589:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3058
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 590:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3062
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 591:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3066
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 592:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3070
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 593:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3074
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 594:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3078
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 595:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3082
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 596:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:3086
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 597:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:3090
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 598:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3094
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3098
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3102
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3112
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3116
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3120
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3124
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3129
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3134
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3139
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3144
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3148
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3162
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3166
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 614:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3170
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 615:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3174
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 616:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3180
		{
			yyVAL.str = ""
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3184
		{
			yyVAL.str = BooleanModeStr
		}
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3188
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:3192
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3196
		{
			yyVAL.str = QueryExpansionStr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3202
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3206
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3212
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3216
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3220
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3224
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3228
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3232
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3238
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3242
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3246
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3250
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3254
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3258
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3262
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3266
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3272
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3276
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3280
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3284
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3288
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3292
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3296
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3301
		{
			yyVAL.expr = nil
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3305
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 646:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3310
		{
			yyVAL.str = string("")
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3314
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3320
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3324
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3330
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3335
		{
			yyVAL.expr = nil
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3339
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3345
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3349
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 655:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3353
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3359
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3363
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3367
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3371
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3375
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3379
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3383
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3387
		{
			yyVAL.expr = &NullVal{}
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3393
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3402
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3406
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3411
		{
			yyVAL.exprs = nil
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3415
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 669:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3420
		{
			yyVAL.expr = nil
		}
	case 670:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3424
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3429
		{
			yyVAL.orderBy = nil
		}
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3433
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3439
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 674:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3443
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 675:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3449
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3454
		{
			yyVAL.str = AscScr
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3458
		{
			yyVAL.str = AscScr
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3462
		{
			yyVAL.str = DescScr
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.limit = nil
		}
	case 680:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 681:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3475
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3479
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3484
		{
			yyVAL.str = ""
		}
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3488
		{
			yyVAL.str = ForUpdateStr
		}
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.str = ShareModeStr
		}
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3505
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3509
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 688:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3513
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 689:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3518
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 690:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3522
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 691:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3526
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3533
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3537
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3541
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 695:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3545
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3550
		{
			yyVAL.updateExprs = nil
		}
	case 697:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3554
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3560
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3564
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3570
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 701:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3574
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 702:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3580
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3586
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3596
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3600
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 706:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3606
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3612
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3616
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 709:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3622
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 710:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3626
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 711:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3630
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 712:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3634
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3641
		{
			yyVAL.bytes = []byte("charset")
		}
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3648
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3652
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 718:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3656
		{
			yyVAL.expr = &Default{}
		}
	case 721:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3665
		{
			yyVAL.byt = 0
		}
	case 722:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3667
		{
			yyVAL.byt = 1
		}
	case 723:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3670
		{
			yyVAL.empty = struct{}{}
		}
	case 724:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3672
		{
			yyVAL.empty = struct{}{}
		}
	case 725:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3675
		{
			yyVAL.str = ""
		}
	case 726:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3677
		{
			yyVAL.str = IgnoreStr
		}
	case 727:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3681
		{
			yyVAL.empty = struct{}{}
		}
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3683
		{
			yyVAL.empty = struct{}{}
		}
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3685
		{
			yyVAL.empty = struct{}{}
		}
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3687
		{
			yyVAL.empty = struct{}{}
		}
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3689
		{
			yyVAL.empty = struct{}{}
		}
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3691
		{
			yyVAL.empty = struct{}{}
		}
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3693
		{
			yyVAL.empty = struct{}{}
		}
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3695
		{
			yyVAL.empty = struct{}{}
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3697
		{
			yyVAL.empty = struct{}{}
		}
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3699
		{
			yyVAL.empty = struct{}{}
		}
	case 737:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3702
		{
			yyVAL.empty = struct{}{}
		}
	case 738:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3704
		{
			yyVAL.empty = struct{}{}
		}
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3706
		{
			yyVAL.empty = struct{}{}
		}
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3710
		{
			yyVAL.empty = struct{}{}
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3712
		{
			yyVAL.empty = struct{}{}
		}
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3716
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3720
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3727
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3733
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 747:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3737
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 749:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3744
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4010
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4019
		{
			decNesting(yylex)
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4024
		{
			forceEOF(yylex)
		}
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:4029
		{
			forceEOF(yylex)
		}
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4033
		{
			forceEOF(yylex)
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:4037
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
