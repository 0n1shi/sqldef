// Code generated by goyacc -o parser.go sqlparser/parser.y. DO NOT EDIT.

//line sqlparser/parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sqlparser/parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sqlparser/parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const BPCHAR = 57544
const NULLX = 57545
const AUTO_INCREMENT = 57546
const APPROXNUM = 57547
const SIGNED = 57548
const UNSIGNED = 57549
const ZEROFILL = 57550
const ZONE = 57551
const AUTOINCREMENT = 57552
const DATABASES = 57553
const TABLES = 57554
const VITESS_KEYSPACES = 57555
const VITESS_SHARDS = 57556
const VITESS_TABLETS = 57557
const VSCHEMA_TABLES = 57558
const EXTENDED = 57559
const FULL = 57560
const PROCESSLIST = 57561
const NAMES = 57562
const CHARSET = 57563
const GLOBAL = 57564
const SESSION = 57565
const ISOLATION = 57566
const LEVEL = 57567
const READ = 57568
const WRITE = 57569
const ONLY = 57570
const REPEATABLE = 57571
const COMMITTED = 57572
const UNCOMMITTED = 57573
const SERIALIZABLE = 57574
const CURRENT_TIMESTAMP = 57575
const DATABASE = 57576
const CURRENT_DATE = 57577
const CURRENT_TIME = 57578
const LOCALTIME = 57579
const LOCALTIMESTAMP = 57580
const UTC_DATE = 57581
const UTC_TIME = 57582
const UTC_TIMESTAMP = 57583
const REPLACE = 57584
const CONVERT = 57585
const CAST = 57586
const SUBSTR = 57587
const SUBSTRING = 57588
const GROUP_CONCAT = 57589
const SEPARATOR = 57590
const INHERIT = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const WITHOUT = 57597
const PARSER = 57598
const QUERY = 57599
const EXPANSION = 57600
const UNUSED = 57601
const GENERATED = 57602
const ALWAYS = 57603
const IDENTITY = 57604
const SEQUENCE = 57605
const INCREMENT = 57606
const MINVALUE = 57607
const CACHE = 57608
const CYCLE = 57609
const OWNED = 57610
const NONE = 57611
const CLUSTERED = 57612
const NONCLUSTERED = 57613
const TYPECAST = 57614
const CHECK = 57615

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"BPCHAR",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"CLUSTERED",
	"NONCLUSTERED",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 368,
	153, 368,
	-2, 358,
	-1, 255,
	108, 698,
	-2, 694,
	-1, 256,
	108, 699,
	-2, 695,
	-1, 326,
	79, 879,
	-2, 58,
	-1, 327,
	79, 834,
	-2, 59,
	-1, 332,
	79, 816,
	-2, 665,
	-1, 334,
	79, 856,
	-2, 667,
	-1, 626,
	51, 41,
	53, 41,
	-2, 43,
	-1, 759,
	108, 701,
	-2, 697,
	-1, 991,
	5, 28,
	-2, 501,
	-1, 1016,
	5, 27,
	-2, 640,
	-1, 1108,
	5, 27,
	-2, 64,
	-1, 1310,
	5, 28,
	-2, 641,
	-1, 1384,
	5, 27,
	-2, 643,
	-1, 1477,
	5, 28,
	-2, 644,
}

const yyPrivate = 57344

const yyLast = 13257

var yyAct = [...]int{
	256, 1467, 1424, 1220, 695, 931, 260, 472, 823, 1019,
	553, 1395, 1328, 285, 1316, 1193, 1099, 1051, 552, 3,
	1221, 841, 1194, 864, 1190, 1110, 925, 618, 870, 234,
	863, 1065, 620, 53, 824, 88, 1166, 259, 88, 249,
	1035, 795, 784, 792, 983, 636, 1096, 66, 920, 909,
	1024, 228, 331, 491, 811, 318, 761, 485, 439, 879,
	635, 325, 88, 88, 336, 622, 233, 607, 313, 336,
	901, 328, 336, 312, 965, 820, 505, 88, 497, 88,
	576, 243, 258, 581, 582, 88, 320, 322, 567, 311,
	85, 1082, 52, 1523, 529, 229, 230, 231, 232, 1408,
	1409, 247, 1438, 518, 517, 527, 528, 520, 521, 522,
	523, 524, 525, 526, 519, 262, 898, 529, 321, 527,
	528, 520, 521, 522, 523, 524, 525, 526, 519, 1231,
	1345, 529, 451, 513, 452, 516, 1545, 1080, 1508, 1519,
	459, 531, 532, 533, 534, 535, 536, 537, 1541, 514,
	515, 512, 518, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 1475, 1450, 529, 1485, 520, 521,
	522, 523, 524, 525, 526, 519, 519, 316, 529, 529,
	1537, 522, 523, 524, 525, 526, 519, 1300, 484, 529,
	1512, 897, 1396, 859, 932, 794, 1497, 483, 1100, 1101,
	1507, 1185, 1474, 1455, 1304, 1398, 449, 88, 1216, 1217,
	1215, 336, 336, 336, 336, 637, 336, 638, 74, 1069,
	465, 1071, 1070, 336, 518, 517, 527, 528, 520, 521,
	522, 523, 524, 525, 526, 519, 855, 856, 529, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	336, 1043, 529, 854, 1042, 480, 1489, 1044, 494, 1352,
	1351, 726, 461, 1084, 900, 910, 70, 72, 727, 1491,
	1373, 493, 1397, 1410, 815, 488, 492, 1486, 1518, 530,
	1520, 71, 73, 467, 1439, 469, 902, 1254, 1253, 577,
	1337, 1293, 510, 921, 1291, 227, 1403, 1336, 1413, 68,
	1540, 1339, 530, 1535, 83, 79, 80, 81, 1265, 1266,
	1468, 88, 1144, 466, 468, 821, 530, 57, 88, 88,
	88, 1331, 579, 1338, 336, 1268, 554, 476, 477, 1469,
	336, 328, 880, 1381, 1335, 565, 1334, 1074, 1058, 1073,
	1269, 284, 59, 60, 61, 62, 63, 881, 1053, 1225,
	1529, 530, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 1277, 530, 530, 454, 602, 1429, 1226, 445,
	76, 580, 77, 540, 530, 626, 594, 578, 77, 1360,
	1056, 583, 842, 844, 705, 442, 1034, 569, 570, 571,
	572, 573, 574, 575, 1487, 1488, 1490, 1492, 1493, 1079,
	69, 1033, 880, 1511, 1032, 330, 627, 441, 910, 450,
	443, 633, 1399, 447, 1301, 206, 464, 881, 78, 1061,
	1062, 1063, 922, 530, 1473, 905, 1145, 1066, 1064, 282,
	283, 1539, 1141, 316, 1248, 542, 543, 530, 82, 1443,
	1313, 1121, 336, 88, 880, 1153, 1329, 1330, 1332, 88,
	999, 88, 336, 595, 88, 977, 843, 88, 733, 881,
	509, 88, 460, 336, 336, 336, 336, 336, 336, 336,
	336, 861, 860, 730, 1149, 504, 1448, 336, 336, 1262,
	1022, 960, 88, 639, 1249, 518, 517, 527, 528, 520,
	521, 522, 523, 524, 525, 526, 519, 336, 694, 529,
	1187, 88, 812, 995, 701, 994, 702, 336, 698, 706,
	1122, 1118, 709, 714, 1123, 1120, 1119, 758, 768, 73,
	1402, 503, 502, 738, 654, 650, 762, 1060, 996, 1142,
	1124, 1140, 766, 767, 765, 712, 1117, 728, 504, 453,
	75, 499, 748, 749, 1143, 502, 503, 502, 1513, 1148,
	484, 336, 330, 330, 330, 330, 747, 330, 495, 961,
	50, 504, 759, 504, 330, 503, 502, 804, 807, 1531,
	764, 503, 502, 813, 799, 503, 502, 740, 1189, 1530,
	1068, 440, 504, 755, 757, 1342, 736, 737, 504, 1085,
	1514, 507, 504, 1341, 812, 554, 1006, 1085, 802, 803,
	1517, 310, 88, 1516, 1515, 88, 88, 88, 88, 88,
	825, 787, 1069, 1479, 1071, 1070, 1416, 88, 1354, 1353,
	88, 456, 457, 458, 88, 789, 790, 1242, 763, 88,
	88, 503, 502, 336, 785, 732, 786, 1449, 799, 1105,
	328, 817, 809, 1103, 1085, 880, 336, 1380, 504, 1349,
	875, 1279, 874, 865, 876, 877, 849, 822, 1097, 878,
	881, 751, 753, 754, 1076, 330, 752, 1462, 1549, 444,
	731, 641, 1388, 1536, 827, 828, 21, 830, 826, 858,
	1446, 829, 1229, 838, 530, 850, 503, 502, 1228, 846,
	1326, 1510, 739, 484, 851, 852, 1462, 1509, 336, 1227,
	336, 88, 847, 504, 88, 868, 88, 1503, 484, 88,
	336, 1059, 911, 912, 913, 914, 974, 975, 976, 927,
	316, 316, 316, 316, 316, 1388, 1500, 903, 904, 906,
	907, 908, 238, 1388, 1495, 316, 1388, 1494, 923, 924,
	446, 758, 448, 1167, 316, 1388, 1465, 917, 918, 919,
	796, 798, 800, 801, 1388, 1421, 938, 1045, 808, 955,
	934, 956, 1388, 1414, 957, 788, 814, 1388, 484, 1388,
	1389, 963, 964, 711, 492, 710, 1169, 1326, 1325, 762,
	1212, 484, 1457, 693, 1312, 484, 759, 699, 966, 1257,
	1256, 1420, 816, 330, 818, 819, 967, 1251, 1252, 1251,
	1250, 989, 484, 1419, 330, 330, 330, 330, 330, 330,
	330, 330, 604, 484, 797, 484, 840, 23, 330, 330,
	697, 1171, 979, 1176, 462, 1170, 630, 1168, 646, 645,
	1156, 455, 440, 1174, 1463, 1243, 1462, 990, 742, 1016,
	1014, 1021, 1021, 1015, 1172, 1173, 336, 1191, 507, 88,
	1020, 330, 1007, 54, 1001, 998, 1020, 1037, 23, 1039,
	797, 1175, 1177, 50, 336, 1005, 631, 848, 629, 629,
	1308, 865, 989, 1297, 484, 336, 1038, 603, 604, 23,
	1029, 763, 604, 1020, 1383, 1346, 1261, 1047, 1259, 1258,
	696, 989, 791, 1255, 88, 1046, 1000, 997, 853, 1040,
	989, 604, 805, 805, 50, 240, 632, 734, 805, 50,
	518, 517, 527, 528, 520, 521, 522, 523, 524, 525,
	526, 519, 1067, 1542, 529, 50, 1505, 1454, 1453, 88,
	336, 1426, 1423, 336, 1422, 1102, 1054, 1055, 1057, 1415,
	1111, 973, 1367, 902, 926, 805, 1239, 1236, 1234, 1108,
	1206, 50, 921, 1086, 1087, 1081, 1089, 1049, 336, 1025,
	1026, 88, 88, 1098, 316, 928, 929, 1404, 916, 88,
	915, 1104, 65, 1401, 330, 1260, 1088, 1191, 336, 1050,
	1028, 708, 700, 481, 1106, 1158, 986, 330, 1115, 988,
	987, 1114, 746, 1031, 1030, 835, 833, 991, 992, 993,
	836, 834, 832, 831, 1528, 1003, 1002, 1182, 1506, 1152,
	837, 1008, 613, 614, 1009, 1010, 1011, 1012, 336, 336,
	962, 825, 1159, 1192, 1154, 1160, 1526, 825, 1091, 1195,
	498, 1165, 972, 1179, 244, 245, 1197, 1186, 1178, 330,
	971, 330, 484, 496, 644, 463, 1188, 336, 1214, 336,
	336, 330, 759, 1201, 865, 1202, 865, 1241, 486, 1200,
	1306, 1203, 1204, 1368, 936, 1205, 707, 1240, 1207, 487,
	1113, 1213, 1219, 930, 617, 330, 498, 1218, 518, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	241, 242, 529, 609, 612, 613, 614, 610, 1264, 611,
	615, 235, 970, 1090, 1237, 1092, 1093, 1094, 1095, 530,
	969, 1521, 1432, 236, 54, 1238, 1431, 1371, 336, 275,
	274, 277, 278, 279, 280, 1021, 500, 336, 276, 281,
	1362, 1452, 1363, 1364, 1365, 1224, 1223, 1451, 1246, 88,
	1233, 1235, 1440, 1072, 1361, 336, 729, 56, 58, 609,
	612, 613, 614, 610, 336, 611, 615, 88, 1116, 1025,
	1026, 1158, 1267, 628, 51, 1281, 1, 1407, 1270, 1456,
	1078, 1412, 67, 1496, 1278, 1461, 1230, 1272, 1263, 1112,
	1125, 933, 1109, 943, 1282, 1466, 1164, 1036, 1394, 1280,
	872, 1275, 862, 438, 1274, 64, 1447, 873, 1289, 871,
	869, 647, 896, 1083, 899, 330, 653, 336, 651, 336,
	336, 336, 88, 336, 652, 649, 1052, 1307, 655, 336,
	648, 214, 323, 1319, 1320, 1321, 865, 616, 640, 1305,
	501, 1315, 1139, 1211, 1138, 939, 554, 1333, 1286, 1287,
	336, 1288, 1047, 1324, 1322, 1290, 1147, 1292, 725, 959,
	479, 216, 538, 968, 1344, 1041, 329, 1198, 735, 336,
	336, 88, 336, 336, 490, 1430, 1370, 1004, 336, 1111,
	865, 1107, 316, 1355, 330, 564, 810, 530, 336, 261,
	1244, 1245, 750, 1247, 273, 270, 1359, 1358, 272, 271,
	741, 1013, 511, 1327, 251, 315, 600, 608, 606, 330,
	1348, 605, 1350, 1027, 1023, 314, 1155, 1303, 1437, 745,
	25, 470, 55, 336, 336, 246, 1357, 19, 18, 330,
	17, 20, 1195, 16, 15, 14, 29, 336, 13, 12,
	1384, 1382, 11, 10, 9, 336, 1298, 1372, 8, 7,
	6, 330, 5, 4, 1393, 237, 253, 1400, 22, 2,
	0, 0, 1405, 0, 1411, 0, 805, 1283, 0, 1199,
	1036, 336, 805, 0, 1285, 0, 0, 0, 336, 0,
	0, 0, 0, 0, 0, 0, 1294, 1295, 1296, 0,
	0, 1299, 1427, 0, 0, 0, 0, 0, 330, 336,
	330, 1222, 0, 0, 1309, 1310, 1311, 1195, 1314, 1441,
	0, 0, 0, 0, 1442, 0, 1445, 518, 517, 527,
	528, 520, 521, 522, 523, 524, 525, 526, 519, 0,
	0, 529, 0, 336, 336, 0, 0, 336, 0, 0,
	1340, 1458, 0, 0, 286, 47, 1343, 1459, 1460, 0,
	1347, 1464, 0, 1471, 336, 0, 0, 825, 0, 1476,
	0, 336, 0, 0, 336, 336, 1483, 0, 1484, 1271,
	0, 0, 0, 336, 1481, 1482, 0, 0, 1273, 336,
	1501, 1470, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 1276, 0, 0, 0,
	239, 0, 0, 0, 0, 330, 317, 0, 0, 0,
	0, 1379, 0, 1499, 1522, 1525, 336, 1524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1390, 1391, 1392,
	1527, 0, 88, 473, 474, 475, 0, 478, 0, 0,
	88, 0, 0, 0, 482, 0, 0, 0, 0, 0,
	336, 0, 1417, 336, 1418, 1546, 0, 1543, 1317, 0,
	1317, 1317, 1317, 0, 1323, 0, 0, 0, 0, 0,
	330, 0, 0, 1534, 0, 0, 0, 0, 1161, 0,
	0, 0, 1433, 1434, 1435, 1436, 0, 0, 0, 0,
	0, 1317, 0, 0, 0, 1538, 0, 0, 518, 517,
	527, 528, 520, 521, 522, 523, 524, 525, 526, 519,
	1317, 1356, 529, 330, 330, 0, 530, 0, 0, 1366,
	544, 545, 546, 547, 548, 549, 550, 0, 0, 1369,
	0, 489, 518, 517, 527, 528, 520, 521, 522, 523,
	524, 525, 526, 519, 0, 1472, 529, 0, 0, 0,
	1477, 0, 0, 0, 0, 471, 471, 471, 471, 0,
	471, 0, 0, 0, 1386, 1387, 86, 471, 0, 226,
	0, 0, 0, 0, 1502, 0, 0, 0, 1222, 0,
	0, 984, 0, 0, 47, 0, 1406, 0, 0, 0,
	0, 250, 0, 86, 86, 0, 0, 0, 0, 539,
	0, 0, 541, 0, 0, 0, 0, 0, 86, 0,
	86, 0, 1425, 0, 0, 0, 86, 0, 0, 1317,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
	0, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	1444, 566, 568, 568, 568, 568, 568, 568, 568, 568,
	0, 596, 597, 598, 599, 1550, 1551, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 949, 0,
	0, 0, 0, 704, 1317, 1317, 0, 0, 1317, 0,
	0, 948, 0, 0, 715, 716, 717, 718, 719, 720,
	721, 722, 805, 0, 884, 1478, 0, 530, 723, 724,
	0, 0, 1480, 0, 0, 1425, 1222, 0, 953, 0,
	0, 0, 0, 0, 1498, 0, 885, 947, 0, 985,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	892, 530, 882, 0, 0, 0, 0, 883, 86, 518,
	517, 527, 528, 520, 521, 522, 523, 524, 525, 526,
	519, 0, 0, 529, 0, 0, 0, 1317, 0, 0,
	0, 0, 0, 0, 0, 944, 941, 942, 760, 940,
	0, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 0, 0, 0, 1131,
	888, 330, 0, 893, 1425, 0, 471, 951, 954, 890,
	889, 0, 0, 0, 0, 0, 0, 471, 471, 471,
	471, 471, 471, 471, 471, 0, 0, 0, 0, 0,
	0, 471, 471, 518, 517, 527, 528, 520, 521, 522,
	523, 524, 525, 526, 519, 0, 0, 529, 0, 0,
	0, 0, 86, 0, 0, 0, 946, 0, 212, 86,
	624, 86, 0, 1132, 0, 0, 0, 0, 1134, 1127,
	1128, 0, 1135, 1130, 1129, 0, 0, 1137, 1133, 0,
	0, 0, 222, 0, 945, 0, 0, 0, 1136, 0,
	0, 0, 0, 0, 1126, 0, 47, 886, 0, 0,
	0, 0, 0, 887, 0, 0, 0, 0, 0, 0,
	555, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 950, 0, 0, 0, 0, 0, 935,
	0, 937, 207, 0, 0, 0, 0, 0, 209, 952,
	0, 958, 0, 0, 0, 215, 211, 0, 530, 0,
	0, 0, 0, 894, 0, 895, 0, 0, 0, 317,
	317, 317, 317, 317, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 619, 213, 845, 0, 217, 0,
	0, 0, 0, 317, 86, 0, 0, 0, 0, 0,
	86, 0, 86, 0, 0, 86, 0, 0, 86, 0,
	0, 0, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	208, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 980, 981, 982, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 713, 471, 0, 471, 210, 0, 218, 219, 220,
	221, 225, 0, 0, 471, 0, 224, 223, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 23, 24, 48,
	26, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 250, 0, 0, 42, 0, 250, 250,
	28, 0, 806, 806, 250, 0, 0, 0, 806, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 0, 37,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 250,
	250, 250, 0, 86, 0, 806, 86, 86, 86, 86,
	86, 0, 0, 0, 0, 0, 0, 0, 839, 0,
	0, 86, 0, 0, 0, 624, 0, 0, 0, 0,
	86, 86, 0, 0, 0, 1017, 1018, 0, 0, 0,
	0, 0, 30, 31, 33, 32, 35, 0, 0, 1146,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 36, 43, 44, 0,
	0, 45, 46, 34, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 39, 0, 40, 41, 0,
	0, 0, 86, 0, 0, 86, 1075, 86, 0, 0,
	86, 1162, 1163, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1180, 1181, 0, 1183, 1184, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 250, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 0, 0, 0,
	0, 0, 471, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 250, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1196, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	659, 0, 0, 0, 0, 0, 0, 1208, 1209, 1210,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 675, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1232, 0, 0, 0, 0, 1284, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 0, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 0, 688, 689, 0, 690, 691, 692,
	676, 677, 678, 679, 656, 658, 0, 594, 657, 660,
	86, 672, 661, 662, 663, 664, 665, 666, 667, 668,
	669, 670, 671, 673, 680, 681, 682, 683, 684, 685,
	686, 687, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1150, 1151, 0, 0, 0, 0, 0, 0,
	86, 317, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 250, 0, 0, 0, 0, 0, 0, 0, 0,
	1302, 713, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 806, 0, 1374, 1375, 0, 1376, 1377, 1378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1196, 0, 0, 1385, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 91, 0, 0, 86, 0,
	0, 0, 113, 0, 0, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1428, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 0, 0, 0, 0, 0, 1196, 104,
	47, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 518, 517, 527, 528, 520,
	521, 522, 523, 524, 525, 526, 519, 0, 0, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 86, 172, 117, 0, 127, 0, 0, 0,
	0, 1547, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 1544, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 530, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 427, 417, 0, 387, 429, 362, 377,
	437, 379, 380, 409, 346, 395, 147, 374, 91, 365,
	340, 371, 341, 363, 389, 113, 361, 419, 398, 126,
	435, 129, 403, 0, 168, 138, 0, 0, 391, 421,
	393, 415, 386, 410, 353, 402, 430, 375, 406, 431,
	0, 0, 0, 335, 0, 866, 867, 0, 0, 0,
	0, 0, 104, 0, 405, 426, 373, 408, 339, 404,
	0, 344, 347, 436, 424, 368, 369, 1048, 0, 0,
	0, 0, 0, 1533, 390, 394, 412, 384, 0, 0,
	0, 86, 0, 0, 0, 0, 366, 0, 401, 0,
	0, 0, 350, 345, 0, 388, 0, 0, 0, 352,
	0, 367, 413, 0, 337, 416, 422, 385, 193, 425,
	383, 382, 154, 0, 107, 0, 172, 117, 376, 127,
	411, 428, 392, 420, 364, 372, 109, 370, 161, 148,
	184, 400, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 342,
	0, 169, 186, 204, 205, 343, 360, 423, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 407, 162, 106, 185, 167, 356, 359,
	354, 355, 396, 397, 432, 433, 434, 414, 351, 0,
	357, 358, 0, 418, 121, 399, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 378, 338, 381, 0, 0,
	0, 0, 0, 0, 0, 348, 349, 0, 103, 427,
	417, 0, 387, 429, 362, 377, 437, 379, 380, 409,
	346, 395, 147, 374, 91, 365, 340, 371, 341, 363,
	389, 113, 361, 419, 398, 126, 435, 129, 403, 0,
	168, 138, 0, 0, 391, 421, 393, 415, 386, 410,
	353, 402, 430, 375, 406, 431, 0, 0, 0, 335,
	0, 866, 867, 0, 0, 0, 0, 0, 104, 0,
	405, 426, 373, 408, 339, 404, 0, 344, 347, 436,
	424, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	390, 394, 412, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 401, 0, 0, 0, 350, 345,
	0, 388, 0, 0, 0, 352, 0, 367, 413, 0,
	337, 416, 422, 385, 193, 425, 383, 382, 154, 0,
	107, 0, 172, 117, 376, 127, 411, 428, 392, 420,
	364, 372, 109, 370, 161, 148, 184, 400, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 342, 0, 169, 186, 204,
	205, 343, 360, 423, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 407,
	162, 106, 185, 167, 356, 359, 354, 355, 396, 397,
	432, 433, 434, 414, 351, 0, 357, 358, 0, 418,
	121, 399, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 378, 338, 381, 0, 0, 0, 0, 0, 0,
	0, 348, 349, 0, 103, 427, 417, 0, 387, 429,
	362, 377, 437, 379, 380, 409, 346, 395, 147, 374,
	91, 365, 340, 371, 341, 363, 389, 113, 361, 419,
	398, 126, 435, 129, 403, 0, 168, 138, 0, 0,
	391, 421, 393, 415, 386, 410, 353, 402, 430, 375,
	406, 431, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 405, 426, 373, 408,
	339, 404, 0, 344, 347, 436, 424, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 390, 394, 412, 384,
	0, 0, 0, 0, 0, 0, 1157, 0, 366, 0,
	401, 0, 0, 0, 350, 345, 0, 388, 0, 0,
	0, 352, 0, 367, 413, 0, 337, 416, 422, 385,
	193, 425, 383, 382, 154, 0, 107, 0, 172, 117,
	376, 127, 411, 428, 392, 420, 364, 372, 109, 370,
	161, 148, 184, 400, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 342, 0, 169, 186, 204, 205, 343, 360, 423,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 407, 162, 106, 185, 167,
	356, 359, 354, 355, 396, 397, 432, 433, 434, 414,
	351, 0, 357, 358, 0, 418, 121, 399, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 378, 338, 381,
	0, 0, 0, 0, 0, 0, 0, 348, 349, 0,
	103, 427, 417, 0, 387, 429, 362, 377, 437, 379,
	380, 409, 346, 395, 147, 374, 91, 365, 340, 371,
	341, 363, 389, 113, 361, 419, 398, 126, 435, 129,
	403, 0, 168, 138, 0, 0, 391, 421, 393, 415,
	386, 410, 353, 402, 430, 375, 406, 431, 50, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 405, 426, 373, 408, 339, 404, 0, 344,
	347, 436, 424, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 390, 394, 412, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 0, 401, 0, 0, 0,
	350, 345, 0, 388, 0, 0, 0, 352, 0, 367,
	413, 0, 337, 416, 422, 385, 193, 425, 383, 382,
	154, 0, 107, 0, 172, 117, 376, 127, 411, 428,
	392, 420, 364, 372, 109, 370, 161, 148, 184, 400,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 342, 0, 169,
	186, 204, 205, 343, 360, 423, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 407, 162, 106, 185, 167, 356, 359, 354, 355,
	396, 397, 432, 433, 434, 414, 351, 0, 357, 358,
	0, 418, 121, 399, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 378, 338, 381, 0, 0, 0, 0,
	0, 0, 0, 348, 349, 0, 103, 427, 417, 0,
	387, 429, 362, 377, 437, 379, 380, 409, 346, 395,
	147, 374, 91, 365, 340, 371, 341, 363, 389, 113,
	361, 419, 398, 126, 435, 129, 403, 0, 168, 138,
	0, 0, 391, 421, 393, 415, 386, 410, 353, 402,
	430, 375, 406, 431, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 405, 426,
	373, 408, 339, 404, 0, 344, 347, 436, 424, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 390, 394,
	412, 384, 0, 0, 0, 0, 0, 0, 756, 0,
	366, 0, 401, 0, 0, 0, 350, 345, 0, 388,
	0, 0, 0, 352, 0, 367, 413, 0, 337, 416,
	422, 385, 193, 425, 383, 382, 154, 0, 107, 0,
	172, 117, 376, 127, 411, 428, 392, 420, 364, 372,
	109, 370, 161, 148, 184, 400, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 342, 0, 169, 186, 204, 205, 343,
	360, 423, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 407, 162, 106,
	185, 167, 356, 359, 354, 355, 396, 397, 432, 433,
	434, 414, 351, 0, 357, 358, 0, 418, 121, 399,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 378,
	338, 381, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 0, 103, 427, 417, 0, 387, 429, 362, 377,
	437, 379, 380, 409, 346, 395, 147, 374, 91, 365,
	340, 371, 341, 363, 389, 113, 361, 419, 398, 126,
	435, 129, 403, 0, 168, 138, 0, 0, 391, 421,
	393, 415, 386, 410, 353, 402, 430, 375, 406, 431,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 405, 426, 373, 408, 339, 404,
	0, 344, 347, 436, 424, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 390, 394, 412, 384, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 0, 401, 0,
	0, 0, 350, 345, 0, 388, 0, 0, 0, 352,
	0, 367, 413, 0, 337, 416, 422, 385, 193, 425,
	383, 382, 154, 0, 107, 0, 172, 117, 376, 127,
	411, 428, 392, 420, 364, 372, 109, 370, 161, 148,
	184, 400, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 342,
	0, 169, 186, 204, 205, 343, 360, 423, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 407, 162, 106, 185, 167, 356, 359,
	354, 355, 396, 397, 432, 433, 434, 414, 351, 0,
	357, 358, 0, 418, 121, 399, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 378, 338, 381, 0, 0,
	0, 0, 0, 0, 0, 348, 349, 0, 103, 427,
	417, 0, 387, 429, 362, 377, 437, 379, 380, 409,
	346, 395, 147, 374, 91, 365, 340, 371, 341, 363,
	389, 113, 361, 419, 398, 126, 435, 129, 403, 0,
	168, 138, 0, 0, 391, 421, 393, 415, 386, 410,
	353, 402, 430, 375, 406, 431, 0, 0, 0, 255,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	405, 426, 373, 408, 339, 404, 0, 344, 347, 436,
	424, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	390, 394, 412, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 366, 0, 401, 0, 0, 0, 350, 345,
	0, 388, 0, 0, 0, 352, 0, 367, 413, 0,
	337, 416, 422, 385, 193, 425, 383, 382, 154, 0,
	107, 0, 172, 117, 376, 127, 411, 428, 392, 420,
	364, 372, 109, 370, 161, 148, 184, 400, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 342, 0, 169, 186, 204,
	205, 343, 360, 423, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 407,
	162, 106, 185, 167, 356, 359, 354, 355, 396, 397,
	432, 433, 434, 414, 351, 0, 357, 358, 0, 418,
	121, 399, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 378, 338, 381, 0, 0, 0, 0, 0, 0,
	0, 348, 349, 0, 103, 427, 417, 0, 387, 429,
	362, 377, 437, 379, 380, 409, 346, 395, 147, 374,
	91, 365, 340, 371, 341, 363, 389, 113, 361, 419,
	398, 126, 435, 129, 403, 0, 168, 138, 0, 0,
	391, 421, 393, 415, 386, 410, 353, 402, 430, 375,
	406, 431, 0, 0, 0, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 405, 426, 373, 408,
	339, 404, 0, 344, 347, 436, 424, 368, 369, 0,
	0, 0, 0, 0, 0, 0, 390, 394, 412, 384,
	0, 0, 0, 0, 0, 0, 0, 0, 366, 0,
	401, 0, 0, 0, 350, 345, 0, 388, 0, 0,
	0, 352, 0, 367, 413, 0, 337, 416, 422, 385,
	193, 425, 383, 382, 154, 0, 107, 0, 172, 117,
	376, 127, 411, 428, 392, 420, 364, 372, 109, 370,
	161, 148, 184, 400, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 333, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 342, 0, 169, 186, 204, 205, 343, 360, 423,
	196, 197, 198, 199, 0, 0, 0, 334, 332, 120,
	165, 124, 131, 157, 202, 407, 162, 106, 185, 167,
	356, 359, 354, 355, 396, 397, 432, 433, 434, 414,
	351, 0, 357, 358, 0, 418, 121, 399, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 378, 338, 381,
	0, 0, 0, 0, 0, 0, 0, 348, 349, 0,
	103, 427, 417, 0, 387, 429, 362, 377, 437, 379,
	380, 409, 346, 395, 147, 374, 91, 365, 340, 371,
	341, 363, 389, 113, 361, 419, 398, 126, 435, 129,
	403, 0, 168, 138, 0, 0, 391, 421, 393, 415,
	386, 410, 353, 402, 430, 375, 406, 431, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 405, 426, 373, 408, 339, 404, 0, 344,
	347, 436, 424, 368, 369, 0, 0, 0, 0, 0,
	0, 0, 390, 394, 412, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 366, 0, 401, 0, 0, 0,
	350, 345, 0, 388, 0, 0, 0, 352, 0, 367,
	413, 0, 337, 416, 422, 385, 193, 425, 383, 382,
	154, 0, 107, 0, 172, 117, 376, 127, 411, 428,
	392, 420, 364, 372, 109, 370, 161, 148, 184, 400,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 342, 0, 169,
	186, 204, 205, 343, 360, 423, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 407, 162, 106, 185, 167, 356, 359, 354, 355,
	396, 397, 432, 433, 434, 414, 351, 0, 357, 358,
	0, 418, 121, 399, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 378, 338, 381, 0, 0, 0, 0,
	0, 0, 0, 348, 349, 0, 103, 427, 417, 0,
	387, 429, 362, 377, 437, 379, 380, 409, 346, 395,
	147, 374, 91, 365, 340, 371, 341, 363, 389, 113,
	361, 419, 398, 126, 435, 129, 403, 0, 168, 138,
	0, 0, 391, 421, 393, 415, 386, 410, 353, 402,
	430, 375, 406, 431, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 405, 426,
	373, 408, 339, 404, 0, 344, 347, 436, 424, 368,
	369, 0, 0, 0, 0, 0, 0, 0, 390, 394,
	412, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	366, 0, 401, 0, 0, 0, 350, 345, 0, 388,
	0, 0, 0, 352, 0, 367, 413, 0, 337, 416,
	422, 385, 193, 425, 383, 382, 154, 0, 107, 0,
	172, 117, 376, 127, 411, 428, 392, 420, 364, 372,
	109, 370, 161, 148, 184, 400, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 634, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 333, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 342, 0, 169, 186, 204, 205, 343,
	360, 423, 196, 197, 198, 199, 0, 0, 0, 334,
	332, 120, 165, 124, 131, 157, 202, 407, 162, 106,
	185, 167, 356, 359, 354, 355, 396, 397, 432, 433,
	434, 414, 351, 0, 357, 358, 0, 418, 121, 399,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 378,
	338, 381, 0, 0, 0, 0, 0, 0, 0, 348,
	349, 0, 103, 427, 417, 0, 387, 429, 362, 377,
	437, 379, 380, 409, 346, 395, 147, 374, 91, 365,
	340, 371, 341, 363, 389, 113, 361, 419, 398, 126,
	435, 129, 403, 0, 168, 138, 0, 0, 391, 421,
	393, 415, 386, 410, 353, 402, 430, 375, 406, 431,
	0, 0, 0, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 405, 426, 373, 408, 339, 404,
	0, 344, 347, 436, 424, 368, 369, 0, 0, 0,
	0, 0, 0, 0, 390, 394, 412, 384, 0, 0,
	0, 0, 0, 0, 0, 0, 366, 0, 401, 0,
	0, 0, 350, 345, 0, 388, 0, 0, 0, 352,
	0, 367, 413, 0, 337, 416, 422, 385, 193, 425,
	383, 382, 154, 0, 107, 0, 172, 117, 376, 127,
	411, 428, 392, 420, 364, 372, 109, 370, 161, 148,
	184, 400, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 324, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 333, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 342,
	0, 169, 186, 204, 205, 343, 360, 423, 196, 197,
	198, 199, 0, 0, 0, 334, 332, 327, 326, 124,
	131, 157, 202, 407, 162, 106, 185, 167, 356, 359,
	354, 355, 396, 397, 432, 433, 434, 414, 351, 0,
	357, 358, 0, 418, 121, 399, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 378, 338, 381, 0, 0,
	0, 0, 0, 0, 0, 348, 349, 147, 103, 91,
	793, 0, 257, 0, 0, 0, 113, 254, 0, 0,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	252, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 248, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 257, 0, 0, 0, 113, 254, 305, 103,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 484, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	252, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 257, 0, 0, 0, 113, 254, 305, 103,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	252, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 248, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 147, 0, 91,
	0, 0, 257, 0, 0, 0, 113, 254, 305, 103,
	126, 296, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 287, 288, 0, 0, 0, 0, 0, 0, 857,
	0, 50, 0, 0, 255, 275, 274, 277, 278, 279,
	280, 0, 0, 104, 276, 281, 282, 283, 0, 0,
	252, 268, 0, 295, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 266, 0, 0, 0, 0, 308,
	0, 267, 0, 0, 263, 264, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 306, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 297,
	307, 303, 304, 301, 302, 300, 299, 298, 309, 289,
	290, 291, 292, 294, 0, 121, 293, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 103,
	147, 0, 91, 0, 0, 257, 0, 0, 0, 113,
	254, 0, 0, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 257, 0, 0, 0, 113,
	254, 305, 103, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 305, 103, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 0, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 1548, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 0, 0, 0, 0, 113,
	0, 305, 103, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 0, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 506, 0, 0, 0, 0, 113,
	0, 305, 103, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 508,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 503, 502, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 623, 0, 0, 0, 0, 113,
	0, 0, 103, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 625,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 23,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	0, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 103, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	23, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 103, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 743, 0, 0, 744, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 643, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 642, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 623, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 625, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 621, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	1532, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 1318, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 625, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 508, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 703,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 147, 0, 91, 0, 0, 0, 0, 0,
	601, 113, 0, 0, 103, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 319, 156, 115,
	187, 0, 0, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 103, 0, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 103, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 255, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103,
}

var yyPact = [...]int{
	2151, -1000, -199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1099, 1142, -1000, -1000, -1000, -1000, -1000, -1000, 920,
	149, 250, 300, 187, 12186, 297, 1907, 12706, -1000, 130,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 873, -1000, -1000,
	-1000, -1000, -1000, 1084, 1097, 899, 1070, 996, -1000, 6709,
	256, 10624, 11926, 5918, -1000, 777, 288, 265, 12446, 246,
	246, 12446, 246, -1000, -53, 291, 12706, -1000, 12706, 242,
	776, 242, 242, 242, 12706, -1000, 354, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12706, 769, 1016, 165,
	3916, 3916, 3916, 3916, 175, 3916, 20, 933, -1000, -1000,
	-1000, -1000, 3916, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 639, 1039, 7502, 7502, 1099, -1000, 873,
	-1000, -1000, -1000, 1009, -1000, -1000, 478, 1115, -1000, 8282,
	352, -1000, 7502, 62, 857, -1000, -1000, 857, -1000, -1000,
	326, -1000, -1000, 8022, 8022, 8022, 8022, 8022, 8022, 8022,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 857, -1000, 7242, 857, 857, 857,
	857, 857, 857, 857, 857, 7502, 857, 857, 857, 857,
	857, 857, 857, 857, 857, 184, 857, 857, 857, 857,
	11664, 848, 1053, -1000, -1000, -1000, 1052, 9064, 9844, 12706,
	815, -1000, 853, 5632, -26, -1000, -1000, -1000, 404, 9584,
	-1000, -1000, -1000, 1015, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 775, -1000,
	2355, 12446, 12706, 839, 765, 437, 732, 932, 12706, -1000,
	11404, 3916, 263, 12706, 1043, 931, 12706, 720, 718, -1000,
	5346, -1000, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,
	-1000, -1000, -1000, -1000, -1000, -1000, 3916, 3916, -1000, 32,
	-1000, 12706, -1000, -1000, -1000, -1000, 1137, 384, 617, 350,
	854, -1000, 562, 1084, 639, 996, 9324, 951, -1000, -1000,
	12706, -1000, 7502, 7502, 595, -1000, 11144, -1000, -1000, 4202,
	389, 8022, 508, 445, 8022, 8022, 8022, 8022, 8022, 8022,
	8022, 8022, 8022, 8022, 8022, 8022, 8022, 8022, 8022, 579,
	184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 710,
	-1000, 873, 1063, 1063, -10, -10, -10, -10, -10, -10,
	2755, 6189, 639, 761, 477, 7242, 6709, 6709, 7502, 7502,
	12966, 12966, 6709, 1055, 427, 477, 12966, -1000, 639, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 83, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 6709, 6709, 6709, 6709,
	171, 12706, -1000, 12966, 10624, 10624, 10624, 10624, 10624, -1000,
	963, 962, -1000, 956, 955, 970, 12706, -1000, 759, 9064,
	334, 857, -1000, 10884, -1000, -1000, 171, 816, 10624, 12706,
	-1000, -1000, 5060, 853, -26, 845, -1000, 11, -8, 6969,
	367, -1000, -1000, -1000, -1000, 3344, 526, 1756, -101, 40,
	-1000, -1000, -1000, -1000, 891, -1000, 891, 234, 891, 891,
	891, 72, 72, 72, 72, 72, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 918, 916, -1000, 891, 891, 891, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 900, 241,
	900, 892, 892, 915, 1051, -77, 705, 3916, 1041, 3916,
	12706, -1000, 1743, 12706, -1000, 12706, -1000, -1000, 12706, 3916,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 470, -1000, -1000, -1000, -1000,
	984, 7502, 7502, 4774, 7502, -1000, -1000, -1000, 1039, -1000,
	1055, 1091, -1000, 1008, 1000, 6709, -1000, -1000, 389, 475,
	-1000, -1000, 650, -1000, -1000, -1000, -1000, 347, 857, -1000,
	1823, -1000, -1000, -1000, -1000, 508, 8022, 8022, 8022, 1532,
	1823, 1739, 27, 148, -10, 85, 85, 75, 75, 75,
	75, 75, 74, 74, -1000, -1000, -1000, -1000, 639, -1000,
	-1000, -1000, 639, 6709, 847, -1000, -1000, 7502, -1000, 639,
	748, 748, 452, 506, 844, -1000, 342, 843, 748, 6709,
	519, -1000, 7502, 639, -1000, -1000, 748, 639, 748, 748,
	811, 857, -1000, 830, -1000, 401, 1053, 909, 930, 1109,
	-1000, -1000, -1000, -1000, 954, -1000, 953, -1000, -1000, -1000,
	-1000, -1000, 285, 282, 267, 12446, -1000, 1113, 10624, 829,
	-1000, -1000, 845, -26, 8, -1000, -1000, -1000, 477, -1000,
	-1000, 702, 842, 3058, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 905, 929, 12446, 214, 213, 325, 283, 656,
	-1000, -1000, -1000, 461, 362, 1134, -1000, -1000, 205, -1000,
	203, 857, 607, 12706, 121, 903, -1000, -202, -1000, 38,
	-1000, -1000, 586, 72, 72, 891, 72, -1000, -1000, 367,
	999, 367, 367, 367, 367, 601, 601, -73, -73, -1000,
	-1000, 585, 900, -1000, -1000, -1000, 581, -1000, 12706, 12446,
	873, -1000, 4488, -1000, -1000, -1000, -1000, -1000, 1048, -1000,
	386, 1824, 410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 168, 310, -1000, 3916, -1000, 462,
	12706, 12706, 972, 477, 477, 337, -1000, -1000, 12706, -1000,
	-1000, -1000, -1000, 819, -1000, -1000, -1000, 3630, 6709, -1000,
	1532, 1823, 1498, -1000, 8022, 8022, -1000, -1000, 748, 6709,
	477, -1000, -1000, -1000, 638, 579, 638, 8022, 8022, 4774,
	8022, 8022, -67, 838, 422, -1000, 7502, 502, -1000, -1000,
	-1000, -1000, -1000, 927, 12966, 857, -1000, 8803, 12446, 1099,
	12966, 7502, 7502, -1000, -1000, 7502, 898, -1000, 7502, -1000,
	-1000, -1000, 857, 857, 857, 727, -1000, 1099, 829, -1000,
	-1000, -1000, -33, -39, -1000, -1000, 3344, -1000, 3344, 12446,
	1126, 219, 244, -1000, 644, 633, -1000, 627, -1000, -1000,
	-1000, -160, -1000, -1000, -1000, -1000, -1000, -1000, 857, 896,
	895, -1000, -31, -1000, -1000, 7502, -1000, 894, 1045, -1000,
	1029, 569, -1000, -1000, -1000, 781, 367, 367, 72, 367,
	-1000, 379, -1000, -1000, -1000, -1000, 746, -1000, 744, -1000,
	103, 102, -1000, 840, -1000, 736, 837, 925, -1000, 833,
	-1000, 400, 1079, 150, -1000, 206, -1000, 12446, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12446, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12706, -1000,
	-1000, -1000, -1000, -1000, 12446, 236, -1000, -1000, 594, 7502,
	-1000, -1000, -1000, 4488, -1000, 1113, 10624, -1000, -1000, 639,
	-1000, 8022, 1823, 1823, -1000, -1000, 639, 891, 891, -1000,
	891, 892, -1000, -1000, 891, 120, 891, 117, 639, 639,
	820, 1317, -1000, 134, 395, 857, -61, -1000, 477, 7502,
	-1000, 1033, 797, 817, -1000, -1000, 6449, 639, 731, 332,
	727, 1084, -1000, 477, 477, 477, 10364, 477, 10364, 10364,
	10364, 8542, 12446, 1084, -1000, -1000, -1000, -1000, 3058, -1000,
	724, -1000, 891, 292, 292, 202, 200, -1000, -1000, -1000,
	-1000, 104, 639, -1000, 539, -1000, 531, -1000, 496, 10364,
	-149, -1000, 832, -1000, -1000, -1000, 367, -1000, -1000, -1000,
	72, 592, 72, 34, 33, 561, -1000, 560, 10364, 12446,
	12706, 4488, 3344, 258, 1124, -1000, -1000, 12446, -1000, -1000,
	-1000, 890, -1000, -1000, -1000, -1000, 1037, 12446, -1000, -1000,
	477, 1104, 825, -1000, 1823, -1000, -1000, 215, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8022, 8022, -1000,
	8022, 8022, 8022, 639, 590, 477, 199, -1000, 857, -1000,
	-1000, 852, 12446, 12446, -1000, -1000, 716, -1000, -1000, 714,
	714, 714, 334, -1000, -1000, 141, 12446, -1000, 923, -1000,
	-1000, 454, 139, 917, 12446, -188, 82, -73, -1000, -1000,
	-1000, -1000, -1000, 142, 709, 887, 558, -1000, 367, -1000,
	367, -1000, -1000, 749, 737, 701, 882, 880, -1000, -1000,
	12446, -1000, -1000, -1000, -1000, -1000, 879, 10364, 857, 243,
	1102, 1096, -1000, -1000, 988, 988, 988, 988, 13, -1000,
	-1000, 1133, -1000, 857, -1000, 873, 331, -1000, 12446, -1000,
	-1000, -1000, -1000, -1000, 141, -1000, 625, 397, 580, -108,
	-1000, 1128, -1000, -1000, 1121, 876, -1000, 875, -1000, -1000,
	-1000, -1000, -1000, -63, -1000, -1000, 728, -1000, -1000, -1000,
	-1000, 1113, 10364, 10364, 783, -1000, 10364, 692, 166, 195,
	-1000, 7502, 7502, -1000, -1000, -1000, -1000, 639, 155, -110,
	12966, 817, 639, 12446, -1000, -1000, -1000, 555, -1000, -1000,
	12446, 292, 292, 12446, 12446, -1000, 113, -1000, -1000, 683,
	680, -75, 12446, 7502, 672, 839, 654, -1000, 12446, 874,
	477, 807, -1000, 971, -70, -137, 803, -1000, -1000, -1000,
	-1000, -1000, -1000, 643, 637, -1000, 132, 532, 546, 545,
	542, -4, -1000, 1095, 1113, -1000, -1000, -197, -1000, 477,
	-1000, -77, -1000, 166, 994, 10364, -1000, 967, -1000, 223,
	-1000, 521, -1000, 511, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 10104, -1000, 7502, -1000, -1000, 157, 619, -91, 12706,
	-1000, -1000, -1000, 323, 477, 153, -1000, -126, 871, 4488,
	857, -139, 12446, -1000, 7762, -1000, 614, 988, 639, -1000,
	-1000, -1000,
}

var yyPgo = [...]int{
	0, 1349, 18, 676, 1348, 1345, 1343, 1342, 1340, 1339,
	1338, 1334, 1333, 1332, 1329, 1328, 1326, 1325, 1324, 1323,
	1321, 1320, 1318, 1317, 317, 1315, 1312, 1310, 78, 1309,
	81, 1308, 1307, 44, 195, 43, 41, 39, 1306, 27,
	73, 68, 1305, 50, 1304, 1303, 86, 1301, 67, 1298,
	1297, 55, 1296, 1295, 21, 9, 1294, 37, 1292, 1291,
	82, 1346, 1290, 1289, 1288, 1285, 1284, 1282, 56, 10,
	15, 13, 22, 1279, 115, 6, 1276, 54, 1275, 1267,
	1266, 1265, 33, 1264, 53, 1258, 29, 57, 1257, 14,
	75, 40, 24, 8, 87, 60, 1256, 34, 61, 45,
	1255, 1253, 540, 1252, 1251, 1250, 1249, 1248, 1246, 539,
	669, 1235, 1234, 1232, 52, 0, 341, 7, 76, 1230,
	47, 1228, 1621, 74, 65, 32, 1227, 51, 1311, 42,
	1222, 1221, 36, 80, 1220, 84, 83, 1218, 1215, 1214,
	1208, 1206, 70, 31, 49, 193, 1204, 1203, 1202, 16,
	48, 26, 46, 58, 1201, 1200, 1199, 28, 1197, 12,
	17, 2, 59, 1196, 1195, 1193, 1192, 30, 23, 1190,
	20, 3, 11, 1188, 1185, 1, 1183, 25, 1182, 5,
	1181, 4, 1180, 1179, 1178, 1176, 1175, 1173, 1172, 1171,
	1170, 1169, 1167, 1166, 1164, 1434, 197, 1163, 1162, 1158,
	1148, 88,
}

var yyR1 = [...]int{
	0, 193, 194, 194, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 197,
	197, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 183,
	183, 183, 184, 184, 184, 184, 184, 184, 186, 186,
	187, 187, 120, 120, 181, 181, 180, 179, 179, 178,
	178, 177, 188, 188, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 190, 190, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 143, 143,
	143, 143, 143, 189, 189, 185, 185, 185, 185, 185,
	138, 138, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 137, 137, 137, 137, 137, 137, 139, 139,
	139, 139, 139, 135, 135, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 141, 141, 141, 141, 141,
	141, 141, 141, 152, 152, 142, 142, 150, 150, 151,
	151, 151, 149, 149, 149, 146, 146, 147, 147, 148,
	148, 148, 144, 144, 144, 145, 145, 145, 155, 155,
	173, 173, 172, 172, 172, 172, 163, 163, 169, 169,
	169, 169, 169, 169, 169, 162, 162, 171, 171, 170,
	157, 157, 157, 157, 157, 158, 159, 159, 159, 159,
	156, 192, 192, 192, 160, 160, 161, 161, 166, 166,
	166, 167, 167, 167, 168, 168, 168, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 182,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	198, 198, 199, 199, 199, 199, 199, 199, 199, 176,
	174, 174, 175, 175, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 200, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 89, 91, 91, 42, 42, 42, 42, 43,
	43, 44, 44, 45, 45, 126, 126, 125, 125, 125,
	124, 124, 47, 47, 47, 49, 48, 48, 48, 48,
	50, 50, 52, 52, 51, 51, 54, 54, 54, 54,
	55, 55, 37, 37, 37, 37, 37, 37, 37, 103,
	103, 57, 57, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 67, 67, 67, 67, 67, 67, 58,
	58, 58, 58, 58, 58, 58, 33, 33, 68, 68,
	68, 74, 69, 69, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 65, 65, 65, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 201, 201, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 129, 129, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	133, 133, 133, 133, 133, 133, 133, 78, 78, 32,
	32, 76, 76, 77, 79, 79, 75, 75, 75, 60,
	60, 60, 60, 60, 60, 60, 60, 62, 62, 62,
	80, 80, 81, 81, 82, 82, 83, 83, 84, 85,
	85, 85, 86, 86, 86, 86, 87, 87, 87, 59,
	59, 59, 59, 59, 59, 88, 88, 88, 88, 92,
	92, 70, 70, 72, 72, 71, 73, 93, 93, 97,
	94, 94, 98, 98, 98, 96, 96, 96, 121, 121,
	121, 101, 101, 109, 109, 110, 110, 102, 102, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 112, 113, 113, 116, 116, 117, 117, 122, 122,
	123, 123, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	195, 196, 127, 128, 128, 128,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 3, 3, 4, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 5,
	8, 7, 1, 2, 0, 4, 3, 4, 3, 3,
	3, 3, 3, 3, 3, 2, 4, 6, 2, 3,
	2, 3, 1, 0, 2, 0, 3, 3, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 3, 2, 2, 2, 2, 1, 3,
	3, 2, 1, 1, 1, 4, 4, 4, 5, 2,
	2, 3, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 6, 6, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 3, 0, 5, 0,
	3, 5, 0, 3, 3, 0, 1, 0, 1, 0,
	2, 1, 0, 3, 3, 0, 1, 2, 5, 4,
	1, 2, 2, 3, 2, 3, 0, 1, 2, 3,
	3, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	1, 4, 4, 7, 7, 13, 1, 1, 2, 2,
	8, 0, 1, 1, 0, 1, 1, 3, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 11, 13,
	7, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 1, 3, 1, 3, 4, 4, 4, 3, 2,
	4, 0, 1, 0, 2, 0, 1, 0, 1, 2,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 0, 5, 5, 5,
	0, 2, 1, 3, 3, 2, 3, 1, 2, 0,
	3, 1, 1, 3, 3, 4, 4, 5, 3, 4,
	5, 6, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
	3, 3, 1, 1, 1, 1, 4, 5, 6, 4,
	4, 6, 6, 6, 6, 8, 8, 6, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 1, 2, 1, 2, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -193, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -195, 8, 259,
	52, -194, 291, -82, 15, -26, 5, -24, -200, -24,
	-24, -24, -24, -24, -164, 52, -120, -188, 150, 251,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 251, 117, 118, -51, -122, 55, -115, 157,
	268, 20, 163, 176, 177, 168, 202, 192, 269, 155,
	189, 193, 238, 290, 64, 166, 247, 126, 161, 138,
	187, 183, 180, 27, 208, 275, 182, 129, 209, 213,
	239, 266, 173, 174, 241, 206, 31, 131, 270, 33,
	146, 242, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 237, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 274, 243, 179, 145,
	159, 140, 246, 154, 167, 240, 175, 249, 36, 223,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 248, 224, 276, 196, 194,
	190, 191, 153, 120, 150, 151, 230, 231, 232, 233,
	271, 272, 244, 188, 225, 226, 118, 105, 193, 111,
	228, 119, 31, 148, -131, 118, -104, 151, 230, 231,
	232, 233, 55, 240, 239, 234, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -195,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -195, 42, 43, 260,
	261, 262, 263, 267, 264, 74, 32, 250, 258, 257,
	256, 254, 255, 252, 253, 289, 123, 251, 100, 259,
	-102, -39, -40, -41, -42, -53, -74, -195, -51, 11,
	-46, -51, -94, -130, 165, -98, 240, 239, -117, -96,
	-116, -114, 238, 193, 237, 55, -115, 116, 278, 70,
	22, 24, 221, 227, 73, 105, 16, 74, 287, 288,
	104, 260, 111, 46, 252, 253, 250, 262, 263, 251,
	228, 28, 10, 25, 136, 21, 98, 113, 77, 78,
	139, 23, 137, 68, 19, 49, 130, 11, 277, 13,
	14, 279, 123, 122, 89, 119, 44, 8, 107, 26,
	86, 40, 134, 42, 87, 17, 254, 255, 30, 267,
	143, 100, 47, 34, 71, 66, 50, 245, 69, 15,
	45, 132, 88, 114, 259, 43, 117, 6, 265, 29,
	135, 41, 118, 229, 76, 121, 67, 5, 133, 9,
	48, 51, 256, 257, 258, 32, 75, 12, -165, -153,
	55, 119, 120, -116, -110, 123, -110, -116, -110, 259,
	118, -51, -51, -109, 123, 55, -109, -109, -109, -51,
	108, -51, 55, 29, 251, 55, 148, 118, 149, 120,
	-128, -195, -117, -128, -128, -128, 152, 153, -128, -105,
	235, 50, -128, -196, 54, -87, 19, 30, -37, -122,
	-83, -84, -37, -82, -2, -24, 34, -28, 21, 63,
	11, -119, 70, 69, 86, -118, 22, -116, 57, 108,
	-37, -58, 89, 71, 87, 88, 73, 91, 90, 101,
	94, 95, 96, 97, 98, 99, 100, 92, 93, 104,
	289, 79, 80, 81, 82, 83, 84, 85, -103, -195,
	-74, -195, 109, 110, -61, -61, -61, -61, -61, -61,
	-61, -195, -2, -69, -37, -195, -195, -195, -195, -195,
	-195, -195, -195, -195, -78, -37, -195, -201, -195, -201,
	-201, -201, -201, -201, -201, -201, -133, 105, 193, 138,
	187, -136, -135, 197, 168, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 192, 269, -195, -195, -195, -195,
	-52, 26, -51, 29, 53, -47, -49, -48, -50, 40,
	44, 46, 41, 42, 43, 47, -126, 22, -39, -195,
	-125, 144, -124, 22, -122, 57, -51, -46, -197, 53,
	11, 51, 53, -94, 165, -95, -99, 241, 243, 79,
	-121, -116, 57, 28, 29, 54, 53, -154, -134, -138,
	-135, -140, -139, -141, -136, -137, 189, 193, 190, 105,
	194, 197, 198, 199, 200, 201, 202, 203, 204, 205,
	206, 207, 196, 208, 29, 138, 185, 186, 187, 188,
	209, 210, 211, 212, 213, 214, 215, 216, 179, 180,
	182, 183, 184, -116, -51, -181, 51, 55, 71, 55,
	50, -51, -51, 245, -128, 121, -51, 23, 50, -51,
	55, 55, -123, -122, -114, -128, -128, -128, -128, -128,
	-128, -128, -128, -128, -128, -107, 229, 236, -51, 9,
	89, 53, 18, 108, 53, -85, 24, 25, -86, -196,
	-30, -62, -116, 58, 61, -29, 41, -51, -37, -37,
	-67, 66, 71, 67, 68, -118, 96, -123, -117, -114,
	-61, -68, -71, -74, 62, 89, 87, 88, 73, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -129, 55, 57, -133, 55, -60,
	-60, -116, -35, 21, -34, -36, -196, 53, -196, -2,
	-34, -34, -37, -37, -75, -116, -122, -75, -34, -28,
	-76, -77, 75, -75, -196, 191, -34, -35, -34, -34,
	-90, 144, -51, -93, -97, -75, -40, -41, -41, -40,
	-41, 40, 40, 40, 45, 40, 45, 40, -48, -122,
	-196, -54, 48, 122, 49, -195, -124, -90, 51, -39,
	-51, -98, -95, 53, 242, 244, 245, 50, -37, -145,
	105, 104, -166, -167, -168, -117, 57, 58, -153, -155,
	-157, -156, -169, -158, 126, 124, 128, 129, 133, -162,
	119, 134, 66, 71, 28, 50, 221, 227, 124, 134,
	133, 290, 64, 127, 277, 279, -148, 292, 217, -146,
	224, -142, 52, -142, -142, 191, -142, -142, -142, -144,
	193, -144, -144, -144, -144, 52, 52, -142, -142, -142,
	-150, 52, 181, -150, -150, -151, 52, -151, 50, 51,
	22, -179, 271, -180, 55, -128, 23, -128, -51, -111,
	116, 113, 114, -176, 112, 221, 193, 64, 28, 15,
	260, 144, 276, 55, 145, -51, -51, -51, -128, -106,
	11, 89, 36, -37, -37, -123, -84, -87, -101, 19,
	11, 32, 32, -34, 66, 67, 68, 108, -195, -68,
	-61, -61, -61, -33, 139, 70, -196, -196, -34, 53,
	-37, -196, -196, -196, 53, 51, 22, 53, 11, 108,
	53, 11, -196, -34, -79, -77, 77, -37, -196, -196,
	-196, -196, -196, -59, 29, 32, -2, -195, -195, -55,
	53, 12, 79, -44, -43, 50, 51, -45, 50, -43,
	40, 40, 119, 119, 119, -91, -116, -55, -39, -55,
	-99, -100, 246, 243, 249, 55, 53, -168, 79, 52,
	50, -160, -116, 134, -162, -162, 55, -162, 55, 55,
	66, 57, 58, 59, 66, -143, 65, -57, 218, 250,
	253, 252, 9, 134, 134, -195, 57, -122, -190, 278,
	16, 52, 293, -147, 225, 58, -144, -144, -142, -144,
	-145, 29, -145, -145, -145, -145, -152, 57, -152, -149,
	271, 272, -149, 58, -150, 58, -51, -116, -2, -178,
	-177, -117, -183, 22, -127, -120, -199, 150, 125, 130,
	129, 55, 124, 128, 144, -182, 150, 125, 126, 130,
	129, 55, 119, 134, 124, 128, 144, 133, -112, -113,
	121, 22, 119, 134, 144, 116, -128, -108, 87, 12,
	-122, -122, 37, 108, -51, -38, 11, 96, -117, -35,
	-33, 70, -61, -61, -196, -36, -132, 105, 189, 138,
	187, 183, 206, 207, 195, 223, 185, 224, -129, -132,
	-61, -61, -117, -61, -61, 268, -82, 78, -37, 76,
	-92, 50, -93, -70, -72, -71, -195, -2, -88, -116,
	-91, -82, -97, -37, -37, -37, 52, -37, -195, -195,
	-195, -196, 53, -82, -55, 243, 247, 248, -167, -168,
	-171, -170, -116, 10, 9, 130, 124, 55, 55, 55,
	-185, 289, -195, -142, 52, -142, 52, -143, -37, 52,
	22, 28, 58, 54, -145, -145, -144, -145, 55, 105,
	54, 53, 54, 185, 185, 53, 54, 53, 52, 51,
	50, 53, 79, -184, 19, 158, 159, -198, 119, 134,
	-127, -116, -127, -116, -51, -127, -116, 126, -157, 57,
	-37, -55, -39, -196, -61, -196, -142, -142, -142, -151,
	-142, 174, -142, 174, -196, -196, -196, 53, 19, -196,
	53, 19, -195, -32, 265, -37, 27, -92, 53, -196,
	-196, -196, 53, 108, -196, -86, -89, -116, 134, -89,
	-89, -89, -125, -116, -86, 54, 53, -142, -159, 154,
	155, 29, 156, -159, 134, 134, 193, 186, 219, 197,
	-196, 54, 54, -196, -89, 279, 53, -145, -144, 57,
	-144, 226, 226, 58, 58, -89, -116, -51, -177, -168,
	121, 20, 6, 8, 9, 10, -116, 52, 26, -116,
	-80, 13, -144, 55, -61, -61, -61, -61, -61, -196,
	57, 134, -72, 32, -2, -195, -116, -116, 53, 54,
	-196, -196, -196, -54, -173, -172, 51, 131, 64, 271,
	-170, 50, 66, 157, 50, -160, -116, -192, 287, 288,
	191, -149, -189, 156, 54, 52, 58, -145, -145, 54,
	54, 54, 52, 52, -161, -116, 52, -89, -195, 124,
	-81, 14, 16, -196, -196, -196, -196, -31, 89, 271,
	9, -70, -2, 108, -116, -172, 55, -163, 79, 57,
	273, 9, 10, 52, 52, 266, -191, 54, -55, -89,
	-89, -186, 53, 51, -89, 54, -174, -175, 144, 134,
	-37, -69, -196, 269, 47, 274, -93, -196, -116, 58,
	-116, -159, -159, -161, -171, 54, 164, 281, 282, 143,
	283, 156, 284, 285, 54, 54, -187, 271, -116, -37,
	54, -181, -196, 53, -116, 52, 37, 270, 275, 54,
	54, 271, 58, 16, 58, 58, 58, 58, 282, 143,
	284, 16, -55, 290, -179, -175, 32, -89, 37, 127,
	58, 58, 286, -122, -37, 146, 54, 271, -51, 108,
	147, 274, 52, -117, -195, 275, -161, -61, 143, 54,
	-196, -196,
}

var yyDef = [...]int{
	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 624, 0, 382, 382, 382, 382, 382, 382, 0,
	-2, 677, 0, 0, 0, 0, -2, 372, 373, 0,
	375, 376, 922, 922, 922, 922, 922, 0, 33, 34,
	920, 1, 3, 632, 0, 0, 386, 389, 384, 0,
	677, 0, 0, 0, 60, 0, 0, 0, 0, 675,
	675, 0, 675, 83, 0, 0, 0, 678, 0, 673,
	0, 673, 673, 673, 0, 331, 454, 698, 699, 803,
	804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 0, 0, 0, 0,
	923, 923, 923, 923, 0, 923, 360, 349, 351, 352,
	353, 354, 923, 369, 370, 359, 371, 374, 377, 378,
	379, 380, 381, 27, 636, 0, 0, 624, 29, 0,
	382, 387, 388, 392, 390, 391, 383, 0, 400, 404,
	0, 462, 0, 467, 469, -2, -2, 0, 504, 505,
	506, 507, 508, 0, 0, 0, 0, 0, 0, 0,
	532, 533, 534, 535, 609, 610, 611, 612, 613, 614,
	615, 616, 471, 472, 606, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 563, 563, 563,
	563, 563, 563, 563, 563, 0, 0, 0, 0, 0,
	0, 0, 411, 413, 414, 415, 435, 0, 437, 0,
	0, 41, 45, 0, 896, 660, -2, -2, 0, 0,
	696, 697, -2, 815, -2, 694, 695, 702, 703, 704,
	705, 706, 707, 708, 709, 710, 711, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 0, 96,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 93,
	0, 923, 0, 0, 0, 0, 0, 0, 0, 330,
	0, 332, 923, 923, 923, 923, 923, 923, 923, 923,
	341, 924, 925, 342, 343, 344, 923, 923, 346, 0,
	361, 0, 355, 28, 921, 22, 0, 0, 633, 0,
	625, 626, 629, 632, 27, 389, 0, 394, 393, 385,
	0, 401, 0, 0, 0, 405, 0, 407, 408, 0,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 489, 490, 491, 492, 493, 494, 495, 468, 0,
	482, 0, 0, 0, 524, 525, 526, 527, 528, 529,
	0, 396, 27, 0, 502, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 0, 598, 0, 554, 0, 555,
	556, 557, 558, 559, 560, 561, 562, 590, 0, 592,
	593, 594, 595, 596, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 183, 184, 0, 396, 0, 0,
	43, 0, 453, 0, 0, 0, 0, 0, 0, 442,
	0, 0, 445, 0, 0, 0, 0, 436, 0, 0,
	456, 863, 438, 0, 440, 441, -2, 0, 0, 0,
	39, 40, 0, 46, 896, 48, 49, 0, 0, 0,
	235, 668, 669, 670, 666, 278, 0, 101, 229, 225,
	103, 104, 105, 106, 215, 161, 215, 215, 215, 215,
	215, 232, 232, 232, 232, 232, 196, 197, 198, 199,
	200, 201, 202, 0, 0, 178, 215, 215, 215, 182,
	205, 206, 207, 208, 209, 210, 211, 212, 217, 217,
	217, 219, 219, 0, 0, 87, 0, 923, 0, 923,
	0, 94, 0, 0, 297, 0, 325, 674, 0, 923,
	328, 329, 455, 700, 701, 333, 334, 335, 336, 337,
	338, 339, 340, 345, 348, 362, 356, 357, 350, 637,
	0, 0, 0, 0, 0, 628, 630, 631, 636, 30,
	392, 0, 617, 0, 0, 0, 395, 25, 463, 464,
	466, 483, 0, 485, 487, 406, 402, 0, 607, -2,
	473, 474, 498, 499, 500, 0, 0, 0, 0, 496,
	478, 0, 509, 510, 511, 512, 513, 514, 515, 516,
	517, 518, 519, 520, 523, 574, 575, 531, 0, 521,
	522, 530, 0, 0, 397, 398, 501, 0, 655, 27,
	0, 0, 0, 0, 0, 606, 0, 0, 0, 0,
	604, 601, 0, 0, 564, 591, 0, 0, 0, 0,
	0, 0, 452, 460, 657, 0, 412, 431, 433, 0,
	428, 443, 444, 446, 0, 448, 0, 450, 451, 416,
	417, 418, 0, 0, 0, 0, 439, 460, 0, 460,
	42, 661, 47, 0, 0, 52, 53, 662, 663, 664,
	236, 0, 95, 279, 281, 284, 285, 286, 97, 98,
	99, 100, 0, 260, 274, 0, 0, 0, 0, 0,
	255, 256, 108, 0, 0, 0, 117, 118, 0, 120,
	122, 0, 0, 0, 0, 0, 107, 0, 231, 227,
	226, 160, 0, 232, 232, 215, 232, 189, 190, 235,
	0, 235, 235, 235, 235, 0, 0, 222, 222, 181,
	172, 0, 217, 174, 175, 176, 0, 177, 0, 0,
	0, 65, 0, 85, 86, 66, 676, 67, 69, 922,
	82, 0, 689, 298, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 0, 0, 324, 923, 327, 365,
	0, 0, 0, 634, 635, 0, 627, 23, 0, 671,
	672, 618, 619, 409, 484, 486, 488, 0, 396, 475,
	496, 479, 0, 476, 0, 0, 470, 536, 0, 0,
	503, -2, 539, 540, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 624, 0, 602, 0, 0, 553, 565,
	566, 567, 568, 649, 0, 0, -2, 0, 0, 624,
	0, 0, 0, 425, 432, 0, 0, 426, 0, 427,
	447, 449, 0, 0, 0, 0, 423, 624, 460, 38,
	50, 51, 0, 0, 57, 237, 0, 282, 0, 0,
	0, 0, 275, 248, 0, 0, 251, 0, 253, 254,
	109, 155, 111, 112, 113, 114, 115, 125, 0, 215,
	215, 152, 0, 119, 121, 0, 124, 127, 0, 132,
	0, 0, 230, 102, 228, 0, 235, 235, 232, 235,
	191, 0, 192, 193, 194, 195, 0, 213, 0, 179,
	0, 0, 180, 0, 173, 0, 0, 0, -2, 88,
	89, 0, 72, 0, 287, 0, 922, 0, 312, 313,
	314, 315, 316, 317, 318, 922, 0, 299, 300, 301,
	302, 303, 304, 305, 306, 307, 308, 309, 0, 922,
	690, 691, 692, 693, 0, 0, 326, 347, 0, 0,
	363, 364, 638, 0, 24, 460, 0, 403, 608, 0,
	477, 0, 497, 480, 537, 399, 0, 215, 215, 579,
	215, 219, 582, 583, 215, 585, 215, 588, 0, 0,
	0, 0, 607, 0, 0, 0, 599, 552, 605, 0,
	31, 0, 649, 639, 651, 653, 0, 27, 0, 645,
	0, 632, 658, 461, 659, 429, 0, 434, 0, 0,
	0, 437, 0, 632, 37, 54, 55, 56, 280, 283,
	0, 257, 215, 0, 0, 0, 0, 249, 250, 252,
	110, 0, 0, 148, 0, 150, 0, 116, 0, 0,
	0, 133, 0, 216, 185, 186, 235, 187, 233, 234,
	232, 0, 232, 0, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 71, 0, 310, 311,
	291, 0, 292, 294, 295, 296, 0, 274, 290, 366,
	367, 620, 410, 538, 481, 541, 576, 232, 580, 581,
	584, 586, 587, 589, 543, 542, 544, 0, 0, 547,
	0, 0, 0, 0, 0, 603, 0, 32, 0, 654,
	-2, 0, 0, 0, 44, 35, 0, 420, 421, 0,
	0, 0, 456, 424, 36, 239, 0, 259, 261, 266,
	267, 0, 0, 262, 274, 271, 0, 222, 158, 159,
	126, 149, 151, 153, 0, 129, 0, 188, 235, 214,
	235, 223, 224, 0, 0, 0, 0, 0, 90, 91,
	0, 73, 74, 75, 76, 77, 0, 0, 0, 275,
	622, 0, 577, 578, 0, 0, 0, 0, 569, 551,
	600, 0, 652, 0, -2, 0, 647, 646, 0, 430,
	457, 458, 459, 419, 238, 240, 0, 246, 0, 0,
	258, 0, 268, 269, 0, 0, 275, 0, 272, 273,
	156, 157, 123, 0, 128, 134, 0, 203, 204, 218,
	221, 460, 0, 0, 78, 276, 0, 0, 0, 0,
	26, 0, 0, 545, 546, 548, 549, 0, 0, 0,
	0, 642, 27, 0, 422, 241, 242, 0, 247, 244,
	0, 0, 0, 0, 0, 154, 0, 131, 61, 0,
	0, 80, 0, 0, 0, 84, 0, 320, 0, 0,
	623, 621, 550, 0, 0, 0, 650, -2, 648, 243,
	245, 263, 264, 0, 0, 130, 0, 0, 0, 0,
	0, 0, 145, 0, 460, 62, 68, 0, 277, 79,
	288, 87, 319, 0, 0, 0, 570, 0, 573, 0,
	270, 0, 136, 0, 138, 139, 140, 141, 142, 143,
	144, 0, 63, 0, 293, 321, 0, 0, 571, 0,
	135, 137, 146, 0, 81, 0, 289, 0, 0, 0,
	0, 0, 0, 147, 0, 572, 0, 0, 0, 265,
	322, 323,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 291,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:332
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:337
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:338
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:342
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:365
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:373
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:377
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:383
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:390
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:396
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:400
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:406
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:410
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:417
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:429
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:441
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:445
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:451
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:457
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:461
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:465
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:470
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:471
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:475
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:479
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:484
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:488
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:494
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:498
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:502
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:506
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:512
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:516
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:522
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:526
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:530
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:536
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:540
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:544
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:548
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:554
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:558
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:564
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sqlparser/parser.y:569
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:585
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:600
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:615
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:623
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:631
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:635
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:639
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:651
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:655
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:659
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:664
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:668
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:672
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:676
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:680
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:684
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:689
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:693
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:698
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:702
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:707
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:711
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:716
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:720
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:726
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:731
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:736
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:742
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:747
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:753
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:758
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:762
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:768
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:775
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:782
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:787
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:791
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:795
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:799
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:805
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:810
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:821
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:833
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:838
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:843
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:848
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:853
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:858
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:863
		{
			yyDollar[1].columnType.Default = yyDollar[3].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:868
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:873
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:878
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:883
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:888
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:893
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:898
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:903
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:908
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:914
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:919
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:924
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:929
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:934
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:940
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:946
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:952
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Sequence: &Sequence{StartWith: NewIntVal(yyDollar[4].bytes), IncrementBy: NewIntVal(yyDollar[6].bytes)}}
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:959
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:963
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:968
		{
			yyVAL.sequence = &Sequence{}
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:972
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:977
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:982
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:987
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:992
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:997
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1002
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1007
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1012
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1017
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1022
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1027
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1032
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1039
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1043
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1047
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1051
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1055
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1060
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1064
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1069
		{
			yyVAL.bytes = nil
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1079
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1084
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1106
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1110
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1118
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1122
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1144
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1156
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1170
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1174
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1192
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1196
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1206
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1210
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1214
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1254
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1258
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1262
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1266
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1270
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1274
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1279
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1293
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1297
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1301
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1305
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1309
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1313
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1319
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1324
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1329
		{
			yyVAL.optVal = nil
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1333
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1338
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1342
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1350
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1354
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1360
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1368
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1372
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1376
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1381
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1385
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1390
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1394
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1399
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1403
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1407
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1412
		{
			yyVAL.str = ""
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1416
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1420
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1425
		{
			yyVAL.str = ""
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1429
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1433
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1439
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1443
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1449
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1453
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1459
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1463
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1468
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1472
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1478
		{
			yyVAL.str = ""
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1482
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1488
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1492
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1496
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1500
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1504
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1508
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1512
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1518
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1522
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1528
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1532
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1538
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1545
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1551
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 263:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1557
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1563
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 265:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1571
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1583
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1587
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1591
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1595
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 270:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1601
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true, Clustered: yyDollar[5].boolVal},
				Columns: yyDollar[7].indexColumns,
			}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1609
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1613
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1617
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1622
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1629
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1633
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1638
		{
			yyVAL.str = ""
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1642
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1646
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1654
		{
			yyVAL.str = yyDollar[1].str
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1658
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1662
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1668
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1672
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1676
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1682
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sqlparser/parser.y:1686
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 289:
		yyDollar = yyS[yypt-13 : yypt+1]
//line sqlparser/parser.y:1700
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1714
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1723
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1727
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 293:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sqlparser/parser.y:1731
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1744
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 295:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1754
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1759
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1764
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1768
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 319:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:1800
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1806
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1810
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 322:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1816
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 323:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:1820
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 324:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1826
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1832
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 326:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1840
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 327:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:1845
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1853
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1857
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1863
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1867
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1872
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1878
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1882
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1886
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1891
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1895
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1899
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1903
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1907
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1911
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1915
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1919
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1923
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1927
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1931
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:1935
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1945
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1949
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 350:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:1953
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1957
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1961
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1965
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:1969
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:1979
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1985
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1989
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:1995
		{
			yyVAL.str = ""
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:1999
		{
			yyVAL.str = "extended "
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2005
		{
			yyVAL.str = ""
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2009
		{
			yyVAL.str = "full "
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2015
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2019
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2023
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2029
		{
			yyVAL.showFilter = nil
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2033
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2037
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2043
		{
			yyVAL.str = ""
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2047
		{
			yyVAL.str = SessionStr
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2051
		{
			yyVAL.str = GlobalStr
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2057
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2061
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2067
		{
			yyVAL.statement = &Begin{}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2071
		{
			yyVAL.statement = &Begin{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2077
		{
			yyVAL.statement = &Commit{}
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2083
		{
			yyVAL.statement = &Rollback{}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2089
		{
			yyVAL.statement = &OtherRead{}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2093
		{
			yyVAL.statement = &OtherRead{}
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2097
		{
			yyVAL.statement = &OtherRead{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2101
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2105
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2110
		{
			setAllowComments(yylex, true)
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2114
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2120
		{
			yyVAL.bytes2 = nil
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2124
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2130
		{
			yyVAL.str = UnionStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2134
		{
			yyVAL.str = UnionAllStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2138
		{
			yyVAL.str = UnionDistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2143
		{
			yyVAL.str = ""
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2147
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2151
		{
			yyVAL.str = SQLCacheStr
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2156
		{
			yyVAL.str = ""
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2160
		{
			yyVAL.str = DistinctStr
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2165
		{
			yyVAL.str = ""
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2169
		{
			yyVAL.str = StraightJoinHint
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2174
		{
			yyVAL.selectExprs = nil
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2178
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2184
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2188
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2194
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2198
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2202
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2206
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2211
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2215
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2219
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2226
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 409:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2231
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2235
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2241
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2245
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2255
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2259
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2263
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2269
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2273
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2279
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2284
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2288
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2294
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2298
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2311
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2315
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2319
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2323
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2329
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2331
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2335
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2337
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 433:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2341
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2343
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2346
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2348
		{
			yyVAL.empty = struct{}{}
		}
	case 437:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2351
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2355
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2359
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2366
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2372
		{
			yyVAL.str = JoinStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2376
		{
			yyVAL.str = JoinStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2380
		{
			yyVAL.str = JoinStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2386
		{
			yyVAL.str = StraightJoinStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2392
		{
			yyVAL.str = LeftJoinStr
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2396
		{
			yyVAL.str = LeftJoinStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2400
		{
			yyVAL.str = RightJoinStr
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2404
		{
			yyVAL.str = RightJoinStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2410
		{
			yyVAL.str = NaturalJoinStr
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2414
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2424
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2428
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2434
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2438
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2443
		{
			yyVAL.indexHints = nil
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2447
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2451
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2455
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2460
		{
			yyVAL.expr = nil
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2464
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2470
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2474
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2478
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2482
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2486
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2490
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2494
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2500
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2504
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2510
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2514
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2520
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2524
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2528
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2532
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 477:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2536
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2540
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2544
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 480:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2548
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2552
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2556
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2562
		{
			yyVAL.str = IsNullStr
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2566
		{
			yyVAL.str = IsNotNullStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2570
		{
			yyVAL.str = IsTrueStr
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2574
		{
			yyVAL.str = IsNotTrueStr
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2578
		{
			yyVAL.str = IsFalseStr
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2582
		{
			yyVAL.str = IsNotFalseStr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2588
		{
			yyVAL.str = EqualStr
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2592
		{
			yyVAL.str = LessThanStr
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2596
		{
			yyVAL.str = GreaterThanStr
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2600
		{
			yyVAL.str = LessEqualStr
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2604
		{
			yyVAL.str = GreaterEqualStr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2608
		{
			yyVAL.str = NotEqualStr
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2612
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2617
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2621
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2627
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2631
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2635
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2641
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2647
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2651
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2657
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2661
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2665
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2669
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2673
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2677
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2681
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2685
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2689
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2693
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2697
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2701
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2705
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2709
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2713
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2733
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2737
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2741
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2745
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2753
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2767
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2771
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2775
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 531:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2783
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2797
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2801
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2805
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2823
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2827
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2831
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 544:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2835
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2839
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2843
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:2847
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2851
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sqlparser/parser.y:2855
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 550:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sqlparser/parser.y:2859
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 551:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2863
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 552:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:2867
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 553:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2871
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2885
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2893
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2898
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2903
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2908
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2913
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2917
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2931
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2935
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2939
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2943
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:2949
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2953
		{
			yyVAL.str = BooleanModeStr
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:2957
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 572:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sqlparser/parser.y:2961
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2965
		{
			yyVAL.str = QueryExpansionStr
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2971
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2975
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2981
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2985
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:2989
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:2993
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:2997
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3001
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3007
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3011
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3015
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3019
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3023
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3027
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3031
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3035
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3041
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3045
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3049
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3053
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3057
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3061
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3065
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3070
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3074
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3079
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3083
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3089
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3093
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3099
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3104
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3108
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3114
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3118
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3122
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3128
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3132
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3136
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3140
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3144
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3148
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3152
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3156
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3162
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3171
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3175
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3180
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3184
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3189
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3193
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3198
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3202
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3208
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3212
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3218
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3223
		{
			yyVAL.str = AscScr
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3227
		{
			yyVAL.str = AscScr
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3231
		{
			yyVAL.str = DescScr
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3236
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3240
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3244
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3248
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3253
		{
			yyVAL.str = ""
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3257
		{
			yyVAL.str = ForUpdateStr
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3261
		{
			yyVAL.str = ShareModeStr
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3274
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3278
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3282
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3287
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 643:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sqlparser/parser.y:3291
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sqlparser/parser.y:3295
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3302
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3306
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3310
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3314
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3319
		{
			yyVAL.updateExprs = nil
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sqlparser/parser.y:3323
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3329
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3333
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3339
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3343
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3349
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3355
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3365
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3369
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3375
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3381
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3385
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3391
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3395
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3399
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3406
		{
			yyVAL.bytes = []byte("charset")
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3413
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3417
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3421
		{
			yyVAL.expr = &Default{}
		}
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3430
		{
			yyVAL.byt = 0
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sqlparser/parser.y:3432
		{
			yyVAL.byt = 1
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3435
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sqlparser/parser.y:3437
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3440
		{
			yyVAL.str = ""
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3442
		{
			yyVAL.str = IgnoreStr
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3446
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3448
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3450
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3452
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3454
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3456
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3458
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3460
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3462
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3464
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3467
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3469
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3471
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3475
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3477
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3481
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3485
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3492
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3498
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 699:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3502
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3509
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3753
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3762
		{
			decNesting(yylex)
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3767
		{
			forceEOF(yylex)
		}
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sqlparser/parser.y:3772
		{
			forceEOF(yylex)
		}
	case 924:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3776
		{
			forceEOF(yylex)
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sqlparser/parser.y:3780
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
