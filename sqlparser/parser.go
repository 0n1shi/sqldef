// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
	sequence             *Sequence
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const POLICY = 57457
const UNIQUE = 57458
const KEY = 57459
const SHOW = 57460
const DESCRIBE = 57461
const EXPLAIN = 57462
const DATE = 57463
const ESCAPE = 57464
const REPAIR = 57465
const OPTIMIZE = 57466
const TRUNCATE = 57467
const MAXVALUE = 57468
const PARTITION = 57469
const REORGANIZE = 57470
const LESS = 57471
const THAN = 57472
const PROCEDURE = 57473
const TRIGGER = 57474
const VINDEX = 57475
const VINDEXES = 57476
const STATUS = 57477
const VARIABLES = 57478
const RESTRICT = 57479
const CASCADE = 57480
const NO = 57481
const ACTION = 57482
const PERMISSIVE = 57483
const RESTRICTIVE = 57484
const PUBLIC = 57485
const CURRENT_USER = 57486
const SESSION_USER = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const BIT = 57493
const TINYINT = 57494
const SMALLINT = 57495
const SMALLSERIAL = 57496
const MEDIUMINT = 57497
const INT = 57498
const INTEGER = 57499
const SERIAL = 57500
const BIGINT = 57501
const BIGSERIAL = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const PRECISION = 57506
const FLOAT_TYPE = 57507
const DECIMAL = 57508
const NUMERIC = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const VARYING = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const UUID = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const CITEXT = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const JSONB = 57532
const ENUM = 57533
const GEOMETRY = 57534
const POINT = 57535
const LINESTRING = 57536
const POLYGON = 57537
const GEOMETRYCOLLECTION = 57538
const MULTIPOINT = 57539
const MULTILINESTRING = 57540
const MULTIPOLYGON = 57541
const ARRAY = 57542
const NOW = 57543
const NULLX = 57544
const AUTO_INCREMENT = 57545
const APPROXNUM = 57546
const SIGNED = 57547
const UNSIGNED = 57548
const ZEROFILL = 57549
const ZONE = 57550
const AUTOINCREMENT = 57551
const DATABASES = 57552
const TABLES = 57553
const VITESS_KEYSPACES = 57554
const VITESS_SHARDS = 57555
const VITESS_TABLETS = 57556
const VSCHEMA_TABLES = 57557
const EXTENDED = 57558
const FULL = 57559
const PROCESSLIST = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const INHERIT = 57590
const MATCH = 57591
const AGAINST = 57592
const BOOLEAN = 57593
const LANGUAGE = 57594
const WITH = 57595
const WITHOUT = 57596
const PARSER = 57597
const QUERY = 57598
const EXPANSION = 57599
const UNUSED = 57600
const GENERATED = 57601
const ALWAYS = 57602
const IDENTITY = 57603
const SEQUENCE = 57604
const INCREMENT = 57605
const MINVALUE = 57606
const CACHE = 57607
const CYCLE = 57608
const OWNED = 57609
const NONE = 57610
const TYPECAST = 57611
const CHECK = 57612

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"POLICY",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"PERMISSIVE",
	"RESTRICTIVE",
	"PUBLIC",
	"CURRENT_USER",
	"SESSION_USER",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"CITEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NOW",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"AUTOINCREMENT",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"INHERIT",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"GENERATED",
	"ALWAYS",
	"IDENTITY",
	"SEQUENCE",
	"INCREMENT",
	"MINVALUE",
	"CACHE",
	"CYCLE",
	"OWNED",
	"NONE",
	"TYPECAST",
	"CHECK",
	"';'",
	"'['",
	"']'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 30,
	120, 92,
	-2, 82,
	-1, 36,
	152, 359,
	153, 359,
	-2, 349,
	-1, 255,
	108, 689,
	-2, 685,
	-1, 256,
	108, 690,
	-2, 686,
	-1, 326,
	79, 868,
	-2, 58,
	-1, 327,
	79, 823,
	-2, 59,
	-1, 332,
	79, 805,
	-2, 656,
	-1, 334,
	79, 845,
	-2, 658,
	-1, 624,
	51, 41,
	53, 41,
	-2, 43,
	-1, 757,
	108, 692,
	-2, 688,
	-1, 988,
	5, 28,
	-2, 492,
	-1, 1013,
	5, 27,
	-2, 631,
	-1, 1102,
	5, 27,
	-2, 64,
	-1, 1301,
	5, 28,
	-2, 632,
	-1, 1371,
	5, 27,
	-2, 634,
	-1, 1460,
	5, 28,
	-2, 635,
}

const yyPrivate = 57344

const yyLast = 12973

var yyAct = [...]int{

	256, 1450, 928, 1408, 693, 821, 551, 260, 1214, 1093,
	1382, 1319, 470, 1187, 1048, 1215, 839, 1104, 862, 1188,
	234, 1016, 868, 618, 1184, 285, 922, 1062, 861, 782,
	822, 66, 1307, 53, 262, 88, 616, 1032, 88, 550,
	3, 1160, 793, 980, 331, 259, 1090, 228, 634, 1021,
	790, 809, 906, 759, 483, 437, 633, 917, 620, 489,
	325, 857, 88, 88, 336, 818, 574, 495, 313, 336,
	258, 605, 336, 312, 962, 877, 328, 88, 503, 88,
	243, 322, 579, 580, 320, 88, 565, 233, 1076, 52,
	895, 229, 230, 231, 232, 511, 316, 514, 311, 1505,
	1225, 1333, 247, 529, 530, 531, 532, 533, 534, 535,
	1527, 512, 513, 510, 516, 515, 525, 526, 518, 519,
	520, 521, 522, 523, 524, 517, 1291, 482, 527, 1501,
	1491, 1422, 516, 515, 525, 526, 518, 519, 520, 521,
	522, 523, 524, 517, 1288, 482, 527, 516, 515, 525,
	526, 518, 519, 520, 521, 522, 523, 524, 517, 527,
	1523, 527, 894, 516, 515, 525, 526, 518, 519, 520,
	521, 522, 523, 524, 517, 1458, 1434, 527, 1094, 1095,
	1519, 516, 515, 525, 526, 518, 519, 520, 521, 522,
	523, 524, 517, 482, 517, 527, 981, 527, 1494, 1075,
	929, 1480, 1490, 1457, 1179, 1439, 1295, 88, 447, 1066,
	1209, 336, 336, 336, 336, 852, 336, 520, 521, 522,
	523, 524, 517, 336, 1292, 527, 1210, 1211, 478, 516,
	515, 525, 526, 518, 519, 520, 521, 522, 523, 524,
	517, 853, 854, 527, 1339, 83, 79, 80, 81, 635,
	336, 636, 516, 515, 525, 526, 518, 519, 520, 521,
	522, 523, 524, 517, 1383, 724, 527, 1500, 1338, 1502,
	1040, 491, 725, 1039, 1078, 897, 1041, 1385, 907, 492,
	518, 519, 520, 521, 522, 523, 524, 517, 57, 1289,
	527, 1395, 538, 792, 813, 516, 515, 525, 526, 518,
	519, 520, 521, 522, 523, 524, 517, 1245, 1360, 527,
	528, 88, 1423, 59, 60, 61, 62, 63, 88, 88,
	88, 1284, 1328, 1244, 336, 918, 1282, 1390, 528, 1327,
	336, 227, 1256, 1257, 1398, 1522, 328, 1517, 899, 474,
	475, 528, 1451, 528, 1384, 1138, 819, 284, 1055, 1452,
	1368, 1326, 316, 1325, 1069, 1068, 1050, 1219, 1259, 528,
	516, 515, 525, 526, 518, 519, 520, 521, 522, 523,
	524, 517, 1155, 1260, 527, 1511, 1268, 528, 82, 528,
	463, 1413, 1135, 840, 842, 567, 568, 569, 570, 571,
	572, 573, 516, 515, 525, 526, 518, 519, 520, 521,
	522, 523, 524, 517, 625, 631, 527, 528, 982, 1220,
	1493, 330, 878, 452, 1322, 443, 441, 77, 76, 445,
	77, 1468, 1347, 318, 1456, 528, 703, 879, 516, 515,
	525, 526, 518, 519, 520, 521, 522, 523, 524, 517,
	336, 88, 527, 465, 440, 467, 907, 88, 528, 88,
	336, 1053, 88, 1031, 919, 88, 1030, 841, 85, 88,
	1074, 336, 336, 336, 336, 336, 336, 336, 336, 878,
	286, 47, 528, 464, 466, 336, 336, 902, 1029, 1136,
	88, 1134, 439, 1386, 879, 1521, 321, 448, 206, 78,
	1139, 528, 540, 541, 1137, 336, 1427, 898, 1304, 88,
	449, 1147, 450, 712, 1239, 336, 996, 974, 457, 731,
	1472, 507, 736, 458, 957, 878, 859, 858, 47, 728,
	756, 652, 648, 1474, 1143, 502, 239, 1432, 766, 493,
	879, 1469, 317, 710, 734, 735, 760, 1253, 74, 1320,
	1321, 1323, 764, 765, 763, 761, 992, 1019, 991, 336,
	637, 1181, 757, 482, 1240, 500, 528, 810, 330, 330,
	330, 330, 696, 330, 501, 500, 802, 805, 501, 500,
	330, 502, 811, 1389, 738, 462, 497, 501, 500, 501,
	500, 502, 755, 753, 1183, 502, 70, 72, 528, 810,
	1057, 1003, 958, 797, 502, 785, 502, 505, 50, 1142,
	88, 71, 73, 88, 88, 88, 88, 88, 762, 823,
	1330, 787, 788, 75, 1079, 88, 501, 500, 88, 68,
	1513, 442, 88, 1512, 528, 1499, 1433, 88, 88, 807,
	459, 336, 1498, 502, 971, 972, 973, 316, 316, 316,
	316, 316, 1497, 328, 336, 1495, 815, 1470, 1471, 1473,
	1475, 1476, 316, 1462, 1341, 1340, 863, 797, 1058, 1059,
	1060, 316, 438, 847, 1099, 451, 1063, 1061, 282, 283,
	730, 330, 825, 826, 310, 828, 824, 639, 1097, 827,
	844, 469, 469, 469, 469, 836, 469, 1496, 1079, 850,
	845, 849, 444, 469, 446, 783, 336, 784, 336, 88,
	866, 1367, 88, 1336, 88, 729, 1270, 88, 336, 1017,
	47, 1091, 1071, 908, 909, 910, 911, 924, 1430, 69,
	1223, 501, 500, 1445, 1531, 537, 878, 21, 539, 1375,
	1518, 873, 1222, 872, 600, 874, 875, 993, 502, 1221,
	876, 879, 1056, 624, 756, 920, 921, 454, 455, 456,
	1042, 749, 751, 752, 931, 549, 750, 553, 554, 555,
	556, 557, 558, 559, 560, 561, 786, 564, 566, 566,
	566, 566, 566, 566, 566, 566, 757, 594, 595, 596,
	597, 1445, 1492, 238, 501, 500, 709, 691, 617, 760,
	708, 964, 963, 1486, 482, 482, 249, 330, 761, 1375,
	1483, 502, 1375, 1478, 1375, 1477, 1317, 1467, 330, 330,
	330, 330, 330, 330, 330, 330, 697, 976, 695, 1065,
	1375, 1448, 330, 330, 1115, 515, 525, 526, 518, 519,
	520, 521, 522, 523, 524, 517, 1375, 1405, 527, 1375,
	1399, 1404, 740, 460, 336, 1375, 482, 88, 798, 799,
	1066, 453, 505, 438, 806, 330, 1375, 1376, 1013, 1446,
	1002, 1445, 336, 1403, 692, 1317, 1316, 1034, 1185, 1036,
	699, 1017, 700, 336, 863, 704, 1234, 1026, 707, 795,
	1044, 316, 1299, 1035, 1206, 482, 1303, 482, 814, 602,
	816, 817, 88, 1116, 1112, 23, 789, 1117, 1114, 1113,
	1037, 1150, 73, 726, 1248, 1247, 803, 803, 1242, 1243,
	1242, 1241, 803, 1118, 986, 482, 602, 482, 1011, 1111,
	469, 1012, 745, 795, 482, 1096, 88, 336, 1064, 481,
	336, 469, 469, 469, 469, 469, 469, 469, 469, 644,
	643, 50, 1105, 986, 1252, 469, 469, 1250, 1249, 803,
	1051, 1052, 1054, 1080, 1081, 336, 1083, 1246, 88, 88,
	1092, 1018, 23, 628, 1043, 1018, 88, 1102, 1084, 1109,
	1086, 1087, 1088, 1089, 54, 336, 998, 1098, 330, 607,
	610, 611, 612, 608, 1108, 609, 613, 1152, 1370, 1022,
	1023, 330, 525, 526, 518, 519, 520, 521, 522, 523,
	524, 517, 602, 629, 527, 627, 1017, 601, 50, 1176,
	47, 846, 986, 627, 23, 336, 336, 1186, 997, 823,
	528, 1154, 1172, 820, 553, 823, 1153, 995, 851, 1159,
	986, 602, 486, 490, 1180, 1173, 630, 970, 1189, 732,
	240, 757, 50, 330, 336, 330, 336, 336, 1196, 508,
	1195, 848, 1524, 1194, 1191, 330, 863, 1208, 863, 1488,
	50, 1437, 1410, 1407, 1213, 1406, 1400, 1394, 1207, 994,
	1354, 899, 1212, 317, 317, 317, 317, 317, 923, 330,
	1231, 1228, 1200, 552, 918, 985, 50, 1046, 617, 913,
	843, 912, 563, 1022, 1023, 1229, 65, 317, 925, 926,
	1391, 1000, 694, 1388, 1251, 275, 274, 277, 278, 279,
	280, 1185, 336, 253, 276, 281, 1047, 1025, 706, 698,
	479, 336, 935, 833, 831, 952, 744, 953, 834, 832,
	954, 1028, 1027, 88, 835, 1237, 611, 612, 830, 336,
	829, 1510, 1235, 1236, 1489, 1238, 244, 245, 336, 1146,
	959, 88, 900, 901, 903, 904, 905, 496, 1261, 1508,
	1152, 969, 1269, 968, 484, 1233, 469, 1263, 469, 1085,
	494, 1272, 914, 915, 916, 485, 642, 461, 469, 1297,
	1355, 1266, 933, 705, 1232, 316, 528, 1273, 1107, 927,
	615, 1033, 1280, 607, 610, 611, 612, 608, 496, 609,
	613, 336, 967, 336, 336, 336, 88, 336, 1255, 330,
	966, 1298, 235, 336, 241, 242, 1306, 1503, 1416, 1349,
	1049, 1350, 1351, 1352, 236, 863, 54, 975, 1315, 1313,
	1324, 1044, 336, 1348, 1415, 1310, 1311, 1312, 1358, 1018,
	1218, 1217, 1435, 498, 1436, 1424, 1067, 727, 56, 58,
	336, 336, 88, 336, 336, 1110, 1258, 626, 51, 336,
	1, 1440, 1073, 1397, 1332, 1105, 863, 67, 1479, 336,
	1345, 1444, 1346, 1224, 1101, 1254, 1106, 330, 1119, 930,
	1103, 940, 1342, 1449, 1381, 870, 860, 436, 64, 1014,
	1015, 1431, 871, 869, 1335, 867, 1337, 746, 747, 1334,
	645, 468, 330, 893, 336, 336, 1077, 896, 651, 649,
	650, 647, 653, 646, 214, 323, 614, 317, 336, 1369,
	638, 499, 330, 1133, 1132, 1189, 336, 936, 1141, 723,
	1380, 1359, 956, 1387, 477, 216, 536, 965, 1396, 1038,
	1392, 329, 1371, 1192, 330, 733, 488, 1414, 336, 1100,
	552, 1357, 1001, 800, 801, 336, 562, 808, 261, 803,
	1070, 748, 1193, 1033, 273, 803, 270, 272, 271, 739,
	1010, 509, 251, 315, 598, 606, 336, 542, 543, 544,
	545, 546, 547, 548, 1425, 604, 603, 1411, 1024, 1148,
	1020, 330, 1429, 330, 1216, 336, 1189, 1401, 47, 1402,
	1082, 314, 1149, 1438, 1294, 1421, 743, 336, 336, 25,
	55, 336, 1426, 246, 19, 18, 17, 20, 16, 15,
	14, 29, 737, 1454, 13, 469, 12, 1441, 336, 11,
	1459, 10, 823, 9, 856, 336, 8, 7, 336, 1442,
	1443, 1466, 6, 1447, 946, 5, 336, 1464, 1465, 4,
	237, 22, 336, 1484, 2, 0, 0, 945, 0, 1262,
	0, 0, 0, 0, 0, 0, 0, 0, 1264, 0,
	487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	794, 796, 0, 1190, 950, 47, 1267, 1506, 1507, 336,
	0, 0, 0, 944, 0, 330, 812, 0, 0, 1504,
	1202, 1203, 1204, 0, 88, 86, 0, 1125, 226, 0,
	0, 0, 88, 471, 472, 473, 0, 476, 0, 0,
	0, 1509, 336, 0, 480, 336, 960, 961, 1528, 490,
	250, 0, 86, 86, 1525, 0, 1226, 0, 0, 0,
	0, 941, 938, 939, 0, 937, 838, 86, 1308, 86,
	1308, 1308, 1308, 0, 1314, 86, 1265, 0, 0, 0,
	330, 0, 0, 0, 1227, 0, 0, 0, 0, 0,
	0, 1126, 0, 948, 951, 0, 1128, 1121, 1122, 1308,
	1129, 1124, 1123, 0, 0, 1131, 1127, 0, 0, 0,
	0, 0, 987, 0, 0, 0, 1130, 1308, 1343, 0,
	330, 330, 1120, 0, 0, 0, 1353, 1004, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 317, 943, 758, 0, 0, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	1293, 1373, 1374, 0, 882, 0, 0, 0, 0, 1277,
	1278, 0, 1279, 0, 0, 1216, 1281, 0, 1283, 0,
	0, 0, 0, 1393, 0, 1344, 883, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 0,
	890, 0, 880, 0, 0, 1409, 0, 881, 0, 0,
	0, 0, 1308, 0, 949, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1318, 0, 983, 0, 0, 0,
	984, 0, 0, 1428, 0, 0, 0, 988, 989, 990,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 0,
	0, 1005, 1216, 0, 1006, 1007, 1008, 1009, 0, 0,
	886, 702, 0, 891, 1308, 1308, 0, 0, 1308, 888,
	887, 0, 713, 714, 715, 716, 717, 718, 719, 720,
	1190, 0, 803, 1372, 0, 1461, 721, 722, 0, 0,
	0, 86, 1463, 0, 0, 1409, 0, 0, 86, 622,
	86, 0, 0, 1481, 575, 0, 0, 0, 0, 1487,
	1182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1197, 1198, 0, 0, 1199,
	0, 0, 1201, 0, 0, 0, 1412, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 0, 0, 0,
	0, 1190, 0, 47, 212, 0, 884, 0, 0, 0,
	0, 0, 885, 0, 0, 0, 0, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 1230, 222, 330,
	0, 0, 1409, 0, 0, 0, 578, 0, 977, 978,
	979, 592, 576, 0, 0, 0, 581, 0, 0, 0,
	0, 0, 0, 1161, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 889, 0, 1158, 0, 86, 207, 86,
	0, 0, 86, 0, 209, 86, 1163, 0, 0, 711,
	0, 215, 211, 0, 0, 1520, 0, 0, 0, 0,
	1271, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 593, 0, 0,
	0, 213, 1205, 0, 217, 0, 0, 0, 0, 86,
	0, 1165, 0, 1170, 0, 1164, 0, 1162, 711, 0,
	1296, 0, 0, 1168, 0, 0, 0, 552, 0, 0,
	0, 0, 0, 1526, 1166, 1167, 0, 932, 0, 934,
	0, 0, 0, 0, 0, 0, 208, 0, 0, 955,
	1169, 1171, 0, 0, 0, 0, 0, 0, 0, 0,
	250, 0, 0, 0, 0, 250, 250, 0, 0, 804,
	804, 250, 0, 0, 0, 804, 0, 0, 0, 0,
	210, 0, 218, 219, 220, 221, 225, 0, 0, 0,
	0, 224, 223, 0, 0, 0, 0, 0, 0, 23,
	24, 48, 26, 27, 0, 250, 250, 250, 250, 0,
	86, 0, 804, 86, 86, 86, 86, 86, 42, 0,
	0, 0, 28, 1274, 0, 837, 0, 0, 86, 0,
	1276, 0, 622, 0, 0, 1156, 1157, 86, 86, 0,
	0, 37, 1285, 1286, 1287, 50, 0, 1290, 1174, 1175,
	0, 1177, 1178, 0, 0, 0, 0, 0, 0, 0,
	1300, 1301, 1302, 0, 1305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1329, 0, 0, 0,
	1331, 0, 0, 0, 30, 31, 33, 32, 35, 86,
	0, 0, 86, 0, 86, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 0, 0, 0,
	0, 0, 711, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 552, 250, 0, 38, 39, 0, 40,
	41, 0, 0, 0, 1366, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1377, 1378, 1379, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 250, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 0, 0, 250, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1417, 1418, 1419, 1420, 0, 0, 0, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1455, 0, 0, 672, 0, 1460, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 1361, 1362, 0, 1363, 1364, 1365, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 1145,
	657, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 250, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 250, 0, 1532,
	1533, 0, 0, 673, 0, 0, 0, 711, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 804, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 0, 686, 687, 0, 688, 689, 690,
	674, 675, 676, 677, 654, 656, 0, 592, 655, 658,
	0, 670, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 671, 678, 679, 680, 681, 682, 683,
	684, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 147, 0, 91, 791, 0, 257,
	0, 0, 0, 113, 254, 0, 0, 126, 296, 129,
	0, 86, 168, 138, 0, 0, 0, 0, 287, 288,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	1529, 255, 275, 274, 277, 278, 279, 280, 0, 0,
	104, 276, 281, 282, 283, 0, 0, 252, 268, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 0, 0,
	265, 266, 248, 0, 0, 0, 308, 0, 267, 0,
	0, 263, 264, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 306,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 86, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 297, 307, 303, 304, 301,
	302, 300, 299, 298, 309, 289, 290, 291, 292, 294,
	0, 121, 293, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 305, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 425, 415, 0, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 864, 865,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	1045, 0, 0, 0, 1515, 0, 0, 388, 392, 410,
	382, 0, 86, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 864, 865,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 1151, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 50, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 754, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 255, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 333, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 334, 332, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 632, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 333, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 334, 332, 120,
	165, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	0, 0, 0, 0, 0, 0, 425, 415, 103, 385,
	427, 360, 375, 435, 377, 378, 407, 346, 393, 147,
	372, 91, 363, 340, 369, 341, 361, 387, 113, 359,
	417, 396, 126, 433, 129, 401, 0, 168, 138, 0,
	0, 389, 419, 391, 413, 384, 408, 351, 400, 428,
	373, 404, 429, 0, 0, 0, 335, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 403, 424, 371,
	406, 339, 402, 0, 344, 347, 434, 422, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 388, 392, 410,
	382, 0, 0, 0, 0, 0, 0, 0, 0, 364,
	0, 399, 0, 0, 0, 348, 345, 0, 386, 0,
	0, 0, 350, 0, 365, 411, 0, 337, 414, 420,
	383, 193, 423, 381, 380, 154, 0, 107, 0, 172,
	117, 374, 127, 409, 426, 390, 418, 362, 370, 109,
	368, 161, 148, 184, 398, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 324, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 333, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 342, 0, 169, 186, 204, 205, 343, 358, 421,
	196, 197, 198, 199, 0, 0, 0, 334, 332, 327,
	326, 124, 131, 157, 202, 405, 162, 106, 185, 167,
	354, 357, 352, 353, 394, 395, 430, 431, 432, 412,
	349, 0, 355, 356, 0, 416, 121, 397, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 376, 338, 379,
	147, 0, 91, 0, 0, 257, 0, 0, 103, 113,
	254, 0, 0, 126, 296, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 287, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 482, 255, 275, 274,
	277, 278, 279, 280, 0, 0, 104, 276, 281, 282,
	283, 0, 0, 252, 268, 0, 295, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 265, 266, 0, 0,
	0, 0, 308, 0, 267, 0, 0, 263, 264, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 306, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 297, 307, 303, 304, 301, 302, 300, 299, 298,
	309, 289, 290, 291, 292, 294, 0, 121, 293, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 0, 0,
	0, 147, 0, 91, 0, 0, 257, 0, 305, 103,
	113, 254, 0, 0, 126, 296, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 255, 275,
	274, 277, 278, 279, 280, 0, 0, 104, 276, 281,
	282, 283, 0, 0, 252, 268, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 248,
	0, 0, 0, 308, 0, 267, 0, 0, 263, 264,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 306, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	0, 0, 147, 0, 91, 0, 0, 257, 0, 305,
	103, 113, 254, 0, 0, 126, 296, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 855, 0, 50, 0, 0, 255,
	275, 274, 277, 278, 279, 280, 0, 0, 104, 276,
	281, 282, 283, 0, 0, 252, 268, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	0, 0, 0, 0, 308, 0, 267, 0, 0, 263,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 306, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	305, 103, 147, 0, 91, 0, 0, 257, 0, 0,
	0, 113, 254, 0, 0, 126, 296, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 287, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 255,
	275, 274, 277, 278, 279, 280, 0, 0, 104, 276,
	281, 282, 283, 0, 0, 252, 268, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 265, 266,
	0, 0, 0, 0, 308, 0, 267, 0, 0, 263,
	264, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 306, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 0, 162,
	106, 185, 167, 297, 307, 303, 304, 301, 302, 300,
	299, 298, 309, 289, 290, 291, 292, 294, 0, 121,
	293, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	0, 0, 0, 147, 0, 91, 0, 0, 257, 0,
	305, 103, 113, 254, 0, 0, 126, 296, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 287, 288, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	255, 275, 274, 277, 278, 279, 280, 0, 0, 104,
	276, 281, 282, 283, 0, 0, 252, 268, 0, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 265,
	266, 0, 0, 0, 0, 308, 0, 267, 0, 0,
	263, 264, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 306, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 297, 307, 303, 304, 301, 302,
	300, 299, 298, 309, 289, 290, 291, 292, 294, 0,
	121, 293, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 305, 103, 0, 126, 296, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 287, 288, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 255, 275,
	274, 277, 278, 279, 280, 0, 0, 104, 276, 281,
	282, 283, 0, 0, 0, 268, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 265, 266, 0,
	0, 0, 0, 308, 0, 267, 0, 0, 263, 264,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 306, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 1530, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 297, 307, 303, 304, 301, 302, 300, 299,
	298, 309, 289, 290, 291, 292, 294, 0, 121, 293,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	0, 91, 0, 0, 0, 0, 0, 0, 113, 305,
	103, 0, 126, 296, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 287, 288, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 255, 275, 274, 277,
	278, 279, 280, 0, 0, 104, 276, 281, 282, 283,
	0, 0, 0, 268, 0, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 265, 266, 0, 0, 0,
	0, 308, 0, 267, 0, 0, 263, 264, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 306, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	297, 307, 303, 304, 301, 302, 300, 299, 298, 309,
	289, 290, 291, 292, 294, 0, 121, 293, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 305, 103, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 516,
	515, 525, 526, 518, 519, 520, 521, 522, 523, 524,
	517, 0, 0, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 0, 91, 0, 504,
	0, 0, 0, 0, 113, 528, 103, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 506, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 501, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 0, 91, 0, 621, 0, 0,
	0, 0, 113, 0, 103, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 623, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 103, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 335, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 23, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	0, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	103, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 103, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 741, 0, 0,
	742, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 641, 103, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 640, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 0, 91, 0, 621, 0, 0,
	0, 0, 113, 0, 103, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 623, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 619,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 147, 0, 91, 0, 0, 0, 0, 0, 0,
	113, 0, 103, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 0,
	147, 0, 91, 0, 0, 0, 0, 0, 1514, 113,
	103, 0, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 1309, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 0, 156, 115, 187, 147, 0,
	91, 0, 0, 0, 0, 0, 0, 113, 0, 103,
	0, 126, 0, 129, 0, 0, 168, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 0, 0, 154, 0, 107, 0, 172, 117,
	0, 127, 0, 0, 0, 0, 0, 0, 109, 0,
	161, 148, 184, 0, 149, 159, 130, 176, 155, 183,
	194, 195, 174, 192, 163, 99, 144, 89, 153, 160,
	0, 108, 0, 92, 173, 182, 105, 164, 95, 180,
	170, 171, 136, 122, 123, 166, 93, 94, 0, 158,
	112, 152, 116, 111, 146, 177, 178, 110, 203, 100,
	190, 191, 97, 101, 189, 143, 188, 175, 181, 137,
	134, 0, 96, 179, 135, 133, 125, 0, 114, 118,
	150, 132, 151, 119, 140, 139, 141, 0, 145, 0,
	0, 0, 169, 186, 204, 205, 0, 0, 0, 196,
	197, 198, 199, 0, 0, 0, 142, 102, 120, 165,
	124, 131, 157, 202, 0, 162, 106, 185, 167, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 121, 0, 90, 98, 128,
	200, 201, 0, 156, 115, 187, 147, 0, 91, 0,
	0, 0, 0, 0, 0, 113, 0, 103, 0, 126,
	0, 129, 0, 0, 168, 138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 623, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 193, 0,
	0, 0, 154, 0, 107, 0, 172, 117, 0, 127,
	0, 0, 0, 0, 0, 0, 109, 0, 161, 148,
	184, 0, 149, 159, 130, 176, 155, 183, 194, 195,
	174, 192, 163, 99, 144, 89, 153, 160, 0, 108,
	0, 92, 173, 182, 105, 164, 95, 180, 170, 171,
	136, 122, 123, 166, 93, 94, 0, 158, 112, 152,
	116, 111, 146, 177, 178, 110, 203, 100, 190, 191,
	97, 101, 189, 143, 188, 175, 181, 137, 134, 0,
	96, 179, 135, 133, 125, 0, 114, 118, 150, 132,
	151, 119, 140, 139, 141, 0, 145, 0, 0, 0,
	169, 186, 204, 205, 0, 0, 0, 196, 197, 198,
	199, 0, 0, 0, 142, 102, 120, 165, 124, 131,
	157, 202, 0, 162, 106, 185, 167, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 121, 0, 90, 98, 128, 200, 201,
	0, 156, 115, 187, 147, 0, 91, 0, 0, 0,
	0, 0, 0, 113, 0, 103, 0, 126, 0, 129,
	0, 0, 168, 138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 506, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 193, 0, 0, 0,
	154, 0, 107, 0, 172, 117, 0, 127, 0, 0,
	0, 0, 0, 0, 109, 0, 161, 148, 184, 0,
	149, 159, 130, 176, 155, 183, 194, 195, 174, 192,
	163, 99, 144, 89, 153, 160, 0, 108, 0, 92,
	173, 182, 105, 164, 95, 180, 170, 171, 136, 122,
	123, 166, 93, 94, 0, 158, 112, 152, 116, 111,
	146, 177, 178, 110, 203, 100, 190, 191, 97, 101,
	189, 143, 188, 175, 181, 137, 134, 0, 96, 179,
	135, 133, 125, 0, 114, 118, 150, 132, 151, 119,
	140, 139, 141, 0, 145, 0, 0, 0, 169, 186,
	204, 205, 0, 0, 0, 196, 197, 198, 199, 0,
	0, 0, 142, 102, 120, 165, 124, 131, 157, 202,
	0, 162, 106, 185, 167, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 121, 0, 90, 98, 128, 200, 201, 0, 156,
	115, 187, 147, 0, 91, 0, 0, 0, 0, 0,
	0, 113, 0, 103, 0, 126, 0, 129, 0, 0,
	168, 138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 193, 0, 0, 0, 154, 0,
	107, 0, 172, 117, 0, 127, 0, 0, 0, 0,
	0, 0, 109, 0, 161, 148, 184, 0, 149, 159,
	130, 176, 155, 183, 194, 195, 174, 192, 163, 99,
	144, 89, 153, 160, 0, 108, 0, 92, 173, 182,
	105, 164, 95, 180, 170, 171, 136, 122, 123, 166,
	93, 94, 0, 158, 112, 152, 116, 111, 146, 177,
	178, 110, 203, 100, 190, 191, 97, 101, 189, 143,
	188, 175, 181, 137, 134, 0, 96, 179, 135, 133,
	125, 0, 114, 118, 150, 132, 151, 119, 140, 139,
	141, 0, 145, 0, 0, 0, 169, 186, 204, 205,
	0, 0, 0, 196, 197, 198, 199, 0, 0, 0,
	142, 102, 120, 165, 124, 131, 157, 202, 701, 162,
	106, 185, 167, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 121,
	0, 90, 98, 128, 200, 201, 0, 156, 115, 187,
	147, 0, 91, 0, 0, 0, 0, 0, 599, 113,
	0, 103, 0, 126, 0, 129, 0, 0, 168, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 193, 0, 0, 0, 154, 0, 107, 0,
	172, 117, 0, 127, 0, 0, 0, 0, 0, 0,
	109, 0, 161, 148, 184, 0, 149, 159, 130, 176,
	155, 183, 194, 195, 174, 192, 163, 99, 144, 89,
	153, 160, 0, 108, 0, 92, 173, 182, 105, 164,
	95, 180, 170, 171, 136, 122, 123, 166, 93, 94,
	0, 158, 112, 152, 116, 111, 146, 177, 178, 110,
	203, 100, 190, 191, 97, 101, 189, 143, 188, 175,
	181, 137, 134, 0, 96, 179, 135, 133, 125, 0,
	114, 118, 150, 132, 151, 119, 140, 139, 141, 0,
	145, 0, 0, 0, 169, 186, 204, 205, 0, 0,
	0, 196, 197, 198, 199, 0, 0, 0, 142, 102,
	120, 165, 124, 131, 157, 202, 0, 162, 106, 185,
	167, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 121, 0, 90,
	98, 128, 200, 201, 319, 156, 115, 187, 0, 0,
	0, 147, 0, 91, 0, 0, 0, 0, 0, 103,
	113, 0, 0, 0, 126, 0, 129, 0, 0, 168,
	138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 193, 0, 0, 0, 154, 0, 107,
	0, 172, 117, 0, 127, 0, 0, 0, 0, 0,
	0, 109, 0, 161, 148, 184, 0, 149, 159, 130,
	176, 155, 183, 194, 195, 174, 192, 163, 99, 144,
	89, 153, 160, 0, 108, 0, 92, 173, 182, 105,
	164, 95, 180, 170, 171, 136, 122, 123, 166, 93,
	94, 0, 158, 112, 152, 116, 111, 146, 177, 178,
	110, 203, 100, 190, 191, 97, 101, 189, 143, 188,
	175, 181, 137, 134, 0, 96, 179, 135, 133, 125,
	0, 114, 118, 150, 132, 151, 119, 140, 139, 141,
	0, 145, 0, 0, 0, 169, 186, 204, 205, 0,
	0, 0, 196, 197, 198, 199, 0, 0, 0, 142,
	102, 120, 165, 124, 131, 157, 202, 0, 162, 106,
	185, 167, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 121, 0,
	90, 98, 128, 200, 201, 0, 156, 115, 187, 147,
	0, 91, 0, 0, 0, 0, 0, 0, 113, 0,
	103, 0, 126, 0, 129, 0, 0, 168, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 193, 0, 0, 0, 154, 0, 107, 0, 172,
	117, 0, 127, 0, 0, 0, 0, 0, 0, 109,
	0, 161, 148, 184, 0, 149, 159, 130, 176, 155,
	183, 194, 195, 174, 192, 163, 99, 144, 89, 153,
	160, 0, 108, 0, 92, 173, 182, 105, 164, 95,
	180, 170, 171, 136, 122, 123, 166, 93, 94, 0,
	158, 112, 152, 116, 111, 146, 177, 178, 110, 203,
	100, 190, 191, 97, 101, 189, 143, 188, 175, 181,
	137, 134, 0, 96, 179, 135, 133, 125, 0, 114,
	118, 150, 132, 151, 119, 140, 139, 141, 0, 145,
	0, 0, 0, 169, 186, 204, 205, 0, 0, 0,
	196, 197, 198, 199, 0, 0, 0, 142, 102, 120,
	165, 124, 131, 157, 202, 0, 162, 106, 185, 167,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 121, 0, 90, 98,
	128, 200, 201, 0, 156, 115, 187, 147, 0, 91,
	0, 0, 0, 0, 0, 0, 113, 0, 103, 0,
	126, 0, 129, 0, 0, 168, 138, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 193,
	0, 0, 0, 154, 0, 107, 0, 172, 117, 0,
	127, 0, 0, 0, 0, 0, 0, 109, 0, 161,
	148, 184, 0, 149, 159, 130, 176, 155, 183, 194,
	195, 174, 192, 163, 99, 144, 89, 153, 160, 0,
	108, 0, 92, 173, 182, 105, 164, 95, 180, 170,
	171, 136, 122, 123, 166, 93, 94, 0, 158, 112,
	152, 116, 111, 146, 177, 178, 110, 203, 100, 190,
	191, 97, 101, 189, 143, 188, 175, 181, 137, 134,
	0, 96, 179, 135, 133, 125, 0, 114, 118, 150,
	132, 151, 119, 140, 139, 141, 0, 145, 0, 0,
	0, 169, 186, 204, 205, 0, 0, 0, 196, 197,
	198, 199, 0, 0, 0, 142, 102, 120, 165, 124,
	131, 157, 202, 0, 162, 106, 185, 167, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 121, 0, 90, 98, 128, 200,
	201, 0, 156, 115, 187, 147, 0, 91, 0, 0,
	0, 0, 0, 0, 113, 0, 103, 0, 126, 0,
	129, 0, 0, 168, 138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 0,
	0, 154, 0, 107, 0, 172, 117, 0, 127, 0,
	0, 0, 0, 0, 0, 109, 0, 161, 148, 184,
	0, 149, 159, 130, 176, 155, 183, 194, 195, 174,
	192, 163, 99, 144, 89, 153, 160, 0, 108, 0,
	92, 173, 182, 105, 164, 95, 180, 170, 171, 136,
	122, 123, 166, 93, 94, 0, 158, 112, 152, 116,
	111, 146, 177, 178, 110, 203, 100, 190, 191, 97,
	101, 189, 143, 188, 175, 181, 137, 134, 0, 96,
	179, 135, 133, 125, 0, 114, 118, 150, 132, 151,
	119, 140, 139, 141, 0, 145, 0, 0, 0, 169,
	186, 204, 205, 0, 0, 0, 196, 197, 198, 199,
	0, 0, 0, 142, 102, 120, 165, 124, 131, 157,
	202, 0, 162, 106, 185, 167, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 90, 98, 128, 200, 201, 0,
	156, 115, 187, 147, 0, 91, 0, 0, 0, 0,
	0, 0, 113, 0, 103, 0, 126, 0, 129, 0,
	0, 168, 138, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 193, 0, 0, 0, 154,
	0, 107, 0, 172, 117, 0, 127, 0, 0, 0,
	0, 0, 0, 109, 0, 161, 148, 184, 0, 149,
	159, 130, 176, 155, 183, 194, 195, 174, 192, 163,
	99, 144, 89, 153, 160, 0, 108, 0, 92, 173,
	182, 105, 164, 95, 180, 170, 171, 136, 122, 123,
	166, 93, 94, 0, 158, 112, 152, 116, 111, 146,
	177, 178, 110, 203, 100, 190, 191, 97, 101, 189,
	143, 188, 175, 181, 137, 134, 0, 96, 179, 135,
	133, 125, 0, 114, 118, 150, 132, 151, 119, 140,
	139, 141, 0, 145, 0, 0, 0, 169, 186, 204,
	205, 0, 0, 0, 196, 197, 198, 199, 0, 0,
	0, 142, 102, 120, 165, 124, 131, 157, 202, 0,
	162, 106, 185, 167, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 90, 98, 128, 200, 201, 0, 156, 115,
	187, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 103,
}
var yyPact = [...]int{

	2053, -1000, -199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1211, 1243, -1000, -1000, -1000, -1000, -1000, -1000, 1044,
	469, 298, 371, 128, 11911, 370, 1813, 12427, -1000, 166,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1008, -1000, -1000,
	-1000, -1000, -1000, 1195, 1208, 1034, 1194, 1108, -1000, 6213,
	295, 10360, 11653, 5691, -1000, 798, 363, 324, 12169, 292,
	292, 12169, 292, -1000, -50, 369, 12427, -1000, 12427, 290,
	796, 290, 290, 290, 12427, -1000, 405, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 12427, 788, 1148, 325,
	3731, 3731, 3731, 3731, 187, 3731, -6, 1070, -1000, -1000,
	-1000, -1000, 3731, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 741, 1145, 7005, 7005, 1211, -1000, 1008,
	-1000, -1000, -1000, 1136, -1000, -1000, 513, 1232, -1000, 8037,
	403, -1000, 7005, 24, 990, -1000, -1000, 990, -1000, -1000,
	383, -1000, -1000, 7521, 7521, 7521, 7521, 7521, 7521, 7521,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 990, -1000, 6744, 990, 990, 990,
	990, 990, 990, 990, 990, 7005, 990, 990, 990, 990,
	990, 990, 990, 990, 990, 1689, 990, 990, 990, 990,
	11392, 978, 1153, -1000, -1000, -1000, 1168, 8811, 9585, 12427,
	952, -1000, 983, 5411, 9, -1000, -1000, -1000, 471, 9327,
	-1000, -1000, -1000, 1147, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 886, -1000, 2325, 12169,
	12427, 1051, 763, 491, 761, 1069, 12427, -1000, 11134, 3731,
	305, 12427, 1160, 1068, 12427, 735, 731, -1000, 5131, -1000,
	3731, 3731, 3731, 3731, 3731, 3731, 3731, 3731, -1000, -1000,
	-1000, -1000, -1000, -1000, 3731, 3731, -1000, 37, -1000, 12427,
	-1000, -1000, -1000, -1000, 1238, 430, 652, 401, 986, -1000,
	510, 1195, 741, 1108, 9069, 1085, -1000, -1000, 12427, -1000,
	7005, 7005, 685, -1000, 10876, -1000, -1000, 4011, 439, 7521,
	546, 455, 7521, 7521, 7521, 7521, 7521, 7521, 7521, 7521,
	7521, 7521, 7521, 7521, 7521, 7521, 7521, 640, 1689, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 711, -1000, 1008,
	1049, 1049, 55, 55, 55, 55, 55, 55, 7779, 2586,
	741, 870, 547, 6744, 6213, 6213, 7005, 7005, 12685, 12685,
	6213, 1177, 482, 547, 12685, -1000, 741, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 103, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 6213, 6213, 6213, 6213, 202, 12427,
	-1000, 12685, 10360, 10360, 10360, 10360, 10360, -1000, 1100, 1098,
	-1000, 1084, 1083, 1094, 12427, -1000, 863, 8811, 335, 990,
	-1000, 10618, -1000, -1000, 202, 960, 10360, 12427, -1000, -1000,
	4851, 983, 9, 975, -1000, -26, -2, 6474, 412, -1000,
	-1000, -1000, -1000, 3171, 607, 1626, -127, 52, -1000, -1000,
	-1000, -1000, 1019, -1000, 1019, 286, 1019, 1019, 1019, 85,
	85, 85, 85, 85, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1039, 1037, -1000, 1019, 1019, 1019, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1032, 273, 1032, 1026,
	1026, 1048, 1167, -70, 699, 3731, 1159, 3731, 12427, -1000,
	1429, 12427, -1000, 12427, -1000, -1000, 12427, 3731, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 503, -1000, -1000, -1000, -1000, 1114, 7005,
	7005, 4571, 7005, -1000, -1000, -1000, 1145, -1000, 1177, 1191,
	-1000, 1131, 1129, 6213, -1000, -1000, 439, 485, -1000, -1000,
	568, -1000, -1000, -1000, -1000, 399, 990, -1000, 162, -1000,
	-1000, -1000, -1000, 546, 7521, 7521, 7521, 57, 162, 338,
	900, 734, 55, 121, 121, 93, 93, 93, 93, 93,
	186, 186, -1000, -1000, -1000, -1000, 741, -1000, -1000, -1000,
	741, 6213, 977, -1000, -1000, 7005, -1000, 741, 861, 861,
	495, 715, 1016, -1000, 398, 965, 861, 6213, 514, -1000,
	7005, 741, -1000, -1000, 861, 741, 861, 861, 889, 990,
	-1000, 953, -1000, 468, 1153, 1043, 1067, 939, -1000, -1000,
	-1000, -1000, 1092, -1000, 1091, -1000, -1000, -1000, -1000, -1000,
	359, 337, 334, 12169, -1000, 1227, 10360, 949, -1000, -1000,
	975, 9, 28, -1000, -1000, -1000, 547, -1000, -1000, 695,
	911, 2891, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1035, 1066, 12169, 222, 350, 396, 293, 687, -1000, -1000,
	-1000, 524, 601, 1237, -1000, -1000, 221, -1000, 220, 990,
	655, 12427, 183, -1000, -202, -1000, 50, -1000, -1000, 630,
	85, 85, 1019, 85, -1000, -1000, 412, 1140, 412, 412,
	412, 412, 654, 654, -92, -92, -1000, -1000, 620, 1032,
	-1000, -1000, -1000, 606, -1000, 12427, 12169, 1008, -1000, 4291,
	-1000, -1000, -1000, -1000, -1000, 1166, -1000, 769, 1452, 360,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 201, 374, -1000, 3731, -1000, 512, 12427, 12427, 1112,
	547, 547, 393, -1000, -1000, 12427, -1000, -1000, -1000, -1000,
	890, -1000, -1000, -1000, 3451, 6213, -1000, 57, 162, 302,
	-1000, 7521, 7521, -1000, -1000, 861, 6213, 547, -1000, -1000,
	-1000, 1788, 640, 1788, 7521, 7521, 4571, 7521, 7521, -63,
	959, 473, -1000, 7005, 508, -1000, -1000, -1000, -1000, -1000,
	1061, 12685, 990, -1000, 8553, 12169, 1211, 12685, 7005, 7005,
	-1000, -1000, 7005, 1030, -1000, 7005, -1000, -1000, -1000, 990,
	990, 990, 831, -1000, 1211, 949, -1000, -1000, -1000, -32,
	-20, -1000, -1000, 3171, -1000, 3171, 12169, 1231, 227, 285,
	-1000, 684, 677, -1000, 665, -1000, -1000, -1000, -186, -1000,
	-1000, -1000, -1000, -1000, -1000, 990, 1029, -40, -1000, -1000,
	7005, -1000, 1028, 1162, -1000, 1137, -1000, -1000, -1000, 822,
	412, 412, 85, 412, -1000, 449, -1000, -1000, -1000, -1000,
	857, -1000, 855, -1000, 138, 122, -1000, 904, -1000, 851,
	896, 1054, -1000, 891, -1000, 458, 1189, 174, -1000, 239,
	-1000, 12169, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12169, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12427, -1000, -1000, -1000, -1000, -1000, 12169, 250,
	-1000, -1000, 649, 7005, -1000, -1000, -1000, 4291, -1000, 1227,
	10360, -1000, -1000, 741, -1000, 7521, 162, 162, -1000, -1000,
	741, 1019, 1019, -1000, 1019, 1026, -1000, -1000, 1019, 152,
	1019, 147, 741, 741, 91, 270, -1000, 73, 205, 990,
	-58, -1000, 547, 7005, -1000, 1152, 818, 829, -1000, -1000,
	5952, 741, 833, 390, 831, 1195, -1000, 547, 547, 547,
	10102, 547, 10102, 10102, 10102, 8295, 12169, 1195, -1000, -1000,
	-1000, -1000, 2891, -1000, 812, -1000, 1019, 385, 385, 219,
	217, -1000, -1000, -1000, -1000, 136, 741, -1000, 556, -1000,
	499, 10102, -177, -1000, -1000, -1000, -1000, 412, -1000, -1000,
	-1000, 85, 646, 85, 43, 19, 597, -1000, 596, 10102,
	12169, 12427, 4291, 3171, 301, 1213, -1000, -1000, 12169, -1000,
	-1000, -1000, 1018, -1000, -1000, -1000, -1000, 1154, 12169, -1000,
	-1000, 547, 1225, 836, -1000, 162, -1000, -1000, 253, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 7521, 7521,
	-1000, 7521, 7521, 7521, 741, 644, 547, 216, -1000, 990,
	-1000, -1000, 956, 12169, 12169, -1000, -1000, 803, -1000, -1000,
	792, 792, 792, 335, -1000, -1000, 213, 12169, -1000, 1053,
	-1000, -1000, 507, 170, 1050, 12169, 1015, 100, -92, -1000,
	-1000, 178, 786, 1014, -1000, 412, -1000, 412, -1000, -1000,
	809, 787, 783, 1013, 1011, -1000, -1000, 12169, -1000, -1000,
	-1000, -1000, -1000, 1010, 10102, 990, 257, 1220, 1202, -1000,
	-1000, 139, 139, 139, 139, 42, -1000, -1000, 1236, -1000,
	990, -1000, 1008, 388, -1000, 12169, -1000, -1000, -1000, -1000,
	-1000, 213, -1000, 663, 448, 569, -96, -1000, 1233, -1000,
	-1000, 1234, 1009, -1000, 12169, -1000, -1000, -1000, -60, -1000,
	-1000, -1000, -1000, -1000, -1000, 1227, 10102, 10102, 808, -1000,
	10102, 767, 198, 215, -1000, 7005, 7005, -1000, -1000, -1000,
	-1000, 741, 156, -98, 12685, 829, 741, 12169, -1000, -1000,
	-1000, 595, -1000, -1000, 12169, 385, 385, 12169, 753, -1000,
	367, -1000, 751, 749, -69, 12169, 7005, 746, 1051, 740,
	-1000, 12169, 1007, 547, 826, -1000, 1107, -67, -144, 656,
	-1000, -1000, -1000, -1000, -1000, -1000, 728, -1000, -1000, 140,
	629, 584, 574, 567, -14, -1000, 1201, 1227, -1000, -1000,
	-188, -1000, 547, -1000, -70, -1000, 198, 1127, 10102, -1000,
	1104, -1000, 248, 565, -1000, 562, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9843, -1000, 7005, -1000, -1000, 191, 676,
	-90, 12427, -1000, -1000, -1000, 377, 547, 188, -1000, -113,
	1000, 4291, 990, -164, 12169, -1000, 7263, -1000, 670, 139,
	741, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1454, 39, 727, 1451, 1450, 1449, 1445, 1442, 1437,
	1436, 1433, 1431, 1429, 1426, 1424, 1421, 1420, 1419, 1418,
	1417, 1416, 1415, 1414, 288, 1413, 1410, 1409, 67, 1406,
	80, 1405, 1404, 43, 293, 50, 42, 796, 1402, 36,
	73, 68, 1401, 49, 1390, 1388, 84, 1386, 71, 1385,
	1375, 423, 1374, 1373, 16, 21, 1372, 45, 1371, 1370,
	70, 1113, 1369, 1368, 1367, 1366, 1364, 1361, 53, 6,
	13, 25, 19, 1358, 34, 7, 1357, 51, 1356, 1352,
	1351, 1347, 33, 1346, 59, 1345, 20, 54, 1343, 32,
	65, 37, 24, 5, 81, 56, 1341, 30, 60, 48,
	1339, 1337, 613, 1336, 1335, 1334, 1332, 1329, 1328, 665,
	621, 1327, 1324, 1323, 44, 0, 347, 12, 78, 1321,
	31, 1320, 1470, 74, 58, 23, 1316, 47, 1301, 29,
	1315, 1314, 41, 66, 1313, 83, 82, 1312, 1311, 1310,
	1309, 1308, 497, 27, 52, 61, 1307, 1306, 1303, 9,
	57, 26, 46, 55, 1300, 1295, 1293, 22, 1292, 11,
	14, 3, 75, 1291, 1288, 1287, 1286, 28, 18, 1285,
	15, 8, 10, 1284, 1283, 1, 1281, 17, 1280, 2,
	1279, 4, 1278, 1276, 1275, 1273, 1271, 1268, 1267, 1263,
	1262, 1261, 1260, 1258, 470, 929, 1257, 1256, 1255, 1249,
	86,
}
var yyR1 = [...]int{

	0, 192, 193, 193, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 196,
	196, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 183,
	183, 183, 184, 184, 184, 184, 184, 184, 186, 186,
	187, 187, 120, 120, 181, 181, 180, 179, 179, 178,
	178, 177, 188, 188, 16, 164, 165, 165, 165, 165,
	165, 153, 134, 134, 134, 134, 134, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 190, 190, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 143, 143, 189,
	189, 185, 185, 185, 138, 138, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 139, 139, 139, 139, 139, 135, 135, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 152, 152, 142,
	142, 150, 150, 151, 151, 151, 149, 149, 149, 146,
	146, 147, 147, 148, 148, 148, 144, 144, 144, 145,
	145, 145, 155, 155, 173, 173, 172, 172, 172, 172,
	163, 163, 169, 169, 169, 169, 169, 169, 169, 162,
	162, 171, 171, 170, 157, 157, 157, 157, 157, 158,
	159, 159, 159, 159, 156, 160, 160, 161, 161, 166,
	166, 166, 167, 167, 167, 168, 168, 168, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	182, 182, 182, 182, 182, 182, 182, 182, 182, 182,
	182, 197, 197, 198, 198, 198, 198, 198, 198, 198,
	176, 174, 174, 175, 175, 13, 14, 14, 14, 14,
	14, 15, 15, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 107, 107, 104,
	104, 105, 105, 106, 106, 106, 108, 108, 108, 131,
	131, 131, 19, 19, 21, 21, 22, 23, 20, 20,
	20, 20, 20, 199, 24, 25, 25, 26, 26, 26,
	30, 30, 30, 28, 28, 29, 29, 35, 35, 34,
	34, 36, 36, 36, 36, 119, 119, 119, 118, 118,
	38, 38, 39, 39, 40, 40, 41, 41, 41, 53,
	53, 89, 89, 89, 91, 91, 42, 42, 42, 42,
	43, 43, 44, 44, 45, 45, 126, 126, 125, 125,
	125, 124, 124, 47, 47, 47, 49, 48, 48, 48,
	48, 50, 50, 52, 52, 51, 51, 54, 54, 54,
	54, 55, 55, 37, 37, 37, 37, 37, 37, 37,
	103, 103, 57, 57, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 67, 67, 67, 67, 67, 67,
	58, 58, 58, 58, 58, 58, 58, 33, 33, 68,
	68, 68, 74, 69, 69, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 200, 200, 66, 66, 66, 66,
	31, 31, 31, 31, 31, 129, 129, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 133, 78, 78,
	32, 32, 76, 76, 77, 79, 79, 75, 75, 75,
	60, 60, 60, 60, 60, 60, 60, 60, 62, 62,
	62, 80, 80, 81, 81, 82, 82, 83, 83, 84,
	85, 85, 85, 86, 86, 86, 86, 87, 87, 87,
	59, 59, 59, 59, 59, 59, 88, 88, 88, 88,
	92, 92, 70, 70, 72, 72, 71, 73, 93, 93,
	97, 94, 94, 98, 98, 98, 96, 96, 96, 121,
	121, 121, 101, 101, 109, 109, 110, 110, 102, 102,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	112, 112, 112, 113, 113, 116, 116, 117, 117, 122,
	122, 123, 123, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 194,
	195, 127, 128, 128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 6, 5, 5, 5, 11, 0,
	2, 2, 0, 2, 2, 2, 2, 2, 0, 2,
	0, 3, 0, 1, 0, 2, 1, 0, 2, 1,
	3, 3, 0, 2, 4, 4, 1, 3, 3, 3,
	3, 2, 3, 1, 1, 1, 1, 2, 2, 3,
	4, 3, 3, 3, 3, 3, 4, 2, 2, 3,
	2, 3, 2, 6, 3, 3, 5, 3, 6, 5,
	8, 1, 2, 0, 4, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 2, 4, 6, 2, 3, 0,
	2, 0, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 3, 2, 2,
	2, 2, 1, 3, 3, 2, 1, 1, 1, 4,
	4, 4, 5, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 6, 6, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	3, 0, 5, 0, 3, 5, 0, 3, 3, 0,
	1, 0, 1, 0, 2, 1, 0, 3, 3, 0,
	1, 2, 5, 4, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 1, 4, 4, 7, 7, 13,
	1, 1, 2, 2, 7, 0, 1, 1, 3, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 11,
	13, 7, 7, 7, 12, 7, 7, 7, 4, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 3, 8, 8, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 4, 3, 6, 4,
	2, 4, 2, 2, 2, 2, 3, 1, 1, 0,
	1, 0, 1, 0, 2, 2, 0, 2, 2, 0,
	1, 1, 2, 1, 1, 2, 1, 1, 2, 2,
	2, 2, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 3, 3,
	7, 1, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	4, 5, 6, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 3, 1, 3, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 2, 2, 2,
	2, 3, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 0, 2, 4, 4, 4, 4,
	0, 3, 4, 7, 3, 1, 1, 2, 3, 3,
	1, 2, 2, 1, 1, 2, 1, 2, 2, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 2, 1, 2, 4, 0, 2, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	2, 1, 3, 5, 4, 6, 1, 3, 3, 5,
	0, 5, 1, 3, 1, 2, 3, 1, 1, 3,
	3, 1, 3, 3, 3, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -192, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 142, 115, 135, 48, 163, 164,
	166, 167, 25, 136, 137, 140, 141, -194, 8, 258,
	52, -193, 288, -82, 15, -26, 5, -24, -199, -24,
	-24, -24, -24, -24, -164, 52, -120, -188, 150, 250,
	117, 132, 118, 133, 69, -102, 120, 122, 118, 118,
	119, 120, 250, 117, 118, -51, -122, 55, -115, 157,
	267, 20, 163, 176, 177, 168, 202, 192, 268, 155,
	189, 193, 237, 287, 64, 166, 246, 126, 161, 138,
	187, 183, 180, 27, 208, 274, 182, 129, 209, 213,
	238, 265, 173, 174, 240, 206, 31, 131, 269, 33,
	146, 241, 211, 205, 200, 204, 172, 199, 37, 215,
	214, 216, 236, 195, 156, 218, 184, 18, 141, 144,
	210, 212, 181, 158, 124, 148, 273, 242, 179, 145,
	159, 140, 245, 154, 167, 239, 175, 248, 36, 222,
	170, 171, 128, 164, 152, 197, 147, 185, 186, 203,
	169, 198, 165, 149, 142, 247, 223, 275, 196, 194,
	190, 191, 153, 120, 150, 151, 229, 230, 231, 232,
	270, 271, 243, 188, 224, 225, 118, 105, 193, 111,
	227, 119, 31, 148, -131, 118, -104, 151, 229, 230,
	231, 232, 55, 239, 238, 233, -122, 165, -127, -127,
	-127, -127, -127, -2, -86, 17, 16, -5, -3, -194,
	6, 20, 21, -30, 38, 39, -25, -36, 96, -37,
	-122, -56, 71, -61, 28, 55, -115, 23, -60, -57,
	-75, -73, -74, 105, 106, 94, 95, 102, 72, 107,
	-65, -63, -64, -66, 57, 56, 65, 58, 59, 60,
	61, 66, 67, 68, -116, -71, -194, 42, 43, 259,
	260, 261, 262, 266, 263, 74, 32, 249, 257, 256,
	255, 253, 254, 251, 252, 286, 123, 250, 100, 258,
	-102, -39, -40, -41, -42, -53, -74, -194, -51, 11,
	-46, -51, -94, -130, 165, -98, 239, 238, -117, -96,
	-116, -114, 237, 193, 236, 55, -115, 116, 277, 70,
	22, 24, 220, 226, 73, 105, 16, 74, 104, 259,
	111, 46, 251, 252, 249, 261, 262, 250, 227, 28,
	10, 25, 136, 21, 98, 113, 77, 78, 139, 23,
	137, 68, 19, 49, 130, 11, 276, 13, 14, 278,
	123, 122, 89, 119, 44, 8, 107, 26, 86, 40,
	134, 42, 87, 17, 253, 254, 30, 266, 143, 100,
	47, 34, 71, 66, 50, 244, 69, 15, 45, 132,
	88, 114, 258, 43, 117, 6, 264, 29, 135, 41,
	118, 228, 76, 121, 67, 5, 133, 9, 48, 51,
	255, 256, 257, 32, 75, 12, -165, -153, 55, 119,
	120, -116, -110, 123, -110, -116, -110, 258, 118, -51,
	-51, -109, 123, 55, -109, -109, -109, -51, 108, -51,
	55, 29, 250, 55, 148, 118, 149, 120, -128, -194,
	-117, -128, -128, -128, 152, 153, -128, -105, 234, 50,
	-128, -195, 54, -87, 19, 30, -37, -122, -83, -84,
	-37, -82, -2, -24, 34, -28, 21, 63, 11, -119,
	70, 69, 86, -118, 22, -116, 57, 108, -37, -58,
	89, 71, 87, 88, 73, 91, 90, 101, 94, 95,
	96, 97, 98, 99, 100, 92, 93, 104, 286, 79,
	80, 81, 82, 83, 84, 85, -103, -194, -74, -194,
	109, 110, -61, -61, -61, -61, -61, -61, -61, -194,
	-2, -69, -37, -194, -194, -194, -194, -194, -194, -194,
	-194, -194, -78, -37, -194, -200, -194, -200, -200, -200,
	-200, -200, -200, -200, -133, 105, 193, 138, 187, -136,
	-135, 197, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 192, 268, -194, -194, -194, -194, -52, 26,
	-51, 29, 53, -47, -49, -48, -50, 40, 44, 46,
	41, 42, 43, 47, -126, 22, -39, -194, -125, 144,
	-124, 22, -122, 57, -51, -46, -196, 53, 11, 51,
	53, -94, 165, -95, -99, 240, 242, 79, -121, -116,
	57, 28, 29, 54, 53, -154, -134, -138, -135, -140,
	-139, -141, -136, -137, 189, 193, 190, 105, 194, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
	196, 208, 29, 138, 185, 186, 187, 188, 209, 210,
	211, 212, 213, 214, 215, 216, 179, 180, 182, 183,
	184, -116, -51, -181, 51, 55, 71, 55, 50, -51,
	-51, 244, -128, 121, -51, 23, 50, -51, 55, 55,
	-123, -122, -114, -128, -128, -128, -128, -128, -128, -128,
	-128, -128, -128, -107, 228, 235, -51, 9, 89, 53,
	18, 108, 53, -85, 24, 25, -86, -195, -30, -62,
	-116, 58, 61, -29, 41, -51, -37, -37, -67, 66,
	71, 67, 68, -118, 96, -123, -117, -114, -61, -68,
	-71, -74, 62, 89, 87, 88, 73, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -129, 55, 57, -133, 55, -60, -60, -116,
	-35, 21, -34, -36, -195, 53, -195, -2, -34, -34,
	-37, -37, -75, -116, -122, -75, -34, -28, -76, -77,
	75, -75, -195, 191, -34, -35, -34, -34, -90, 144,
	-51, -93, -97, -75, -40, -41, -41, -40, -41, 40,
	40, 40, 45, 40, 45, 40, -48, -122, -195, -54,
	48, 122, 49, -194, -124, -90, 51, -39, -51, -98,
	-95, 53, 241, 243, 244, 50, -37, -145, 105, 104,
	-166, -167, -168, -117, 57, 58, -153, -155, -157, -156,
	-169, -158, 126, 124, 128, 129, 133, -162, 119, 134,
	66, 71, 28, 50, 220, 226, 124, 134, 133, 287,
	64, 127, 276, -148, 289, 217, -146, 223, -142, 52,
	-142, -142, 191, -142, -142, -142, -144, 193, -144, -144,
	-144, -144, 52, 52, -142, -142, -142, -150, 52, 181,
	-150, -150, -151, 52, -151, 50, 51, 22, -179, 270,
	-180, 55, -128, 23, -128, -51, -111, 116, 113, 114,
	-176, 112, 220, 193, 64, 28, 15, 259, 144, 275,
	55, 145, -51, -51, -51, -128, -106, 11, 89, 36,
	-37, -37, -123, -84, -87, -101, 19, 11, 32, 32,
	-34, 66, 67, 68, 108, -194, -68, -61, -61, -61,
	-33, 139, 70, -195, -195, -34, 53, -37, -195, -195,
	-195, 53, 51, 22, 53, 11, 108, 53, 11, -195,
	-34, -79, -77, 77, -37, -195, -195, -195, -195, -195,
	-59, 29, 32, -2, -194, -194, -55, 53, 12, 79,
	-44, -43, 50, 51, -45, 50, -43, 40, 40, 119,
	119, 119, -91, -116, -55, -39, -55, -99, -100, 245,
	242, 248, 55, 53, -168, 79, 52, 50, -160, -116,
	134, -162, -162, 55, -162, 55, 55, 66, 57, 58,
	59, 66, -143, 65, -57, 218, 249, 9, 134, 134,
	-194, 57, -122, -190, 277, 16, 290, -147, 224, 58,
	-144, -144, -142, -144, -145, 29, -145, -145, -145, -145,
	-152, 57, -152, -149, 270, 271, -149, 58, -150, 58,
	-51, -116, -2, -178, -177, -117, -183, 22, -127, -120,
	-198, 150, 125, 130, 129, 55, 124, 128, 144, -182,
	150, 125, 126, 130, 129, 55, 119, 134, 124, 128,
	144, 133, -112, -113, 121, 22, 119, 134, 144, 116,
	-128, -108, 87, 12, -122, -122, 37, 108, -51, -38,
	11, 96, -117, -35, -33, 70, -61, -61, -195, -36,
	-132, 105, 189, 138, 187, 183, 206, 207, 195, 222,
	185, 223, -129, -132, -61, -61, -117, -61, -61, 267,
	-82, 78, -37, 76, -92, 50, -93, -70, -72, -71,
	-194, -2, -88, -116, -91, -82, -97, -37, -37, -37,
	52, -37, -194, -194, -194, -195, 53, -82, -55, 242,
	246, 247, -167, -168, -171, -170, -116, 10, 9, 130,
	124, 55, 55, 55, -185, 286, -194, -142, 52, -143,
	-37, 52, 22, 28, 54, -145, -145, -144, -145, 55,
	105, 54, 53, 54, 185, 185, 53, 54, 53, 52,
	51, 50, 53, 79, -184, 19, 158, 159, -197, 119,
	134, -127, -116, -127, -116, -51, -127, -116, 126, -157,
	57, -37, -55, -39, -195, -61, -195, -142, -142, -142,
	-151, -142, 174, -142, 174, -195, -195, -195, 53, 19,
	-195, 53, 19, -194, -32, 264, -37, 27, -92, 53,
	-195, -195, -195, 53, 108, -195, -86, -89, -116, 134,
	-89, -89, -89, -125, -116, -86, 54, 53, -142, -159,
	154, 155, 29, 156, -159, 134, 134, 193, 186, -195,
	54, -195, -89, 278, -145, -144, 57, -144, 225, 225,
	58, 58, -89, -116, -51, -177, -168, 121, 20, 6,
	8, 9, 10, -116, 52, 26, -116, -80, 13, -144,
	55, -61, -61, -61, -61, -61, -195, 57, 134, -72,
	32, -2, -194, -116, -116, 53, 54, -195, -195, -195,
	-54, -173, -172, 51, 131, 64, 270, -170, 50, 66,
	157, 50, -160, -116, 52, 191, -149, -189, 156, 54,
	52, -145, -145, 54, 54, 54, 52, 52, -161, -116,
	52, -89, -194, 124, -81, 14, 16, -195, -195, -195,
	-195, -31, 89, 270, 9, -70, -2, 108, -116, -172,
	55, -163, 79, 57, 272, 9, 10, 52, -171, 265,
	-191, -55, -89, -89, -186, 53, 51, -89, 54, -174,
	-175, 144, 134, -37, -69, -195, 268, 47, 273, -93,
	-195, -116, 58, -116, -159, -159, -161, 54, 54, 164,
	280, 281, 143, 282, 156, 283, 284, 54, 54, -187,
	270, -116, -37, 54, -181, -195, 53, -116, 52, 37,
	269, 274, 54, 270, 58, 16, 58, 58, 58, 58,
	281, 143, 283, 16, -55, 287, -179, -175, 32, -89,
	37, 127, 58, 58, 285, -122, -37, 146, 54, 270,
	-51, 108, 147, 273, 52, -117, -194, 274, -161, -61,
	143, 54, -195, -195,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 615, 0, 373, 373, 373, 373, 373, 373, 0,
	-2, 668, 0, 0, 0, 0, -2, 363, 364, 0,
	366, 367, 911, 911, 911, 911, 911, 0, 33, 34,
	909, 1, 3, 623, 0, 0, 377, 380, 375, 0,
	668, 0, 0, 0, 60, 0, 0, 0, 0, 666,
	666, 0, 666, 83, 0, 0, 0, 669, 0, 664,
	0, 664, 664, 664, 0, 322, 445, 689, 690, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 0, 0, 0, 0,
	912, 912, 912, 912, 0, 912, 351, 340, 342, 343,
	344, 345, 912, 360, 361, 350, 362, 365, 368, 369,
	370, 371, 372, 27, 627, 0, 0, 615, 29, 0,
	373, 378, 379, 383, 381, 382, 374, 0, 391, 395,
	0, 453, 0, 458, 460, -2, -2, 0, 495, 496,
	497, 498, 499, 0, 0, 0, 0, 0, 0, 0,
	523, 524, 525, 526, 600, 601, 602, 603, 604, 605,
	606, 607, 462, 463, 597, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 0, 554, 554, 554,
	554, 554, 554, 554, 554, 0, 0, 0, 0, 0,
	0, 0, 402, 404, 405, 406, 426, 0, 428, 0,
	0, 41, 45, 0, 885, 651, -2, -2, 0, 0,
	687, 688, -2, 804, -2, 685, 686, 693, 694, 695,
	696, 697, 698, 699, 700, 701, 702, 703, 704, 705,
	706, 707, 708, 709, 710, 711, 712, 713, 714, 715,
	716, 717, 718, 719, 720, 721, 722, 723, 724, 725,
	726, 727, 728, 729, 730, 731, 732, 733, 734, 735,
	736, 737, 738, 739, 740, 741, 742, 743, 744, 745,
	746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
	756, 757, 758, 759, 760, 761, 762, 763, 764, 765,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 0, 96, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 93, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 321, 0, 323,
	912, 912, 912, 912, 912, 912, 912, 912, 332, 913,
	914, 333, 334, 335, 912, 912, 337, 0, 352, 0,
	346, 28, 910, 22, 0, 0, 624, 0, 616, 617,
	620, 623, 27, 380, 0, 385, 384, 376, 0, 392,
	0, 0, 0, 396, 0, 398, 399, 0, 456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 480,
	481, 482, 483, 484, 485, 486, 459, 0, 473, 0,
	0, 0, 515, 516, 517, 518, 519, 520, 0, 387,
	27, 0, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 383, 0, 589, 0, 545, 0, 546, 547, 548,
	549, 550, 551, 552, 553, 581, 0, 583, 584, 585,
	586, 587, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 177, 178, 0, 387, 0, 0, 43, 0,
	444, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	436, 0, 0, 0, 0, 427, 0, 0, 447, 852,
	429, 0, 431, 432, -2, 0, 0, 0, 39, 40,
	0, 46, 885, 48, 49, 0, 0, 0, 229, 659,
	660, 661, 657, 269, 0, 101, 223, 219, 103, 104,
	105, 106, 209, 155, 209, 209, 209, 209, 209, 226,
	226, 226, 226, 226, 190, 191, 192, 193, 194, 195,
	196, 0, 0, 172, 209, 209, 209, 176, 199, 200,
	201, 202, 203, 204, 205, 206, 211, 211, 211, 213,
	213, 0, 0, 87, 0, 912, 0, 912, 0, 94,
	0, 0, 288, 0, 316, 665, 0, 912, 319, 320,
	446, 691, 692, 324, 325, 326, 327, 328, 329, 330,
	331, 336, 339, 353, 347, 348, 341, 628, 0, 0,
	0, 0, 0, 619, 621, 622, 627, 30, 383, 0,
	608, 0, 0, 0, 386, 25, 454, 455, 457, 474,
	0, 476, 478, 397, 393, 0, 598, -2, 464, 465,
	489, 490, 491, 0, 0, 0, 0, 487, 469, 0,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 514, 565, 566, 522, 0, 512, 513, 521,
	0, 0, 388, 389, 492, 0, 646, 27, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 595, 592,
	0, 0, 555, 582, 0, 0, 0, 0, 0, 0,
	443, 451, 648, 0, 403, 422, 424, 0, 419, 434,
	435, 437, 0, 439, 0, 441, 442, 407, 408, 409,
	0, 0, 0, 0, 430, 451, 0, 451, 42, 652,
	47, 0, 0, 52, 53, 653, 654, 655, 230, 0,
	95, 270, 272, 275, 276, 277, 97, 98, 99, 100,
	0, 254, 265, 0, 0, 0, 0, 0, 249, 250,
	108, 0, 0, 0, 117, 118, 0, 120, 122, 0,
	0, 0, 0, 107, 0, 225, 221, 220, 154, 0,
	226, 226, 209, 226, 183, 184, 229, 0, 229, 229,
	229, 229, 0, 0, 216, 216, 175, 166, 0, 211,
	168, 169, 170, 0, 171, 0, 0, 0, 65, 0,
	85, 86, 66, 667, 67, 69, 911, 82, 0, 680,
	289, 670, 671, 672, 673, 674, 675, 676, 677, 678,
	679, 0, 0, 315, 912, 318, 356, 0, 0, 0,
	625, 626, 0, 618, 23, 0, 662, 663, 609, 610,
	400, 475, 477, 479, 0, 387, 466, 487, 470, 0,
	467, 0, 0, 461, 527, 0, 0, 494, -2, 530,
	531, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	615, 0, 593, 0, 0, 544, 556, 557, 558, 559,
	640, 0, 0, -2, 0, 0, 615, 0, 0, 0,
	416, 423, 0, 0, 417, 0, 418, 438, 440, 0,
	0, 0, 0, 414, 615, 451, 38, 50, 51, 0,
	0, 57, 231, 0, 273, 0, 0, 0, 0, 266,
	242, 0, 0, 245, 0, 247, 248, 109, 151, 111,
	112, 113, 114, 115, 125, 0, 209, 0, 119, 121,
	0, 124, 127, 0, 131, 0, 224, 102, 222, 0,
	229, 229, 226, 229, 185, 0, 186, 187, 188, 189,
	0, 207, 0, 173, 0, 0, 174, 0, 167, 0,
	0, 0, -2, 88, 89, 0, 72, 0, 278, 0,
	911, 0, 303, 304, 305, 306, 307, 308, 309, 911,
	0, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 0, 911, 681, 682, 683, 684, 0, 0,
	317, 338, 0, 0, 354, 355, 629, 0, 24, 451,
	0, 394, 599, 0, 468, 0, 488, 471, 528, 390,
	0, 209, 209, 570, 209, 213, 573, 574, 209, 576,
	209, 579, 0, 0, 0, 0, 598, 0, 0, 0,
	590, 543, 596, 0, 31, 0, 640, 630, 642, 644,
	0, 27, 0, 636, 0, 623, 649, 452, 650, 420,
	0, 425, 0, 0, 0, 428, 0, 623, 37, 54,
	55, 56, 271, 274, 0, 251, 209, 0, 0, 0,
	0, 243, 244, 246, 110, 0, 0, 147, 0, 116,
	0, 0, 0, 132, 210, 179, 180, 229, 181, 227,
	228, 226, 0, 226, 0, 0, 0, 214, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 71, 0, 301,
	302, 282, 0, 283, 285, 286, 287, 0, 265, 281,
	357, 358, 611, 401, 529, 472, 532, 567, 226, 571,
	572, 575, 577, 578, 580, 534, 533, 535, 0, 0,
	538, 0, 0, 0, 0, 0, 594, 0, 32, 0,
	645, -2, 0, 0, 0, 44, 35, 0, 411, 412,
	0, 0, 0, 447, 415, 36, 233, 0, 253, 255,
	260, 261, 0, 0, 256, 265, 0, 0, 216, 126,
	148, 149, 0, 129, 182, 229, 208, 229, 217, 218,
	0, 0, 0, 0, 0, 90, 91, 0, 73, 74,
	75, 76, 77, 0, 0, 0, 266, 613, 0, 568,
	569, 0, 0, 0, 0, 560, 542, 591, 0, 643,
	0, -2, 0, 638, 637, 0, 421, 448, 449, 450,
	410, 232, 234, 0, 240, 0, 0, 252, 0, 262,
	263, 0, 0, 266, 0, 152, 153, 123, 0, 128,
	133, 197, 198, 212, 215, 451, 0, 0, 78, 267,
	0, 0, 0, 0, 26, 0, 0, 536, 537, 539,
	540, 0, 0, 0, 0, 633, 27, 0, 413, 235,
	236, 0, 241, 238, 0, 0, 0, 0, 0, 150,
	0, 61, 0, 0, 80, 0, 0, 0, 84, 0,
	311, 0, 0, 614, 612, 541, 0, 0, 0, 641,
	-2, 639, 237, 239, 257, 258, 0, 264, 130, 0,
	0, 0, 0, 0, 0, 144, 0, 451, 62, 68,
	0, 268, 79, 279, 87, 310, 0, 0, 0, 561,
	0, 564, 0, 0, 135, 0, 137, 138, 139, 140,
	141, 142, 143, 0, 63, 0, 284, 312, 0, 0,
	562, 0, 134, 136, 145, 0, 81, 0, 280, 0,
	0, 0, 0, 0, 0, 146, 0, 563, 0, 0,
	0, 259, 313, 314,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 288,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 289, 3, 290, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:327
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:332
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:333
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:337
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:360
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:368
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:372
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:378
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:385
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:391
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:395
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:401
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:405
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:412
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:424
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:436
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:440
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:446
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:452
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:456
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:460
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:465
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:466
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:470
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:474
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:479
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:483
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:489
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:493
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:497
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:501
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:507
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:511
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:517
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:521
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:525
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:535
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:539
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:543
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:549
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:553
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:559
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:564
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:580
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:595
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DDL{Action: CreateViewStr, View: &View{
				Action:     CreateViewStr,
				Name:       yyDollar[4].tableName.ToViewName(),
				Definition: yyDollar[6].selStmt,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:618
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:626
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:630
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:634
		{
			yyVAL.statement = &DDL{Action: CreatePolicyStr, Table: yyDollar[5].tableName, Policy: &Policy{
				Name:       yyDollar[3].colIdent,
				Permissive: Permissive(yyDollar[6].bytes),
				Scope:      yyDollar[7].bytes,
				To:         yyDollar[9].colIdents,
				Using:      NewWhere(WhereStr, yyDollar[10].expr),
				WithCheck:  NewWhere(WhereStr, yyDollar[11].expr),
			}}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:646
		{
			yyVAL.bytes = nil
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:650
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:654
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:659
		{
			yyVAL.bytes = nil
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:663
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:671
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:675
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:679
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:684
		{
			yyVAL.expr = nil
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:688
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:693
		{
			yyVAL.expr = nil
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:697
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 82:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:702
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:706
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:711
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:715
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:721
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:726
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:731
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:737
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:742
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:748
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:753
		{
			yyVAL.bytes = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:757
		{
			yyVAL.bytes = nil
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:763
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:770
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:777
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:782
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:790
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:794
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:800
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:805
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:816
		{
			yyDollar[1].columnType.NotNull = nil
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Identity = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:828
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:833
		{
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:838
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:843
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:848
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:853
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:858
		{
			yyDollar[1].columnType.Default = yyDollar[3].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:863
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:868
		{
			yyDollar[1].columnType.OnUpdate = yyDollar[4].optVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:873
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:878
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:883
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:888
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:893
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:898
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:903
		{
			yyDollar[1].columnType.Check = NewWhere(WhereStr, yyDollar[4].expr)
			yyDollar[1].columnType.CheckNoInherit = yyDollar[6].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:909
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:914
		{
			yyDollar[1].columnType.Default = NewBoolSQLVal(bool(yyDollar[3].boolVal))
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:919
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:924
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:929
		{
			yyDollar[1].columnType.References = yyDollar[3].tableIdent.v
			yyDollar[1].columnType.ReferenceNames = yyDollar[5].columns
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:935
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 130:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:941
		{
			yyDollar[1].columnType.Identity = &IdentityOpt{Behavior: yyDollar[3].str, Sequence: yyDollar[7].sequence}
			yyDollar[1].columnType.NotNull = NewBoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:949
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:953
		{
			yyVAL.str = string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:958
		{
			yyVAL.sequence = &Sequence{}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:962
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:967
		{
			yyDollar[1].sequence.StartWith = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:972
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[4].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:977
		{
			yyDollar[1].sequence.IncrementBy = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:982
		{
			yyDollar[1].sequence.MinValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:987
		{
			yyDollar[1].sequence.MaxValue = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:992
		{
			yyDollar[1].sequence.Cache = NewIntVal(yyDollar[3].bytes)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:997
		{
			yyDollar[1].sequence.NoMinValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1002
		{
			yyDollar[1].sequence.NoMaxValue = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1007
		{
			yyDollar[1].sequence.NoCycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1012
		{
			yyDollar[1].sequence.Cycle = NewBoolVal(true)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1017
		{
			yyDollar[1].sequence.OwnedBy = "NONE"
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1022
		{
			yyDollar[1].sequence.OwnedBy = string(yyDollar[4].tableIdent.v) + "." + string(yyDollar[6].colIdent.val)
			yyVAL.sequence = yyDollar[1].sequence
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1029
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, yyDollar[2].optVal)
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1033
		{
			yyVAL.optVal = NewValArgWithOpt(yyDollar[1].bytes, nil)
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1038
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1047
		{
			yyVAL.bytes = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1060
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1066
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1070
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1074
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1078
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1082
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1086
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1090
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1094
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1098
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1102
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1108
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1114
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1120
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1126
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1132
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1138
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1146
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1150
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1154
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1158
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1162
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1168
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1172
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1178
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1182
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1186
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1190
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1194
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1210
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1214
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1218
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1222
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1226
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1230
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1234
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1238
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1242
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1246
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1250
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1255
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1261
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1265
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1269
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1273
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1277
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1281
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1285
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1289
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1295
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1300
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1305
		{
			yyVAL.optVal = nil
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1309
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1314
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1318
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1326
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1330
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1336
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1344
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1348
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1352
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1357
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1361
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1366
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1370
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1375
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1379
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1383
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1388
		{
			yyVAL.str = ""
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1392
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1396
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1401
		{
			yyVAL.str = ""
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1405
		{
			yyVAL.str = string(yyDollar[1].bytes) // Set pseudo collation "binary" for BINARY attribute (deprecated in future MySQL versions)
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1409
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1415
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1419
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1425
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1429
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1435
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1439
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1444
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1448
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1454
		{
			yyVAL.str = ""
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1458
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1464
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1468
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1472
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1476
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1484
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1488
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1494
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1498
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1504
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1508
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1514
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1521
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1527
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1533
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1539
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 259:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1547
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1559
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1563
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1567
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1571
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 264:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1577
		{
			yyVAL.indexDefinition = &IndexDefinition{
				Info:    &IndexInfo{Type: string(yyDollar[3].bytes) + " " + string(yyDollar[4].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true},
				Columns: yyDollar[6].indexColumns,
			}
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1585
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1592
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1596
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1601
		{
			yyVAL.str = ""
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1605
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1609
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1617
		{
			yyVAL.str = yyDollar[1].str
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1621
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1625
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1631
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1635
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1639
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1645
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1649
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 280:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1663
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 281:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1677
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 282:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1686
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1690
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 284:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1694
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1707
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1717
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 287:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1722
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1727
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1731
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 310:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1763
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1769
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1773
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 313:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1779
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 314:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1783
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 315:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1789
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1795
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 317:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1803
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 318:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1808
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1816
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1820
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1826
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1830
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1835
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1841
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1845
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1849
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1854
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1858
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1862
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1866
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 331:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1870
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1874
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1878
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1882
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1886
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1890
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1894
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1898
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1908
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1912
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 341:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1916
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 342:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1920
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1924
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1928
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1932
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1942
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1948
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1952
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1958
		{
			yyVAL.str = ""
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1962
		{
			yyVAL.str = "extended "
		}
	case 351:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1968
		{
			yyVAL.str = ""
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1972
		{
			yyVAL.str = "full "
		}
	case 353:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1978
		{
			yyVAL.str = ""
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1982
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1986
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 356:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1992
		{
			yyVAL.showFilter = nil
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1996
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2000
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2006
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2010
		{
			yyVAL.str = SessionStr
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2014
		{
			yyVAL.str = GlobalStr
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2020
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2024
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2030
		{
			yyVAL.statement = &Begin{}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2034
		{
			yyVAL.statement = &Begin{}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2040
		{
			yyVAL.statement = &Commit{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2046
		{
			yyVAL.statement = &Rollback{}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2052
		{
			yyVAL.statement = &OtherRead{}
		}
	case 369:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2056
		{
			yyVAL.statement = &OtherRead{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2060
		{
			yyVAL.statement = &OtherRead{}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2064
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2068
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2073
		{
			setAllowComments(yylex, true)
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2077
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2083
		{
			yyVAL.bytes2 = nil
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2087
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2093
		{
			yyVAL.str = UnionStr
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2097
		{
			yyVAL.str = UnionAllStr
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2101
		{
			yyVAL.str = UnionDistinctStr
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2106
		{
			yyVAL.str = ""
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2110
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2114
		{
			yyVAL.str = SQLCacheStr
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2119
		{
			yyVAL.str = ""
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2123
		{
			yyVAL.str = DistinctStr
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2128
		{
			yyVAL.str = ""
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2132
		{
			yyVAL.str = StraightJoinHint
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2137
		{
			yyVAL.selectExprs = nil
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2141
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2147
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2151
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2157
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2161
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2165
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2169
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2174
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2178
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2182
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2189
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2194
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2198
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2204
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2208
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2218
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2222
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2226
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2232
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 410:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2236
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2242
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2247
		{
			yyVAL.columns = Columns{NewColIdent(string(yyDollar[1].bytes))}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2251
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2257
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2261
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2274
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2278
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2282
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2286
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2292
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 421:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2294
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2298
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2300
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2304
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2306
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2309
		{
			yyVAL.empty = struct{}{}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2311
		{
			yyVAL.empty = struct{}{}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2314
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2318
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2322
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2329
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2335
		{
			yyVAL.str = JoinStr
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2339
		{
			yyVAL.str = JoinStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2343
		{
			yyVAL.str = JoinStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2349
		{
			yyVAL.str = StraightJoinStr
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2355
		{
			yyVAL.str = LeftJoinStr
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2359
		{
			yyVAL.str = LeftJoinStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2363
		{
			yyVAL.str = RightJoinStr
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.str = RightJoinStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2373
		{
			yyVAL.str = NaturalJoinStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2377
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2387
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2391
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2397
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2401
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2406
		{
			yyVAL.indexHints = nil
		}
	case 448:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2410
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2414
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2418
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2423
		{
			yyVAL.expr = nil
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2427
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2433
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2437
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2441
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2445
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2449
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2453
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2463
		{
			yyVAL.str = ""
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2467
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2473
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2477
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2483
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2487
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2491
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2495
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 468:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2499
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2503
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2507
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 471:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2511
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 472:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2515
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2519
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2525
		{
			yyVAL.str = IsNullStr
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2529
		{
			yyVAL.str = IsNotNullStr
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2533
		{
			yyVAL.str = IsTrueStr
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2537
		{
			yyVAL.str = IsNotTrueStr
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2541
		{
			yyVAL.str = IsFalseStr
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2545
		{
			yyVAL.str = IsNotFalseStr
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2551
		{
			yyVAL.str = EqualStr
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2555
		{
			yyVAL.str = LessThanStr
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2559
		{
			yyVAL.str = GreaterThanStr
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2563
		{
			yyVAL.str = LessEqualStr
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2567
		{
			yyVAL.str = GreaterEqualStr
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2571
		{
			yyVAL.str = NotEqualStr
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2575
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 487:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2580
		{
			yyVAL.expr = nil
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2590
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2594
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2598
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2604
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2610
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 494:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2614
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2620
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2624
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2628
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2632
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2636
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2640
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2644
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2648
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2652
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2656
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2660
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2664
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2668
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2672
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2676
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2680
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2684
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2688
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2692
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2696
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2700
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2704
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2708
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2716
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2730
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2734
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2738
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2746
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2764
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2768
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2786
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 533:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2790
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 534:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2794
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 535:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2798
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 536:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2802
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 537:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2806
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 538:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2810
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 539:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2814
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 540:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2818
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 541:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2822
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 542:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2826
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 543:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2830
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2834
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2844
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2848
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2852
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2856
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2880
		{
			yyVAL.expr = &ConvertExpr{Type: yyDollar[2].convertType}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2894
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2898
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2902
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2906
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2912
		{
			yyVAL.str = ""
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2916
		{
			yyVAL.str = BooleanModeStr
		}
	case 562:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2920
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 563:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2924
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 564:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2928
		{
			yyVAL.str = QueryExpansionStr
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2934
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2938
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2944
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2948
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2952
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2956
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2960
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2964
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2970
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2974
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2978
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2982
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2986
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2990
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2994
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2998
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3004
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3008
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3012
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3016
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3020
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3024
		{
			yyVAL.convertType = &ConvertType{Type: yyDollar[1].columnType.Type}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3028
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3033
		{
			yyVAL.expr = nil
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3037
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3042
		{
			yyVAL.str = string("")
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3046
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3052
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3056
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3062
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3067
		{
			yyVAL.expr = nil
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3071
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3077
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3081
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 599:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3085
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3091
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3095
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3099
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3103
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3107
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3111
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3115
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3119
		{
			yyVAL.expr = &NullVal{}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3125
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3134
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3138
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3143
		{
			yyVAL.exprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3147
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3152
		{
			yyVAL.expr = nil
		}
	case 614:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3156
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3161
		{
			yyVAL.orderBy = nil
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3165
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3171
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3175
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3181
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3186
		{
			yyVAL.str = AscScr
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3190
		{
			yyVAL.str = AscScr
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3194
		{
			yyVAL.str = DescScr
		}
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3199
		{
			yyVAL.limit = nil
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3203
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3207
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3211
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3216
		{
			yyVAL.str = ""
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3220
		{
			yyVAL.str = ForUpdateStr
		}
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3224
		{
			yyVAL.str = ShareModeStr
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3237
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3241
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3245
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 633:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3250
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:3254
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:3258
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3265
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 637:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3269
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 638:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3273
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3277
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3282
		{
			yyVAL.updateExprs = nil
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:3286
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3292
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3296
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3302
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3306
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3312
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3318
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3328
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 649:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3332
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 650:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3338
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3344
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3348
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3354
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3358
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3362
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 657:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3369
		{
			yyVAL.bytes = []byte("charset")
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3376
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3380
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3384
		{
			yyVAL.expr = &Default{}
		}
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3393
		{
			yyVAL.byt = 0
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3395
		{
			yyVAL.byt = 1
		}
	case 666:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3398
		{
			yyVAL.empty = struct{}{}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3400
		{
			yyVAL.empty = struct{}{}
		}
	case 668:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3403
		{
			yyVAL.str = ""
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3405
		{
			yyVAL.str = IgnoreStr
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3409
		{
			yyVAL.empty = struct{}{}
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3411
		{
			yyVAL.empty = struct{}{}
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3413
		{
			yyVAL.empty = struct{}{}
		}
	case 673:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3415
		{
			yyVAL.empty = struct{}{}
		}
	case 674:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3417
		{
			yyVAL.empty = struct{}{}
		}
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3419
		{
			yyVAL.empty = struct{}{}
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3421
		{
			yyVAL.empty = struct{}{}
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3423
		{
			yyVAL.empty = struct{}{}
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3425
		{
			yyVAL.empty = struct{}{}
		}
	case 679:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3427
		{
			yyVAL.empty = struct{}{}
		}
	case 680:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3430
		{
			yyVAL.empty = struct{}{}
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3432
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3434
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3438
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3440
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3444
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3448
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3455
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3461
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3465
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3472
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 909:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3714
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3723
		{
			decNesting(yylex)
		}
	case 911:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3728
		{
			forceEOF(yylex)
		}
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3733
		{
			forceEOF(yylex)
		}
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3737
		{
			forceEOF(yylex)
		}
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3741
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
