// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const SPATIAL = 57452
const FULLTEXT = 57453
const FOREIGN = 57454
const KEY_BLOCK_SIZE = 57455
const UNIQUE = 57456
const KEY = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const VARYING = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 271,
	151, 271,
	-2, 261,
	-1, 239,
	108, 595,
	-2, 591,
	-1, 240,
	108, 596,
	-2, 592,
	-1, 309,
	79, 754,
	-2, 58,
	-1, 310,
	79, 715,
	-2, 59,
	-1, 315,
	79, 699,
	-2, 557,
	-1, 317,
	79, 736,
	-2, 559,
	-1, 576,
	51, 41,
	53, 41,
	-2, 43,
	-1, 711,
	108, 598,
	-2, 594,
	-1, 922,
	5, 28,
	-2, 403,
	-1, 947,
	5, 27,
	-2, 532,
	-1, 1188,
	5, 28,
	-2, 533,
	-1, 1232,
	5, 27,
	-2, 535,
	-1, 1291,
	5, 28,
	-2, 536,
}

const yyPrivate = 57344

const yyLast = 10841

var yyAct = [...]int{

	240, 1282, 649, 1243, 864, 523, 244, 1100, 773, 269,
	1128, 791, 1101, 1194, 844, 1017, 570, 1020, 774, 522,
	3, 1097, 858, 218, 568, 966, 812, 1074, 1008, 914,
	586, 76, 736, 950, 743, 187, 809, 823, 187, 955,
	813, 746, 762, 713, 745, 314, 456, 462, 854, 572,
	411, 585, 212, 770, 308, 557, 468, 296, 896, 52,
	295, 227, 187, 187, 76, 305, 476, 217, 187, 1311,
	76, 303, 242, 1301, 881, 53, 270, 47, 1309, 1289,
	1307, 865, 1300, 1288, 1092, 1182, 294, 880, 415, 1132,
	1123, 1124, 57, 805, 806, 537, 213, 214, 215, 216,
	1122, 231, 436, 182, 178, 179, 180, 987, 988, 989,
	587, 451, 588, 804, 885, 992, 990, 59, 60, 61,
	62, 63, 678, 879, 47, 998, 836, 974, 246, 679,
	973, 845, 223, 975, 1221, 841, 1171, 1169, 300, 211,
	1265, 489, 488, 498, 499, 491, 492, 493, 494, 495,
	496, 497, 490, 424, 1308, 500, 1306, 1075, 447, 448,
	1283, 1053, 771, 984, 1024, 438, 1244, 440, 1050, 1229,
	995, 876, 873, 874, 824, 872, 187, 1025, 187, 1246,
	994, 981, 792, 794, 187, 837, 425, 825, 1077, 233,
	299, 187, 418, 437, 439, 76, 76, 76, 76, 176,
	76, 883, 886, 175, 648, 176, 657, 76, 965, 964,
	963, 413, 421, 190, 181, 412, 177, 891, 512, 513,
	1079, 1270, 1083, 810, 1078, 828, 1076, 824, 1191, 1061,
	930, 908, 1081, 685, 76, 480, 431, 878, 1137, 490,
	825, 1080, 500, 465, 500, 1245, 682, 829, 473, 474,
	473, 926, 475, 925, 1082, 1084, 793, 845, 1057, 877,
	1275, 834, 1094, 826, 475, 1051, 475, 1049, 827, 474,
	473, 442, 442, 442, 442, 435, 442, 991, 1052, 824,
	1147, 1287, 953, 442, 820, 652, 475, 821, 1138, 589,
	720, 822, 825, 763, 187, 892, 882, 464, 1266, 470,
	47, 187, 187, 187, 718, 719, 717, 76, 763, 884,
	937, 986, 1293, 76, 174, 509, 1210, 466, 511, 1209,
	1012, 831, 493, 494, 495, 496, 497, 490, 833, 832,
	500, 1040, 1011, 1056, 427, 428, 429, 999, 684, 474,
	473, 905, 906, 907, 417, 521, 1096, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 475, 536, 538, 538,
	538, 538, 538, 538, 538, 538, 546, 547, 548, 549,
	510, 1276, 583, 683, 577, 293, 1228, 569, 539, 540,
	541, 542, 543, 544, 545, 688, 689, 1207, 443, 474,
	473, 703, 705, 706, 1157, 1041, 704, 830, 927, 1009,
	1043, 1036, 1037, 1044, 1039, 1038, 475, 1046, 1042, 459,
	463, 737, 996, 738, 76, 76, 419, 420, 1045, 21,
	1273, 187, 187, 76, 1035, 187, 481, 1131, 187, 299,
	474, 473, 187, 50, 76, 76, 76, 76, 76, 76,
	76, 76, 1130, 716, 985, 474, 473, 475, 76, 76,
	1297, 455, 311, 187, 259, 258, 261, 262, 263, 264,
	524, 976, 475, 260, 265, 1236, 1294, 455, 76, 535,
	1236, 1280, 187, 1236, 1278, 222, 867, 666, 76, 491,
	492, 493, 494, 495, 496, 497, 490, 739, 690, 500,
	664, 442, 663, 714, 559, 562, 563, 564, 560, 442,
	561, 565, 237, 662, 956, 957, 1236, 1277, 1236, 455,
	442, 442, 442, 442, 442, 442, 442, 442, 1236, 1237,
	1251, 76, 1203, 1202, 442, 442, 711, 23, 692, 1119,
	455, 1190, 455, 1144, 1143, 1140, 1141, 755, 758, 709,
	1140, 1139, 1250, 764, 707, 750, 920, 455, 554, 455,
	945, 653, 187, 946, 651, 187, 187, 187, 187, 187,
	775, 748, 455, 596, 595, 580, 433, 187, 426, 412,
	187, 751, 752, 50, 187, 1064, 1133, 759, 23, 187,
	187, 952, 767, 76, 454, 740, 741, 932, 47, 750,
	760, 766, 1098, 768, 769, 951, 76, 951, 952, 929,
	54, 748, 525, 799, 1231, 581, 798, 579, 579, 1186,
	23, 554, 715, 777, 778, 776, 780, 920, 779, 553,
	1146, 788, 554, 796, 50, 50, 846, 847, 848, 931,
	797, 300, 300, 300, 300, 300, 802, 801, 920, 951,
	1142, 928, 977, 554, 268, 803, 569, 817, 795, 187,
	920, 582, 76, 686, 76, 300, 50, 224, 187, 1254,
	1216, 187, 76, 700, 701, 1214, 1211, 838, 860, 859,
	559, 562, 563, 564, 560, 74, 561, 565, 1113, 980,
	855, 956, 957, 299, 299, 299, 299, 299, 850, 849,
	650, 856, 857, 1030, 65, 311, 862, 1098, 299, 1013,
	959, 785, 660, 50, 452, 783, 786, 299, 313, 787,
	784, 563, 564, 698, 416, 524, 962, 961, 753, 754,
	782, 781, 228, 229, 1305, 1299, 1060, 714, 442, 893,
	442, 711, 469, 1304, 897, 903, 902, 898, 442, 1004,
	1184, 594, 904, 434, 1217, 467, 869, 457, 659, 567,
	514, 515, 516, 517, 518, 519, 520, 1024, 458, 225,
	226, 910, 1031, 1026, 1027, 1032, 1029, 1028, 469, 1021,
	1025, 219, 1259, 901, 220, 54, 952, 1258, 1219, 808,
	1033, 900, 471, 1267, 993, 681, 1023, 909, 56, 919,
	947, 839, 840, 58, 842, 843, 76, 1022, 578, 187,
	51, 1, 1034, 866, 936, 934, 1016, 875, 851, 852,
	853, 1281, 1242, 76, 1127, 819, 811, 410, 64, 960,
	1274, 818, 597, 969, 997, 835, 602, 600, 601, 599,
	604, 968, 603, 970, 971, 598, 198, 306, 566, 313,
	313, 313, 313, 590, 313, 861, 715, 948, 949, 472,
	66, 313, 1048, 978, 1000, 1001, 1047, 871, 1055, 982,
	983, 677, 890, 76, 76, 450, 76, 200, 508, 710,
	899, 972, 312, 894, 895, 300, 463, 1105, 478, 1010,
	687, 1003, 461, 1005, 1006, 1007, 1257, 1218, 935, 76,
	534, 1069, 187, 187, 761, 245, 702, 257, 254, 256,
	187, 255, 693, 944, 482, 243, 235, 298, 550, 76,
	558, 489, 488, 498, 499, 491, 492, 493, 494, 495,
	496, 497, 490, 556, 1019, 500, 555, 299, 958, 954,
	297, 1063, 1181, 1264, 697, 25, 55, 230, 921, 19,
	442, 1068, 18, 17, 1067, 20, 16, 15, 14, 76,
	76, 313, 775, 938, 1099, 1086, 1102, 591, 775, 1085,
	29, 441, 1073, 13, 12, 442, 11, 10, 1104, 9,
	1109, 311, 8, 7, 6, 1107, 711, 5, 76, 4,
	76, 76, 221, 22, 814, 712, 2, 0, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 1121, 1125, 0, 0, 0, 0, 0,
	1093, 0, 0, 0, 187, 0, 0, 1136, 0, 0,
	1126, 76, 0, 1103, 76, 47, 1108, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 1134, 1135, 1149,
	1115, 1116, 1117, 0, 1120, 0, 0, 0, 187, 0,
	691, 0, 0, 0, 76, 0, 0, 0, 646, 313,
	0, 0, 76, 0, 0, 187, 0, 313, 0, 0,
	0, 0, 0, 0, 710, 1150, 0, 0, 313, 313,
	313, 313, 313, 313, 313, 313, 0, 1152, 0, 1160,
	0, 0, 313, 313, 0, 0, 0, 1159, 0, 0,
	0, 1155, 1167, 0, 0, 0, 0, 747, 749, 0,
	0, 0, 694, 0, 76, 0, 76, 76, 76, 187,
	76, 1185, 478, 765, 0, 313, 76, 1095, 0, 1196,
	1197, 1198, 1193, 0, 0, 1199, 0, 0, 0, 0,
	0, 300, 1110, 1111, 1201, 0, 1112, 76, 76, 1114,
	76, 0, 0, 790, 1206, 0, 1208, 444, 445, 446,
	0, 449, 1212, 0, 0, 742, 978, 0, 453, 1180,
	0, 0, 0, 1205, 0, 756, 756, 0, 0, 0,
	1220, 756, 0, 0, 0, 0, 0, 0, 1213, 0,
	0, 76, 76, 299, 0, 0, 1102, 0, 756, 1230,
	0, 814, 0, 0, 76, 0, 0, 0, 0, 1232,
	0, 1241, 76, 0, 1247, 76, 0, 76, 0, 0,
	0, 911, 912, 913, 0, 1252, 0, 313, 1253, 0,
	1255, 0, 0, 0, 0, 0, 0, 76, 0, 1268,
	313, 1102, 0, 1248, 0, 1249, 1272, 1158, 0, 0,
	0, 0, 0, 1269, 1018, 76, 0, 0, 0, 0,
	0, 1164, 1165, 1103, 1166, 1285, 1233, 1168, 1279, 1170,
	0, 76, 0, 0, 775, 0, 1290, 0, 0, 0,
	0, 0, 0, 1295, 76, 0, 1183, 0, 0, 0,
	0, 0, 0, 524, 1256, 0, 313, 1066, 313, 1303,
	1302, 0, 0, 0, 0, 0, 313, 0, 1103, 0,
	47, 0, 0, 0, 0, 1204, 0, 0, 0, 1089,
	0, 0, 0, 0, 917, 0, 0, 0, 918, 0,
	313, 0, 0, 0, 0, 922, 923, 924, 0, 0,
	0, 0, 0, 0, 933, 0, 0, 0, 0, 939,
	0, 940, 941, 942, 943, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 814, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 647, 0, 0, 0,
	0, 0, 0, 0, 656, 1310, 0, 0, 206, 0,
	0, 0, 0, 301, 0, 667, 668, 669, 670, 671,
	672, 673, 674, 0, 0, 0, 0, 0, 0, 675,
	676, 0, 0, 0, 0, 0, 0, 0, 1070, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	460, 1087, 1088, 0, 1090, 1091, 0, 0, 191, 0,
	967, 0, 0, 0, 193, 0, 0, 0, 1284, 524,
	1066, 199, 195, 0, 0, 0, 304, 313, 0, 0,
	0, 414, 0, 0, 0, 185, 0, 0, 210, 498,
	499, 491, 492, 493, 494, 495, 496, 497, 490, 197,
	0, 500, 201, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 185, 185, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 1072, 0, 0, 1014, 313, 0,
	313, 192, 0, 0, 814, 489, 488, 498, 499, 491,
	492, 493, 494, 495, 496, 497, 490, 0, 0, 500,
	0, 0, 0, 313, 0, 1018, 814, 0, 194, 0,
	202, 203, 204, 205, 209, 0, 0, 0, 0, 208,
	207, 1118, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 915, 0, 0, 0, 0, 0, 0, 422,
	0, 423, 1162, 0, 0, 313, 0, 430, 0, 0,
	0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	756, 0, 0, 1106, 967, 0, 756, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 185, 0,
	0, 0, 0, 868, 185, 870, 0, 0, 484, 0,
	487, 185, 313, 889, 313, 1129, 501, 502, 503, 504,
	505, 506, 507, 0, 485, 486, 483, 489, 488, 498,
	499, 491, 492, 493, 494, 495, 496, 497, 490, 0,
	0, 500, 1161, 0, 0, 0, 0, 0, 0, 1163,
	0, 0, 0, 0, 0, 1148, 0, 0, 1151, 0,
	1172, 1173, 1174, 455, 0, 1177, 0, 0, 1222, 1223,
	1153, 1224, 1225, 1226, 0, 0, 0, 552, 1187, 1188,
	1189, 0, 1192, 0, 0, 0, 576, 0, 1156, 1178,
	455, 0, 0, 0, 0, 0, 313, 0, 0, 489,
	488, 498, 499, 491, 492, 493, 494, 495, 496, 497,
	490, 0, 0, 500, 185, 0, 0, 0, 0, 0,
	0, 185, 574, 185, 0, 0, 489, 488, 498, 499,
	491, 492, 493, 494, 495, 496, 497, 490, 0, 0,
	500, 0, 0, 0, 0, 0, 0, 0, 1195, 0,
	1195, 1195, 1195, 0, 1200, 0, 1227, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1238, 1239, 1240, 0, 0, 0, 0, 0, 0,
	0, 313, 313, 0, 1215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1260, 1261, 1262,
	1263, 0, 0, 1312, 654, 655, 0, 0, 658, 0,
	0, 661, 0, 0, 0, 1015, 0, 0, 0, 0,
	0, 1175, 455, 0, 0, 1234, 1235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 0, 1129, 1286,
	1054, 185, 185, 0, 1291, 185, 1195, 0, 185, 1195,
	0, 1195, 665, 0, 0, 699, 1296, 0, 489, 488,
	498, 499, 491, 492, 493, 494, 495, 496, 497, 490,
	0, 1271, 500, 185, 0, 23, 24, 48, 26, 27,
	0, 0, 0, 0, 0, 0, 0, 1314, 1315, 1195,
	0, 0, 185, 0, 42, 0, 0, 0, 28, 0,
	0, 665, 756, 916, 0, 1292, 488, 498, 499, 491,
	492, 493, 494, 495, 496, 497, 490, 37, 1298, 500,
	0, 50, 0, 489, 488, 498, 499, 491, 492, 493,
	494, 495, 496, 497, 490, 772, 0, 500, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 234, 234, 0,
	0, 757, 757, 234, 0, 0, 0, 757, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 234, 234, 234,
	234, 0, 185, 0, 757, 185, 185, 185, 185, 185,
	30, 31, 33, 32, 35, 1179, 0, 789, 0, 0,
	185, 0, 0, 0, 574, 0, 0, 0, 0, 185,
	185, 0, 36, 43, 44, 0, 0, 45, 46, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 38, 39, 0, 40, 41, 0, 0, 0, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 887, 0, 0, 888, 0, 0, 0, 0, 1176,
	0, 0, 0, 0, 0, 0, 489, 488, 498, 499,
	491, 492, 493, 494, 495, 496, 497, 490, 0, 185,
	500, 0, 0, 125, 0, 0, 0, 0, 185, 0,
	0, 185, 93, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 489, 488, 498, 499, 491, 492, 493,
	494, 495, 496, 497, 490, 49, 665, 500, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 234, 86,
	489, 488, 498, 499, 491, 492, 493, 494, 495, 496,
	497, 490, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 489, 488, 498, 499, 491,
	492, 493, 494, 495, 496, 497, 490, 0, 0, 500,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 131,
	0, 234, 145, 98, 97, 106, 0, 0, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 185,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 170, 133, 95, 160, 0, 0, 0, 0,
	0, 0, 1058, 1059, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 665, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 757, 0, 0, 0,
	0, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1154, 0, 0, 185, 0, 0, 0, 399, 389,
	0, 361, 401, 339, 353, 409, 354, 355, 382, 325,
	369, 125, 351, 0, 342, 320, 348, 321, 340, 363,
	93, 338, 391, 372, 107, 407, 109, 377, 185, 142,
	118, 0, 0, 365, 393, 367, 387, 360, 383, 330,
	376, 402, 352, 380, 403, 185, 0, 0, 75, 0,
	815, 816, 0, 0, 0, 0, 0, 86, 0, 379,
	398, 350, 381, 319, 378, 0, 323, 326, 408, 396,
	345, 346, 979, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 574,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 188, 397, 357, 356, 131, 0, 0,
	145, 98, 97, 106, 400, 366, 392, 341, 349, 89,
	347, 137, 127, 157, 374, 128, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 322, 0, 143, 159, 173, 337, 395,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	333, 336, 331, 332, 370, 371, 404, 405, 406, 386,
	328, 0, 334, 335, 0, 390, 373, 77, 0, 108,
	170, 133, 95, 160, 0, 0, 399, 389, 757, 361,
	401, 339, 353, 409, 354, 355, 382, 325, 369, 125,
	351, 0, 342, 320, 348, 321, 340, 363, 93, 338,
	391, 372, 107, 407, 109, 377, 0, 142, 118, 0,
	0, 365, 393, 367, 387, 360, 383, 330, 376, 402,
	352, 380, 403, 0, 0, 0, 75, 0, 815, 816,
	0, 0, 0, 0, 0, 86, 0, 379, 398, 350,
	381, 319, 378, 0, 323, 326, 408, 396, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 384,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	0, 375, 0, 0, 0, 327, 324, 0, 362, 0,
	0, 0, 329, 0, 344, 385, 0, 318, 388, 394,
	359, 188, 397, 357, 356, 131, 0, 0, 145, 98,
	97, 106, 400, 366, 392, 341, 349, 89, 347, 137,
	127, 157, 374, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 322, 0, 143, 159, 173, 337, 395, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 333, 336,
	331, 332, 370, 371, 404, 405, 406, 386, 328, 0,
	334, 335, 0, 390, 373, 77, 0, 108, 170, 133,
	95, 160, 399, 389, 0, 361, 401, 339, 353, 409,
	354, 355, 382, 325, 369, 125, 351, 0, 342, 320,
	348, 321, 340, 363, 93, 338, 391, 372, 107, 407,
	109, 377, 0, 142, 118, 0, 0, 365, 393, 367,
	387, 360, 383, 330, 376, 402, 352, 380, 403, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 379, 398, 350, 381, 319, 378, 0,
	323, 326, 408, 396, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 364, 368, 384, 358, 0, 0, 0,
	0, 0, 0, 1065, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 188, 397, 357,
	356, 131, 0, 0, 145, 98, 97, 106, 400, 366,
	392, 341, 349, 89, 347, 137, 127, 157, 374, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 322, 0, 143,
	159, 173, 337, 395, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 333, 336, 331, 332, 370, 371,
	404, 405, 406, 386, 328, 0, 334, 335, 0, 390,
	373, 77, 0, 108, 170, 133, 95, 160, 399, 389,
	0, 361, 401, 339, 353, 409, 354, 355, 382, 325,
	369, 125, 351, 0, 342, 320, 348, 321, 340, 363,
	93, 338, 391, 372, 107, 407, 109, 377, 0, 142,
	118, 0, 0, 365, 393, 367, 387, 360, 383, 330,
	376, 402, 352, 380, 403, 50, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 379,
	398, 350, 381, 319, 378, 0, 323, 326, 408, 396,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 0,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 188, 397, 357, 356, 131, 0, 0,
	145, 98, 97, 106, 400, 366, 392, 341, 349, 89,
	347, 137, 127, 157, 374, 128, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 322, 0, 143, 159, 173, 337, 395,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	333, 336, 331, 332, 370, 371, 404, 405, 406, 386,
	328, 0, 334, 335, 0, 390, 373, 77, 0, 108,
	170, 133, 95, 160, 399, 389, 0, 361, 401, 339,
	353, 409, 354, 355, 382, 325, 369, 125, 351, 0,
	342, 320, 348, 321, 340, 363, 93, 338, 391, 372,
	107, 407, 109, 377, 0, 142, 118, 0, 0, 365,
	393, 367, 387, 360, 383, 330, 376, 402, 352, 380,
	403, 0, 0, 0, 239, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 379, 398, 350, 381, 319,
	378, 0, 323, 326, 408, 396, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 384, 358, 0,
	0, 0, 0, 0, 0, 708, 0, 343, 0, 375,
	0, 0, 0, 327, 324, 0, 362, 0, 0, 0,
	329, 0, 344, 385, 0, 318, 388, 394, 359, 188,
	397, 357, 356, 131, 0, 0, 145, 98, 97, 106,
	400, 366, 392, 341, 349, 89, 347, 137, 127, 157,
	374, 128, 136, 110, 149, 132, 156, 189, 165, 147,
	164, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 172, 83, 162, 163, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 322,
	0, 143, 159, 173, 337, 395, 166, 167, 168, 169,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	171, 126, 138, 88, 158, 141, 333, 336, 331, 332,
	370, 371, 404, 405, 406, 386, 328, 0, 334, 335,
	0, 390, 373, 77, 0, 108, 170, 133, 95, 160,
	399, 389, 0, 361, 401, 339, 353, 409, 354, 355,
	382, 325, 369, 125, 351, 0, 342, 320, 348, 321,
	340, 363, 93, 338, 391, 372, 107, 407, 109, 377,
	0, 142, 118, 0, 0, 365, 393, 367, 387, 360,
	383, 330, 376, 402, 352, 380, 403, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 379, 398, 350, 381, 319, 378, 0, 323, 326,
	408, 396, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 384, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 327,
	324, 0, 362, 0, 0, 0, 329, 0, 344, 385,
	0, 318, 388, 394, 359, 188, 397, 357, 356, 131,
	0, 0, 145, 98, 97, 106, 400, 366, 392, 341,
	349, 89, 347, 137, 127, 157, 374, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 322, 0, 143, 159, 173,
	337, 395, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 333, 336, 331, 332, 370, 371, 404, 405,
	406, 386, 328, 0, 334, 335, 0, 390, 373, 77,
	0, 108, 170, 133, 95, 160, 399, 389, 0, 361,
	401, 339, 353, 409, 354, 355, 382, 325, 369, 125,
	351, 0, 342, 320, 348, 321, 340, 363, 93, 338,
	391, 372, 107, 407, 109, 377, 0, 142, 118, 0,
	0, 365, 393, 367, 387, 360, 383, 330, 376, 402,
	352, 380, 403, 0, 0, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 379, 398, 350,
	381, 319, 378, 0, 323, 326, 408, 396, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 384,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	0, 375, 0, 0, 0, 327, 324, 0, 362, 0,
	0, 0, 329, 0, 344, 385, 0, 318, 388, 394,
	359, 188, 397, 357, 356, 131, 0, 0, 145, 98,
	97, 106, 400, 366, 392, 341, 349, 89, 347, 137,
	127, 157, 374, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 322, 0, 143, 159, 173, 337, 395, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 333, 336,
	331, 332, 370, 371, 404, 405, 406, 386, 328, 0,
	334, 335, 0, 390, 373, 77, 0, 108, 170, 133,
	95, 160, 399, 389, 0, 361, 401, 339, 353, 409,
	354, 355, 382, 325, 369, 125, 351, 0, 342, 320,
	348, 321, 340, 363, 93, 338, 391, 372, 107, 407,
	109, 377, 0, 142, 118, 0, 0, 365, 393, 367,
	387, 360, 383, 330, 376, 402, 352, 380, 403, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 379, 398, 350, 381, 319, 378, 0,
	323, 326, 408, 396, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 364, 368, 384, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 188, 397, 357,
	356, 131, 0, 0, 145, 98, 97, 106, 400, 366,
	392, 341, 349, 89, 347, 137, 127, 157, 374, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 316, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 322, 0, 143,
	159, 173, 337, 395, 166, 167, 168, 169, 0, 0,
	0, 317, 315, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 333, 336, 331, 332, 370, 371,
	404, 405, 406, 386, 328, 0, 334, 335, 0, 390,
	373, 77, 0, 108, 170, 133, 95, 160, 399, 389,
	0, 361, 401, 339, 353, 409, 354, 355, 382, 325,
	369, 125, 351, 0, 342, 320, 348, 321, 340, 363,
	93, 338, 391, 372, 107, 407, 109, 377, 0, 142,
	118, 0, 0, 365, 393, 367, 387, 360, 383, 330,
	376, 402, 352, 380, 403, 0, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 379,
	398, 350, 381, 319, 378, 0, 323, 326, 408, 396,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 0,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 188, 397, 357, 356, 131, 0, 0,
	145, 98, 97, 106, 400, 366, 392, 341, 349, 89,
	347, 137, 127, 157, 374, 128, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 322, 0, 143, 159, 173, 337, 395,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	333, 336, 331, 332, 370, 371, 404, 405, 406, 386,
	328, 0, 334, 335, 0, 390, 373, 77, 0, 108,
	170, 133, 95, 160, 399, 389, 0, 361, 401, 339,
	353, 409, 354, 355, 382, 325, 369, 125, 351, 0,
	342, 320, 348, 321, 340, 363, 93, 338, 391, 372,
	107, 407, 109, 377, 0, 142, 118, 0, 0, 365,
	393, 367, 387, 360, 383, 330, 376, 402, 352, 380,
	403, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 379, 398, 350, 381, 319,
	378, 0, 323, 326, 408, 396, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 384, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 0, 375,
	0, 0, 0, 327, 324, 0, 362, 0, 0, 0,
	329, 0, 344, 385, 0, 318, 388, 394, 359, 188,
	397, 357, 356, 131, 0, 0, 145, 98, 97, 106,
	400, 366, 392, 341, 349, 89, 347, 137, 127, 157,
	374, 128, 136, 110, 149, 132, 156, 189, 165, 147,
	164, 78, 146, 584, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 172, 83, 162, 163, 82, 316, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 322,
	0, 143, 159, 173, 337, 395, 166, 167, 168, 169,
	0, 0, 0, 317, 315, 101, 140, 104, 111, 134,
	171, 126, 138, 88, 158, 141, 333, 336, 331, 332,
	370, 371, 404, 405, 406, 386, 328, 0, 334, 335,
	0, 390, 373, 77, 0, 108, 170, 133, 95, 160,
	399, 389, 0, 361, 401, 339, 353, 409, 354, 355,
	382, 325, 369, 125, 351, 0, 342, 320, 348, 321,
	340, 363, 93, 338, 391, 372, 107, 407, 109, 377,
	0, 142, 118, 0, 0, 365, 393, 367, 387, 360,
	383, 330, 376, 402, 352, 380, 403, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 379, 398, 350, 381, 319, 378, 0, 323, 326,
	408, 396, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 384, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 327,
	324, 0, 362, 0, 0, 0, 329, 0, 344, 385,
	0, 318, 388, 394, 359, 188, 397, 357, 356, 131,
	0, 0, 145, 98, 97, 106, 400, 366, 392, 341,
	349, 89, 347, 137, 127, 157, 374, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 307,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 316, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 322, 0, 143, 159, 173,
	337, 395, 166, 167, 168, 169, 0, 0, 0, 317,
	315, 310, 309, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 333, 336, 331, 332, 370, 371, 404, 405,
	406, 386, 328, 0, 334, 335, 0, 390, 373, 77,
	0, 108, 170, 133, 95, 160, 125, 0, 0, 744,
	0, 241, 0, 0, 0, 93, 238, 0, 0, 107,
	280, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	271, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 239, 259, 258, 261, 262, 263, 264,
	0, 0, 86, 260, 265, 266, 267, 0, 0, 236,
	252, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 232, 0, 0, 0, 291, 0,
	251, 0, 0, 247, 248, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 289, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 281, 290, 287, 288, 285,
	286, 284, 283, 282, 292, 273, 274, 275, 276, 278,
	0, 277, 77, 0, 108, 170, 133, 95, 160, 125,
	0, 0, 0, 0, 241, 0, 0, 0, 93, 238,
	0, 0, 107, 280, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 271, 272, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 455, 239, 259, 258, 261,
	262, 263, 264, 0, 0, 86, 260, 265, 266, 267,
	0, 0, 236, 252, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 0, 0, 0,
	0, 291, 0, 251, 0, 0, 247, 248, 253, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 289, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 281, 290,
	287, 288, 285, 286, 284, 283, 282, 292, 273, 274,
	275, 276, 278, 0, 277, 77, 0, 108, 170, 133,
	95, 160, 125, 0, 0, 0, 0, 241, 0, 0,
	0, 93, 238, 0, 0, 107, 280, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 271, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 239,
	259, 258, 261, 262, 263, 264, 0, 0, 86, 260,
	265, 266, 267, 0, 0, 236, 252, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	232, 0, 0, 0, 291, 0, 251, 0, 0, 247,
	248, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 289, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 273, 274, 275, 276, 278, 0, 277, 77, 0,
	108, 170, 133, 95, 160, 125, 0, 0, 0, 0,
	241, 0, 0, 0, 93, 238, 0, 0, 107, 280,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 271,
	272, 0, 0, 0, 0, 0, 0, 807, 0, 50,
	0, 0, 239, 259, 258, 261, 262, 263, 264, 0,
	0, 86, 260, 265, 266, 267, 0, 0, 236, 252,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 249, 250, 0, 0, 0, 0, 291, 0, 251,
	0, 0, 247, 248, 253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	289, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 281, 290, 287, 288, 285, 286,
	284, 283, 282, 292, 273, 274, 275, 276, 278, 23,
	277, 77, 0, 108, 170, 133, 95, 160, 0, 0,
	0, 125, 0, 0, 0, 0, 241, 0, 0, 0,
	93, 238, 0, 0, 107, 280, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 271, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 239, 259,
	258, 261, 262, 263, 264, 0, 0, 86, 260, 265,
	266, 267, 0, 0, 236, 252, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 0,
	0, 0, 0, 291, 0, 251, 0, 0, 247, 248,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 289, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	281, 290, 287, 288, 285, 286, 284, 283, 282, 292,
	273, 274, 275, 276, 278, 0, 277, 77, 0, 108,
	170, 133, 95, 160, 125, 0, 0, 0, 0, 241,
	0, 0, 0, 93, 238, 0, 0, 107, 280, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 239, 259, 258, 261, 262, 263, 264, 0, 0,
	86, 260, 265, 266, 267, 0, 0, 236, 252, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 0, 0, 0, 0, 291, 0, 251, 0,
	0, 247, 248, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 289,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 281, 290, 287, 288, 285, 286, 284,
	283, 282, 292, 273, 274, 275, 276, 278, 125, 277,
	77, 0, 108, 170, 133, 95, 160, 93, 0, 0,
	0, 107, 280, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 271, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 239, 259, 258, 261, 262,
	263, 264, 0, 0, 86, 260, 265, 266, 267, 0,
	0, 0, 252, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 0, 0, 0, 0,
	291, 0, 251, 0, 0, 247, 248, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 289, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 0, 0, 89, 0, 137, 127,
	157, 1313, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 281, 290, 287,
	288, 285, 286, 284, 283, 282, 292, 273, 274, 275,
	276, 278, 125, 277, 77, 0, 108, 170, 133, 95,
	160, 93, 0, 0, 0, 107, 280, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 271, 272, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 239,
	259, 258, 261, 262, 263, 264, 0, 0, 86, 260,
	265, 266, 267, 0, 0, 0, 252, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 249, 250,
	0, 0, 0, 0, 291, 0, 251, 0, 0, 247,
	248, 253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 289, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 273, 274, 275, 276, 278, 0, 277, 77, 0,
	108, 170, 133, 95, 160, 125, 0, 0, 0, 477,
	0, 0, 0, 0, 93, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 479, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 474, 473, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 170, 133, 95, 160, 93, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 71, 72,
	0, 67, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 73, 0, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 69,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 0, 70,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 108, 170, 133,
	95, 160, 125, 0, 0, 0, 573, 0, 0, 0,
	0, 93, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 575, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 620, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 608, 0, 125, 0, 77, 0,
	108, 170, 133, 95, 160, 93, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 621, 0, 0, 0, 0,
	50, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 634, 635, 636, 637,
	638, 639, 640, 0, 641, 642, 643, 644, 645, 622,
	623, 624, 625, 605, 606, 0, 0, 607, 609, 0,
	610, 611, 612, 613, 614, 615, 616, 617, 618, 619,
	626, 627, 628, 629, 630, 631, 632, 633, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 77, 0, 108, 170, 133, 95, 160, 93,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 186, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 170,
	133, 95, 160, 93, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 695, 0, 0, 696, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 170, 133, 95, 160, 93, 593, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 592, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 108, 170, 133, 95,
	160, 125, 0, 0, 0, 573, 0, 0, 0, 0,
	93, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 186, 0,
	575, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 571, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	170, 133, 95, 160, 93, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 186, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 170, 133, 95, 160, 93, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 186, 0, 575, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 170, 133,
	95, 160, 93, 0, 0, 0, 107, 0, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 0, 479, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 77,
	0, 108, 170, 133, 95, 160, 551, 93, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 125, 0, 77, 0, 108, 170, 133, 95,
	160, 93, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 125, 0, 77, 0,
	108, 170, 133, 95, 160, 93, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 183, 0, 188, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 77, 0, 108, 170, 133, 95, 160, 93,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 170,
	133, 95, 160, 93, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 239, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 170, 133, 95, 160, 93, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 108, 170, 133, 95,
	160,
}
var yyPact = [...]int{

	1879, -1000, -192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 760, 783, -1000, -1000, -1000, -1000, -1000, -1000, 642,
	7211, 83, 98, -14, 9918, 95, 1333, 10590, -1000, -15,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 604, -1000, -1000,
	-1000, -1000, -1000, 754, 758, 651, 739, 684, -1000, 5604,
	77, 8797, 9694, 4905, -1000, 514, 92, 10590, -148, 10142,
	69, 69, 69, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 94, 10590, -1000, 10590, 63, 513,
	63, 63, 63, 10590, -1000, 128, -1000, -1000, -1000, -1000,
	10590, 511, 714, 47, 3183, 3183, 3183, 3183, 8, 3183,
	-101, 654, -1000, -1000, -1000, -1000, 3183, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 413, 728, 6306,
	6306, 760, -1000, 604, -1000, -1000, -1000, 711, -1000, -1000,
	236, 771, -1000, 6987, 127, -1000, 6306, 1547, 573, -1000,
	-1000, 573, -1000, -1000, 109, -1000, -1000, 6754, 6754, 6754,
	6754, 6754, 6754, 6754, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 573, -1000,
	6073, 573, 573, 573, 573, 573, 573, 573, 573, 6306,
	573, 573, 573, 573, 573, 573, 573, 573, 573, 573,
	573, 573, 573, 9470, 590, 630, -1000, -1000, -1000, 727,
	7892, 8573, 10590, 554, -1000, 598, 4659, -108, -1000, -1000,
	-1000, 210, 8340, -1000, -1000, -1000, 712, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	510, -1000, 7579, 10142, 3183, 84, 639, 499, 214, 496,
	10590, 10590, 3183, 85, 10590, 725, 652, 10590, 448, 437,
	-1000, 4413, -1000, 3183, 3183, 3183, 3183, 3183, 3183, 3183,
	3183, -1000, -1000, -1000, -1000, -1000, -1000, 3183, 3183, -1000,
	-84, -1000, 10590, -1000, -1000, -1000, -1000, 776, 157, 320,
	125, 600, -1000, 361, 754, 413, 684, 8116, 672, -1000,
	-1000, 10590, -1000, 6306, 6306, 325, -1000, 9245, -1000, -1000,
	3429, 166, 6754, 381, 217, 6754, 6754, 6754, 6754, 6754,
	6754, 6754, 6754, 6754, 6754, 6754, 6754, 6754, 6754, 6754,
	356, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 432,
	-1000, 604, 398, 398, 140, 140, 140, 140, 140, 140,
	2065, 5138, 413, 508, 180, 6073, 5604, 5604, 6306, 6306,
	10366, 10366, 5604, 747, 218, 180, 10366, -1000, 413, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5604, 5604, 5604, 5604,
	20, 10590, -1000, 10366, 8797, 8797, 8797, 8797, 8797, -1000,
	681, 680, -1000, 665, 661, 669, 10590, -1000, 495, 7892,
	134, 573, -1000, 9021, -1000, -1000, 20, 555, 8797, 10590,
	-1000, -1000, 4167, 598, -108, 592, -1000, -106, -128, 5837,
	119, -1000, -1000, -1000, -1000, 2691, 160, 197, -1000, -77,
	-1000, -1000, -1000, 615, -1000, 615, 615, -41, 615, 615,
	-47, -47, -47, -47, -1000, -1000, -1000, -1000, -1000, 637,
	636, -1000, 615, 615, 615, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 628, 628, 628, 617, 617, 645, -1000, 10590, -166,
	421, 3183, 723, 3183, -1000, 59, -1000, 10590, -1000, -1000,
	10590, 3183, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 206, -1000, -1000,
	-1000, -1000, 693, 6306, 6306, 3921, 6306, -1000, -1000, -1000,
	728, -1000, 747, 762, -1000, 704, 703, 5604, -1000, -1000,
	166, 178, -1000, -1000, 275, -1000, -1000, -1000, -1000, 123,
	573, -1000, 2013, -1000, -1000, -1000, -1000, 381, 6754, 6754,
	6754, 1425, 2013, 1843, 1377, 1825, 140, 226, 226, 138,
	138, 138, 138, 138, 385, 385, -1000, -1000, -1000, 413,
	-1000, -1000, -1000, 413, 5604, 597, -1000, -1000, 6306, -1000,
	413, 493, 493, 200, 376, 588, -1000, 122, 576, 493,
	5604, 233, -1000, 6306, 413, -1000, 493, 413, 493, 493,
	521, 573, -1000, 586, -1000, 203, 630, 631, 650, 454,
	-1000, -1000, -1000, -1000, 677, -1000, 676, -1000, -1000, -1000,
	-1000, -1000, 91, 90, 89, 10142, -1000, 764, 8797, 569,
	-1000, -1000, 592, -108, -93, -1000, -1000, -1000, 180, -1000,
	406, 589, 2443, -1000, -1000, -1000, -1000, -1000, -1000, 627,
	49, 55, 108, 389, -1000, -1000, -1000, 245, 50, 775,
	-1000, 48, -1000, 38, 355, -79, -1000, -1000, 279, -47,
	-47, 615, -1000, -1000, 119, 710, 119, 119, 119, 342,
	342, -1000, -1000, -1000, -1000, 274, -1000, -1000, -1000, 262,
	-1000, 649, 10142, 3183, -1000, 3675, -1000, -1000, -1000, -1000,
	-1000, -1000, 638, 276, 146, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 19, -1000, 3183, -1000,
	246, 10590, 10590, 689, 180, 180, 121, -1000, -1000, 10590,
	-1000, -1000, -1000, -1000, 564, -1000, -1000, -1000, 2937, 5604,
	-1000, 1425, 2013, 821, -1000, 6754, 6754, -1000, -1000, 493,
	5604, 180, -1000, -1000, -1000, 52, 356, 52, 6754, 6754,
	3921, 6754, 6754, -160, 585, 184, -1000, 6306, 270, -1000,
	-1000, -1000, -1000, -1000, 647, 10366, 573, -1000, 7668, 10142,
	760, 10366, 6306, 6306, -1000, -1000, 6306, 626, -1000, 6306,
	-1000, -1000, -1000, 573, 573, 573, 476, -1000, 760, 569,
	-1000, -1000, -1000, -120, -134, -1000, -1000, 2691, -1000, 2691,
	10142, -1000, 387, 372, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -138, -1000, -1000, -1000, -1000, -1000, 522,
	119, 119, -47, -1000, 183, -1000, -1000, -1000, 487, -1000,
	482, 587, 480, 10590, -1000, -1000, 567, -1000, 201, -1000,
	10142, 45, -1000, 10142, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 10142, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 10590, -1000, -1000,
	-1000, -1000, -1000, 10142, -1000, -1000, 337, 6306, -1000, -1000,
	-1000, 3675, -1000, 764, 8797, -1000, -1000, 413, -1000, 6754,
	2013, 2013, -1000, -1000, 413, 615, 615, -1000, 615, 617,
	-1000, 615, -25, 615, -26, 413, 413, 1778, 2040, -1000,
	1646, 1976, 573, -157, -1000, 180, 6306, -1000, 713, 542,
	556, -1000, -1000, 5371, 413, 478, 120, 476, 754, -1000,
	180, 180, 180, 10142, 180, 10142, 10142, 10142, 7444, 10142,
	754, -1000, -1000, -1000, -1000, 2443, -1000, 469, -1000, 615,
	-1000, -1000, -1000, -1000, -1000, -1000, 119, -1000, -1000, -47,
	330, -47, 261, -1000, 258, 614, 3675, 2691, 613, 10142,
	-1000, 608, -1000, -1000, -1000, -1000, 718, -1000, 180, 765,
	558, -1000, 2013, -1000, -1000, 79, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 6754, 6754, -1000, 6754, 6754,
	6754, 413, 319, 180, 37, -1000, 573, -1000, -1000, 572,
	10142, 10142, -1000, -1000, 465, -1000, 455, 455, 455, 134,
	-1000, -1000, 115, 10142, -1000, -1000, 119, -1000, 119, 488,
	466, 10142, -1000, -1000, 10142, 607, 10142, 573, 763, 756,
	-1000, -1000, 1619, 1619, 1619, 1619, 51, -1000, -1000, 774,
	-1000, 573, -1000, 604, 113, -1000, 10142, -1000, -1000, -1000,
	-1000, -1000, 115, -1000, 365, 181, 314, -1000, -1000, -1000,
	-1000, -1000, 453, 420, 10142, 417, 18, -1000, 6306, 6306,
	-1000, -1000, -1000, -1000, 413, 36, -169, 10366, 556, 413,
	10142, -1000, -1000, -1000, 254, -1000, -1000, -1000, -1000, 412,
	639, 397, -1000, 10142, 180, 548, -1000, 688, -164, -176,
	544, -1000, -1000, -1000, -1000, -166, -1000, 18, 701, -1000,
	687, -1000, -1000, -1000, 12, -167, 9, -170, 573, -180,
	6530, -1000, 1619, 413, -1000, -1000,
}
var yyPgo = [...]int{

	0, 986, 19, 419, 983, 982, 979, 977, 974, 973,
	972, 969, 967, 966, 964, 963, 960, 948, 947, 946,
	945, 943, 942, 939, 92, 937, 936, 935, 56, 934,
	61, 933, 932, 29, 44, 34, 41, 189, 931, 24,
	60, 57, 930, 39, 929, 928, 71, 926, 55, 923,
	910, 1393, 908, 907, 11, 33, 906, 905, 904, 903,
	72, 502, 902, 901, 899, 898, 897, 896, 43, 5,
	7, 9, 12, 895, 128, 6, 894, 42, 890, 888,
	887, 886, 75, 882, 47, 880, 23, 46, 877, 13,
	53, 25, 21, 8, 65, 51, 872, 18, 54, 30,
	871, 870, 314, 868, 867, 865, 862, 861, 858, 153,
	344, 857, 856, 852, 850, 45, 0, 644, 388, 66,
	849, 845, 843, 1430, 58, 49, 16, 838, 52, 961,
	32, 837, 836, 27, 835, 832, 830, 829, 828, 827,
	826, 185, 14, 36, 825, 824, 48, 22, 28, 50,
	822, 821, 37, 820, 818, 817, 816, 26, 40, 815,
	10, 814, 3, 812, 811, 1, 807, 15, 806, 4,
	803, 2, 802, 801, 800, 76, 584, 798, 17, 797,
	793, 95,
}
var yyR1 = [...]int{

	0, 173, 174, 174, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 177,
	177, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 171, 171, 170,
	169, 169, 168, 168, 167, 16, 154, 155, 155, 155,
	149, 134, 134, 134, 134, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 137, 137, 135, 135, 135, 135, 135, 135, 135,
	136, 136, 136, 136, 136, 138, 138, 138, 138, 138,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 140, 140, 140, 140,
	140, 140, 140, 140, 148, 148, 141, 141, 146, 146,
	147, 147, 147, 144, 144, 145, 145, 142, 142, 142,
	143, 143, 151, 151, 163, 163, 162, 162, 162, 153,
	153, 159, 159, 159, 159, 159, 152, 152, 161, 161,
	160, 156, 156, 156, 157, 157, 157, 158, 158, 158,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 178, 178, 179, 179, 179, 179, 179, 179,
	179, 179, 166, 164, 164, 165, 165, 13, 14, 14,
	14, 14, 14, 15, 15, 17, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 107,
	107, 104, 104, 105, 105, 106, 106, 106, 108, 108,
	108, 132, 132, 132, 19, 19, 21, 21, 22, 23,
	20, 20, 20, 20, 20, 180, 24, 25, 25, 26,
	26, 26, 30, 30, 30, 28, 28, 29, 29, 35,
	35, 34, 34, 36, 36, 36, 36, 120, 120, 120,
	119, 119, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 53, 53, 89, 89, 91, 91, 42, 42, 42,
	42, 43, 43, 44, 44, 45, 45, 127, 127, 126,
	126, 126, 125, 125, 47, 47, 47, 49, 48, 48,
	48, 48, 50, 50, 52, 52, 51, 51, 54, 54,
	54, 54, 55, 55, 37, 37, 37, 37, 37, 37,
	37, 103, 103, 57, 57, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 67, 67, 67, 67, 67,
	67, 58, 58, 58, 58, 58, 58, 58, 33, 33,
	68, 68, 68, 74, 69, 69, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 65, 65, 65,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 64, 181, 181, 66, 66, 66, 66, 31,
	31, 31, 31, 31, 130, 130, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 78,
	78, 32, 32, 76, 76, 77, 79, 79, 75, 75,
	75, 60, 60, 60, 60, 60, 60, 60, 60, 62,
	62, 62, 80, 80, 81, 81, 82, 82, 83, 83,
	84, 85, 85, 85, 86, 86, 86, 86, 87, 87,
	87, 59, 59, 59, 59, 59, 59, 88, 88, 88,
	88, 92, 92, 70, 70, 72, 72, 71, 73, 93,
	93, 97, 94, 94, 98, 98, 98, 96, 96, 96,
	122, 122, 122, 101, 101, 109, 109, 110, 110, 102,
	102, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 112, 112, 112, 113, 113, 114, 114, 114, 121,
	121, 117, 117, 118, 118, 123, 123, 124, 124, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	175, 176, 128, 129, 129, 129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	2, 3, 1, 1, 1, 1, 2, 3, 3, 3,
	3, 3, 3, 3, 4, 2, 3, 2, 3, 2,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 1,
	4, 4, 5, 2, 2, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 6, 6, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 3, 0, 5,
	0, 3, 5, 0, 1, 0, 1, 0, 3, 3,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 0,
	1, 2, 3, 3, 2, 2, 1, 1, 1, 3,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 10, 11, 7, 7, 12, 7, 7, 7, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 5, 4, 6,
	5, 4, 4, 3, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 4, 3, 3, 3, 3, 4, 3,
	6, 4, 2, 4, 2, 2, 2, 2, 3, 1,
	1, 0, 1, 0, 1, 0, 2, 2, 0, 2,
	2, 0, 1, 1, 2, 1, 1, 2, 1, 1,
	2, 2, 2, 2, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 0, 1, 0,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 7, 1, 3, 1, 3, 4, 4, 4,
	3, 2, 4, 0, 1, 0, 2, 0, 1, 0,
	1, 2, 1, 1, 1, 2, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 1, 1, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 3, 1, 1, 1, 1, 4, 5, 6,
	4, 4, 6, 6, 6, 6, 8, 8, 6, 8,
	8, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -173, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 140, 115, 133, 48, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -175, 8, 236,
	52, -174, 251, -82, 15, -26, 5, -24, -180, -24,
	-24, -24, -24, -24, -154, 52, -114, 120, 69, 148,
	228, 117, 118, 131, -117, 55, -116, 244, 152, 163,
	157, 185, 177, 174, 178, 215, 64, 155, 224, 136,
	172, 168, 166, 27, 190, 249, 167, 129, 128, 191,
	195, 216, 161, 162, 218, 189, 130, 31, 246, 33,
	144, 219, 193, 188, 184, 187, 160, 183, 37, 197,
	196, 198, 214, 180, 169, 18, 222, 139, 142, 192,
	194, 124, 146, 248, 220, 165, 143, 138, 223, 156,
	217, 226, 36, 202, 159, 127, 153, 150, 181, 145,
	170, 171, 186, 158, 182, 154, 147, 140, 225, 203,
	250, 179, 175, 176, 151, 149, 207, 208, 209, 210,
	247, 221, 173, 204, -102, 120, 122, 118, 118, 119,
	120, 228, 117, 118, -51, -123, 55, -116, 120, 148,
	118, 105, 178, 111, 205, 119, 31, 146, -132, 118,
	-104, 149, 207, 208, 209, 210, 55, 217, 216, 211,
	-123, 154, -128, -128, -128, -128, -128, -2, -86, 17,
	16, -5, -3, -175, 6, 20, 21, -30, 38, 39,
	-25, -36, 96, -37, -123, -56, 71, -61, 28, 55,
	-116, 23, -60, -57, -75, -73, -74, 105, 106, 94,
	95, 102, 72, 107, -65, -63, -64, -66, 57, 56,
	65, 58, 59, 60, 61, 66, 67, 68, -117, -71,
	-175, 42, 43, 237, 238, 239, 240, 243, 241, 74,
	32, 227, 235, 234, 233, 231, 232, 229, 230, 123,
	228, 100, 236, -102, -39, -40, -41, -42, -53, -74,
	-175, -51, 11, -46, -51, -94, -131, 154, -98, 217,
	216, -118, -96, -117, -115, 215, 178, 214, 116, 70,
	22, 24, 200, 73, 105, 16, 74, 104, 237, 111,
	46, 229, 230, 227, 239, 240, 228, 205, 28, 10,
	25, 134, 21, 98, 113, 77, 78, 137, 23, 135,
	68, 19, 49, 11, 13, 14, 123, 122, 89, 119,
	44, 8, 107, 26, 86, 40, 132, 42, 87, 17,
	231, 232, 30, 243, 141, 100, 47, 34, 71, 66,
	50, 69, 15, 45, 88, 114, 236, 43, 117, 6,
	242, 29, 133, 41, 118, 206, 76, 121, 67, 5,
	131, 9, 48, 51, 233, 234, 235, 32, 75, 12,
	-155, -149, 55, 119, -51, 236, -117, -110, 123, -110,
	-110, 118, -51, -51, -109, 123, 55, -109, -109, -109,
	-51, 108, -51, 55, 29, 228, 55, 146, 118, 147,
	120, -129, -175, -118, -129, -129, -129, 150, 151, -129,
	-105, 212, 50, -129, -176, 54, -87, 19, 30, -37,
	-123, -83, -84, -37, -82, -2, -24, 34, -28, 21,
	63, 11, -120, 70, 69, 86, -119, 22, -117, 57,
	108, -37, -58, 89, 71, 87, 88, 73, 91, 90,
	101, 94, 95, 96, 97, 98, 99, 100, 92, 93,
	104, 79, 80, 81, 82, 83, 84, 85, -103, -175,
	-74, -175, 109, 110, -61, -61, -61, -61, -61, -61,
	-61, -175, -2, -69, -37, -175, -175, -175, -175, -175,
	-175, -175, -175, -175, -78, -37, -175, -181, -175, -181,
	-181, -181, -181, -181, -181, -181, -175, -175, -175, -175,
	-52, 26, -51, 29, 53, -47, -49, -48, -50, 40,
	44, 46, 41, 42, 43, 47, -127, 22, -39, -175,
	-126, 142, -125, 22, -123, 57, -51, -46, -177, 53,
	11, 51, 53, -94, 154, -95, -99, 218, 220, 79,
	-122, -117, 57, 28, 29, 54, 53, -150, -134, -137,
	-139, -138, -140, -135, -136, 174, 175, 178, 105, 179,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	29, 136, 170, 171, 172, 173, 191, 192, 193, 194,
	195, 196, 197, 198, 157, 158, 159, 160, 161, 162,
	163, 165, 166, 167, 168, 169, -117, -129, 120, -171,
	51, 55, 71, 55, -51, -51, -129, 121, -51, 23,
	50, -51, 55, 55, -124, -123, -115, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, -107, 206, 213,
	-51, 9, 89, 53, 18, 108, 53, -85, 24, 25,
	-86, -176, -30, -62, -117, 58, 61, -29, 41, -51,
	-37, -37, -67, 66, 71, 67, 68, -119, 96, -124,
	-118, -115, -61, -68, -71, -74, 62, 89, 87, 88,
	73, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -130, 55, 57, 55,
	-60, -60, -117, -35, 21, -34, -36, -176, 53, -176,
	-2, -34, -34, -37, -37, -75, -117, -123, -75, -34,
	-28, -76, -77, 75, -75, -176, -34, -35, -34, -34,
	-90, 142, -51, -93, -97, -75, -40, -41, -41, -40,
	-41, 40, 40, 40, 45, 40, 45, 40, -48, -123,
	-176, -54, 48, 122, 49, -175, -125, -90, 51, -39,
	-51, -98, -95, 53, 219, 221, 222, 50, -37, -143,
	104, -156, -157, -158, -118, 57, 58, -149, -151, -159,
	124, 127, 131, -152, 119, 132, 66, 71, 28, 50,
	200, 124, 132, 131, 64, -144, 203, -141, 52, -141,
	-141, 176, -141, -141, -142, 178, -142, -142, -142, 52,
	52, -141, -141, -141, -146, 52, -146, -146, -147, 52,
	-147, -121, 51, -51, -169, 247, -170, 55, -129, 23,
	-129, -111, 116, 113, 114, -166, 112, 200, 178, 64,
	28, 15, 237, 142, 250, 55, 143, -51, -51, -129,
	-106, 11, 89, 36, -37, -37, -124, -84, -87, -101,
	19, 11, 32, 32, -34, 66, 67, 68, 108, -175,
	-68, -61, -61, -61, -33, 137, 70, -176, -176, -34,
	53, -37, -176, -176, -176, 53, 51, 22, 53, 11,
	108, 53, 11, -176, -34, -79, -77, 77, -37, -176,
	-176, -176, -176, -176, -59, 29, 32, -2, -175, -175,
	-55, 53, 12, 79, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 119, 119, 119, -91, -117, -55, -39,
	-55, -99, -100, 223, 220, 226, 55, 53, -158, 79,
	52, 132, -152, -152, 55, 55, 66, 57, 58, 59,
	66, 227, 65, 9, 132, 132, 57, -145, 204, 58,
	-142, -142, -141, -143, 29, -143, -143, -143, -148, 57,
	-148, 58, 58, 50, -117, -129, -168, -167, -118, -128,
	-178, 131, -179, 148, 119, 132, 125, 126, 129, 128,
	55, 124, 127, 142, -172, 148, 125, 126, 129, 128,
	55, 119, 132, 124, 127, 142, 131, -112, -113, 121,
	22, 119, 132, 142, -129, -108, 87, 12, -123, -123,
	37, 108, -51, -38, 11, 96, -118, -35, -33, 70,
	-61, -61, -176, -36, -133, 105, 174, 136, 172, 168,
	189, 180, 202, 170, 203, -130, -133, -61, -61, -118,
	-61, -61, 244, -82, 78, -37, 76, -92, 50, -93,
	-70, -72, -71, -175, -2, -88, -117, -91, -82, -97,
	-37, -37, -37, 52, -37, -175, -175, -175, -176, 53,
	-82, -55, 220, 224, 225, -157, -158, -161, -160, -117,
	55, 55, 227, 54, -143, -143, -142, 55, 105, 54,
	53, 54, 53, 54, 53, -51, 53, 79, -117, -178,
	-128, -117, -128, -117, -51, -128, -117, 57, -37, -55,
	-39, -176, -61, -176, -141, -141, -141, -147, -141, 162,
	-141, 162, -176, -176, -176, 53, 19, -176, 53, 19,
	-175, -32, 242, -37, 27, -92, 53, -176, -176, -176,
	53, 108, -176, -86, -89, -117, -89, -89, -89, -126,
	-117, -86, 54, 53, -141, -143, -142, 57, -142, 58,
	58, 52, -167, -158, 52, -117, 52, 26, -80, 13,
	-142, 55, -61, -61, -61, -61, -61, -176, 57, 132,
	-72, 32, -2, -175, -117, -117, 53, 54, -176, -176,
	-176, -54, -163, -162, 51, 130, 64, -160, -143, -143,
	54, 54, -89, -89, 52, -89, -175, -81, 14, 16,
	-176, -176, -176, -176, -31, 89, 247, 9, -70, -2,
	108, -117, -162, 55, -153, 79, 57, 54, 54, -89,
	54, -164, -165, 142, -37, -69, -176, 245, 47, 248,
	-93, -176, -117, 58, 54, -171, -176, 53, -117, 37,
	246, 249, -169, -165, 32, 37, 144, 247, 145, 248,
	-175, 249, -61, 141, -176, -176,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 516, 0, 285, 285, 285, 285, 285, 285, 0,
	586, 569, 0, 0, 0, 0, -2, 275, 276, 0,
	278, 279, 792, 792, 792, 792, 792, 0, 33, 34,
	790, 1, 3, 524, 0, 0, 289, 292, 287, 0,
	569, 0, 0, 0, 60, 0, 0, 779, 0, 780,
	567, 567, 567, 587, 588, 591, 592, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 0, 0, 570, 0, 565, 0,
	565, 565, 565, 0, 234, 356, 595, 596, 779, 780,
	0, 0, 0, 0, 793, 793, 793, 793, 0, 793,
	263, 252, 254, 255, 256, 257, 793, 272, 273, 262,
	274, 277, 280, 281, 282, 283, 284, 27, 528, 0,
	0, 516, 29, 0, 285, 290, 291, 295, 293, 294,
	286, 0, 303, 307, 0, 364, 0, 369, 371, -2,
	-2, 0, 406, 407, 408, 409, 410, 0, 0, 0,
	0, 0, 0, 0, 433, 434, 435, 436, 501, 502,
	503, 504, 505, 506, 507, 508, 373, 374, 498, 548,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 489,
	0, 463, 463, 463, 463, 463, 463, 463, 463, 0,
	0, 0, 0, 0, 0, 314, 316, 317, 318, 337,
	0, 339, 0, 0, 41, 45, 0, 769, 552, -2,
	-2, 0, 0, 593, 594, -2, 698, -2, 599, 600,
	601, 602, 603, 604, 605, 606, 607, 608, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 619, 620,
	621, 622, 623, 624, 625, 626, 627, 628, 629, 630,
	631, 632, 633, 634, 635, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	0, 77, 0, 0, 793, 0, 67, 0, 0, 0,
	0, 0, 793, 0, 0, 0, 0, 0, 0, 0,
	233, 0, 235, 793, 793, 793, 793, 793, 793, 793,
	793, 244, 794, 795, 245, 246, 247, 793, 793, 249,
	0, 264, 0, 258, 28, 791, 22, 0, 0, 525,
	0, 517, 518, 521, 524, 27, 292, 0, 297, 296,
	288, 0, 304, 0, 0, 0, 308, 0, 310, 311,
	0, 367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 391, 392, 393, 394, 395, 396, 397, 370, 0,
	384, 0, 0, 0, 426, 427, 428, 429, 430, 431,
	0, 299, 27, 0, 404, 0, 0, 0, 0, 0,
	0, 0, 0, 295, 0, 490, 0, 455, 0, 456,
	457, 458, 459, 460, 461, 462, 0, 299, 0, 0,
	43, 0, 355, 0, 0, 0, 0, 0, 0, 344,
	0, 0, 347, 0, 0, 0, 0, 338, 0, 0,
	358, 742, 340, 0, 342, 343, -2, 0, 0, 0,
	39, 40, 0, 46, 769, 48, 49, 0, 0, 0,
	160, 560, 561, 562, 558, 181, 0, 80, 85, 153,
	82, 83, 84, 146, 102, 146, 146, 0, 146, 146,
	157, 157, 157, 157, 129, 130, 131, 132, 133, 0,
	0, 115, 146, 146, 146, 119, 136, 137, 138, 139,
	140, 141, 142, 143, 103, 104, 105, 106, 107, 108,
	109, 148, 148, 148, 150, 150, 589, 62, 0, 70,
	0, 793, 0, 793, 75, 0, 199, 0, 228, 566,
	0, 793, 231, 232, 357, 597, 598, 236, 237, 238,
	239, 240, 241, 242, 243, 248, 251, 265, 259, 260,
	253, 529, 0, 0, 0, 0, 0, 520, 522, 523,
	528, 30, 295, 0, 509, 0, 0, 0, 298, 25,
	365, 366, 368, 385, 0, 387, 389, 309, 305, 0,
	499, -2, 375, 376, 400, 401, 402, 0, 0, 0,
	0, 398, 380, 0, 411, 412, 413, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 425, 474, 475, 0,
	423, 424, 432, 0, 0, 300, 301, 403, 0, 547,
	27, 0, 0, 0, 0, 0, 498, 0, 0, 0,
	0, 496, 493, 0, 0, 464, 0, 0, 0, 0,
	0, 0, 354, 362, 549, 0, 315, 333, 335, 0,
	330, 345, 346, 348, 0, 350, 0, 352, 353, 319,
	320, 321, 0, 0, 0, 0, 341, 362, 0, 362,
	42, 553, 47, 0, 0, 52, 53, 554, 555, 556,
	0, 76, 182, 184, 187, 188, 189, 78, 79, 0,
	0, 0, 0, 0, 176, 177, 86, 0, 0, 0,
	95, 0, 97, 99, 0, 155, 154, 101, 0, 157,
	157, 146, 123, 124, 160, 0, 160, 160, 160, 0,
	0, 116, 117, 118, 110, 0, 111, 112, 113, 0,
	114, 0, 0, 793, 64, 0, 68, 69, 65, 568,
	66, 792, 0, 0, 581, 200, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 0, 227, 793, 230,
	268, 0, 0, 0, 526, 527, 0, 519, 23, 0,
	563, 564, 510, 511, 312, 386, 388, 390, 0, 299,
	377, 398, 381, 0, 378, 0, 0, 372, 437, 0,
	0, 405, -2, 440, 441, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 516, 0, 494, 0, 0, 454,
	465, 466, 467, 468, 541, 0, 0, -2, 0, 0,
	516, 0, 0, 0, 327, 334, 0, 0, 328, 0,
	329, 349, 351, 0, 0, 0, 0, 325, 516, 362,
	38, 50, 51, 0, 0, 57, 161, 0, 185, 0,
	0, 171, 0, 0, 174, 175, 87, 88, 89, 90,
	91, 92, 93, 0, 96, 98, 100, 81, 156, 0,
	160, 160, 157, 125, 0, 126, 127, 128, 0, 144,
	0, 0, 0, 0, 590, 63, 71, 72, 0, 190,
	0, 0, 792, 0, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 792, 0, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 0, 792, 582,
	583, 584, 585, 0, 229, 250, 0, 0, 266, 267,
	530, 0, 24, 362, 0, 306, 500, 0, 379, 0,
	399, 382, 438, 302, 0, 146, 146, 479, 146, 150,
	482, 146, 484, 146, 487, 0, 0, 0, 0, 499,
	0, 0, 0, 491, 453, 497, 0, 31, 0, 541,
	531, 543, 545, 0, 27, 0, 537, 0, 524, 550,
	363, 551, 331, 0, 336, 0, 0, 0, 339, 0,
	524, 37, 54, 55, 56, 183, 186, 0, 178, 146,
	172, 173, 94, 147, 120, 121, 160, 158, 159, 157,
	0, 157, 0, 151, 0, 0, 0, 0, 0, 0,
	193, 0, 194, 196, 197, 198, 0, 269, 270, 512,
	313, 439, 383, 442, 476, 157, 480, 481, 483, 485,
	486, 488, 444, 443, 445, 0, 0, 448, 0, 0,
	0, 0, 0, 495, 0, 32, 0, 546, -2, 0,
	0, 0, 44, 35, 0, 323, 0, 0, 0, 358,
	326, 36, 163, 0, 180, 122, 160, 145, 160, 0,
	0, 0, 73, 74, 0, 0, 0, 0, 514, 0,
	477, 478, 0, 0, 0, 0, 469, 452, 492, 0,
	544, 0, -2, 0, 539, 538, 0, 332, 359, 360,
	361, 322, 162, 164, 0, 169, 0, 179, 134, 135,
	149, 152, 0, 0, 0, 0, 0, 26, 0, 0,
	446, 447, 449, 450, 0, 0, 0, 0, 534, 27,
	0, 324, 165, 166, 0, 170, 168, 61, 191, 0,
	67, 0, 223, 0, 515, 513, 451, 0, 0, 0,
	542, -2, 540, 167, 192, 70, 222, 0, 0, 470,
	0, 473, 195, 224, 0, 471, 0, 0, 0, 0,
	0, 472, 0, 0, 225, 226,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:335
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:347
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:353
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:399
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:440
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:445
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:449
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:454
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:496
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:539
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[7].tableName,
				NewName: yyDollar[7].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Unique: false,
				},
				IndexCols: yyDollar[9].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:556
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:568
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:572
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:577
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:581
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:587
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:592
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:597
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:603
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:608
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:614
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:620
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:627
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:634
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:639
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:643
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:649
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:654
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:674
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:679
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:684
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:689
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:694
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:699
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:704
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:714
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:719
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:724
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:729
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:734
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:739
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:744
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:751
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:756
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:804
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:816
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:846
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:952
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:957
		{
			yyVAL.optVal = nil
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:961
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:966
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:970
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:988
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1014
		{
			yyVAL.str = ""
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1027
		{
			yyVAL.str = ""
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1031
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1037
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1041
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1047
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1051
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1057
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1061
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1066
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1072
		{
			yyVAL.str = ""
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1076
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1082
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1086
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1090
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1104
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1108
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1124
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1129
		{
			yyVAL.str = ""
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1145
		{
			yyVAL.str = yyDollar[1].str
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1149
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1153
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1159
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1163
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 191:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1177
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[7].colIdent,
					Unique: false,
				},
				IndexCols: yyDollar[9].columns,
			}
		}
	case 192:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1190
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[8].colIdent,
					Unique: true,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 193:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1203
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 194:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 195:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 196:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1234
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1239
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1281
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1287
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1291
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 225:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1297
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1301
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1307
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1313
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1321
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1326
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1334
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1338
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1348
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1372
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1384
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1388
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1408
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1412
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1416
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1426
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1430
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1434
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1438
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1442
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1446
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1450
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1460
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1466
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1470
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1476
		{
			yyVAL.str = ""
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1480
		{
			yyVAL.str = "extended "
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.str = ""
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.str = "full "
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1496
		{
			yyVAL.str = ""
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1500
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.showFilter = nil
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.str = ""
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.str = SessionStr
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.str = GlobalStr
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.statement = &Begin{}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.statement = &Begin{}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.statement = &Commit{}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.statement = &Rollback{}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.statement = &OtherRead{}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.statement = &OtherRead{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.statement = &OtherRead{}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1591
		{
			setAllowComments(yylex, true)
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1595
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1601
		{
			yyVAL.bytes2 = nil
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1605
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1611
		{
			yyVAL.str = UnionStr
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1615
		{
			yyVAL.str = UnionAllStr
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1619
		{
			yyVAL.str = UnionDistinctStr
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1624
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1628
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1632
		{
			yyVAL.str = SQLCacheStr
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1637
		{
			yyVAL.str = ""
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1641
		{
			yyVAL.str = DistinctStr
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1646
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1650
		{
			yyVAL.str = StraightJoinHint
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.selectExprs = nil
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1659
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1683
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1687
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1692
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1696
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1700
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1707
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1712
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1716
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1736
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1740
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1744
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1750
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 322:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1754
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1760
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1764
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1770
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1787
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1791
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1795
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1799
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1807
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1811
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1813
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1817
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1824
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1842
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1848
		{
			yyVAL.str = JoinStr
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1852
		{
			yyVAL.str = JoinStr
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.str = JoinStr
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1862
		{
			yyVAL.str = StraightJoinStr
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1868
		{
			yyVAL.str = LeftJoinStr
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1872
		{
			yyVAL.str = LeftJoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1876
		{
			yyVAL.str = RightJoinStr
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1880
		{
			yyVAL.str = RightJoinStr
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1886
		{
			yyVAL.str = NaturalJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1890
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 354:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1900
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1904
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1910
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1914
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1919
		{
			yyVAL.indexHints = nil
		}
	case 359:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1923
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 360:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1927
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 361:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1931
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1936
		{
			yyVAL.expr = nil
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1940
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1946
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1950
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1954
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1962
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1966
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1970
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1976
		{
			yyVAL.str = ""
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1980
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1986
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1990
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1996
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2000
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2016
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2020
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2024
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 383:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2028
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2032
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2038
		{
			yyVAL.str = IsNullStr
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.str = IsNotNullStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.str = IsTrueStr
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2050
		{
			yyVAL.str = IsNotTrueStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2054
		{
			yyVAL.str = IsFalseStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2058
		{
			yyVAL.str = IsNotFalseStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2064
		{
			yyVAL.str = EqualStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2068
		{
			yyVAL.str = LessThanStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2072
		{
			yyVAL.str = GreaterThanStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2076
		{
			yyVAL.str = LessEqualStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2080
		{
			yyVAL.str = GreaterEqualStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2084
		{
			yyVAL.str = NotEqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2088
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2093
		{
			yyVAL.expr = nil
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2097
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2103
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2107
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2111
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2117
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2123
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2133
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2137
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2141
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2145
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2149
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2153
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2157
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2173
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2177
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2181
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2185
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2189
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2193
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2197
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2201
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2205
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2209
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2213
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2217
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2221
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2229
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2243
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2247
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2251
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2269
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 438:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2273
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 439:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 440:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2291
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2295
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2299
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 445:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 446:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2311
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 447:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2315
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2319
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 449:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2323
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 450:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 451:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2331
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2335
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2339
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2343
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2353
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2357
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 457:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2370
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2375
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2385
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 465:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2399
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 466:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2403
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2407
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 468:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2411
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2417
		{
			yyVAL.str = ""
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2421
		{
			yyVAL.str = BooleanModeStr
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2425
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 472:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2429
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2433
		{
			yyVAL.str = QueryExpansionStr
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2439
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2443
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2449
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2453
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2457
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2461
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2465
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2469
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2475
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2479
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2483
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2487
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2491
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2495
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2499
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 489:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2504
		{
			yyVAL.expr = nil
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2508
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 491:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2513
		{
			yyVAL.str = string("")
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2517
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2523
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2527
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2533
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2538
		{
			yyVAL.expr = nil
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2542
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2548
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2552
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 500:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2556
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2562
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2566
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2570
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2574
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2578
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2582
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2586
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2590
		{
			yyVAL.expr = &NullVal{}
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2596
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2605
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2609
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2614
		{
			yyVAL.exprs = nil
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2618
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 514:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2623
		{
			yyVAL.expr = nil
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2627
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 516:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2632
		{
			yyVAL.orderBy = nil
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2636
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2642
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2646
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2652
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2657
		{
			yyVAL.str = AscScr
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2661
		{
			yyVAL.str = AscScr
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2665
		{
			yyVAL.str = DescScr
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2670
		{
			yyVAL.limit = nil
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2674
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2678
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2682
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2687
		{
			yyVAL.str = ""
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2691
		{
			yyVAL.str = ForUpdateStr
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2695
		{
			yyVAL.str = ShareModeStr
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2708
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2712
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2716
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 534:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2721
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2725
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 536:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2729
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2736
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2740
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2744
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2748
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 541:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2753
		{
			yyVAL.updateExprs = nil
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2757
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2763
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2767
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2773
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2777
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2783
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2789
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2799
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2803
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2809
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2815
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2819
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2825
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2829
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2833
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2840
		{
			yyVAL.bytes = []byte("charset")
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2847
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2851
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2855
		{
			yyVAL.expr = &Default{}
		}
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2864
		{
			yyVAL.byt = 0
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2866
		{
			yyVAL.byt = 1
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.empty = struct{}{}
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2871
		{
			yyVAL.empty = struct{}{}
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.str = ""
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2876
		{
			yyVAL.str = IgnoreStr
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2880
		{
			yyVAL.empty = struct{}{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2882
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2884
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2886
		{
			yyVAL.empty = struct{}{}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2888
		{
			yyVAL.empty = struct{}{}
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2890
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2892
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2894
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2896
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2898
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2903
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2905
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2909
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2911
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2916
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2918
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2923
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2927
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2931
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2938
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2944
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2948
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2955
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3172
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3181
		{
			decNesting(yylex)
		}
	case 792:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3186
		{
			forceEOF(yylex)
		}
	case 793:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3191
		{
			forceEOF(yylex)
		}
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3195
		{
			forceEOF(yylex)
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3199
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
