// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys               int
	empty             struct{}
	statement         Statement
	selStmt           SelectStatement
	ddl               *DDL
	ins               *Insert
	byt               byte
	bytes             []byte
	bytes2            [][]byte
	str               string
	strs              []string
	selectExprs       SelectExprs
	selectExpr        SelectExpr
	columns           Columns
	partitions        Partitions
	colName           *ColName
	tableExprs        TableExprs
	tableExpr         TableExpr
	joinCondition     JoinCondition
	tableName         TableName
	tableNames        TableNames
	indexHints        *IndexHints
	expr              Expr
	exprs             Exprs
	boolVal           BoolVal
	colTuple          ColTuple
	values            Values
	valTuple          ValTuple
	subquery          *Subquery
	whens             []*When
	when              *When
	orderBy           OrderBy
	order             *Order
	limit             *Limit
	updateExprs       UpdateExprs
	setExprs          SetExprs
	updateExpr        *UpdateExpr
	setExpr           *SetExpr
	colIdent          ColIdent
	tableIdent        TableIdent
	convertType       *ConvertType
	aliasedTableName  *AliasedTableExpr
	TableSpec         *TableSpec
	columnType        ColumnType
	colKeyOpt         ColumnKeyOption
	optVal            *SQLVal
	LengthScaleOption LengthScaleOption
	columnDefinition  *ColumnDefinition
	indexDefinition   *IndexDefinition
	indexInfo         *IndexInfo
	indexOption       *IndexOption
	indexOptions      []*IndexOption
	indexColumn       *IndexColumn
	indexColumns      []*IndexColumn
	partDefs          []*PartitionDefinition
	partDef           *PartitionDefinition
	partSpec          *PartitionSpec
	vindexParam       VindexParam
	vindexParams      []VindexParam
	showFilter        *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const KEY = 57370
const DEFAULT = 57371
const SET = 57372
const LOCK = 57373
const KEYS = 57374
const VALUES = 57375
const LAST_INSERT_ID = 57376
const NEXT = 57377
const VALUE = 57378
const SHARE = 57379
const MODE = 57380
const SQL_NO_CACHE = 57381
const SQL_CACHE = 57382
const JOIN = 57383
const STRAIGHT_JOIN = 57384
const LEFT = 57385
const RIGHT = 57386
const INNER = 57387
const OUTER = 57388
const CROSS = 57389
const NATURAL = 57390
const USE = 57391
const FORCE = 57392
const ON = 57393
const USING = 57394
const ID = 57395
const HEX = 57396
const STRING = 57397
const INTEGRAL = 57398
const FLOAT = 57399
const HEXNUM = 57400
const VALUE_ARG = 57401
const LIST_ARG = 57402
const COMMENT = 57403
const COMMENT_KEYWORD = 57404
const BIT_LITERAL = 57405
const NULL = 57406
const TRUE = 57407
const FALSE = 57408
const OR = 57409
const AND = 57410
const NOT = 57411
const BETWEEN = 57412
const CASE = 57413
const WHEN = 57414
const THEN = 57415
const ELSE = 57416
const END = 57417
const LE = 57418
const GE = 57419
const NE = 57420
const NULL_SAFE_EQUAL = 57421
const IS = 57422
const LIKE = 57423
const REGEXP = 57424
const IN = 57425
const SHIFT_LEFT = 57426
const SHIFT_RIGHT = 57427
const DIV = 57428
const MOD = 57429
const UNARY = 57430
const COLLATE = 57431
const BINARY = 57432
const UNDERSCORE_BINARY = 57433
const INTERVAL = 57434
const JSON_EXTRACT_OP = 57435
const JSON_UNQUOTE_EXTRACT_OP = 57436
const CREATE = 57437
const ALTER = 57438
const DROP = 57439
const RENAME = 57440
const ANALYZE = 57441
const ADD = 57442
const SCHEMA = 57443
const TABLE = 57444
const INDEX = 57445
const VIEW = 57446
const TO = 57447
const IGNORE = 57448
const IF = 57449
const UNIQUE = 57450
const PRIMARY = 57451
const COLUMN = 57452
const CONSTRAINT = 57453
const SPATIAL = 57454
const FULLTEXT = 57455
const FOREIGN = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const PROCEDURE = 57471
const TRIGGER = 57472
const VINDEX = 57473
const VINDEXES = 57474
const STATUS = 57475
const VARIABLES = 57476
const BEGIN = 57477
const START = 57478
const TRANSACTION = 57479
const COMMIT = 57480
const ROLLBACK = 57481
const BIT = 57482
const TINYINT = 57483
const SMALLINT = 57484
const MEDIUMINT = 57485
const INT = 57486
const INTEGER = 57487
const BIGINT = 57488
const INTNUM = 57489
const REAL = 57490
const DOUBLE = 57491
const FLOAT_TYPE = 57492
const DECIMAL = 57493
const NUMERIC = 57494
const TIME = 57495
const TIMESTAMP = 57496
const DATETIME = 57497
const YEAR = 57498
const CHAR = 57499
const VARCHAR = 57500
const VARYING = 57501
const BOOL = 57502
const CHARACTER = 57503
const VARBINARY = 57504
const NCHAR = 57505
const TEXT = 57506
const TINYTEXT = 57507
const MEDIUMTEXT = 57508
const LONGTEXT = 57509
const BLOB = 57510
const TINYBLOB = 57511
const MEDIUMBLOB = 57512
const LONGBLOB = 57513
const JSON = 57514
const ENUM = 57515
const GEOMETRY = 57516
const POINT = 57517
const LINESTRING = 57518
const POLYGON = 57519
const GEOMETRYCOLLECTION = 57520
const MULTIPOINT = 57521
const MULTILINESTRING = 57522
const MULTIPOLYGON = 57523
const NULLX = 57524
const AUTO_INCREMENT = 57525
const APPROXNUM = 57526
const SIGNED = 57527
const UNSIGNED = 57528
const ZEROFILL = 57529
const DATABASES = 57530
const TABLES = 57531
const VITESS_KEYSPACES = 57532
const VITESS_SHARDS = 57533
const VITESS_TABLETS = 57534
const VSCHEMA_TABLES = 57535
const EXTENDED = 57536
const FULL = 57537
const PROCESSLIST = 57538
const NAMES = 57539
const CHARSET = 57540
const GLOBAL = 57541
const SESSION = 57542
const ISOLATION = 57543
const LEVEL = 57544
const READ = 57545
const WRITE = 57546
const ONLY = 57547
const REPEATABLE = 57548
const COMMITTED = 57549
const UNCOMMITTED = 57550
const SERIALIZABLE = 57551
const CURRENT_TIMESTAMP = 57552
const DATABASE = 57553
const CURRENT_DATE = 57554
const CURRENT_TIME = 57555
const LOCALTIME = 57556
const LOCALTIMESTAMP = 57557
const UTC_DATE = 57558
const UTC_TIME = 57559
const UTC_TIMESTAMP = 57560
const REPLACE = 57561
const CONVERT = 57562
const CAST = 57563
const SUBSTR = 57564
const SUBSTRING = 57565
const GROUP_CONCAT = 57566
const SEPARATOR = 57567
const MATCH = 57568
const AGAINST = 57569
const BOOLEAN = 57570
const LANGUAGE = 57571
const WITH = 57572
const QUERY = 57573
const EXPANSION = 57574
const UNUSED = 57575

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	150, 276,
	151, 276,
	-2, 266,
	-1, 239,
	109, 600,
	-2, 596,
	-1, 240,
	109, 601,
	-2, 597,
	-1, 309,
	80, 759,
	-2, 58,
	-1, 310,
	80, 720,
	-2, 59,
	-1, 315,
	80, 704,
	-2, 562,
	-1, 317,
	80, 741,
	-2, 564,
	-1, 576,
	52, 41,
	54, 41,
	-2, 43,
	-1, 710,
	109, 603,
	-2, 599,
	-1, 915,
	5, 28,
	-2, 408,
	-1, 940,
	5, 27,
	-2, 537,
	-1, 1180,
	5, 28,
	-2, 538,
	-1, 1227,
	5, 27,
	-2, 540,
	-1, 1293,
	5, 28,
	-2, 541,
}

const yyPrivate = 57344

const yyLast = 10976

var yyAct = [...]int{

	240, 1284, 857, 523, 648, 772, 1186, 1238, 1113, 1085,
	244, 790, 1086, 570, 811, 568, 812, 773, 1002, 269,
	218, 1005, 851, 959, 53, 1082, 314, 735, 907, 586,
	837, 76, 943, 742, 212, 187, 993, 808, 187, 1059,
	822, 948, 745, 761, 456, 462, 847, 411, 712, 585,
	308, 522, 3, 769, 557, 572, 270, 47, 468, 242,
	476, 227, 187, 187, 76, 305, 303, 889, 187, 295,
	76, 52, 1314, 1304, 1312, 537, 1291, 294, 213, 214,
	215, 216, 1310, 858, 1303, 1290, 1077, 874, 1174, 744,
	296, 415, 182, 178, 179, 180, 57, 967, 1247, 217,
	966, 873, 231, 968, 47, 1108, 1109, 1107, 1119, 1120,
	1121, 803, 223, 246, 436, 451, 1124, 1122, 300, 804,
	805, 59, 60, 61, 62, 63, 983, 587, 878, 588,
	829, 677, 1198, 233, 424, 1216, 838, 872, 678, 1264,
	489, 488, 498, 499, 491, 492, 493, 494, 495, 496,
	497, 490, 834, 1163, 500, 1161, 211, 447, 448, 1311,
	1309, 1285, 1060, 1038, 770, 791, 793, 1239, 425, 1245,
	418, 176, 175, 647, 176, 299, 187, 438, 187, 440,
	1241, 824, 656, 958, 187, 869, 866, 867, 957, 865,
	956, 187, 1062, 1035, 413, 76, 76, 76, 76, 1037,
	76, 421, 181, 190, 437, 439, 177, 76, 1010, 977,
	512, 513, 1269, 824, 876, 879, 824, 493, 494, 495,
	496, 497, 490, 1183, 1064, 500, 1068, 1046, 1063, 1129,
	1061, 923, 901, 684, 76, 480, 1066, 431, 809, 792,
	490, 412, 500, 500, 884, 1065, 464, 1240, 681, 475,
	871, 442, 442, 442, 442, 719, 442, 838, 1067, 1069,
	762, 474, 473, 442, 237, 830, 1246, 1244, 1081, 717,
	718, 716, 870, 823, 1274, 465, 1027, 1123, 475, 1130,
	47, 473, 1289, 1139, 946, 589, 435, 1079, 651, 474,
	473, 1036, 981, 1034, 187, 509, 1265, 475, 511, 1277,
	1009, 187, 187, 187, 1025, 823, 475, 76, 823, 875,
	821, 819, 1042, 76, 820, 427, 428, 429, 762, 826,
	930, 466, 877, 885, 827, 521, 417, 525, 526, 527,
	528, 529, 530, 531, 532, 533, 470, 536, 538, 538,
	538, 538, 538, 538, 538, 538, 546, 547, 548, 549,
	683, 1295, 1205, 459, 463, 510, 50, 569, 539, 540,
	541, 542, 543, 544, 545, 919, 715, 918, 1026, 577,
	481, 1204, 583, 1031, 1028, 1021, 1022, 1029, 1024, 1023,
	687, 688, 920, 474, 473, 454, 682, 997, 1041, 174,
	1030, 1296, 702, 704, 705, 996, 1020, 703, 419, 420,
	475, 984, 474, 473, 524, 1275, 1223, 259, 258, 261,
	262, 263, 264, 535, 299, 76, 260, 265, 736, 475,
	737, 187, 187, 76, 1202, 187, 474, 473, 187, 1149,
	474, 473, 187, 994, 76, 76, 76, 76, 76, 76,
	76, 76, 1272, 475, 898, 899, 900, 475, 76, 76,
	293, 1300, 455, 187, 1231, 1297, 1231, 1282, 665, 491,
	492, 493, 494, 495, 496, 497, 490, 1116, 76, 500,
	1115, 442, 187, 1231, 1280, 455, 443, 978, 76, 442,
	268, 1231, 455, 1231, 1232, 689, 1195, 1194, 1104, 455,
	442, 442, 442, 442, 442, 442, 442, 442, 969, 663,
	1182, 455, 1251, 713, 442, 442, 860, 710, 1136, 1135,
	1250, 74, 514, 515, 516, 517, 518, 519, 520, 1132,
	1133, 76, 23, 559, 562, 563, 564, 560, 691, 561,
	565, 1132, 1131, 949, 950, 913, 455, 21, 706, 738,
	311, 754, 757, 662, 313, 661, 938, 763, 708, 939,
	416, 652, 187, 554, 455, 187, 187, 187, 187, 187,
	747, 455, 580, 650, 774, 645, 433, 187, 47, 50,
	187, 426, 739, 740, 187, 596, 595, 749, 412, 187,
	187, 766, 525, 76, 1083, 1125, 797, 944, 579, 945,
	945, 944, 759, 222, 798, 553, 76, 714, 23, 747,
	1178, 54, 554, 581, 1138, 579, 1134, 699, 700, 1049,
	970, 300, 300, 300, 300, 300, 750, 751, 802, 554,
	787, 749, 758, 925, 775, 1226, 569, 778, 794, 795,
	796, 554, 944, 800, 801, 300, 765, 23, 767, 768,
	913, 839, 840, 841, 816, 50, 776, 777, 187, 779,
	922, 76, 913, 76, 913, 582, 685, 187, 50, 524,
	187, 76, 752, 753, 1253, 224, 924, 853, 299, 299,
	299, 299, 299, 1211, 1209, 313, 313, 313, 313, 831,
	313, 852, 1098, 299, 50, 973, 848, 313, 849, 850,
	843, 842, 299, 921, 489, 488, 498, 499, 491, 492,
	493, 494, 495, 496, 497, 490, 65, 442, 500, 442,
	649, 710, 50, 855, 478, 949, 950, 442, 1118, 1083,
	998, 952, 659, 807, 452, 784, 886, 697, 782, 955,
	785, 890, 455, 783, 891, 786, 713, 563, 564, 954,
	908, 781, 559, 562, 563, 564, 560, 711, 561, 565,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 903, 902, 780, 489, 488,
	498, 499, 491, 492, 493, 494, 495, 496, 497, 490,
	228, 229, 500, 311, 1308, 1302, 897, 313, 1045, 469,
	1307, 896, 895, 591, 457, 76, 989, 594, 187, 1170,
	455, 434, 980, 467, 929, 1279, 458, 1278, 1224, 974,
	1176, 1212, 76, 962, 862, 658, 887, 888, 567, 463,
	953, 940, 225, 226, 469, 219, 941, 942, 971, 961,
	714, 963, 964, 912, 1258, 220, 489, 488, 498, 499,
	491, 492, 493, 494, 495, 496, 497, 490, 54, 927,
	500, 690, 894, 1257, 300, 1214, 76, 76, 945, 76,
	893, 975, 976, 985, 986, 471, 1266, 1199, 680, 56,
	832, 833, 58, 835, 836, 988, 1007, 990, 991, 992,
	995, 914, 76, 578, 51, 187, 187, 844, 845, 846,
	1, 1019, 859, 187, 1001, 313, 931, 868, 1283, 1004,
	1237, 1112, 76, 313, 818, 810, 410, 64, 746, 748,
	1273, 299, 817, 442, 313, 313, 313, 313, 313, 313,
	313, 313, 1243, 1197, 764, 825, 982, 828, 313, 313,
	1117, 1276, 979, 1053, 601, 599, 1052, 600, 442, 598,
	603, 602, 76, 76, 1084, 597, 198, 1070, 693, 774,
	710, 306, 1078, 566, 789, 774, 1058, 709, 478, 1087,
	1071, 313, 1094, 590, 854, 472, 1092, 66, 1093, 1033,
	1032, 76, 864, 76, 76, 1040, 676, 883, 450, 200,
	508, 892, 904, 905, 906, 1110, 1105, 965, 312, 1111,
	1090, 686, 461, 1089, 1256, 1106, 1088, 1213, 47, 187,
	928, 741, 534, 760, 245, 701, 76, 257, 254, 76,
	256, 755, 755, 1100, 1101, 1102, 255, 755, 1128, 692,
	937, 76, 482, 1126, 1127, 243, 235, 298, 1141, 550,
	558, 556, 555, 187, 755, 951, 947, 297, 1048, 76,
	1173, 1263, 1142, 696, 25, 55, 230, 76, 19, 18,
	187, 17, 20, 16, 1144, 15, 14, 29, 13, 311,
	12, 11, 10, 313, 1080, 1152, 9, 8, 1147, 7,
	6, 5, 813, 4, 221, 22, 313, 2, 0, 1095,
	1096, 1151, 0, 1097, 0, 0, 1099, 1159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	987, 76, 76, 76, 187, 76, 300, 1188, 1189, 1190,
	1177, 76, 0, 0, 1185, 0, 441, 1191, 0, 0,
	0, 0, 0, 0, 910, 0, 1193, 971, 911, 0,
	0, 313, 0, 313, 1172, 915, 916, 917, 76, 76,
	76, 313, 76, 0, 926, 0, 0, 0, 0, 932,
	0, 933, 934, 935, 936, 0, 1208, 1207, 0, 0,
	0, 709, 1201, 299, 1203, 313, 1200, 0, 0, 0,
	0, 0, 0, 1055, 1056, 0, 1150, 0, 0, 0,
	0, 0, 0, 76, 76, 0, 1072, 1073, 1215, 1075,
	1076, 1225, 0, 0, 442, 0, 76, 0, 1087, 0,
	0, 0, 0, 1236, 1242, 460, 0, 0, 0, 0,
	76, 0, 76, 0, 0, 1175, 1252, 0, 1254, 0,
	0, 0, 524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 1227, 0, 1088, 1267, 0, 1228, 1248,
	185, 1249, 0, 210, 0, 1271, 1087, 0, 0, 0,
	1010, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	1281, 0, 1287, 0, 0, 234, 0, 185, 185, 1255,
	76, 0, 1292, 185, 0, 960, 0, 774, 1015, 0,
	1268, 0, 0, 1088, 0, 47, 76, 1298, 813, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 1057, 0,
	0, 1305, 1306, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 445, 446, 0, 449, 0, 0, 1154,
	0, 0, 0, 453, 0, 0, 1156, 1157, 0, 1158,
	0, 0, 1160, 0, 1162, 1003, 999, 313, 0, 313,
	0, 0, 1009, 0, 0, 1103, 0, 1006, 1016, 1011,
	1012, 1017, 1014, 1013, 0, 0, 0, 0, 0, 0,
	0, 0, 313, 0, 1018, 0, 0, 0, 1313, 0,
	1008, 0, 0, 0, 0, 0, 0, 0, 1051, 0,
	1196, 185, 313, 185, 0, 0, 0, 0, 0, 185,
	0, 1286, 524, 0, 0, 0, 185, 0, 0, 0,
	1074, 0, 0, 0, 313, 488, 498, 499, 491, 492,
	493, 494, 495, 496, 497, 490, 0, 301, 500, 755,
	0, 0, 1091, 960, 0, 755, 0, 0, 0, 0,
	0, 0, 1217, 1218, 0, 1219, 1220, 1221, 1153, 0,
	0, 0, 0, 0, 0, 1155, 0, 813, 0, 813,
	0, 313, 184, 313, 1114, 0, 1164, 1165, 1166, 0,
	0, 1169, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1179, 1180, 1181, 0, 1184, 0,
	304, 0, 0, 0, 0, 414, 1140, 0, 0, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 1145, 0, 0, 0, 0, 185, 574, 185, 498,
	499, 491, 492, 493, 494, 495, 496, 497, 490, 1148,
	0, 500, 0, 1051, 0, 0, 0, 313, 0, 0,
	0, 646, 0, 0, 0, 0, 0, 0, 0, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	666, 667, 668, 669, 670, 671, 672, 673, 0, 1222,
	0, 0, 0, 0, 674, 675, 0, 0, 0, 0,
	0, 0, 0, 0, 1233, 1234, 1235, 0, 1315, 1187,
	0, 1187, 1187, 1187, 0, 1192, 0, 813, 0, 0,
	0, 313, 0, 422, 0, 423, 0, 0, 0, 0,
	0, 430, 0, 1259, 1260, 1261, 1262, 0, 432, 0,
	0, 0, 0, 0, 0, 1003, 813, 0, 313, 313,
	313, 0, 1210, 0, 0, 0, 185, 185, 0, 0,
	185, 0, 0, 185, 0, 0, 0, 664, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1288,
	0, 0, 0, 0, 1293, 0, 0, 0, 185, 0,
	0, 0, 0, 1229, 1230, 0, 0, 0, 0, 1299,
	0, 0, 0, 0, 0, 0, 1114, 185, 0, 0,
	0, 23, 24, 48, 26, 27, 664, 0, 0, 0,
	1187, 0, 1187, 0, 0, 0, 0, 0, 0, 0,
	42, 1317, 1318, 0, 0, 28, 0, 0, 0, 0,
	0, 552, 1270, 0, 0, 0, 0, 0, 0, 0,
	576, 1171, 0, 0, 37, 0, 0, 234, 50, 0,
	0, 0, 234, 234, 1187, 0, 756, 756, 234, 0,
	0, 0, 756, 0, 0, 0, 196, 755, 0, 0,
	1294, 0, 234, 234, 234, 234, 0, 185, 0, 756,
	185, 185, 185, 185, 185, 0, 1301, 861, 0, 863,
	206, 0, 788, 0, 0, 185, 0, 882, 0, 574,
	0, 0, 0, 0, 185, 185, 0, 30, 31, 33,
	32, 35, 0, 489, 488, 498, 499, 491, 492, 493,
	494, 495, 496, 497, 490, 0, 0, 500, 36, 43,
	44, 0, 0, 45, 46, 34, 0, 0, 0, 0,
	191, 0, 0, 0, 0, 0, 193, 38, 39, 0,
	40, 41, 0, 199, 195, 0, 0, 0, 653, 654,
	0, 0, 657, 0, 0, 660, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	197, 0, 185, 201, 0, 185, 0, 0, 0, 0,
	679, 0, 0, 0, 0, 0, 0, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	664, 0, 192, 0, 0, 1167, 455, 0, 0, 0,
	0, 0, 234, 0, 0, 0, 0, 0, 0, 0,
	0, 49, 0, 1168, 0, 0, 0, 0, 0, 194,
	0, 202, 203, 204, 205, 209, 0, 0, 0, 0,
	208, 207, 489, 488, 498, 499, 491, 492, 493, 494,
	495, 496, 497, 490, 0, 0, 500, 0, 0, 234,
	0, 0, 0, 607, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 771,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 489, 488, 498, 499, 491,
	492, 493, 494, 495, 496, 497, 490, 799, 1039, 500,
	0, 0, 0, 185, 633, 634, 635, 636, 637, 638,
	639, 0, 640, 641, 642, 643, 644, 621, 622, 623,
	624, 604, 605, 0, 0, 606, 608, 1054, 609, 610,
	611, 612, 613, 614, 615, 616, 617, 618, 625, 626,
	627, 628, 629, 630, 631, 632, 0, 489, 488, 498,
	499, 491, 492, 493, 494, 495, 496, 497, 490, 0,
	0, 500, 0, 0, 0, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 881, 489, 488,
	498, 499, 491, 492, 493, 494, 495, 496, 497, 490,
	1043, 1044, 500, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 234, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 234,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 664,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 484, 756, 487, 0, 0, 0, 0,
	756, 501, 502, 503, 504, 505, 506, 507, 909, 485,
	486, 483, 489, 488, 498, 499, 491, 492, 493, 494,
	495, 496, 497, 490, 0, 0, 500, 0, 489, 488,
	498, 499, 491, 492, 493, 494, 495, 496, 497, 490,
	0, 0, 500, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1206, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	1047, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 399, 389, 0, 361, 401, 339, 353, 409, 354,
	355, 382, 325, 369, 125, 351, 0, 342, 320, 348,
	321, 340, 363, 93, 366, 338, 391, 372, 107, 407,
	109, 377, 0, 142, 118, 0, 0, 365, 393, 367,
	387, 360, 383, 330, 376, 402, 352, 380, 403, 0,
	0, 0, 75, 0, 814, 815, 1137, 0, 0, 0,
	0, 86, 0, 379, 398, 350, 381, 319, 378, 0,
	323, 326, 408, 396, 345, 346, 972, 0, 0, 0,
	0, 0, 0, 364, 368, 384, 358, 0, 0, 0,
	1146, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 756, 318, 388, 394, 359, 188, 397, 357,
	356, 400, 131, 0, 0, 145, 98, 97, 106, 392,
	341, 349, 89, 347, 137, 127, 157, 374, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 322, 0, 143, 159,
	173, 337, 395, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 333, 336, 331, 332, 370, 371, 404,
	405, 406, 386, 328, 0, 334, 335, 0, 390, 373,
	77, 0, 108, 170, 133, 95, 160, 399, 389, 0,
	361, 401, 339, 353, 409, 354, 355, 382, 325, 369,
	125, 351, 0, 342, 320, 348, 321, 340, 363, 93,
	366, 338, 391, 372, 107, 407, 109, 377, 0, 142,
	118, 0, 0, 365, 393, 367, 387, 360, 383, 330,
	376, 402, 352, 380, 403, 0, 0, 0, 75, 0,
	814, 815, 0, 0, 0, 0, 0, 86, 0, 379,
	398, 350, 381, 319, 378, 0, 323, 326, 408, 396,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 0,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 188, 397, 357, 356, 400, 131, 0,
	0, 145, 98, 97, 106, 392, 341, 349, 89, 347,
	137, 127, 157, 374, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 322, 0, 143, 159, 173, 337, 395, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 333,
	336, 331, 332, 370, 371, 404, 405, 406, 386, 328,
	0, 334, 335, 0, 390, 373, 77, 0, 108, 170,
	133, 95, 160, 399, 389, 0, 361, 401, 339, 353,
	409, 354, 355, 382, 325, 369, 125, 351, 0, 342,
	320, 348, 321, 340, 363, 93, 366, 338, 391, 372,
	107, 407, 109, 377, 0, 142, 118, 0, 0, 365,
	393, 367, 387, 360, 383, 330, 376, 402, 352, 380,
	403, 50, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 379, 398, 350, 381, 319,
	378, 0, 323, 326, 408, 396, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 384, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 0, 375,
	0, 0, 0, 327, 324, 0, 362, 0, 0, 0,
	329, 0, 344, 385, 0, 318, 388, 394, 359, 188,
	397, 357, 356, 400, 131, 0, 0, 145, 98, 97,
	106, 392, 341, 349, 89, 347, 137, 127, 157, 374,
	128, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 322, 0,
	143, 159, 173, 337, 395, 166, 167, 168, 169, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 333, 336, 331, 332, 370,
	371, 404, 405, 406, 386, 328, 0, 334, 335, 0,
	390, 373, 77, 0, 108, 170, 133, 95, 160, 399,
	389, 0, 361, 401, 339, 353, 409, 354, 355, 382,
	325, 369, 125, 351, 0, 342, 320, 348, 321, 340,
	363, 93, 366, 338, 391, 372, 107, 407, 109, 377,
	0, 142, 118, 0, 0, 365, 393, 367, 387, 360,
	383, 330, 376, 402, 352, 380, 403, 0, 0, 0,
	75, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 379, 398, 350, 381, 319, 378, 0, 323, 326,
	408, 396, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 384, 358, 0, 0, 0, 0, 0,
	0, 1050, 0, 343, 0, 375, 0, 0, 0, 327,
	324, 0, 362, 0, 0, 0, 329, 0, 344, 385,
	0, 318, 388, 394, 359, 188, 397, 357, 356, 400,
	131, 0, 0, 145, 98, 97, 106, 392, 341, 349,
	89, 347, 137, 127, 157, 374, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 322, 0, 143, 159, 173, 337,
	395, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 333, 336, 331, 332, 370, 371, 404, 405, 406,
	386, 328, 0, 334, 335, 0, 390, 373, 77, 0,
	108, 170, 133, 95, 160, 399, 389, 0, 361, 401,
	339, 353, 409, 354, 355, 382, 325, 369, 125, 351,
	0, 342, 320, 348, 321, 340, 363, 93, 366, 338,
	391, 372, 107, 407, 109, 377, 0, 142, 118, 0,
	0, 365, 393, 367, 387, 360, 383, 330, 376, 402,
	352, 380, 403, 0, 0, 0, 239, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 379, 398, 350,
	381, 319, 378, 0, 323, 326, 408, 396, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 384,
	358, 0, 0, 0, 0, 0, 0, 707, 0, 343,
	0, 375, 0, 0, 0, 327, 324, 0, 362, 0,
	0, 0, 329, 0, 344, 385, 0, 318, 388, 394,
	359, 188, 397, 357, 356, 400, 131, 0, 0, 145,
	98, 97, 106, 392, 341, 349, 89, 347, 137, 127,
	157, 374, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	322, 0, 143, 159, 173, 337, 395, 166, 167, 168,
	169, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 333, 336, 331,
	332, 370, 371, 404, 405, 406, 386, 328, 0, 334,
	335, 0, 390, 373, 77, 0, 108, 170, 133, 95,
	160, 399, 389, 0, 361, 401, 339, 353, 409, 354,
	355, 382, 325, 369, 125, 351, 0, 342, 320, 348,
	321, 340, 363, 93, 366, 338, 391, 372, 107, 407,
	109, 377, 0, 142, 118, 0, 0, 365, 393, 367,
	387, 360, 383, 330, 376, 402, 352, 380, 403, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 379, 398, 350, 381, 319, 378, 0,
	323, 326, 408, 396, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 364, 368, 384, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 188, 397, 357,
	356, 400, 131, 0, 0, 145, 98, 97, 106, 392,
	341, 349, 89, 347, 137, 127, 157, 374, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 322, 0, 143, 159,
	173, 337, 395, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 333, 336, 331, 332, 370, 371, 404,
	405, 406, 386, 328, 0, 334, 335, 0, 390, 373,
	77, 0, 108, 170, 133, 95, 160, 399, 389, 0,
	361, 401, 339, 353, 409, 354, 355, 382, 325, 369,
	125, 351, 0, 342, 320, 348, 321, 340, 363, 93,
	366, 338, 391, 372, 107, 407, 109, 377, 0, 142,
	118, 0, 0, 365, 393, 367, 387, 360, 383, 330,
	376, 402, 352, 380, 403, 0, 0, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 379,
	398, 350, 381, 319, 378, 0, 323, 326, 408, 396,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 364,
	368, 384, 358, 0, 0, 0, 0, 0, 0, 0,
	0, 343, 0, 375, 0, 0, 0, 327, 324, 0,
	362, 0, 0, 0, 329, 0, 344, 385, 0, 318,
	388, 394, 359, 188, 397, 357, 356, 400, 131, 0,
	0, 145, 98, 97, 106, 392, 341, 349, 89, 347,
	137, 127, 157, 374, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 322, 0, 143, 159, 173, 337, 395, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 333,
	336, 331, 332, 370, 371, 404, 405, 406, 386, 328,
	0, 334, 335, 0, 390, 373, 77, 0, 108, 170,
	133, 95, 160, 399, 389, 0, 361, 401, 339, 353,
	409, 354, 355, 382, 325, 369, 125, 351, 0, 342,
	320, 348, 321, 340, 363, 93, 366, 338, 391, 372,
	107, 407, 109, 377, 0, 142, 118, 0, 0, 365,
	393, 367, 387, 360, 383, 330, 376, 402, 352, 380,
	403, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 379, 398, 350, 381, 319,
	378, 0, 323, 326, 408, 396, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 364, 368, 384, 358, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 0, 375,
	0, 0, 0, 327, 324, 0, 362, 0, 0, 0,
	329, 0, 344, 385, 0, 318, 388, 394, 359, 188,
	397, 357, 356, 400, 131, 0, 0, 145, 98, 97,
	106, 392, 341, 349, 89, 347, 137, 127, 157, 374,
	128, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 316, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 322, 0,
	143, 159, 173, 337, 395, 166, 167, 168, 169, 0,
	0, 0, 317, 315, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 333, 336, 331, 332, 370,
	371, 404, 405, 406, 386, 328, 0, 334, 335, 0,
	390, 373, 77, 0, 108, 170, 133, 95, 160, 399,
	389, 0, 361, 401, 339, 353, 409, 354, 355, 382,
	325, 369, 125, 351, 0, 342, 320, 348, 321, 340,
	363, 93, 366, 338, 391, 372, 107, 407, 109, 377,
	0, 142, 118, 0, 0, 365, 393, 367, 387, 360,
	383, 330, 376, 402, 352, 380, 403, 0, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 379, 398, 350, 381, 319, 378, 0, 323, 326,
	408, 396, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 364, 368, 384, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 343, 0, 375, 0, 0, 0, 327,
	324, 0, 362, 0, 0, 0, 329, 0, 344, 385,
	0, 318, 388, 394, 359, 188, 397, 357, 356, 400,
	131, 0, 0, 145, 98, 97, 106, 392, 341, 349,
	89, 347, 137, 127, 157, 374, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 322, 0, 143, 159, 173, 337,
	395, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 333, 336, 331, 332, 370, 371, 404, 405, 406,
	386, 328, 0, 334, 335, 0, 390, 373, 77, 0,
	108, 170, 133, 95, 160, 399, 389, 0, 361, 401,
	339, 353, 409, 354, 355, 382, 325, 369, 125, 351,
	0, 342, 320, 348, 321, 340, 363, 93, 366, 338,
	391, 372, 107, 407, 109, 377, 0, 142, 118, 0,
	0, 365, 393, 367, 387, 360, 383, 330, 376, 402,
	352, 380, 403, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 379, 398, 350,
	381, 319, 378, 0, 323, 326, 408, 396, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 364, 368, 384,
	358, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	0, 375, 0, 0, 0, 327, 324, 0, 362, 0,
	0, 0, 329, 0, 344, 385, 0, 318, 388, 394,
	359, 188, 397, 357, 356, 400, 131, 0, 0, 145,
	98, 97, 106, 392, 341, 349, 89, 347, 137, 127,
	157, 374, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 584, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 316, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	322, 0, 143, 159, 173, 337, 395, 166, 167, 168,
	169, 0, 0, 0, 317, 315, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 333, 336, 331,
	332, 370, 371, 404, 405, 406, 386, 328, 0, 334,
	335, 0, 390, 373, 77, 0, 108, 170, 133, 95,
	160, 399, 389, 0, 361, 401, 339, 353, 409, 354,
	355, 382, 325, 369, 125, 351, 0, 342, 320, 348,
	321, 340, 363, 93, 366, 338, 391, 372, 107, 407,
	109, 377, 0, 142, 118, 0, 0, 365, 393, 367,
	387, 360, 383, 330, 376, 402, 352, 380, 403, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 379, 398, 350, 381, 319, 378, 0,
	323, 326, 408, 396, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 364, 368, 384, 358, 0, 0, 0,
	0, 0, 0, 0, 0, 343, 0, 375, 0, 0,
	0, 327, 324, 0, 362, 0, 0, 0, 329, 0,
	344, 385, 0, 318, 388, 394, 359, 188, 397, 357,
	356, 400, 131, 0, 0, 145, 98, 97, 106, 392,
	341, 349, 89, 347, 137, 127, 157, 374, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	307, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 316, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 322, 0, 143, 159,
	173, 337, 395, 166, 167, 168, 169, 0, 0, 0,
	317, 315, 310, 309, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 333, 336, 331, 332, 370, 371, 404,
	405, 406, 386, 328, 0, 334, 335, 0, 390, 373,
	77, 0, 108, 170, 133, 95, 160, 125, 0, 0,
	743, 0, 241, 0, 0, 0, 93, 0, 238, 0,
	0, 107, 280, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 271, 272, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 239, 259, 258, 261, 262,
	263, 264, 0, 0, 86, 260, 265, 266, 267, 0,
	0, 236, 252, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 249, 250, 232, 0, 0, 0,
	291, 0, 251, 0, 0, 247, 248, 253, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 289, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 189, 165, 147,
	164, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 172, 83, 162, 163, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	171, 126, 138, 88, 158, 141, 281, 290, 287, 288,
	285, 286, 284, 283, 282, 292, 273, 274, 275, 276,
	278, 0, 277, 77, 0, 108, 170, 133, 95, 160,
	125, 0, 0, 0, 0, 241, 0, 0, 0, 93,
	0, 238, 0, 0, 107, 280, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 271, 272, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 455, 239, 259,
	258, 261, 262, 263, 264, 0, 0, 86, 260, 265,
	266, 267, 0, 0, 236, 252, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 249, 250, 0,
	0, 0, 0, 291, 0, 251, 0, 0, 247, 248,
	253, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 289, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 281,
	290, 287, 288, 285, 286, 284, 283, 282, 292, 273,
	274, 275, 276, 278, 0, 277, 77, 0, 108, 170,
	133, 95, 160, 125, 0, 0, 0, 0, 241, 0,
	0, 0, 93, 0, 238, 0, 0, 107, 280, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 239, 259, 258, 261, 262, 263, 264, 0, 0,
	86, 260, 265, 266, 267, 0, 0, 236, 252, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 232, 0, 0, 0, 291, 0, 251, 0,
	0, 247, 248, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 289,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 281, 290, 287, 288, 285, 286, 284, 283,
	282, 292, 273, 274, 275, 276, 278, 0, 277, 77,
	0, 108, 170, 133, 95, 160, 125, 0, 0, 0,
	0, 241, 0, 0, 0, 93, 0, 238, 0, 0,
	107, 280, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 271, 272, 0, 0, 0, 0, 0, 0, 806,
	0, 50, 0, 0, 239, 259, 258, 261, 262, 263,
	264, 0, 0, 86, 260, 265, 266, 267, 0, 0,
	236, 252, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 249, 250, 0, 0, 0, 0, 291,
	0, 251, 0, 0, 247, 248, 253, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 289, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	128, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 281, 290, 287, 288, 285,
	286, 284, 283, 282, 292, 273, 274, 275, 276, 278,
	23, 277, 77, 0, 108, 170, 133, 95, 160, 0,
	0, 0, 125, 0, 0, 0, 0, 241, 0, 0,
	0, 93, 0, 238, 0, 0, 107, 280, 109, 0,
	0, 142, 118, 0, 0, 0, 0, 271, 272, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	239, 259, 258, 261, 262, 263, 264, 0, 0, 86,
	260, 265, 266, 267, 0, 0, 236, 252, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 249,
	250, 0, 0, 0, 0, 291, 0, 251, 0, 0,
	247, 248, 253, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 289, 0,
	131, 0, 0, 145, 98, 97, 106, 0, 0, 0,
	89, 0, 137, 127, 157, 0, 128, 136, 110, 149,
	132, 156, 189, 165, 147, 164, 78, 146, 155, 87,
	139, 80, 153, 144, 116, 102, 103, 79, 0, 135,
	92, 96, 91, 124, 150, 151, 90, 172, 83, 162,
	163, 82, 84, 161, 123, 148, 154, 117, 114, 81,
	152, 115, 113, 105, 94, 99, 129, 112, 130, 100,
	120, 119, 121, 0, 0, 0, 143, 159, 173, 0,
	0, 166, 167, 168, 169, 0, 0, 0, 122, 85,
	101, 140, 104, 111, 134, 171, 126, 138, 88, 158,
	141, 281, 290, 287, 288, 285, 286, 284, 283, 282,
	292, 273, 274, 275, 276, 278, 0, 277, 77, 0,
	108, 170, 133, 95, 160, 125, 0, 0, 0, 0,
	241, 0, 0, 0, 93, 0, 238, 0, 0, 107,
	280, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	271, 272, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 239, 259, 258, 261, 262, 263, 264,
	0, 0, 86, 260, 265, 266, 267, 0, 0, 236,
	252, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 249, 250, 0, 0, 0, 0, 291, 0,
	251, 0, 0, 247, 248, 253, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 289, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 281, 290, 287, 288, 285, 286,
	284, 283, 282, 292, 273, 274, 275, 276, 278, 125,
	277, 77, 0, 108, 170, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 280, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 271, 272, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 0, 0, 239, 259, 258,
	261, 262, 263, 264, 0, 0, 86, 260, 265, 266,
	267, 0, 0, 0, 252, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 249, 250, 0, 0,
	0, 0, 291, 0, 251, 0, 0, 247, 248, 253,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 289, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 1316, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 281, 290,
	287, 288, 285, 286, 284, 283, 282, 292, 273, 274,
	275, 276, 278, 125, 277, 77, 0, 108, 170, 133,
	95, 160, 93, 0, 0, 0, 0, 107, 280, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 271, 272,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 239, 259, 258, 261, 262, 263, 264, 0, 0,
	86, 260, 265, 266, 267, 0, 0, 0, 252, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	249, 250, 0, 0, 0, 0, 291, 0, 251, 0,
	0, 247, 248, 253, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 289,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 281, 290, 287, 288, 285, 286, 284, 283,
	282, 292, 273, 274, 275, 276, 278, 125, 277, 77,
	0, 108, 170, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	489, 488, 498, 499, 491, 492, 493, 494, 495, 496,
	497, 490, 0, 0, 500, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 189, 165, 147,
	164, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 172, 83, 162, 163, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	171, 126, 138, 88, 158, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 0, 108, 170, 133, 95, 160,
	125, 0, 0, 0, 477, 0, 0, 0, 0, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 0,
	479, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 474, 473, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 170,
	133, 95, 160, 93, 0, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 72, 0, 67, 0, 0,
	0, 73, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 69, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 108, 170, 133, 95, 160, 125, 0, 0,
	0, 573, 0, 0, 0, 0, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 575, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 189, 165, 147,
	164, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 172, 83, 162, 163, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	171, 126, 138, 88, 158, 141, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 77, 0, 108, 170, 133, 95, 160,
	93, 0, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	170, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 186, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 170, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	694, 0, 0, 695, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 170, 133,
	95, 160, 93, 0, 593, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 592, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 170, 133, 95, 160, 125, 0, 0, 0,
	573, 0, 0, 0, 0, 93, 0, 0, 0, 0,
	107, 0, 109, 0, 0, 142, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 186, 0, 575, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	0, 0, 0, 0, 131, 0, 0, 145, 98, 97,
	106, 0, 0, 0, 89, 0, 137, 127, 157, 0,
	571, 136, 110, 149, 132, 156, 189, 165, 147, 164,
	78, 146, 155, 87, 139, 80, 153, 144, 116, 102,
	103, 79, 0, 135, 92, 96, 91, 124, 150, 151,
	90, 172, 83, 162, 163, 82, 84, 161, 123, 148,
	154, 117, 114, 81, 152, 115, 113, 105, 94, 99,
	129, 112, 130, 100, 120, 119, 121, 0, 0, 0,
	143, 159, 173, 0, 0, 166, 167, 168, 169, 0,
	0, 0, 122, 85, 101, 140, 104, 111, 134, 171,
	126, 138, 88, 158, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	125, 0, 77, 0, 108, 170, 133, 95, 160, 93,
	0, 0, 0, 0, 107, 0, 109, 0, 0, 142,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 186, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 0, 131, 0,
	0, 145, 98, 97, 106, 0, 0, 0, 89, 0,
	137, 127, 157, 0, 128, 136, 110, 149, 132, 156,
	189, 165, 147, 164, 78, 146, 155, 87, 139, 80,
	153, 144, 116, 102, 103, 79, 0, 135, 92, 96,
	91, 124, 150, 151, 90, 172, 83, 162, 163, 82,
	84, 161, 123, 148, 154, 117, 114, 81, 152, 115,
	113, 105, 94, 99, 129, 112, 130, 100, 120, 119,
	121, 0, 0, 0, 143, 159, 173, 0, 0, 166,
	167, 168, 169, 0, 0, 0, 122, 85, 101, 140,
	104, 111, 134, 171, 126, 138, 88, 158, 141, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 125, 0, 77, 0, 108, 170,
	133, 95, 160, 93, 0, 0, 0, 0, 107, 0,
	109, 0, 0, 142, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 575, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 0, 0,
	0, 0, 131, 0, 0, 145, 98, 97, 106, 0,
	0, 0, 89, 0, 137, 127, 157, 0, 128, 136,
	110, 149, 132, 156, 189, 165, 147, 164, 78, 146,
	155, 87, 139, 80, 153, 144, 116, 102, 103, 79,
	0, 135, 92, 96, 91, 124, 150, 151, 90, 172,
	83, 162, 163, 82, 84, 161, 123, 148, 154, 117,
	114, 81, 152, 115, 113, 105, 94, 99, 129, 112,
	130, 100, 120, 119, 121, 0, 0, 0, 143, 159,
	173, 0, 0, 166, 167, 168, 169, 0, 0, 0,
	122, 85, 101, 140, 104, 111, 134, 171, 126, 138,
	88, 158, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 125, 0,
	77, 0, 108, 170, 133, 95, 160, 93, 0, 0,
	0, 0, 107, 0, 109, 0, 0, 142, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 479, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 131, 0, 0, 145,
	98, 97, 106, 0, 0, 0, 89, 0, 137, 127,
	157, 0, 128, 136, 110, 149, 132, 156, 189, 165,
	147, 164, 78, 146, 155, 87, 139, 80, 153, 144,
	116, 102, 103, 79, 0, 135, 92, 96, 91, 124,
	150, 151, 90, 172, 83, 162, 163, 82, 84, 161,
	123, 148, 154, 117, 114, 81, 152, 115, 113, 105,
	94, 99, 129, 112, 130, 100, 120, 119, 121, 0,
	0, 0, 143, 159, 173, 0, 0, 166, 167, 168,
	169, 0, 0, 0, 122, 85, 101, 140, 104, 111,
	134, 171, 126, 138, 88, 158, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 77, 0, 108, 170, 133, 95,
	160, 551, 93, 0, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	302, 0, 0, 0, 0, 0, 0, 125, 0, 77,
	0, 108, 170, 133, 95, 160, 93, 0, 0, 0,
	0, 107, 0, 109, 0, 0, 142, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 186, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 131, 0, 0, 145, 98,
	97, 106, 0, 0, 0, 89, 0, 137, 127, 157,
	0, 128, 136, 110, 149, 132, 156, 189, 165, 147,
	164, 78, 146, 155, 87, 139, 80, 153, 144, 116,
	102, 103, 79, 0, 135, 92, 96, 91, 124, 150,
	151, 90, 172, 83, 162, 163, 82, 84, 161, 123,
	148, 154, 117, 114, 81, 152, 115, 113, 105, 94,
	99, 129, 112, 130, 100, 120, 119, 121, 0, 0,
	0, 143, 159, 173, 0, 0, 166, 167, 168, 169,
	0, 0, 0, 122, 85, 101, 140, 104, 111, 134,
	171, 126, 138, 88, 158, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 125, 0, 77, 0, 108, 170, 133, 95, 160,
	93, 0, 0, 0, 0, 107, 0, 109, 0, 0,
	142, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 188, 0, 0, 0, 0, 131,
	0, 0, 145, 98, 97, 106, 0, 0, 0, 89,
	0, 137, 127, 157, 0, 128, 136, 110, 149, 132,
	156, 189, 165, 147, 164, 78, 146, 155, 87, 139,
	80, 153, 144, 116, 102, 103, 79, 0, 135, 92,
	96, 91, 124, 150, 151, 90, 172, 83, 162, 163,
	82, 84, 161, 123, 148, 154, 117, 114, 81, 152,
	115, 113, 105, 94, 99, 129, 112, 130, 100, 120,
	119, 121, 0, 0, 0, 143, 159, 173, 0, 0,
	166, 167, 168, 169, 0, 0, 0, 122, 85, 101,
	140, 104, 111, 134, 171, 126, 138, 88, 158, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 77, 0, 108,
	170, 133, 95, 160, 93, 0, 0, 0, 0, 107,
	0, 109, 0, 0, 142, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 131, 0, 0, 145, 98, 97, 106,
	0, 0, 0, 89, 0, 137, 127, 157, 0, 128,
	136, 110, 149, 132, 156, 189, 165, 147, 164, 78,
	146, 155, 87, 139, 80, 153, 144, 116, 102, 103,
	79, 0, 135, 92, 96, 91, 124, 150, 151, 90,
	172, 83, 162, 163, 82, 84, 161, 123, 148, 154,
	117, 114, 81, 152, 115, 113, 105, 94, 99, 129,
	112, 130, 100, 120, 119, 121, 0, 0, 0, 143,
	159, 173, 0, 0, 166, 167, 168, 169, 0, 0,
	0, 122, 85, 101, 140, 104, 111, 134, 171, 126,
	138, 88, 158, 141, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 77, 0, 108, 170, 133, 95, 160, 93, 0,
	0, 0, 0, 107, 0, 109, 0, 0, 142, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 239, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 131, 0, 0,
	145, 98, 97, 106, 0, 0, 0, 89, 0, 137,
	127, 157, 0, 128, 136, 110, 149, 132, 156, 189,
	165, 147, 164, 78, 146, 155, 87, 139, 80, 153,
	144, 116, 102, 103, 79, 0, 135, 92, 96, 91,
	124, 150, 151, 90, 172, 83, 162, 163, 82, 84,
	161, 123, 148, 154, 117, 114, 81, 152, 115, 113,
	105, 94, 99, 129, 112, 130, 100, 120, 119, 121,
	0, 0, 0, 143, 159, 173, 0, 0, 166, 167,
	168, 169, 0, 0, 0, 122, 85, 101, 140, 104,
	111, 134, 171, 126, 138, 88, 158, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 125, 0, 77, 0, 108, 170, 133,
	95, 160, 93, 0, 0, 0, 0, 107, 0, 109,
	0, 0, 142, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 186, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 131, 0, 0, 145, 98, 97, 106, 0, 0,
	0, 89, 0, 137, 127, 157, 0, 128, 136, 110,
	149, 132, 156, 189, 165, 147, 164, 78, 146, 155,
	87, 139, 80, 153, 144, 116, 102, 103, 79, 0,
	135, 92, 96, 91, 124, 150, 151, 90, 172, 83,
	162, 163, 82, 84, 161, 123, 148, 154, 117, 114,
	81, 152, 115, 113, 105, 94, 99, 129, 112, 130,
	100, 120, 119, 121, 0, 0, 0, 143, 159, 173,
	0, 0, 166, 167, 168, 169, 0, 0, 0, 122,
	85, 101, 140, 104, 111, 134, 171, 126, 138, 88,
	158, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	0, 108, 170, 133, 95, 160,
}
var yyPact = [...]int{

	1675, -1000, -180, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 833, 864, -1000, -1000, -1000, -1000, -1000, -1000, 653,
	7346, 51, 87, -26, 10053, 84, 1714, 10725, -1000, 2,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 631, -1000, -1000,
	-1000, -1000, -1000, 808, 819, 659, 802, 741, -1000, 5515,
	48, 8932, 9829, 4816, -1000, 522, 74, 10725, -145, 10277,
	46, 46, 46, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 82, 10725, -1000, 10725, 44, 515,
	44, 44, 44, 10725, -1000, 128, -1000, -1000, -1000, -1000,
	10725, 510, 771, 58, 2848, 2848, 2848, 2848, 7, 2848,
	-97, 673, -1000, -1000, -1000, -1000, 2848, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 420, 775, 6217,
	6217, 833, -1000, 631, -1000, -1000, -1000, 768, -1000, -1000,
	272, 854, -1000, 7122, 126, -1000, 6217, 2071, 605, -1000,
	-1000, 605, -1000, -1000, 100, -1000, -1000, 6665, 6665, 6665,
	6665, 6665, 6665, 6665, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 605, -1000,
	5984, 605, 605, 605, 605, 605, 605, 605, 605, 6217,
	605, 605, 605, 605, 605, 605, 605, 605, 605, 605,
	605, 605, 605, 9605, 565, 701, -1000, -1000, -1000, 796,
	8027, 8708, 10725, 551, -1000, 601, 4570, -91, -1000, -1000,
	-1000, 205, 8475, -1000, -1000, -1000, 767, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	521, -1000, 1847, 509, 2848, 52, 658, 507, 216, 495,
	10725, 10725, 2848, 60, 10725, 792, 671, 10725, 489, 487,
	-1000, 4324, -1000, 2848, 2848, 2848, 2848, 2848, 2848, 2848,
	2848, -1000, -1000, -1000, -1000, -1000, -1000, 2848, 2848, -1000,
	-75, -1000, 10725, -1000, -1000, -1000, -1000, 859, 158, 332,
	124, 602, -1000, 356, 808, 420, 741, 8251, 685, -1000,
	-1000, 10725, -1000, 6217, 6217, 325, -1000, 9380, -1000, -1000,
	3340, 162, 6665, 303, 181, 6665, 6665, 6665, 6665, 6665,
	6665, 6665, 6665, 6665, 6665, 6665, 6665, 6665, 6665, 6665,
	362, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 483,
	-1000, 631, 350, 350, 137, 137, 137, 137, 137, 137,
	6889, 5049, 420, 506, 219, 5984, 5515, 5515, 6217, 6217,
	10501, 10501, 5515, 803, 184, 219, 10501, -1000, 420, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5515, 5515, 5515, 5515,
	22, 10725, -1000, 10501, 8932, 8932, 8932, 8932, 8932, -1000,
	726, 700, -1000, 687, 684, 694, 10725, -1000, 499, 8027,
	116, 605, -1000, 9156, -1000, -1000, 22, 534, 8932, 10725,
	-1000, -1000, 4078, 601, -91, 564, -1000, -108, -102, 5748,
	133, -1000, -1000, -1000, -1000, 2602, 185, 252, -73, -1000,
	-1000, -1000, 626, -1000, 626, 626, -24, 626, 626, -42,
	-42, -42, -42, -1000, -1000, -1000, -1000, -1000, 638, 637,
	-1000, 626, 626, 626, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	633, 633, 633, 628, 628, 661, -1000, 10725, -164, 450,
	2848, 791, 2848, -1000, 72, -1000, 10725, -1000, -1000, 10725,
	2848, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 233, -1000, -1000, -1000,
	-1000, 689, 6217, 6217, 3832, 6217, -1000, -1000, -1000, 775,
	-1000, 803, 841, -1000, 759, 758, 5515, -1000, -1000, 162,
	210, -1000, -1000, 377, -1000, -1000, -1000, -1000, 123, 605,
	-1000, 1987, -1000, -1000, -1000, -1000, 303, 6665, 6665, 6665,
	603, 1987, 2087, 1416, 1313, 137, 120, 120, 138, 138,
	138, 138, 138, 364, 364, -1000, -1000, -1000, 420, -1000,
	-1000, -1000, 420, 5515, 600, -1000, -1000, 6217, -1000, 420,
	481, 481, 313, 360, 639, -1000, 122, 612, 481, 5515,
	242, -1000, 6217, 420, -1000, 481, 420, 481, 481, 516,
	605, -1000, 578, -1000, 204, 701, 664, 670, 482, -1000,
	-1000, -1000, -1000, 698, -1000, 688, -1000, -1000, -1000, -1000,
	-1000, 70, 68, 63, 10277, -1000, 846, 8932, 577, -1000,
	-1000, 564, -91, -123, -1000, -1000, -1000, 219, -1000, 442,
	556, 2356, -1000, -1000, -1000, -1000, -1000, -1000, 632, 781,
	188, 153, 421, -1000, -1000, 773, -1000, 225, -78, -1000,
	-1000, 342, -42, -42, 626, -1000, -1000, 133, 766, 133,
	133, 133, 375, 375, -1000, -1000, -1000, -1000, 336, -1000,
	-1000, -1000, 328, -1000, 669, 10277, 2848, -1000, 3586, -1000,
	-1000, -1000, -1000, -1000, -1000, 1222, 248, 171, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 21,
	-1000, 2848, -1000, 300, 10725, 10725, 750, 219, 219, 118,
	-1000, -1000, 10725, -1000, -1000, -1000, -1000, 598, -1000, -1000,
	-1000, 3094, 5515, -1000, 603, 1987, 1956, -1000, 6665, 6665,
	-1000, -1000, 481, 5515, 219, -1000, -1000, -1000, 56, 362,
	56, 6665, 6665, 3832, 6665, 6665, -158, 586, 208, -1000,
	6217, 191, -1000, -1000, -1000, -1000, -1000, 668, 10501, 605,
	-1000, 7803, 10277, 833, 10501, 6217, 6217, -1000, -1000, 6217,
	629, -1000, 6217, -1000, -1000, -1000, 605, 605, 605, 434,
	-1000, 833, 577, -1000, -1000, -1000, -113, -119, -1000, -1000,
	2602, -1000, 2602, 10277, -1000, 414, 411, -1000, -1000, 667,
	50, -1000, -1000, -1000, 530, 133, 133, -42, -1000, 173,
	-1000, -1000, -1000, 477, -1000, 465, 552, 454, 10725, -1000,
	-1000, 550, -1000, 203, -1000, 10277, 180, -1000, 10277, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10277, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10725, -1000, -1000, -1000, -1000, -1000, 10277, -1000,
	-1000, 371, 6217, -1000, -1000, -1000, 3586, -1000, 846, 8932,
	-1000, -1000, 420, -1000, 6665, 1987, 1987, -1000, -1000, 420,
	626, 626, -1000, 626, 628, -1000, 626, -7, 626, -9,
	420, 420, 1841, 1894, -1000, 745, 1702, 605, -154, -1000,
	219, 6217, -1000, 783, 533, 546, -1000, -1000, 5282, 420,
	446, 114, 434, 808, -1000, 219, 219, 219, 10277, 219,
	10277, 10277, 10277, 7579, 10277, 808, -1000, -1000, -1000, -1000,
	2356, -1000, 432, -1000, 626, -1000, -1000, -68, 858, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 133, -1000,
	-1000, -42, 366, -42, 312, -1000, 293, 2848, 3586, 2602,
	621, 10277, -1000, 620, -1000, -1000, -1000, -1000, 785, -1000,
	219, 842, 548, -1000, 1987, -1000, -1000, 79, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 6665, 6665, -1000,
	6665, 6665, 6665, 420, 348, 219, 780, -1000, 605, -1000,
	-1000, 592, 10277, 10277, -1000, -1000, 429, -1000, 427, 427,
	427, 116, -1000, -1000, 115, 10277, -1000, 141, -1000, -129,
	-1000, 133, -1000, 133, 455, 447, -1000, -1000, -1000, 10277,
	611, 10277, 605, 839, 818, -1000, -1000, 677, 677, 677,
	677, 49, -1000, -1000, 857, -1000, 605, -1000, 631, 103,
	-1000, 10277, -1000, -1000, -1000, -1000, -1000, 115, -1000, 386,
	194, 347, -1000, 234, 779, -1000, 777, -1000, -1000, -1000,
	-1000, -1000, 419, 10277, 402, 19, -1000, 6217, 6217, -1000,
	-1000, -1000, -1000, 420, 37, -172, 10501, 546, 420, 10277,
	-1000, -1000, -1000, 292, -1000, -1000, -1000, 333, -1000, -1000,
	-1000, 400, 658, 397, -1000, 10277, 219, 545, -1000, 747,
	-162, -176, 537, -1000, -1000, -1000, -1000, -1000, -164, -1000,
	19, 757, -1000, 746, -1000, -1000, -1000, 16, -165, 14,
	-174, 605, -177, 6441, -1000, 677, 420, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1077, 51, 537, 1075, 1074, 1073, 1071, 1070, 1069,
	1067, 1066, 1062, 1061, 1060, 1058, 1057, 1056, 1055, 1053,
	1052, 1051, 1049, 1048, 96, 1046, 1045, 1044, 58, 1043,
	61, 1041, 1040, 28, 89, 33, 42, 133, 1038, 15,
	69, 90, 1037, 41, 1036, 1035, 66, 1032, 54, 1031,
	1030, 1417, 1029, 1027, 11, 32, 1026, 1025, 1022, 1020,
	59, 264, 1019, 1016, 1010, 1008, 1007, 1005, 48, 3,
	9, 19, 12, 1004, 113, 10, 1003, 43, 1002, 1000,
	997, 994, 24, 992, 45, 991, 20, 44, 990, 6,
	53, 23, 25, 5, 65, 49, 988, 17, 50, 29,
	987, 981, 389, 980, 979, 978, 977, 976, 975, 134,
	326, 972, 970, 969, 967, 26, 0, 480, 476, 60,
	965, 964, 963, 1205, 67, 55, 13, 953, 34, 1116,
	27, 951, 946, 39, 945, 941, 940, 939, 937, 935,
	934, 265, 932, 931, 930, 30, 37, 927, 926, 46,
	22, 925, 923, 922, 36, 47, 912, 40, 910, 907,
	906, 905, 14, 16, 904, 8, 901, 7, 900, 898,
	1, 897, 18, 894, 2, 892, 4, 891, 890, 884,
	56, 385, 883, 21, 876, 872, 75,
}
var yyR1 = [...]int{

	0, 178, 179, 179, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 182,
	182, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 131, 131,
	11, 11, 11, 11, 11, 11, 11, 176, 176, 175,
	174, 174, 173, 173, 172, 16, 159, 160, 160, 160,
	155, 134, 134, 134, 134, 137, 137, 135, 135, 135,
	135, 135, 135, 135, 136, 136, 136, 136, 136, 138,
	138, 138, 138, 138, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 140, 154, 154,
	141, 141, 149, 149, 150, 150, 150, 147, 147, 148,
	148, 151, 151, 151, 142, 142, 142, 142, 142, 142,
	142, 144, 144, 152, 152, 145, 145, 145, 146, 146,
	153, 153, 153, 153, 153, 143, 143, 156, 156, 168,
	168, 167, 167, 167, 158, 158, 164, 164, 164, 164,
	164, 157, 157, 166, 166, 165, 161, 161, 161, 162,
	162, 162, 163, 163, 163, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 183, 183, 184,
	184, 184, 184, 184, 184, 184, 184, 171, 169, 169,
	170, 170, 13, 14, 14, 14, 14, 14, 15, 15,
	17, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 107, 107, 104, 104, 105, 105,
	106, 106, 106, 108, 108, 108, 132, 132, 132, 19,
	19, 21, 21, 22, 23, 20, 20, 20, 20, 20,
	185, 24, 25, 25, 26, 26, 26, 30, 30, 30,
	28, 28, 29, 29, 35, 35, 34, 34, 36, 36,
	36, 36, 120, 120, 120, 119, 119, 38, 38, 39,
	39, 40, 40, 41, 41, 41, 53, 53, 89, 89,
	91, 91, 42, 42, 42, 42, 43, 43, 44, 44,
	45, 45, 127, 127, 126, 126, 126, 125, 125, 47,
	47, 47, 49, 48, 48, 48, 48, 50, 50, 52,
	52, 51, 51, 54, 54, 54, 54, 55, 55, 37,
	37, 37, 37, 37, 37, 37, 103, 103, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	67, 67, 67, 67, 67, 67, 58, 58, 58, 58,
	58, 58, 58, 33, 33, 68, 68, 68, 74, 69,
	69, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 65, 65, 65, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	64, 64, 64, 64, 64, 64, 64, 64, 186, 186,
	66, 66, 66, 66, 31, 31, 31, 31, 31, 130,
	130, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 78, 78, 32, 32, 76, 76,
	77, 79, 79, 75, 75, 75, 60, 60, 60, 60,
	60, 60, 60, 60, 62, 62, 62, 80, 80, 81,
	81, 82, 82, 83, 83, 84, 85, 85, 85, 86,
	86, 86, 86, 87, 87, 87, 59, 59, 59, 59,
	59, 59, 88, 88, 88, 88, 92, 92, 70, 70,
	72, 72, 71, 73, 93, 93, 97, 94, 94, 98,
	98, 98, 96, 96, 96, 122, 122, 122, 101, 101,
	109, 109, 110, 110, 102, 102, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 112, 112, 112, 113,
	113, 114, 114, 114, 121, 121, 117, 117, 118, 118,
	123, 123, 124, 124, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 180, 181, 128, 129, 129,
	129,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 8, 4, 6, 5, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 1, 3, 3,
	8, 3, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 5, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 2, 2, 2, 2,
	2, 0, 3, 0, 1, 0, 3, 3, 0, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 1, 3, 2, 0, 1, 3, 1,
	2, 3, 1, 1, 1, 6, 10, 11, 7, 7,
	12, 7, 7, 7, 4, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 4, 4, 3, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 4, 3,
	3, 3, 3, 4, 3, 6, 4, 2, 4, 2,
	2, 2, 2, 3, 1, 1, 0, 1, 0, 1,
	0, 2, 2, 0, 2, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 3, 3, 7, 1, 3,
	1, 3, 4, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 1, 1, 1,
	2, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	1, 1, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	6, 8, 8, 6, 8, 8, 9, 7, 5, 4,
	2, 2, 2, 2, 2, 2, 2, 2, 0, 2,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 2, 1, 3, 5,
	4, 6, 1, 3, 3, 5, 0, 5, 1, 3,
	1, 2, 3, 1, 1, 3, 3, 1, 3, 3,
	3, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -178, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 30, -16,
	112, 113, 115, 114, 140, 116, 133, 49, 152, 153,
	155, 156, 25, 134, 135, 138, 139, -180, 8, 236,
	53, -179, 251, -82, 15, -26, 5, -24, -185, -24,
	-24, -24, -24, -24, -159, 53, -114, 121, 70, 148,
	228, 118, 119, 125, -117, 56, -116, 244, 152, 163,
	157, 185, 177, 174, 178, 215, 65, 155, 224, 136,
	172, 168, 166, 27, 190, 249, 167, 131, 130, 191,
	195, 216, 161, 162, 218, 189, 132, 32, 246, 34,
	144, 219, 193, 188, 184, 187, 160, 183, 38, 197,
	196, 198, 214, 180, 169, 18, 222, 139, 142, 192,
	194, 126, 146, 248, 220, 165, 143, 138, 223, 156,
	217, 226, 37, 202, 159, 129, 153, 150, 181, 145,
	170, 171, 186, 158, 182, 154, 147, 140, 225, 203,
	250, 179, 175, 176, 151, 149, 207, 208, 209, 210,
	247, 221, 173, 204, -102, 121, 123, 119, 119, 120,
	121, 228, 118, 119, -51, -123, 56, -116, 121, 148,
	119, 106, 178, 112, 205, 120, 32, 146, -132, 119,
	-104, 149, 207, 208, 209, 210, 56, 217, 216, 211,
	-123, 154, -128, -128, -128, -128, -128, -2, -86, 17,
	16, -5, -3, -180, 6, 20, 21, -30, 39, 40,
	-25, -36, 97, -37, -123, -56, 72, -61, 29, 56,
	-116, 23, -60, -57, -75, -73, -74, 106, 107, 95,
	96, 103, 73, 108, -65, -63, -64, -66, 58, 57,
	66, 59, 60, 61, 62, 67, 68, 69, -117, -71,
	-180, 43, 44, 237, 238, 239, 240, 243, 241, 75,
	33, 227, 235, 234, 233, 231, 232, 229, 230, 124,
	228, 101, 236, -102, -39, -40, -41, -42, -53, -74,
	-180, -51, 11, -46, -51, -94, -131, 154, -98, 217,
	216, -118, -96, -117, -115, 215, 178, 214, 117, 71,
	22, 24, 200, 74, 106, 16, 75, 105, 237, 112,
	47, 229, 230, 227, 239, 240, 228, 205, 29, 10,
	25, 134, 21, 99, 114, 78, 79, 137, 23, 135,
	69, 19, 50, 11, 13, 14, 124, 123, 90, 120,
	45, 8, 108, 26, 87, 41, 28, 43, 88, 17,
	231, 232, 31, 243, 141, 101, 48, 35, 72, 67,
	51, 70, 15, 46, 89, 115, 236, 44, 118, 6,
	242, 30, 133, 42, 119, 206, 77, 122, 68, 5,
	125, 9, 49, 52, 233, 234, 235, 33, 76, 12,
	-160, -155, 56, 120, -51, 236, -117, -110, 124, -110,
	-110, 119, -51, -51, -109, 124, 56, -109, -109, -109,
	-51, 109, -51, 56, 30, 228, 56, 146, 119, 147,
	121, -129, -180, -118, -129, -129, -129, 150, 151, -129,
	-105, 212, 51, -129, -181, 55, -87, 19, 31, -37,
	-123, -83, -84, -37, -82, -2, -24, 35, -28, 21,
	64, 11, -120, 71, 70, 87, -119, 22, -117, 58,
	109, -37, -58, 90, 72, 88, 89, 74, 92, 91,
	102, 95, 96, 97, 98, 99, 100, 101, 93, 94,
	105, 80, 81, 82, 83, 84, 85, 86, -103, -180,
	-74, -180, 110, 111, -61, -61, -61, -61, -61, -61,
	-61, -180, -2, -69, -37, -180, -180, -180, -180, -180,
	-180, -180, -180, -180, -78, -37, -180, -186, -180, -186,
	-186, -186, -186, -186, -186, -186, -180, -180, -180, -180,
	-52, 26, -51, 30, 54, -47, -49, -48, -50, 41,
	45, 47, 42, 43, 44, 48, -127, 22, -39, -180,
	-126, 142, -125, 22, -123, 58, -51, -46, -182, 54,
	11, 52, 54, -94, 154, -95, -99, 218, 220, 80,
	-122, -117, 58, 29, 30, 55, 54, -134, -137, -139,
	-138, -140, -135, -136, 174, 175, 178, 106, 179, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 30,
	136, 170, 171, 172, 173, 191, 192, 193, 194, 195,
	196, 197, 198, 157, 158, 159, 160, 161, 162, 163,
	165, 166, 167, 168, 169, 56, -129, 121, -176, 52,
	56, 72, 56, -51, -51, -129, 122, -51, 23, 51,
	-51, 56, 56, -124, -123, -115, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -107, 206, 213, -51,
	9, 90, 54, 18, 109, 54, -85, 24, 25, -86,
	-181, -30, -62, -117, 59, 62, -29, 42, -51, -37,
	-37, -67, 67, 72, 68, 69, -119, 97, -124, -118,
	-115, -61, -68, -71, -74, 63, 90, 88, 89, 74,
	-61, -61, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -130, 56, 58, 56, -60,
	-60, -117, -35, 21, -34, -36, -181, 54, -181, -2,
	-34, -34, -37, -37, -75, -117, -123, -75, -34, -28,
	-76, -77, 76, -75, -181, -34, -35, -34, -34, -90,
	142, -51, -93, -97, -75, -40, -41, -41, -40, -41,
	41, 41, 41, 46, 41, 46, 41, -48, -123, -181,
	-54, 49, 123, 50, -180, -125, -90, 52, -39, -51,
	-98, -95, 54, 219, 221, 222, 51, -37, -146, 105,
	-161, -162, -163, -118, 58, 59, -155, -156, -164, 126,
	129, 125, -157, 120, 28, -151, 67, 72, -147, 203,
	-141, 53, -141, -141, 176, -141, -141, -145, 178, -145,
	-145, -145, 53, 53, -141, -141, -141, -149, 53, -149,
	-149, -150, 53, -150, -121, 52, -51, -174, 247, -175,
	56, -129, 23, -129, -111, 117, 114, 115, -171, 113,
	200, 178, 65, 29, 15, 237, 142, 250, 56, 143,
	-51, -51, -129, -106, 11, 90, 37, -37, -37, -124,
	-84, -87, -101, 19, 11, 33, 33, -34, 67, 68,
	69, 109, -180, -68, -61, -61, -61, -33, 137, 71,
	-181, -181, -34, 54, -37, -181, -181, -181, 54, 52,
	22, 54, 11, 109, 54, 11, -181, -34, -79, -77,
	78, -37, -181, -181, -181, -181, -181, -59, 30, 33,
	-2, -180, -180, -55, 54, 12, 80, -44, -43, 51,
	52, -45, 51, -43, 41, 41, 120, 120, 120, -91,
	-117, -55, -39, -55, -99, -100, 223, 220, 226, 56,
	54, -163, 80, 53, 28, -157, -157, 56, 56, -142,
	29, 67, -148, 204, 59, -145, -145, -141, -146, 30,
	-146, -146, -146, -154, 58, -154, 59, 59, 51, -117,
	-129, -173, -172, -118, -128, -183, 125, -184, 148, 120,
	28, 127, 128, 131, 130, 56, 126, 129, 142, -177,
	148, 127, 128, 131, 130, 56, 120, 28, 126, 129,
	142, 125, -112, -113, 122, 22, 120, 28, 142, -129,
	-108, 88, 12, -123, -123, 38, 109, -51, -38, 11,
	97, -118, -35, -33, 71, -61, -61, -181, -36, -133,
	106, 174, 136, 172, 168, 189, 180, 202, 170, 203,
	-130, -133, -61, -61, -118, -61, -61, 244, -82, 79,
	-37, 77, -92, 51, -93, -70, -72, -71, -180, -2,
	-88, -117, -91, -82, -97, -37, -37, -37, 53, -37,
	-180, -180, -180, -181, 54, -82, -55, 220, 224, 225,
	-162, -163, -166, -165, -117, 56, 56, -144, 51, 58,
	59, 60, 67, 227, 66, 55, -146, -146, -145, 56,
	106, 55, 54, 55, 54, 55, 54, -51, 54, 80,
	-117, -183, -128, -117, -128, -117, -51, -128, -117, 58,
	-37, -55, -39, -181, -61, -181, -141, -141, -141, -150,
	-141, 162, -141, 162, -181, -181, -181, 54, 19, -181,
	54, 19, -180, -32, 242, -37, 27, -92, 54, -181,
	-181, -181, 54, 109, -181, -86, -89, -117, -89, -89,
	-89, -126, -117, -86, 55, 54, -141, -152, 200, 9,
	-146, -145, 58, -145, 59, 59, -129, -172, -163, 53,
	-117, 53, 26, -80, 13, -145, 56, -61, -61, -61,
	-61, -61, -181, 58, 28, -72, 33, -2, -180, -117,
	-117, 54, 55, -181, -181, -181, -54, -168, -167, 52,
	132, 65, -165, -153, 126, 28, 125, 227, -146, -146,
	55, 55, -89, 53, -89, -180, -81, 14, 16, -181,
	-181, -181, -181, -31, 90, 247, 9, -70, -2, 109,
	-117, -167, 56, -158, 80, 58, -143, 65, 28, 28,
	55, -89, 55, -169, -170, 142, -37, -69, -181, 245,
	48, 248, -93, -181, -117, 59, 58, 55, -176, -181,
	54, -117, 38, 246, 249, -174, -170, 33, 38, 144,
	247, 145, 248, -180, 249, -61, 141, -181, -181,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 521, 0, 290, 290, 290, 290, 290, 290, 0,
	591, 574, 0, 0, 0, 0, -2, 280, 281, 0,
	283, 284, 797, 797, 797, 797, 797, 0, 33, 34,
	795, 1, 3, 529, 0, 0, 294, 297, 292, 0,
	574, 0, 0, 0, 60, 0, 0, 784, 0, 785,
	572, 572, 572, 592, 593, 596, 597, 696, 697, 698,
	699, 700, 701, 702, 703, 704, 705, 706, 707, 708,
	709, 710, 711, 712, 713, 714, 715, 716, 717, 718,
	719, 720, 721, 722, 723, 724, 725, 726, 727, 728,
	729, 730, 731, 732, 733, 734, 735, 736, 737, 738,
	739, 740, 741, 742, 743, 744, 745, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 0, 0, 575, 0, 570, 0,
	570, 570, 570, 0, 239, 361, 600, 601, 784, 785,
	0, 0, 0, 0, 798, 798, 798, 798, 0, 798,
	268, 257, 259, 260, 261, 262, 798, 277, 278, 267,
	279, 282, 285, 286, 287, 288, 289, 27, 533, 0,
	0, 521, 29, 0, 290, 295, 296, 300, 298, 299,
	291, 0, 308, 312, 0, 369, 0, 374, 376, -2,
	-2, 0, 411, 412, 413, 414, 415, 0, 0, 0,
	0, 0, 0, 0, 438, 439, 440, 441, 506, 507,
	508, 509, 510, 511, 512, 513, 378, 379, 503, 553,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 494,
	0, 468, 468, 468, 468, 468, 468, 468, 468, 0,
	0, 0, 0, 0, 0, 319, 321, 322, 323, 342,
	0, 344, 0, 0, 41, 45, 0, 774, 557, -2,
	-2, 0, 0, 598, 599, -2, 703, -2, 604, 605,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, 619, 620, 621, 622, 623, 624, 625,
	626, 627, 628, 629, 630, 631, 632, 633, 634, 635,
	636, 637, 638, 639, 640, 641, 642, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 673, 674, 675,
	676, 677, 678, 679, 680, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
	0, 77, 0, 0, 798, 0, 67, 0, 0, 0,
	0, 0, 798, 0, 0, 0, 0, 0, 0, 0,
	238, 0, 240, 798, 798, 798, 798, 798, 798, 798,
	798, 249, 799, 800, 250, 251, 252, 798, 798, 254,
	0, 269, 0, 263, 28, 796, 22, 0, 0, 530,
	0, 522, 523, 526, 529, 27, 297, 0, 302, 301,
	293, 0, 309, 0, 0, 0, 313, 0, 315, 316,
	0, 372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 396, 397, 398, 399, 400, 401, 402, 375, 0,
	389, 0, 0, 0, 431, 432, 433, 434, 435, 436,
	0, 304, 27, 0, 409, 0, 0, 0, 0, 0,
	0, 0, 0, 300, 0, 495, 0, 460, 0, 461,
	462, 463, 464, 465, 466, 467, 0, 304, 0, 0,
	43, 0, 360, 0, 0, 0, 0, 0, 0, 349,
	0, 0, 352, 0, 0, 0, 0, 343, 0, 0,
	363, 747, 345, 0, 347, 348, -2, 0, 0, 0,
	39, 40, 0, 46, 774, 48, 49, 0, 0, 0,
	158, 565, 566, 567, 563, 186, 0, 141, 137, 82,
	83, 84, 130, 86, 130, 130, 0, 130, 130, 155,
	155, 155, 155, 113, 114, 115, 116, 117, 0, 0,
	99, 130, 130, 130, 103, 120, 121, 122, 123, 124,
	125, 126, 127, 87, 88, 89, 90, 91, 92, 93,
	132, 132, 132, 134, 134, 594, 62, 0, 70, 0,
	798, 0, 798, 75, 0, 204, 0, 233, 571, 0,
	798, 236, 237, 362, 602, 603, 241, 242, 243, 244,
	245, 246, 247, 248, 253, 256, 270, 264, 265, 258,
	534, 0, 0, 0, 0, 0, 525, 527, 528, 533,
	30, 300, 0, 514, 0, 0, 0, 303, 25, 370,
	371, 373, 390, 0, 392, 394, 314, 310, 0, 504,
	-2, 380, 381, 405, 406, 407, 0, 0, 0, 0,
	403, 385, 0, 416, 417, 418, 419, 420, 421, 422,
	423, 424, 425, 426, 427, 430, 479, 480, 0, 428,
	429, 437, 0, 0, 305, 306, 408, 0, 552, 27,
	0, 0, 0, 0, 0, 503, 0, 0, 0, 0,
	501, 498, 0, 0, 469, 0, 0, 0, 0, 0,
	0, 359, 367, 554, 0, 320, 338, 340, 0, 335,
	350, 351, 353, 0, 355, 0, 357, 358, 324, 325,
	326, 0, 0, 0, 0, 346, 367, 0, 367, 42,
	558, 47, 0, 0, 52, 53, 559, 560, 561, 0,
	76, 187, 189, 192, 193, 194, 78, 79, 0, 0,
	0, 0, 0, 181, 182, 144, 142, 0, 139, 138,
	85, 0, 155, 155, 130, 107, 108, 158, 0, 158,
	158, 158, 0, 0, 100, 101, 102, 94, 0, 95,
	96, 97, 0, 98, 0, 0, 798, 64, 0, 68,
	69, 65, 573, 66, 797, 0, 0, 586, 205, 576,
	577, 578, 579, 580, 581, 582, 583, 584, 585, 0,
	232, 798, 235, 273, 0, 0, 0, 531, 532, 0,
	524, 23, 0, 568, 569, 515, 516, 317, 391, 393,
	395, 0, 304, 382, 403, 386, 0, 383, 0, 0,
	377, 442, 0, 0, 410, -2, 445, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 521, 0, 499,
	0, 0, 459, 470, 471, 472, 473, 546, 0, 0,
	-2, 0, 0, 521, 0, 0, 0, 332, 339, 0,
	0, 333, 0, 334, 354, 356, 0, 0, 0, 0,
	330, 521, 367, 38, 50, 51, 0, 0, 57, 159,
	0, 190, 0, 0, 176, 0, 0, 179, 180, 151,
	0, 143, 81, 140, 0, 158, 158, 155, 109, 0,
	110, 111, 112, 0, 128, 0, 0, 0, 0, 595,
	63, 71, 72, 0, 195, 0, 0, 797, 0, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 797,
	0, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 0, 797, 587, 588, 589, 590, 0, 234,
	255, 0, 0, 271, 272, 535, 0, 24, 367, 0,
	311, 505, 0, 384, 0, 404, 387, 443, 307, 0,
	130, 130, 484, 130, 134, 487, 130, 489, 130, 492,
	0, 0, 0, 0, 504, 0, 0, 0, 496, 458,
	502, 0, 31, 0, 546, 536, 548, 550, 0, 27,
	0, 542, 0, 529, 555, 368, 556, 336, 0, 341,
	0, 0, 0, 344, 0, 529, 37, 54, 55, 56,
	188, 191, 0, 183, 130, 177, 178, 153, 0, 145,
	146, 147, 148, 149, 150, 131, 104, 105, 158, 156,
	157, 155, 0, 155, 0, 135, 0, 798, 0, 0,
	0, 0, 198, 0, 199, 201, 202, 203, 0, 274,
	275, 517, 318, 444, 388, 447, 481, 155, 485, 486,
	488, 490, 491, 493, 449, 448, 450, 0, 0, 453,
	0, 0, 0, 0, 0, 500, 0, 32, 0, 551,
	-2, 0, 0, 0, 44, 35, 0, 328, 0, 0,
	0, 363, 331, 36, 168, 0, 185, 160, 154, 0,
	106, 158, 129, 158, 0, 0, 61, 73, 74, 0,
	0, 0, 0, 519, 0, 482, 483, 0, 0, 0,
	0, 474, 457, 497, 0, 549, 0, -2, 0, 544,
	543, 0, 337, 364, 365, 366, 327, 167, 169, 0,
	174, 0, 184, 165, 0, 162, 164, 152, 118, 119,
	133, 136, 0, 0, 0, 0, 26, 0, 0, 451,
	452, 454, 455, 0, 0, 0, 0, 539, 27, 0,
	329, 170, 171, 0, 175, 173, 80, 0, 161, 163,
	196, 0, 67, 0, 228, 0, 520, 518, 456, 0,
	0, 0, 547, -2, 545, 172, 166, 197, 70, 227,
	0, 0, 475, 0, 478, 200, 229, 0, 476, 0,
	0, 0, 0, 0, 477, 0, 0, 230, 231,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 100, 92, 3,
	53, 55, 97, 95, 54, 96, 109, 98, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 251,
	81, 80, 82, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 91, 3, 103,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 74, 75,
	76, 77, 78, 79, 83, 84, 85, 86, 87, 88,
	89, 90, 93, 94, 99, 101, 104, 105, 106, 107,
	108, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:302
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:307
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:308
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:312
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:335
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:343
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:347
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:353
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:360
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:366
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:370
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:376
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:380
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:387
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:399
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:411
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:415
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:421
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:427
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:431
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:435
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:440
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:445
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:449
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:454
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:458
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:464
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:468
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:472
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:476
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:482
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:492
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:496
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:500
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:506
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:510
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:514
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:518
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:534
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:539
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:544
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:548
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 64:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:552
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:560
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:564
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:569
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:573
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:579
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:584
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:589
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:595
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:600
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:606
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:612
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:619
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:626
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:631
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:635
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:641
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:663
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:678
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:682
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:698
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:710
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:722
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:740
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:744
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:748
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:752
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:810
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:859
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:864
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:869
		{
			yyVAL.optVal = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:873
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:878
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:882
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:890
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:894
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:900
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:908
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:912
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:917
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:921
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:927
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:931
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:935
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:940
		{
			yyVAL.optVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:944
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:948
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:952
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:956
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:960
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:964
		{
			yyVAL.optVal = NewBitVal(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:969
		{
			yyVAL.optVal = nil
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:973
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:978
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:982
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:987
		{
			yyVAL.str = ""
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:995
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.str = ""
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1009
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1013
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1017
		{
			yyVAL.colKeyOpt = colKey
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1021
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1025
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1030
		{
			yyVAL.optVal = nil
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1034
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1044
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1060
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1064
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1069
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1075
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1079
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1085
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1089
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1093
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1097
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1101
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1107
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1111
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1117
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1121
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1132
		{
			yyVAL.str = ""
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1136
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1140
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1148
		{
			yyVAL.str = yyDollar[1].str
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1152
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1162
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1166
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1170
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1176
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 196:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:1180
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[7].colIdent,
					Unique: false,
				},
				IndexCols: yyDollar[9].columns,
			}
		}
	case 197:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line sql.y:1193
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[8].colIdent,
					Unique: true,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1206
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1210
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 200:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line sql.y:1214
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1227
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1237
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1242
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1247
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1251
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1284
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1290
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 230:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1300
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1304
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1310
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1316
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1324
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1329
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1341
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1347
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1351
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1356
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1362
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1379
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 246:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1383
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1387
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1391
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1395
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1399
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1403
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1407
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1411
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1415
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1419
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1429
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1433
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1453
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1463
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1469
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1473
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1479
		{
			yyVAL.str = ""
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1483
		{
			yyVAL.str = "extended "
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1489
		{
			yyVAL.str = ""
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1493
		{
			yyVAL.str = "full "
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1499
		{
			yyVAL.str = ""
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1503
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1507
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1513
		{
			yyVAL.showFilter = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1517
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1521
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1527
		{
			yyVAL.str = ""
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1531
		{
			yyVAL.str = SessionStr
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1535
		{
			yyVAL.str = GlobalStr
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1541
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1545
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1551
		{
			yyVAL.statement = &Begin{}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1555
		{
			yyVAL.statement = &Begin{}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1561
		{
			yyVAL.statement = &Commit{}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1567
		{
			yyVAL.statement = &Rollback{}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1573
		{
			yyVAL.statement = &OtherRead{}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1577
		{
			yyVAL.statement = &OtherRead{}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.statement = &OtherRead{}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1585
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1589
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1594
		{
			setAllowComments(yylex, true)
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1598
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.bytes2 = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1614
		{
			yyVAL.str = UnionStr
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1618
		{
			yyVAL.str = UnionAllStr
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1622
		{
			yyVAL.str = UnionDistinctStr
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1627
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.str = SQLCacheStr
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1640
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.str = DistinctStr
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1653
		{
			yyVAL.str = StraightJoinHint
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1658
		{
			yyVAL.selectExprs = nil
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1672
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1682
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1686
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1690
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1695
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1699
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1703
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1710
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1715
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1719
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1739
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1743
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1747
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1753
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 327:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1757
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1763
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1767
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1777
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1790
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1794
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1798
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1802
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1814
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1822
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.empty = struct{}{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.empty = struct{}{}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1830
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1834
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1838
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1845
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1851
		{
			yyVAL.str = JoinStr
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1855
		{
			yyVAL.str = JoinStr
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1859
		{
			yyVAL.str = JoinStr
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.str = StraightJoinStr
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1871
		{
			yyVAL.str = LeftJoinStr
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1875
		{
			yyVAL.str = LeftJoinStr
		}
	case 355:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.str = RightJoinStr
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1883
		{
			yyVAL.str = RightJoinStr
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.str = NaturalJoinStr
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1893
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1913
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1917
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1922
		{
			yyVAL.indexHints = nil
		}
	case 364:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1926
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 365:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1930
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 366:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1934
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1939
		{
			yyVAL.expr = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.str = ""
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1989
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1993
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 383:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2011
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 384:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2015
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2019
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2023
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 388:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2035
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2041
		{
			yyVAL.str = IsNullStr
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2045
		{
			yyVAL.str = IsNotNullStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2049
		{
			yyVAL.str = IsTrueStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2053
		{
			yyVAL.str = IsNotTrueStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2057
		{
			yyVAL.str = IsFalseStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2061
		{
			yyVAL.str = IsNotFalseStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2067
		{
			yyVAL.str = EqualStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2071
		{
			yyVAL.str = LessThanStr
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2075
		{
			yyVAL.str = GreaterThanStr
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2079
		{
			yyVAL.str = LessEqualStr
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2083
		{
			yyVAL.str = GreaterEqualStr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2087
		{
			yyVAL.str = NotEqualStr
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2091
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2096
		{
			yyVAL.expr = nil
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2100
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2106
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2110
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2114
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2120
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2126
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2130
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2144
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2148
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2152
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2160
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2164
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2168
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2172
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2176
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2180
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2184
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2188
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2192
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2196
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2200
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2204
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2208
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2220
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2224
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 434:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2232
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2246
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2250
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2254
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2272
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2276
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 444:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2280
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2290
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 446:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2294
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 447:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2298
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2302
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 449:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2306
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 450:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2310
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 451:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2314
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 452:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2318
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 453:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2326
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 455:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:2330
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 456:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 457:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2360
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2364
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2368
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2373
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2388
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 470:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2402
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2406
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2410
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 473:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2414
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 474:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2420
		{
			yyVAL.str = ""
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2424
		{
			yyVAL.str = BooleanModeStr
		}
	case 476:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2428
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 477:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:2432
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2436
		{
			yyVAL.str = QueryExpansionStr
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2442
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2446
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2452
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2456
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2460
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2464
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2468
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2472
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2478
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2482
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2486
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2490
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2494
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2498
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2502
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2507
		{
			yyVAL.expr = nil
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2511
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2516
		{
			yyVAL.str = string("")
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2520
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2526
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2530
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2536
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 501:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2541
		{
			yyVAL.expr = nil
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2545
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2551
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 504:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2555
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2559
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2565
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2569
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2573
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2577
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2581
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2585
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2589
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2593
		{
			yyVAL.expr = &NullVal{}
		}
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2599
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2608
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2612
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2617
		{
			yyVAL.exprs = nil
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2621
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 519:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2626
		{
			yyVAL.expr = nil
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2630
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2635
		{
			yyVAL.orderBy = nil
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2639
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2645
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2649
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2655
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 526:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2660
		{
			yyVAL.str = AscScr
		}
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2664
		{
			yyVAL.str = AscScr
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2668
		{
			yyVAL.str = DescScr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2673
		{
			yyVAL.limit = nil
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2677
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2681
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2685
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2690
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2694
		{
			yyVAL.str = ForUpdateStr
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2698
		{
			yyVAL.str = ShareModeStr
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2711
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2715
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2719
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 539:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2724
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2728
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2732
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2739
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2743
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2747
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 545:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2751
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2756
		{
			yyVAL.updateExprs = nil
		}
	case 547:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2760
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2766
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2770
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2776
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2780
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2786
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2792
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2802
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2806
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 556:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2812
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2818
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 558:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2822
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 559:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2828
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 560:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2832
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2836
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2843
		{
			yyVAL.bytes = []byte("charset")
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2850
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2854
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2858
		{
			yyVAL.expr = &Default{}
		}
	case 570:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2867
		{
			yyVAL.byt = 0
		}
	case 571:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2869
		{
			yyVAL.byt = 1
		}
	case 572:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2872
		{
			yyVAL.empty = struct{}{}
		}
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2874
		{
			yyVAL.empty = struct{}{}
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2877
		{
			yyVAL.str = ""
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2879
		{
			yyVAL.str = IgnoreStr
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2883
		{
			yyVAL.empty = struct{}{}
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2885
		{
			yyVAL.empty = struct{}{}
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2887
		{
			yyVAL.empty = struct{}{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2889
		{
			yyVAL.empty = struct{}{}
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2891
		{
			yyVAL.empty = struct{}{}
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2893
		{
			yyVAL.empty = struct{}{}
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2895
		{
			yyVAL.empty = struct{}{}
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2899
		{
			yyVAL.empty = struct{}{}
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2904
		{
			yyVAL.empty = struct{}{}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2906
		{
			yyVAL.empty = struct{}{}
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2908
		{
			yyVAL.empty = struct{}{}
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2912
		{
			yyVAL.empty = struct{}{}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2914
		{
			yyVAL.empty = struct{}{}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2917
		{
			yyVAL.empty = struct{}{}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2919
		{
			yyVAL.empty = struct{}{}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2921
		{
			yyVAL.empty = struct{}{}
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2924
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2926
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2930
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2934
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2941
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2947
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2951
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2958
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3175
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 796:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3184
		{
			decNesting(yylex)
		}
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3189
		{
			forceEOF(yylex)
		}
	case 798:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:3194
		{
			forceEOF(yylex)
		}
	case 799:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3198
		{
			forceEOF(yylex)
		}
	case 800:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:3202
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
